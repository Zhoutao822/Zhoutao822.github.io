<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tao</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhoutao822.coding.me/"/>
  <updated>2020-01-22T10:30:19.275Z</updated>
  <id>http://zhoutao822.coding.me/</id>
  
  <author>
    <name>Tao Zhou</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker-Ubuntu服务器安装Seafile私人网盘</title>
    <link href="http://zhoutao822.coding.me/archives/2.9125e+72.html"/>
    <id>http://zhoutao822.coding.me/archives/2.9125e+72.html</id>
    <published>2020-01-14T11:51:17.000Z</published>
    <updated>2020-01-22T10:30:19.275Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><blockquote><p><a href="https://cloud.seafile.com/published/seafile-manual-cn/docker/%E7%94%A8Docker%E9%83%A8%E7%BD%B2Seafile.md" target="_blank" rel="noopener">用 Docker 部署 Seafile 服务</a></p></blockquote><p>Seafile 是一款开源的企业云盘，注重可靠性和性能。支持 Windows, Mac, Linux, iOS, Android 平台。支持文件同步或者直接挂载到本地访问。</p><a id="more"></a><h2 id="1-ubuntu服务器安装docker"><a class="markdownIt-Anchor" href="#1-ubuntu服务器安装docker"></a> 1. Ubuntu服务器安装docker</h2><p>参考<a href="https://mr7ldu.coding-pages.com/archives/44250e0e.html" target="_blank" rel="noopener">Docker-Ubuntu服务器安装Chevereto图床</a></p><h2 id="2-配置docker-compose"><a class="markdownIt-Anchor" href="#2-配置docker-compose"></a> 2. 配置docker-compose</h2><p>首先在根目录下创建一个隐藏文件夹<code>.seafile</code>存放我们的配置文件以及挂载的数据卷，进入<code>.seafile</code>目录，并新建一个<code>docker-compose.yml</code>文件，<code>docker-compose.yml</code>内容如下，需要自行配置管理员账号和密码（<strong>尽量不要修改80:80端口映射，我修改为其他端口号会导致拒绝访问</strong>），<code>seafile-mysql、seafile-data</code>启动后会自动生成：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2.0'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mariadb:10.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">seafile-mysql</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=root</span>  <span class="comment"># Requested, set the root's password of MySQL service.</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_LOG_CONSOLE=true</span></span><br><span class="line">    <span class="comment"># 挂载容器mysql数据到本地文件夹seafile-mysql</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./seafile-mysql:/var/lib/mysql</span>  <span class="comment"># Requested, specifies the path to MySQL data persistent store.</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">seafile-net</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">memcached:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">memcached:1.5.6</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">seafile-memcached</span></span><br><span class="line">    <span class="attr">entrypoint:</span> <span class="string">memcached</span> <span class="string">-m</span> <span class="number">256</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">seafile-net</span></span><br><span class="line">          </span><br><span class="line">  <span class="attr">seafile:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">seafileltd/seafile-mc</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">seafile</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"80:80"</span></span><br><span class="line">      <span class="comment"># - "443:443"  # If https is enabled, cancel the comment.</span></span><br><span class="line">    <span class="comment"># 挂载云盘数据到本地文件夹seafile-data</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./seafile-data:/shared</span>   <span class="comment"># Requested, specifies the path to Seafile data persistent store.</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_HOST=db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_ROOT_PASSWD=root</span>  <span class="comment"># Requested, the value shuold be root's password of MySQL service.</span></span><br><span class="line">        <span class="comment">#- TIME_ZONE=Asia/Shanghai # Optional, default is UTC. Should be uncomment and set to your local time zone.</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SEAFILE_ADMIN_EMAIL=aaa@aaa.com</span> <span class="comment"># Specifies Seafile admin user, default is 'me@example.com'.</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SEAFILE_ADMIN_PASSWORD=password</span>     <span class="comment"># Specifies Seafile admin password, default is 'asecret'.</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SEAFILE_SERVER_LETSENCRYPT=false</span>   <span class="comment"># Whether use letsencrypt to generate cert.</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SEAFILE_SERVER_HOSTNAME=175.24.47.141</span> <span class="comment"># Specifies your host name.</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">memcached</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">seafile-net</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">seafile-net:</span></span><br></pre></td></tr></table></figure><p>不用修改权限，最后启动<code>docker-compose up -d</code>，然后就可以通过IP+端口号（如果配置了域名也可以用域名）访问seafile云盘了（<strong>应该只能通过http访问，https是不可以的，除非配置过</strong>）。首次登录如下：</p><!--  --><p><img src="http://114.116.9.65:7777/images/2020/01/18/seafile1.png" alt="seafile1.png" /><br />测试上传文件</p><!--  --><p><img src="http://114.116.9.65:7777/images/2020/01/18/seafile2.png" alt="seafile2.png" /></p><h2 id="3-数据迁移"><a class="markdownIt-Anchor" href="#3-数据迁移"></a> 3. 数据迁移</h2><p>同理，上面我们的<code>seafile-mysql</code>文件夹保存的是我们的账号信息等等，<code>seafile-data</code>保存了我们上传的文件数据、日志信息，如果我们需要从当前服务器迁移到另一个服务器只需要保存好<code>.seafile</code>中的所有内容，然后全部放到另一个服务器的<code>.seafile</code>目录中，不用设置权限，然后安装<code>docker</code>和<code>docker-compose</code>，然后执行<code>docker-compose up -d</code>就可以直接运行，我们的数据也会一起同步过来。</p><h2 id="4-启动seafile容器出错"><a class="markdownIt-Anchor" href="#4-启动seafile容器出错"></a> 4. 启动seafile容器出错</h2><p>如果启动seafile容器后无法访问，需要重新配置时，<strong>务必先执行<code>docker-compose kill</code>和<code>docker-compose rm</code>停止并删除容器，再删除掉<code>seafile-mysql</code>和<code>seafile-data</code>两个文件夹</strong>，之后再重新启动<code>docker-compose up -d</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.seafile.com/published/seafile-manual-cn/docker/%E7%94%A8Docker%E9%83%A8%E7%BD%B2Seafile.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;用 Docker 部署 Seafile 服务&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Seafile 是一款开源的企业云盘，注重可靠性和性能。支持 Windows, Mac, Linux, iOS, Android 平台。支持文件同步或者直接挂载到本地访问。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tips" scheme="http://zhoutao822.coding.me/categories/Tips/"/>
    
    
      <category term="Ubuntu" scheme="http://zhoutao822.coding.me/tags/Ubuntu/"/>
    
      <category term="Seafile" scheme="http://zhoutao822.coding.me/tags/Seafile/"/>
    
      <category term="Docker" scheme="http://zhoutao822.coding.me/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker-Ubuntu服务器安装Chevereto图床</title>
    <link href="http://zhoutao822.coding.me/archives/44250e0e.html"/>
    <id>http://zhoutao822.coding.me/archives/44250e0e.html</id>
    <published>2020-01-14T11:47:47.000Z</published>
    <updated>2020-01-21T12:26:55.308Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><blockquote><p><a href="https://hub.docker.com/r/nmtan/chevereto/" target="_blank" rel="noopener">Chevereto Free Docker</a><br /><a href="https://zealot.top/%E4%BD%BF%E7%94%A8Docker%E8%BD%BB%E6%9D%BE%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8Achevereto.html" target="_blank" rel="noopener">使用Docker轻松搭建个人图床chevereto</a></p></blockquote><!--  --><p><img src="http://114.116.9.65:7777/images/2020/01/18/chevereto4.png" alt="chevereto4.png" /></p><a id="more"></a><h2 id="1-ubuntu服务器安装docker"><a class="markdownIt-Anchor" href="#1-ubuntu服务器安装docker"></a> 1. Ubuntu服务器安装docker</h2><p><strong>强烈建议在ubuntu上使用apt安装docker，brew安装docker会出现很多问题</strong></p><p>需要安装两个关键包<code>docker</code>和<code>docker-compose</code>，前者是docker容器，后者是一个可以根据<code>docker-compose.yml</code>配置文件快速部署docker应用的软件，后续会使用到。</p><p>使用<code>sudo apt install docker.io</code>以及<code>sudo apt install docker-compose</code>安装（如果你想尝试使用brew也可以按照以下方式使用）。</p><p>首先查看一下docker相关包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-9-ubuntu ~ brew search docker</span><br><span class="line">==&gt; Formulae</span><br><span class="line">docker                             docker-ls                          docker-machine-parallels</span><br><span class="line">docker-clean                       docker-machine                     docker-slim</span><br><span class="line">docker-completion                  docker-machine-completion          docker-squash</span><br><span class="line">docker-compose                     docker-machine-driver-hyperkit     docker-swarm</span><br><span class="line">docker-compose-completion          docker-machine-driver-vmware       docker2aci</span><br><span class="line">docker-credential-helper           docker-machine-driver-vultr        dockerize</span><br><span class="line">docker-credential-helper-ecr       docker-machine-driver-xhyve        lazydocker</span><br><span class="line">docker-gen                         docker-machine-nfs</span><br><span class="line"></span><br><span class="line">==&gt; Casks</span><br><span class="line">homebrew/cask-versions/docker-edge                   homebrew/cask/docker-toolbox</span><br><span class="line">homebrew/cask/docker</span><br></pre></td></tr></table></figure><p>执行<code>brew install docker</code>以及<code>brew install docker-compose</code></p><p>安装完成查看版本信息并<strong>开启docker服务<code>sudo systemctl stop docker</code></strong>，然后可以执行<code>docker run hello-world</code>测试docker是否可以正常运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-9-ubuntu ~ docker-compose -v</span><br><span class="line">docker-compose version 1.25.1, build unknown</span><br><span class="line">ubuntu@VM-0-9-ubuntu ~ docker -v        </span><br><span class="line">Docker version 19.03.5, build 633a0ea</span><br><span class="line">ubuntu@VM-0-9-ubuntu ~ sudo systemctl stop docker</span><br><span class="line"></span><br><span class="line">ubuntu@VM-0-9-ubuntu ~ docker run hello-world</span><br><span class="line">Unable to find image 'hello-world:latest' locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">1b930d010525: Pull complete </span><br><span class="line">Digest: sha256:d1668a9a1f5b42ed3f46b70b9cb7c88fd8bdc8a2d73509bb0041cf436018fbf5</span><br><span class="line">Status: Downloaded newer image for hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br></pre></td></tr></table></figure><h2 id="2-配置docker-compose"><a class="markdownIt-Anchor" href="#2-配置docker-compose"></a> 2. 配置docker-compose</h2><p>Chevereto支持通过docker部署，这样方便进行管理而且不会影响服务器环境，数据保存和导入也更加方便。使用<code>docker-compose</code>可以快速部署，并且配置一些数据卷挂载以及依赖容器等等。</p><p>首先在根目录下创建一个隐藏文件夹<code>.chevereto</code>存放我们的配置文件以及挂载的数据卷，进入<code>.chevereto</code>目录，并新建一个<code>docker-compose.yml</code>文件，以及三个文件夹<code>chevereto_images、conf、database</code>，<code>docker-compose.yml</code>内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mariadb</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">chevereto-mysql</span></span><br><span class="line">    <span class="comment"># 挂载容器中的mysql数据卷到本地database文件夹</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./database:/var/lib/mysql:rw</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">chevereto-net</span></span><br><span class="line">    <span class="comment"># 设置容器中的mysql的root用户密码以及其他用户</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">chevereto</span></span><br><span class="line">      <span class="attr">MYSQL_USER:</span> <span class="string">chevereto</span></span><br><span class="line">      <span class="attr">MYSQL_PASSWORD:</span> <span class="string">chevereto</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">chevereto:</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nmtan/chevereto</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">chevereto</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">chevereto-net</span></span><br><span class="line">    <span class="comment"># 设置CHEVERETO_DB的一些参数</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">CHEVERETO_DB_HOST:</span> <span class="string">db</span></span><br><span class="line">      <span class="attr">CHEVERETO_DB_USERNAME:</span> <span class="string">chevereto</span></span><br><span class="line">      <span class="attr">CHEVERETO_DB_PASSWORD:</span> <span class="string">chevereto</span></span><br><span class="line">      <span class="attr">CHEVERETO_DB_NAME:</span> <span class="string">chevereto</span></span><br><span class="line">      <span class="attr">CHEVERETO_DB_PREFIX:</span> <span class="string">chv_</span></span><br><span class="line">    <span class="comment"># 挂载容器中的images文件夹到本地的chevereto_images文件夹，以及</span></span><br><span class="line">    <span class="comment"># 将本地的conf/upload.ini配置文件挂载到容器的/usr/local/etc/php/conf.d/中</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./chevereto_images:/var/www/html/images:rw</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf/upload.ini:/usr/local/etc/php/conf.d/upload.ini:ro</span></span><br><span class="line">    <span class="comment"># 端口映射，本机:容器，需要配置安全组</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">7777</span><span class="string">:80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">chevereto-net:</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">database:</span></span><br><span class="line">  <span class="attr">chevereto_images:</span></span><br></pre></td></tr></table></figure><p>我们创建的三个文件夹分别挂载了不同的容器文件夹，<code>chevereto_images</code>和<code>database</code>用于数据迁移，<code>/conf/upload.ini</code>用于配置上传文件限制。</p><p>在<code>conf</code>目录中创建<code>upload.ini</code>，这个可以取消2MB文件上传限制，内容如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PHP:</span><br><span class="line"><span class="attr">max_execution_time</span> = <span class="number">60</span><span class="comment">;</span></span><br><span class="line"><span class="attr">memory_limit</span> = <span class="number">256</span>M<span class="comment">;</span></span><br><span class="line"><span class="attr">upload_max_filesize</span> = <span class="number">256</span>M<span class="comment">;</span></span><br><span class="line"><span class="attr">post_max_size</span> =  <span class="number">256</span>M<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>然后修改权限<code>sudo chown -R www-data:www-data database chevereto_images conf</code>，最后启动<code>docker-compose up -d</code>，然后就可以通过IP+端口号访问chevereto图床了（<strong>应该只能通过http访问，https是不可以的</strong>）。首次登录如下：</p><!--  --><p><img src="http://114.116.9.65:7777/images/2020/01/18/chevereto1.png" alt="chevereto1.png" /></p><p>修改语言为中文</p><!--  --><p><img src="http://114.116.9.65:7777/images/2020/01/18/chevereto2.png" alt="chevereto2.png" /></p><p>可以看到文件上传大小被修改为上面的<code>uploda.ini</code>的内容了</p><!--  --><p><img src="http://114.116.9.65:7777/images/2020/01/18/chevereto3.png" alt="chevereto3.png" /></p><h2 id="3-数据迁移"><a class="markdownIt-Anchor" href="#3-数据迁移"></a> 3. 数据迁移</h2><p>上面我们的<code>database</code>文件夹保存的是我们的账号信息、配置信息等等，<code>chevereto_images</code>保存了我们上传的图片数据，如果我们需要从当前服务器迁移到另一个服务器只需要保存好<code>.chevereto</code>中的所有内容，然后全部放到另一个服务器的<code>.chevereto</code>目录中，同样设置权限，然后安装<code>docker</code>和<code>docker-compose</code>，然后执行<code>docker-compose up -d</code>就可以直接运行，我们的数据也会一起同步过来。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/r/nmtan/chevereto/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Chevereto Free Docker&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://zealot.top/%E4%BD%BF%E7%94%A8Docker%E8%BD%BB%E6%9D%BE%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8Achevereto.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;使用Docker轻松搭建个人图床chevereto&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--  --&gt;
&lt;p&gt;&lt;img src=&quot;http://114.116.9.65:7777/images/2020/01/18/chevereto4.png&quot; alt=&quot;chevereto4.png&quot; /&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tips" scheme="http://zhoutao822.coding.me/categories/Tips/"/>
    
    
      <category term="Ubuntu" scheme="http://zhoutao822.coding.me/tags/Ubuntu/"/>
    
      <category term="Docker" scheme="http://zhoutao822.coding.me/tags/Docker/"/>
    
      <category term="Chevereto" scheme="http://zhoutao822.coding.me/tags/Chevereto/"/>
    
  </entry>
  
  <entry>
    <title>Homebrew+MySQL+DataGrip</title>
    <link href="http://zhoutao822.coding.me/archives/46c7a56d.html"/>
    <id>http://zhoutao822.coding.me/archives/46c7a56d.html</id>
    <published>2020-01-11T13:31:50.000Z</published>
    <updated>2020-01-18T14:57:45.054Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><blockquote><p><a href="https://www.jetbrains.com/datagrip/" target="_blank" rel="noopener">DataGrip</a></p></blockquote><p>MySQL 是最流行的关系型数据库管理系统。</p><a id="more"></a><h2 id="1-brew安装mysql"><a class="markdownIt-Anchor" href="#1-brew安装mysql"></a> 1. brew安装MySQL</h2><p>brew安装软件之前可以先执行<code>brew search XXX</code>查看brew仓库是否存在此软件，在安装MySQL之前我们先搜索一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-9-ubuntu ~ brew search mysql</span><br><span class="line">==&gt; Formulae</span><br><span class="line">automysqlbackup               mysql-client@5.7              mysql-search-replace</span><br><span class="line">mysql                         mysql-connector-c++           mysql@5.6</span><br><span class="line">mysql++                       mysql-connector-c++@1.1       mysql@5.7</span><br><span class="line">mysql-client                  mysql-sandbox                 mysqltuner</span><br></pre></td></tr></table></figure><p>可以发现是没问题的，所以执行<code>brew install mysql</code>（如果brew安装很慢，则使用<code>sudo apt install mysql-server</code>安装），这里不指定版本号即默认安装最新版。在此过程中会自动安装MySQL的依赖库，默认情况下这些依赖库是只能被brew安装的软件使用的，如果你需要从其他位置使用brew提供的依赖库需要手动export这些库的路径到<code>.zshrc</code>中（不export也是可以的），安装完成后显示以下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">==&gt; mysql</span><br><span class="line">We've installed your MySQL database without a root password. To secure it run:</span><br><span class="line">    mysql_secure_installation</span><br><span class="line"></span><br><span class="line">MySQL is configured to only allow connections from localhost by default</span><br><span class="line"></span><br><span class="line">To connect run:</span><br><span class="line">    mysql -uroot</span><br><span class="line"></span><br><span class="line">Warning: mysql provides a launchd plist which can only be used on macOS!</span><br><span class="line">You can manually execute the service instead with:</span><br><span class="line">  mysql.server start</span><br></pre></td></tr></table></figure><p>在Ubuntu上只能通过<code>mysql.server start</code>启动，如果在macOS上可以通过<code>brew services start mysql</code>启动，<strong>在使用MySQL之前先启动MySQL服务</strong>，再按照上面的提示完成一些设置<code>mysql_secure_installation</code>，具体会涉及到几个选项，需要设置MySQL root用户的密码，以及允许从远端连接MySQL（仅供测试Ubuntu服务器，本机macOS可以禁止）等等。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-9-ubuntu ~ mysql.server start</span><br><span class="line">Starting MySQL</span><br><span class="line">.. * </span><br><span class="line"> ubuntu@VM-0-9-ubuntu ~ mysql_secure_installation</span><br><span class="line"></span><br><span class="line">Securing the MySQL server deployment.</span><br><span class="line"></span><br><span class="line">Connecting to MySQL using a blank password.</span><br><span class="line"></span><br><span class="line">VALIDATE PASSWORD COMPONENT can be used to test passwords</span><br><span class="line">and improve security. It checks the strength of password</span><br><span class="line">and allows the users to set only those passwords which are</span><br><span class="line">secure enough. Would you like to setup VALIDATE PASSWORD component?</span><br><span class="line"></span><br><span class="line">Press y|Y for Yes, any other key for No: n</span><br><span class="line">Please set the password for root here.</span><br><span class="line"></span><br><span class="line">New password: </span><br><span class="line"></span><br><span class="line">Re-enter new password: </span><br><span class="line">By default, a MySQL installation has an anonymous user,</span><br><span class="line">allowing anyone to log into MySQL without having to have</span><br><span class="line">a user account created for them. This is intended only for</span><br><span class="line">testing, and to make the installation go a bit smoother.</span><br><span class="line">You should remove them before moving into a production</span><br><span class="line">environment.</span><br><span class="line"></span><br><span class="line">Remove anonymous users? (Press y|Y for Yes, any other key for No) : y</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Normally, root should only be allowed to connect from</span><br><span class="line">'localhost'. This ensures that someone cannot guess at</span><br><span class="line">the root password from the network.</span><br><span class="line"></span><br><span class="line">Disallow root login remotely? (Press y|Y for Yes, any other key for No) : n</span><br><span class="line"></span><br><span class="line"> ... skipping.</span><br><span class="line">By default, MySQL comes with a database named 'test' that</span><br><span class="line">anyone can access. This is also intended only for testing,</span><br><span class="line">and should be removed before moving into a production</span><br><span class="line">environment.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Remove test database and access to it? (Press y|Y for Yes, any other key for No) : y</span><br><span class="line"> - Dropping test database...</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line"> - Removing privileges on test database...</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line">Reloading the privilege tables will ensure that all changes</span><br><span class="line">made so far will take effect immediately.</span><br><span class="line"></span><br><span class="line">Reload privilege tables now? (Press y|Y for Yes, any other key for No) : y</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line">All done!</span><br></pre></td></tr></table></figure><p>使用<code>mysql -uroot -pXXXX</code>进入MySQL，<code>XXXX</code>为上面你设置的root用户密码，然后执行<code>show databases;</code>，就可以查看当前存在的数据库了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-9-ubuntu ~ mysql -uroot -pXXXX</span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 8</span><br><span class="line">Server version: 8.0.18 Homebrew</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show databases;</span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><h2 id="2-服务器安全组配置"><a class="markdownIt-Anchor" href="#2-服务器安全组配置"></a> 2. 服务器安全组配置</h2><p>如果需要远程连接服务器的MySQL数据库，那么需要将服务器的安全组配置一下，允许MySQL服务的端口被访问，MySQL默认端口号是3306</p><p>安全组分为两类：出站就是你访问外网；入站就是外网访问你。</p><p>如果我们需要访问服务器的3306端口，则入站规则配置如下：</p><table><thead><tr><th>来源</th><th>端口协议</th><th>策略</th></tr></thead><tbody><tr><td>0.0.0.0/0</td><td>TCP:3306</td><td>允许</td></tr></tbody></table><p>来源为<code>0.0.0.0/0</code>，表示允许所有IP访问服务器，也可以设置为指定的某些IP；端口协议指定允许被访问的端口，MySQL是<code>TCP:3306</code>，SSH是<code>TCP:22</code>， HTTP或HTTPS是<code>TCP:80</code>以及<code>TCP:443</code>等等。</p><h2 id="3-mysql创建新用户"><a class="markdownIt-Anchor" href="#3-mysql创建新用户"></a> 3. MySQL创建新用户</h2><p>默认的root用户权限非常大，需要谨慎使用，所以可以创建一个新的权限没有那么大的用户。需要先启动MySQL服务<code>mysql.server start</code>，然后命令行执行<code>mysql -uroot -pXXXX</code>进入MySQL，这里使用的是root用户，通过在root用户下创建新用户，<code>mysqlname</code>即我们指定的新用户名，<code>password</code>为该用户的密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> CREATE USER <span class="string">'mysqlname'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'password'</span>;</span></span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br></pre></td></tr></table></figure><p><strong>然后需要进行授权，否则新用户无法进行其他操作</strong>，<code>GRANT privileges ON databasename.tablename TO 'username'@'host'</code>，<code>privileges</code>代表一些比如<code>SELECT, INSERT</code>权限，你也可以设置为<code>ALL</code>，<code>databasename.tablename</code>为允许用户操作的数据库和表，谨慎使用<code>ALL</code>和通配符<code>*.*</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> GRANT ALL ON *.* TO <span class="string">'mysqlname'</span>@<span class="string">'%'</span>;</span></span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> flush privileges;</span></span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br></pre></td></tr></table></figure><p>然后使用新用户登录MySQL执行<code>mysql -umysqlname -ppassword</code>，可以查看新用户可以操作的数据库，和root相同，实际并不推荐</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-9-ubuntu ~ mysql -umysqlname -ppassword</span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 11</span><br><span class="line">Server version: 8.0.18 Homebrew</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show databases;</span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure><p>然后尝试创建新的数据库，并添加一些表以及字段等等</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建数据库<span class="built_in">test</span></span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> create database <span class="built_in">test</span>;</span></span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用<span class="built_in">test</span>数据库</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> use <span class="built_in">test</span>;</span></span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建user表，添加id、name字段</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> create table user (</span></span><br><span class="line">    -&gt; id int primary key auto_increment,</span><br><span class="line">    -&gt; name varchar(32)</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br></pre></td></tr></table></figure><p>添加数据并查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> insert into user (name) values (<span class="string">'Sam'</span>);</span></span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select * from user;</span></span><br><span class="line">+----+------+</span><br><span class="line">| id | name |</span><br><span class="line">+----+------+</span><br><span class="line">|  1 | Sam  |</span><br><span class="line">+----+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="4-使用数据库软件连接服务器mysql"><a class="markdownIt-Anchor" href="#4-使用数据库软件连接服务器mysql"></a> 4. 使用数据库软件连接服务器MySQL</h2><p>命令行操作数据库有点不方便，可以使用一些数据库软件连接数据库并进行操作，因为之前已经设置了安全组，所以可以访问服务器上的数据库（如果数据库在本机，原理基本相同，基本上只需要修改host为localhost或者127.0.0.1）。</p><p>比较好用的数据库软件是DataGrip，功能很强大，支持的数据库类型也比较多，当然其他开源数据库软件也都很好用，比如Windows上的HeidiSQL。</p><h3 id="40-修改ubuntu上mysql配置"><a class="markdownIt-Anchor" href="#40-修改ubuntu上mysql配置"></a> 4.0 修改Ubuntu上MySQL配置</h3><p>在启动MySQL服务后执行<code>netstat -an | grep 3306</code>，可以发现结果是</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tcp        0      0 127.0.0.1:33060         0.0.0.0:*               LISTEN</span><br><span class="line">tcp        0      0 127.0.0.1:3306          0.0.0.0:*               LISTEN</span><br></pre></td></tr></table></figure><p>只要这里是<code>127.0.0.1</code>的话，我们是没法使用软件远程连接服务器上的MySQL，首先需要修改MySQL的配置文件，又因为我们的MySQL是通过brew安装的，因此配置文件位置可能与网上的解决方案不相同，但是可以通过执行<code>mysqld --help --verbose | less</code>，查看配置文件位置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Default options are read from the following files in the given order:</span><br><span class="line">/etc/my.cnf /etc/mysql/my.cnf /home/linuxbrew/.linuxbrew/etc/my.cnf ~/.my.cnf</span><br></pre></td></tr></table></figure><p>这是按照<code>my.cnf</code>的顺序优先级启动MySQ，如果<code>/etc/my.cnf</code>存在就按照这个配置文件启动，否则依次后延，显然在Ubuntu服务器上是找不到前面两个<code>cnf</code>文件的，因此我们修改<code>/home/linuxbrew/.linuxbrew/etc/my.cnf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Default Homebrew MySQL server config</span><br><span class="line">[mysqld]</span><br><span class="line"># Only allow connections from localhost</span><br><span class="line">bind-address &#x3D; 127.0.0.1</span><br><span class="line">mysqlx-bind-address &#x3D; 127.0.0.1</span><br></pre></td></tr></table></figure><p>把<code>bind-address = 127.0.0.1</code>这一行注释掉，用<code>#</code>，然后重启MySQL，执行<code>mysql.server restart</code>，才可以进行后续操作。</p><h3 id="41-datagrip连接"><a class="markdownIt-Anchor" href="#41-datagrip连接"></a> 4.1 DataGrip连接</h3><p>首先创建Data Source，选择MySQL</p><!--  --><p><img src="http://114.116.9.65:7777/images/2020/01/18/data1.png" alt="data1.png" /></p><p>然后设置服务器IP，我们创建的数据库User以及密码，即上文创建的mysqlname用户，Database可以不写</p><!--  --><p><img src="http://114.116.9.65:7777/images/2020/01/18/data2.png" alt="data2.png" /></p><p>先测试连接，如果现实以下内容，则说明可以连接成功，否则需要检查配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DBMS: MySQL (ver. 8.0.18) Case sensitivity: plain&#x3D;exact, delimited&#x3D;exact Driver: MySQL Connector&#x2F;J (ver. mysql-connector-java-8.0.15 (Revision: 79a4336f140499bd22dd07f02b708e163844e3d5), JDBC4.2) Ping: 115 ms SSL: yes</span><br></pre></td></tr></table></figure><p>连接成功后可以执行SQL语句查看上面创建数据库、数据表以及其他数据</p><!--  --><p><img src="http://114.116.9.65:7777/images/2020/01/18/data3.png" alt="data3.png" /></p><h3 id="42-heidisql连接"><a class="markdownIt-Anchor" href="#42-heidisql连接"></a> 4.2 HeidiSQL连接</h3><p>当然也可以选择不修改<code>cnf</code>文件，采用SSH隧道的方式连接，以Windows为例，HeidiSQL连接Ubuntu服务器上的MySQL，配置如下：</p><table><thead><tr><th>网络类型</th><th>主机名/IP</th><th>用户名/密码</th><th>端口</th></tr></thead><tbody><tr><td>MariaDB or MySQL(SSH tunnel)</td><td>127.0.0.1</td><td>服务器上创建的新用户/密码</td><td>服务器MySQL服务端口号</td></tr></tbody></table><!--  --><p><img src="http://114.116.9.65:7777/images/2020/01/18/hei1.png" alt="hei1.png" /></p><p>SSH隧道配置如下：</p><table><thead><tr><th>plink.exe位置</th><th>SSH主机+端口</th><th>用户名/密码</th></tr></thead><tbody><tr><td>自行下载路径</td><td>服务器公网IP+22</td><td>服务器用户/密码</td></tr></tbody></table><!--  --><p><img src="http://114.116.9.65:7777/images/2020/01/18/hei2.png" alt="hei2.png" /></p><p>连接成功后的结果如下，可以看到我们之前添加的数据库以及表数据</p><!--  --><p><img src="http://114.116.9.65:7777/images/2020/01/18/hei3.png" alt="hei3.png" /></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jetbrains.com/datagrip/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;DataGrip&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;MySQL 是最流行的关系型数据库管理系统。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tips" scheme="http://zhoutao822.coding.me/categories/Tips/"/>
    
    
      <category term="Mac" scheme="http://zhoutao822.coding.me/tags/Mac/"/>
    
      <category term="Ubuntu" scheme="http://zhoutao822.coding.me/tags/Ubuntu/"/>
    
      <category term="Linuxbrew" scheme="http://zhoutao822.coding.me/tags/Linuxbrew/"/>
    
      <category term="Homebrew" scheme="http://zhoutao822.coding.me/tags/Homebrew/"/>
    
      <category term="MySQL" scheme="http://zhoutao822.coding.me/tags/MySQL/"/>
    
      <category term="DataGrip" scheme="http://zhoutao822.coding.me/tags/DataGrip/"/>
    
      <category term="HeidiSQL" scheme="http://zhoutao822.coding.me/tags/HeidiSQL/"/>
    
  </entry>
  
  <entry>
    <title>Android-共享元素动画效果</title>
    <link href="http://zhoutao822.coding.me/archives/2943f9f3.html"/>
    <id>http://zhoutao822.coding.me/archives/2943f9f3.html</id>
    <published>2020-01-11T13:30:27.000Z</published>
    <updated>2020-01-18T14:59:49.185Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><blockquote><p><a href="https://developer.android.com/training/transitions/start-activity" target="_blank" rel="noopener">Android Developers文档指南</a><br /><a href="https://github.com/android/animation-samples" target="_blank" rel="noopener">Github animation-samples</a><br /><a href="https://mikescamell.com/shared-element-transitions-part-1/" target="_blank" rel="noopener">Shared Element Transitions - Part 1: Activities</a><br /><a href="https://mikescamell.com/shared-element-transitions-part-2/" target="_blank" rel="noopener">Shared Element Transitions - Part 2: Fragments</a><br /><a href="https://mikescamell.com/shared-element-transitions-part-3/" target="_blank" rel="noopener">Shared Element Transitions - Part 3: Picasso &amp; Glide</a><br /><a href="https://github.com/codepath/android_guides/wiki/Shared-Element-Activity-Transition" target="_blank" rel="noopener">android_guides</a><br /><a href="https://medium.com/@bherbst/fragment-transitions-with-shared-elements-7c7d71d31cbb" target="_blank" rel="noopener">Fragment transitions with shared elements</a></p></blockquote><p>共享元素可以在Activity之间或者Fragment之间实现非常舒适的动画效果，如下图所示，特别是在跳转的界面之间拥有相同的界面元素，比如同一张图片但是大小不同，同一个View但是位置不同。需要注意的是最低api需要为21，即Android LOLLIPOP。</p><!--  --><p><img src="http://114.116.9.65:7777/images/2020/01/18/cat.gif" alt="cat.gif" /></p><a id="more"></a><h2 id="1-fragment之间共享元素"><a class="markdownIt-Anchor" href="#1-fragment之间共享元素"></a> 1. Fragment之间共享元素</h2><p>首先实现在Fragment之间的共享元素动画，因为Fragment可能比Activity更加常用，这两者实现的代码略有区别，而且在我的测试过程中还发现了部分奇怪的问题。</p><h3 id="11-简单使用"><a class="markdownIt-Anchor" href="#11-简单使用"></a> 1.1 简单使用</h3><p>首先创建两个Fragment，定义各自布局，关键是两个布局中需要共享的元素需要指定一个属性<code>android:transitionName</code>，可以是任何自定义的字符串，其中Fragment1中的共享元素的<code>transitionName</code>可以与Fragment2中的共享元素不同，但是必须要设置（通过xml或者<code>setTransitionName</code>方法），否则会报错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fragment1.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fragment1</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ARG_PARAM1 = <span class="string">"param1"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ARG_PARAM2 = <span class="string">"param2"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = Fragment1<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView textView;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Fragment默认生成的实例化方法，参数这里没有用到，无所谓</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Fragment1 <span class="title">newInstance</span><span class="params">(String param1, String param2)</span> </span>&#123;</span><br><span class="line">        Fragment1 fragment = <span class="keyword">new</span> Fragment1();</span><br><span class="line">        Bundle args = <span class="keyword">new</span> Bundle();</span><br><span class="line">        args.putString(ARG_PARAM1, param1);</span><br><span class="line">        args.putString(ARG_PARAM2, param2);</span><br><span class="line">        fragment.setArguments(args);</span><br><span class="line">        <span class="keyword">return</span> fragment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewCreated</span><span class="params">(@NonNull View view, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onViewCreated(view, savedInstanceState);</span><br><span class="line">        <span class="comment">// 我们仅在Fragment中显示一个TextView</span></span><br><span class="line">        textView = view.findViewById(R.id.textView1);</span><br><span class="line">        textView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 点击跳转到Fragment2，同理参数不重要</span></span><br><span class="line">                Fragment2 destination = Fragment2.newInstance(<span class="string">"1"</span>, <span class="string">"2"</span>);</span><br><span class="line">                <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class="line">                    <span class="comment">// 定义共享元素的动画效果</span></span><br><span class="line">                    <span class="comment">// setSharedElementEnterTransition以及setSharedElementReturnTransition分别设置</span></span><br><span class="line">                    <span class="comment">// 共享元素的动画效果，在目的地Fragment调用Enter方法，当前Fragment调用Return方法，否则</span></span><br><span class="line">                    <span class="comment">// 无效，系统提供了一些动画效果，比如move、fade等等，可以直接使用，也可以通过继承</span></span><br><span class="line">                    <span class="comment">// TransitionSet实现自定义动画效果</span></span><br><span class="line">                    destination.setSharedElementEnterTransition(TransitionInflater.from(getContext()).inflateTransition(android.R.transition.move));</span><br><span class="line">                    setSharedElementReturnTransition(TransitionInflater.from(getContext()).inflateTransition(android.R.transition.move));</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// setEnterTransition和setExitTransition设置除了共享元素之外其他View的动画效果</span></span><br><span class="line">                    <span class="comment">// 一般来说仅需要设置目的地Fragment的Enter效果和当前Fragment的Exit效果，同样系统</span></span><br><span class="line">                    <span class="comment">// 也提供比如Fade之类的效果</span></span><br><span class="line">                    destination.setEnterTransition(<span class="keyword">new</span> Fade());</span><br><span class="line">                    setExitTransition(<span class="keyword">new</span> Fade());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (getFragmentManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    getFragmentManager()</span><br><span class="line">                            .beginTransaction()</span><br><span class="line">                            <span class="comment">// 在切换Fragment时调用addSharedElement方法，标记我们的共享元素，参数为共享元素</span></span><br><span class="line">                            <span class="comment">// 对象以及Fragment2中的共享元素的transitionName，可以写死，需要注意的是，这里传入</span></span><br><span class="line">                            <span class="comment">// 的transitionName需要与Fragment2中的共享元素相同。以我们的代码为例，只有在两个布</span></span><br><span class="line">                            <span class="comment">// 局中共享元素transitionName相同时才可以使用ViewCompat.getTransitionName方法获取</span></span><br><span class="line">                            .addSharedElement(textView, Objects.requireNonNull(ViewCompat.getTransitionName(textView)))</span><br><span class="line">                            .addToBackStack(TAG)</span><br><span class="line">                            .replace(R.id.container, destination)</span><br><span class="line">                            .commit();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.layout1, container, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fragment2.java Fragment2没有加入任何效果，仅显示我们需要的布局</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fragment2</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ARG_PARAM1 = <span class="string">"param1"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ARG_PARAM2 = <span class="string">"param2"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Fragment2 <span class="title">newInstance</span><span class="params">(String param1, String param2)</span> </span>&#123;</span><br><span class="line">        Fragment2 fragment = <span class="keyword">new</span> Fragment2();</span><br><span class="line">        Bundle args = <span class="keyword">new</span> Bundle();</span><br><span class="line">        args.putString(ARG_PARAM1, param1);</span><br><span class="line">        args.putString(ARG_PARAM2, param2);</span><br><span class="line">        fragment.setArguments(args);</span><br><span class="line">        <span class="keyword">return</span> fragment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.layout2, container, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的两个布局文件，两者的区别仅仅是layout1中TextView有上边距，<code>android:transitionName=&quot;textView&quot;</code>相同（可以不同，因为Fragment1中的transitionName并不重要）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- layout1.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/textView1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"200dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"qqqqqqqqqqqq"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"24sp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:transitionName</span>=<span class="string">"textView"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- layout2.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/textView2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"qqqqqqqqqqqq"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"24sp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:transitionName</span>=<span class="string">"textView"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下</p><!--  --><p><img src="http://114.116.9.65:7777/images/2020/01/18/share1.gif" alt="share1.gif" /></p><p>当然我们实际应用中不会使用如此简单的布局，此时我仅仅修改layout2，增加一个ImageView，那么就会出现一个奇怪的Bug现象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"40dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"40dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:src</span>=<span class="string">"@drawable/ic_launcher_foreground"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/textView2"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"qqqqqqqqqqqq"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">"24sp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:transitionName</span>=<span class="string">"textView"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如下图所示，从Fragment1跳转到Fragment2时，TextView并没有按照轨迹移动，而实突然出现在顶部，但是返回时TextView按照轨迹移动，而我仅仅只是增加了一点布局。</p><!--  --><p><img src="http://114.116.9.65:7777/images/2020/01/18/share2.gif" alt="share2.gif" /></p><p>更加奇怪的是如果上述布局layout2中，设置第二层LinearLayout的<code>android:layout_marginTop=&quot;1dp&quot;</code>，那么又可以正常按照轨迹移动了，这里就不截图了。也就是说如果在实际应用过程中出现这样的显示效果问题，可以通过设置<code>layout_marginTop</code>来避免，但是可能会有1dp的显示问题。</p><h3 id="12-recyclerview以及图片缩放效果"><a class="markdownIt-Anchor" href="#12-recyclerview以及图片缩放效果"></a> 1.2 RecyclerView以及图片缩放效果</h3><p>具体可以参考<a href="https://github.com/bherbst/FragmentTransitionSample" target="_blank" rel="noopener">FragmentTransitionSample</a>，其中还包括自定义TransitionSet的实现。需要注意的是，在RecyclerView中添加<code>transitionName</code>的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里对应了上面说到的问题，Fragment1中的transitionName不重要，仅仅需要让它们的transitionName唯一即可，</span></span><br><span class="line"><span class="comment">// 否则会出现显示其他图片的异常</span></span><br><span class="line">ViewCompat.setTransitionName(viewHolder.image, position + <span class="string">"_image"</span>);</span><br><span class="line"></span><br><span class="line">getActivity().getSupportFragmentManager()</span><br><span class="line">        .beginTransaction()</span><br><span class="line">        <span class="comment">// 只要最终addSharedElement方法添加的transitionName与Fragment2相同即可</span></span><br><span class="line">        .addSharedElement(holder.image, <span class="string">"kittenImage"</span>)</span><br><span class="line">        .replace(R.id.container, kittenDetails)</span><br><span class="line">        .addToBackStack(<span class="keyword">null</span>)</span><br><span class="line">        .commit();</span><br></pre></td></tr></table></figure><h2 id="2-activity之间共享元素"><a class="markdownIt-Anchor" href="#2-activity之间共享元素"></a> 2. Activity之间共享元素</h2><p>从Fragment提供的方法可知，Fragment之间共享元素仅能实现一个View的动画，如果在一个界面中需要对多个View实现动画就只能在Activity中实现了。</p><h3 id="21-简单使用"><a class="markdownIt-Anchor" href="#21-简单使用"></a> 2.1 简单使用</h3><p>首先看看之前在Fragment中存在的问题是否会同样出现在Activity中。与Fragment不同的是，在Activity中启用共享元素需要提前配置一下Theme</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.NoActionBar"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- Customize your theme here. --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/colorPrimaryDark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- windowContentTransitions也可以通过getWindow().requestFeature(Window.FEATURE_CONTENT_TRANSITIONS)动态控制 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowContentTransitions"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 也可以通过getWindow().setExitTransition(new Fade())动态控制 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- specify enter and exit transitions --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowEnterTransition"</span>&gt;</span>@android:transition/fade<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowExitTransition"</span>&gt;</span>@android:transition/fade<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 也可以通过getWindow().setSharedElementEnterTransition()动态控制 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- specify shared element transitions --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowSharedElementEnterTransition"</span>&gt;</span></span></span><br><span class="line">        @android:transition/move</span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowSharedElementExitTransition"</span>&gt;</span></span></span><br><span class="line">        @android:transition/move</span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在Theme中控制和通过代码动态控制的区别是Theme是全局的设置，后续如果在代码中没有显示控制则会使用Theme的效果，动态控制的话可以对不同Activity设置不同的动画效果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FirstActivity.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView textView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_first);</span><br><span class="line">        textView = findViewById(R.id.text_1);</span><br><span class="line">        textView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                Intent intent = <span class="keyword">new</span> Intent(FirstActivity.<span class="keyword">this</span>, SecondActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                <span class="comment">// 由于Activity是通过startActivity启动，所以使用makeSceneTransitionAnimation</span></span><br><span class="line">                <span class="comment">// 同理，这里的transitionName为"text"，与SecondActivity相同，而且这里并没有设置</span></span><br><span class="line">                <span class="comment">// FirstActivity的transitionName</span></span><br><span class="line">                ActivityOptionsCompat options = ActivityOptionsCompat.</span><br><span class="line">                        makeSceneTransitionAnimation(FirstActivity.<span class="keyword">this</span>,</span><br><span class="line">                                textView,</span><br><span class="line">                                <span class="string">"text"</span>);</span><br><span class="line">                startActivity(intent, options.toBundle());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SecondActivity.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView textView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_second);</span><br><span class="line">        textView = findViewById(R.id.text_2);</span><br><span class="line">        <span class="comment">// 动态设置transitionName</span></span><br><span class="line">        ViewCompat.setTransitionName(textView, <span class="string">"text"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而且Fragmen中存在的动画效果异常的问题没有出现在Activity中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- activity_first.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    &lt;LinearLayout--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        android:layout_width="match_parent"--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        android:layout_height="wrap_content"&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/text_1"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">"200dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"aaaaaaaaaaaaaa"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">"24sp"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/LinearLayout&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- activity_second.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"40dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"40dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:src</span>=<span class="string">"@drawable/ic_launcher_foreground"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/text_2"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"aaaaaaaaaaaaaa"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">"24sp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>具体效果如下，但是仔细观察可以发现存在问题，状态栏在动画过程中会闪烁</p><!--  --><p><img src="http://114.116.9.65:7777/images/2020/01/18/share3.gif" alt="share3.gif" /></p><p>解决方法是指定状态栏或者其他控件不参加动画，原理是因为在动画过程中实际是通过一层windows ViewOverlay播放动画，这一层在包括了界面所有的View（状态栏也在其中），当我们指定动画时可以将状态栏的id排除出去就可以实现状态栏不参与动画，也就不会有闪烁的现象。</p><ul><li>Theme控制</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// styles.xml</span><br><span class="line"><span class="comment">&lt;!-- specify enter and exit transitions --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 自定义fade.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowEnterTransition"</span>&gt;</span>@transition/fade<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowExitTransition"</span>&gt;</span>@transition/fade<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// fade.xml</span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transitionSet</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fade</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">targets</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 可以设置statusBarBackground的id，也可以是我们自定义的控件的id，比如Toolbar --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">target</span> <span class="attr">android:excludeId</span>=<span class="string">"@android:id/statusBarBackground"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">target</span> <span class="attr">android:excludeId</span>=<span class="string">"@android:id/navigationBarBackground"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;target android:excludeId="@id/appBar" /&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">targets</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fade</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transitionSet</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>动态代码控制</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当前Activity设置Exit效果，目的地Activity设置Enter效果</span></span><br><span class="line"><span class="comment">// FirstActivity.java</span></span><br><span class="line">Fade fade = <span class="keyword">new</span> Fade();</span><br><span class="line">fade.excludeTarget(android.R.id.statusBarBackground, <span class="keyword">true</span>);</span><br><span class="line">fade.excludeTarget(android.R.id.navigationBarBackground, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">getWindow().setExitTransition(fade);</span><br><span class="line"></span><br><span class="line"><span class="comment">// SecondActivity.java</span></span><br><span class="line">Fade fade = <span class="keyword">new</span> Fade();</span><br><span class="line">fade.excludeTarget(android.R.id.statusBarBackground, <span class="keyword">true</span>);</span><br><span class="line">fade.excludeTarget(android.R.id.navigationBarBackground, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">getWindow().setEnterTransition(fade);</span><br></pre></td></tr></table></figure><ul><li>Activity设置独立Theme</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// styles.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"DefaultActivity"</span> <span class="attr">parent</span>=<span class="string">"AppTheme"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowEnterTransition"</span>&gt;</span>@transition/fade<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowExitTransition"</span>&gt;</span>@transition/fade<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// AndroidManifest.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">".SecondActivity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:theme</span>=<span class="string">"@style/DefaultActivity"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">".FirstActivity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:theme</span>=<span class="string">"@style/DefaultActivity"</span> /&gt;</span></span><br></pre></td></tr></table></figure><!--  --><p><img src="http://114.116.9.65:7777/images/2020/01/18/share4.gif" alt="share4.gif" /></p><h3 id="22-recyclerview复杂效果"><a class="markdownIt-Anchor" href="#22-recyclerview复杂效果"></a> 2.2 RecyclerView复杂效果</h3><p>上面写的代码都是用的本地图片，如果从网络中加载图片并在不同Activity中跳转，那么必然需要考虑在两个Activity中加载图片时的缓存时间，常用的图片加载框架有Picasso和Glide，可以参考上面给出的<a href="https://mikescamell.com/shared-element-transitions-part-4-recyclerview/" target="_blank" rel="noopener">链接</a>。</p><p>首先获取图片数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Constants</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> List&lt;String&gt; <span class="title">getImageUrls</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; data = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        data.add(<span class="string">"https://i.loli.net/2020/01/02/ClMXcUkJNETpYHb.jpg"</span>);</span><br><span class="line">        data.add(<span class="string">"https://i.loli.net/2020/01/02/ulnhD8S79w4IfaY.jpg"</span>);</span><br><span class="line">        data.add(<span class="string">"https://i.loli.net/2020/01/02/i9IFevNYqKVRcXP.jpg"</span>);</span><br><span class="line">        data.add(<span class="string">"https://i.loli.net/2020/01/02/7QDskmZunBg4GEj.jpg"</span>);</span><br><span class="line">        data.add(<span class="string">"https://i.loli.net/2020/01/02/eHzuXSqIoUbh8Mc.jpg"</span>);</span><br><span class="line">        data.add(<span class="string">"https://i.loli.net/2020/01/02/biSqYO73CLvjh8p.jpg"</span>);</span><br><span class="line">        data.add(<span class="string">"https://i.loli.net/2020/01/02/a4NjuqfMmckoVT2.jpg"</span>);</span><br><span class="line">        data.add(<span class="string">"https://i.loli.net/2020/01/02/jSoFtq7VRBM6TUZ.jpg"</span>);</span><br><span class="line">        data.add(<span class="string">"https://i.loli.net/2020/01/02/nw3vUZBlyIph1oH.jpg"</span>);</span><br><span class="line">        data.add(<span class="string">"https://i.loli.net/2020/01/02/y3wGlkoXq4EWSDt.jpg"</span>);</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后定义RecyclerView相关代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">MyAdapter</span>.<span class="title">MyViewHolder</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyAdapter</span><span class="params">(List&lt;String&gt; data, Context context, OnItemClickListener onItemClickListener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">        <span class="keyword">this</span>.onItemClickListener = onItemClickListener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyViewHolder <span class="title">onCreateViewHolder</span><span class="params">(@NonNull ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        View view = LayoutInflater.from(context).inflate(R.layout.layout_item, parent, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyViewHolder(view);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(@NonNull <span class="keyword">final</span> MyViewHolder holder, <span class="keyword">final</span> <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里没有设置imageView和textView的transitionName也可以正常运行</span></span><br><span class="line">        String url = data.get(position);</span><br><span class="line">        holder.textView.setText(url);</span><br><span class="line">        loadImage(url, holder);</span><br><span class="line">        holder.imageView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                onItemClickListener.onItemClick(holder, position);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分别通过Glide和Picasso加载图片</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadImage</span><span class="params">(String url, MyViewHolder holder)</span> </span>&#123;</span><br><span class="line">        Glide.with(context)</span><br><span class="line">                .load(url)</span><br><span class="line">                .centerCrop()</span><br><span class="line">                .into(holder.imageView);</span><br><span class="line"><span class="comment">//        Picasso.get()</span></span><br><span class="line"><span class="comment">//                .load(url)</span></span><br><span class="line"><span class="comment">//                .fit()</span></span><br><span class="line"><span class="comment">//                .centerCrop()</span></span><br><span class="line"><span class="comment">//                .into(holder.imageView);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> ImageView imageView;</span><br><span class="line">        <span class="keyword">public</span> TextView textView;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyViewHolder</span><span class="params">(@NonNull View itemView)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(itemView);</span><br><span class="line">            imageView = itemView.findViewById(R.id.item_image);</span><br><span class="line">            textView = itemView.findViewById(R.id.item_text);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OnItemClickListener onItemClickListener;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnItemClickListener</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(MyViewHolder viewHolder, <span class="keyword">int</span> position)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- layout_item.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"150dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginBottom</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/item_image"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:src</span>=<span class="string">"@drawable/ic_launcher_foreground"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/item_text"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:lines</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"16sp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:text</span>=<span class="string">"aaaaaa"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后是Activity的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ThirdActivity.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThirdActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">MyAdapter</span>.<span class="title">OnItemClickListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RecyclerView recyclerView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_third);</span><br><span class="line"></span><br><span class="line">        MyAdapter adapter = <span class="keyword">new</span> MyAdapter(Constants.getImageUrls(), <span class="keyword">this</span>, <span class="keyword">this</span>);</span><br><span class="line">        recyclerView = findViewById(R.id.list);</span><br><span class="line">        recyclerView.setLayoutManager(<span class="keyword">new</span> GridLayoutManager(<span class="keyword">this</span>, <span class="number">2</span>));</span><br><span class="line">        recyclerView.setAdapter(adapter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(MyAdapter.MyViewHolder viewHolder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(ThirdActivity.<span class="keyword">this</span>, ForthActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        intent.putExtra(<span class="string">"position"</span>, position);</span><br><span class="line">        <span class="comment">// 与单个共享元素不同的是，多个共享元素动画需要使用Pair传参，而且需要强制转换类型为View</span></span><br><span class="line">        Pair&lt;View, String&gt; imagePair = Pair.create((View)viewHolder.imageView, <span class="string">"image"</span>);</span><br><span class="line">        Pair&lt;View, String&gt; textPair = Pair.create((View)viewHolder.textView, <span class="string">"text"</span>);</span><br><span class="line">        ActivityOptionsCompat options = ActivityOptionsCompat.</span><br><span class="line">                makeSceneTransitionAnimation(<span class="keyword">this</span>, imagePair, textPair);</span><br><span class="line">        startActivity(intent, options.toBundle());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ForthActivity.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForthActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView textView;</span><br><span class="line">    <span class="keyword">private</span> ImageView imageView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_forth);</span><br><span class="line">        <span class="keyword">int</span> position = getIntent().getIntExtra(<span class="string">"position"</span>, <span class="number">0</span>);</span><br><span class="line">        textView = findViewById(R.id.text_detail);</span><br><span class="line">        imageView = findViewById(R.id.image_detail);</span><br><span class="line">        textView.setText(Constants.getImageUrls().get(position));</span><br><span class="line">        loadImage(Constants.getImageUrls().get(position), imageView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分别通过Glide和Picasso加载图片，注意这里与MyAdapter使用不同的框架也是没有问题的</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadImage</span><span class="params">(String url, ImageView view)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 关键代码supportPostponeEnterTransition()方法，可以使得Activity</span></span><br><span class="line">        <span class="comment">// 延迟显示，直到执行了supportStartPostponedEnterTransition()方法。</span></span><br><span class="line">        <span class="comment">// 也就是说，为了使图片能够先从网络上缓存下来再显示，可以在图片缓存成功的</span></span><br><span class="line">        <span class="comment">// 回调方法中调用supportStartPostponedEnterTransition()</span></span><br><span class="line">        supportPostponeEnterTransition();</span><br><span class="line"></span><br><span class="line">        Glide.with(<span class="keyword">this</span>)</span><br><span class="line">                .load(url)</span><br><span class="line">                .centerCrop()</span><br><span class="line">                .dontAnimate() <span class="comment">// 实测这一行没有什么用</span></span><br><span class="line">                .listener(<span class="keyword">new</span> RequestListener&lt;Drawable&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onLoadFailed</span><span class="params">(@Nullable GlideException e, Object model, Target&lt;Drawable&gt; target, <span class="keyword">boolean</span> isFirstResource)</span> </span>&#123;</span><br><span class="line">                        supportStartPostponedEnterTransition();</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onResourceReady</span><span class="params">(Drawable resource, Object model, Target&lt;Drawable&gt; target, DataSource dataSource, <span class="keyword">boolean</span> isFirstResource)</span> </span>&#123;</span><br><span class="line">                        supportStartPostponedEnterTransition();</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .into(view);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        Picasso.get()</span></span><br><span class="line"><span class="comment">//                .load(url)</span></span><br><span class="line"><span class="comment">//                .noFade()  // 实测这一行没有什么用</span></span><br><span class="line"><span class="comment">//                .into(view, new Callback() &#123;</span></span><br><span class="line"><span class="comment">//                    @Override</span></span><br><span class="line"><span class="comment">//                    public void onSuccess() &#123;</span></span><br><span class="line"><span class="comment">//                        supportStartPostponedEnterTransition();</span></span><br><span class="line"><span class="comment">//                    &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                    @Override</span></span><br><span class="line"><span class="comment">//                    public void onError(Exception e) &#123;</span></span><br><span class="line"><span class="comment">//                        supportStartPostponedEnterTransition();</span></span><br><span class="line"><span class="comment">//                    &#125;</span></span><br><span class="line"><span class="comment">//                &#125;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终效果</p><!--  --><p><img src="http://114.116.9.65:7777/images/2020/01/18/share5.gif" alt="share5.gif" /></p><p>这个显示效果有几个问题，一是TextView字体大小突变，二是图片返回时会有微小的大小反弹现象，三是图片如果卡在状态栏上会出现短时间覆盖状态栏的现象，最后是点击时不会立即跳转，会出现明显的卡顿。如果需要解决上述几个问题，可以参考<a href="https://github.com/android/animation-samples" target="_blank" rel="noopener">Github animation-samples</a>中的Unslpash示例。</p><!--  --><p><img src="http://114.116.9.65:7777/images/2020/01/18/share6.gif" alt="share6.gif" /></p><p>可以发现这个示例没有出现上面我所发生的显示效果问题，如果仔细查看代码可以发现为了优化这个效果加入了一些的自定义动画以及自定义View。</p><h2 id="3-复杂效果的优化"><a class="markdownIt-Anchor" href="#3-复杂效果的优化"></a> 3. 复杂效果的优化</h2><p>具体可以参考<a href="https://github.com/android/animation-samples" target="_blank" rel="noopener">Github animation-samples</a>中的Unslpash示例。</p><p>Unslpash示例具体实现了一下几个细节效果：</p><ol><li>在图片详情页使用了ViewPager，可以左右滑动切换图片；</li><li>当我们左右滑动切换图片再返回时，RecyclerView会滑动到对应的图片，而且有返回动画效果；</li><li>点击查看图片详情时动画没有卡顿的感觉，而且字体大小有良好的变换动画效果，不是突变；</li><li>ViewPager左右滑动也没有产生加载的卡顿现象。</li></ol><h3 id="31-效果实现分析"><a class="markdownIt-Anchor" href="#31-效果实现分析"></a> 3.1 效果实现分析</h3><p>首先是数据来源，Unslpash示例数据来自于<code>https://unsplash.it</code>，通过Retrofit获取，示例仅获取12张图片，构造的Photo数据结构就不用分析了，很简单。</p><p>然后是两个Activity的动画效果，是通过Theme设置的，分别对MainActivity和DetailActivity使用不同的Theme，即最主要的动画效果是通过xml定义的，java代码只控制逻辑</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- MainActivity --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"App.Home"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowExitTransition"</span>&gt;</span>@transition/grid_exit<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowReenterTransition"</span>&gt;</span>@transition/grid_reenter<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- DetailActivity --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"App.Details"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowSharedElementEnterTransition"</span>&gt;</span></span></span><br><span class="line"><span class="css">        <span class="keyword">@transition</span>/shared_main_detail</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>MainActivity的非共享元素移出界面时的效果是grid_exit，即爆炸效果；返回MainActivity时是grid_reenter，即从上向下滑动效果；DetailActivity的共享元素进入界面的效果是shared_main_detail，分别定义了photo和text的动画效果，photo使用了传统的几个动画就不说了，text使用的是自定义的动画，这个TextResize类还是有点复杂，所以会用就行了，而且不会出现在java代码中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- grid_exit.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">explode</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- grid_reenter.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slide</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:slideEdge</span>=<span class="string">"top"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:duration</span>=<span class="string">"300"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:interpolator</span>=<span class="string">"@android:interpolator/linear_out_slow_in"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">slide</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- shared_main_detail.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transitionSet</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transitionSet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">targets</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">target</span> <span class="attr">android:targetId</span>=<span class="string">"@id/photo"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">targets</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">changeBounds</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">arcMotion</span> <span class="attr">android:maximumAngle</span>=<span class="string">"50"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">changeBounds</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">changeTransform</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">changeClipBounds</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">changeImageTransform</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transitionSet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transitionSet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">targets</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">target</span> <span class="attr">android:targetId</span>=<span class="string">"@id/author"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">targets</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transition</span> <span class="attr">class</span>=<span class="string">"com.example.android.unsplash.transition.TextResize"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">changeBounds</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transitionSet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- recolor不知道有什么用，删了也没有区别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">recolor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">targets</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">target</span> <span class="attr">android:targetId</span>=<span class="string">"@android:id/statusBarBackground"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">target</span> <span class="attr">android:targetId</span>=<span class="string">"@android:id/navigationBarBackground"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">targets</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">recolor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transitionSet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>从MainActivity点击跳转到DetailActivity时需要通过Intent传入几个数据，比如当前界面中text的属性值，点击的图片索引以及从网络请求得到的图片url等等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Intent <span class="title">getDetailActivityStartIntent</span><span class="params">(Activity host, ArrayList&lt;Photo&gt; photos,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                    <span class="keyword">int</span> position, PhotoItemBinding binding)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Intent intent = <span class="keyword">new</span> Intent(host, DetailActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    intent.setAction(Intent.ACTION_VIEW);</span><br><span class="line">    intent.putParcelableArrayListExtra(IntentUtil.PHOTO, photos);</span><br><span class="line">    intent.putExtra(IntentUtil.SELECTED_ITEM_POSITION, position);</span><br><span class="line">    intent.putExtra(IntentUtil.FONT_SIZE, binding.author.getTextSize());</span><br><span class="line">    intent.putExtra(IntentUtil.PADDING,</span><br><span class="line">            <span class="keyword">new</span> Rect(binding.author.getPaddingLeft(),</span><br><span class="line">                    binding.author.getPaddingTop(),</span><br><span class="line">                    binding.author.getPaddingRight(),</span><br><span class="line">                    binding.author.getPaddingBottom()));</span><br><span class="line">    intent.putExtra(IntentUtil.TEXT_COLOR, binding.author.getCurrentTextColor());</span><br><span class="line">    <span class="keyword">return</span> intent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在DetailActivity中通过getIntent方法获取传入的数据，构造DetailSharedElementEnterCallback，通过setEnterSharedElementCallback设置回调；setEnterSharedElementCallback可以监听共享元素进入此Activity时的状态，由sharedElementCallback自定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    Intent intent = getIntent();</span><br><span class="line">    sharedElementCallback = <span class="keyword">new</span> DetailSharedElementEnterCallback(intent);</span><br><span class="line">    setEnterSharedElementCallback(sharedElementCallback);</span><br><span class="line">    initialItem = intent.getIntExtra(IntentUtil.SELECTED_ITEM_POSITION, <span class="number">0</span>);</span><br><span class="line">    setUpViewPager(intent.&lt;Photo&gt;getParcelableArrayListExtra(IntentUtil.PHOTO));</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DetailSharedElementEnterCallback的主要功能是在Activity切换时调整TextView的属性以及对共享元素进行绑定。从这个Callback可以看出来实际动画效果是发生在DetailActivity中，首先当处于onCreate方法中，在调用<code>super.onCreate(savedInstanceState);</code>之前设置DetailSharedElementEnterCallback，此时动画还未开始。</p><p>按照顺序执行<code>onMapSharedElements-&gt;onSharedElementStart-&gt;onSharedElementEnd</code>方法，在onMapSharedElements方法中需要将对应的共享元素View与其transitionName关联起来，这里的作用其实等价于在MainActivity中生成的Pair对象，试想一下如果我们在点击时绑定的是position为1的ImageView，而如果我们在ViewPager中滑动后position变为4，那么我们就需要更新Pair对象，否则返回时动画效果就不是返回position为4的ImageView。所以只能在Callback中处理，由于使用了Databinding而且两个Activity中的ImageView的transitionName相同，所以简单的添加即可，将其他不需要变换动画的元素移出Map也可以在这里操作。</p><p>然后在onSharedElementStart方法中会先将DetailActivity中的TextView的属性修改为MainActivity中对应TextView的属性，最后在onSharedElementEnd方法中将TextView设置为DetailActivity中原本的属性即可，也就是说从<code>onSharedElementStart-&gt;onSharedElementEnd</code>就是动画的过程了，实际动画控制是由上面transitionSet定义的，这里仅提供最初和最终状态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DetailSharedElementEnterCallback</span> <span class="keyword">extends</span> <span class="title">SharedElementCallback</span> </span>&#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSharedElementStart</span><span class="params">(List&lt;String&gt; sharedElementNames,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     List&lt;View&gt; sharedElements,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     List&lt;View&gt; sharedElementSnapshots)</span> </span>&#123;</span><br><span class="line">        TextView author = getAuthor();</span><br><span class="line">        targetTextSize = author.getTextSize();</span><br><span class="line">        targetTextColors = author.getTextColors();</span><br><span class="line">        targetPadding = <span class="keyword">new</span> Rect(author.getPaddingLeft(),</span><br><span class="line">                author.getPaddingTop(),</span><br><span class="line">                author.getPaddingRight(),</span><br><span class="line">                author.getPaddingBottom());</span><br><span class="line">        <span class="keyword">if</span> (IntentUtil.hasAll(intent,</span><br><span class="line">                IntentUtil.TEXT_COLOR, IntentUtil.FONT_SIZE, IntentUtil.PADDING)) &#123;</span><br><span class="line">            author.setTextColor(intent.getIntExtra(IntentUtil.TEXT_COLOR, Color.BLACK));</span><br><span class="line">            <span class="keyword">float</span> textSize = intent.getFloatExtra(IntentUtil.FONT_SIZE, targetTextSize);</span><br><span class="line">            author.setTextSize(TypedValue.COMPLEX_UNIT_PX, textSize);</span><br><span class="line">            Rect padding = intent.getParcelableExtra(IntentUtil.PADDING);</span><br><span class="line">            author.setPadding(padding.left, padding.top, padding.right, padding.bottom);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSharedElementEnd</span><span class="params">(List&lt;String&gt; sharedElementNames,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   List&lt;View&gt; sharedElements,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   List&lt;View&gt; sharedElementSnapshots)</span> </span>&#123;</span><br><span class="line">        TextView author = getAuthor();</span><br><span class="line">        author.setTextSize(TypedValue.COMPLEX_UNIT_PX, targetTextSize);</span><br><span class="line">        <span class="keyword">if</span> (targetTextColors != <span class="keyword">null</span>) &#123;</span><br><span class="line">            author.setTextColor(targetTextColors);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (targetPadding != <span class="keyword">null</span>) &#123;</span><br><span class="line">            author.setPadding(targetPadding.left, targetPadding.top,</span><br><span class="line">                    targetPadding.right, targetPadding.bottom);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (currentDetailBinding != <span class="keyword">null</span>) &#123;</span><br><span class="line">            forceSharedElementLayout(currentDetailBinding.description);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMapSharedElements</span><span class="params">(List&lt;String&gt; names, Map&lt;String, View&gt; sharedElements)</span> </span>&#123;</span><br><span class="line">        removeObsoleteElements(names, sharedElements, mapObsoleteElements(names));</span><br><span class="line">        mapSharedElement(names, sharedElements, getAuthor());</span><br><span class="line">        mapSharedElement(names, sharedElements, getPhoto());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBinding</span><span class="params">(@NonNull DetailViewBinding binding)</span> </span>&#123;</span><br><span class="line">        currentDetailBinding = binding;</span><br><span class="line">        currentPhotoBinding = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBinding</span><span class="params">(@NonNull PhotoItemBinding binding)</span> </span>&#123;</span><br><span class="line">        currentPhotoBinding = binding;</span><br><span class="line">        currentDetailBinding = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> TextView <span class="title">getAuthor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (currentPhotoBinding != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> currentPhotoBinding.author;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentDetailBinding != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> currentDetailBinding.author;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Must set a binding before transitioning."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ImageView <span class="title">getPhoto</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (currentPhotoBinding != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> currentPhotoBinding.photo;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentDetailBinding != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> currentDetailBinding.photo;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Must set a binding before transitioning."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Maps all views that don't start with "android" namespace.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> names All shared element names.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The obsolete shared element names.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">mapObsoleteElements</span><span class="params">(List&lt;String&gt; names)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; elementsToRemove = <span class="keyword">new</span> ArrayList&lt;&gt;(names.size());</span><br><span class="line">        <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">            <span class="keyword">if</span> (name.startsWith(<span class="string">"android"</span>)) <span class="keyword">continue</span>;</span><br><span class="line">            elementsToRemove.add(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> elementsToRemove;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Removes obsolete elements from names and shared elements.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> names            Shared element names.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sharedElements   Shared elements.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> elementsToRemove The elements that should be removed.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeObsoleteElements</span><span class="params">(List&lt;String&gt; names,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        Map&lt;String, View&gt; sharedElements,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        List&lt;String&gt; elementsToRemove)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (elementsToRemove.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            names.removeAll(elementsToRemove);</span><br><span class="line">            <span class="keyword">for</span> (String elementToRemove : elementsToRemove) &#123;</span><br><span class="line">                sharedElements.remove(elementToRemove);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Puts a shared element to transitions and names.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> names          The names for this transition.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sharedElements The elements for this transition.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> view           The view to add.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mapSharedElement</span><span class="params">(List&lt;String&gt; names, Map&lt;String, View&gt; sharedElements, View view)</span> </span>&#123;</span><br><span class="line">        String transitionName = view.getTransitionName();</span><br><span class="line">        names.add(transitionName);</span><br><span class="line">        sharedElements.put(transitionName, view);</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">forceSharedElementLayout</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> widthSpec = View.MeasureSpec.makeMeasureSpec(view.getWidth(),</span><br><span class="line">                View.MeasureSpec.EXACTLY);</span><br><span class="line">        <span class="keyword">int</span> heightSpec = View.MeasureSpec.makeMeasureSpec(view.getHeight(),</span><br><span class="line">                View.MeasureSpec.EXACTLY);</span><br><span class="line">        view.measure(widthSpec, heightSpec);</span><br><span class="line">        view.layout(view.getLeft(), view.getTop(), view.getRight(), view.getBottom());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是从MainActivity点击跳转到DetailActivity的全部流程，当然Unsplash示例还有ViewPager以及返回动画效果。</p><p>当我们左右滑动时会调用DetailViewPagerAdapter的setPrimaryItem，在这个方法中我们设置的上面Callback的View binding，将其置为当前的ImageView，此时如果点击返回键，那么Callback的执行顺序是<code>onMapSharedElements-&gt;onMapSharedElements-&gt;onSharedElementEnd-&gt;onSharedElementStart-&gt;onSharedElementStart-&gt;onSharedElementEnd</code>，且都是在DetailActivity的onPause之前执行的，这里分为两个阶段，因为此时在两个Activity中都有Callback，第一个onMapSharedElements是DetailActivity的，这里重新绑定position为4的ImageView；第二个onMapSharedElements是MainActivity的的，在onActivityReenter方法（Activity返回）中被调用，此时MainActivity已经知道了当前position为4，因此滑动RecyclerView到position为4的位置，并且将其对应的binding传入MainActivity的Callback中；然后是<code>onSharedElementEnd-&gt;onSharedElementStart</code>，这个状态是DetailActivity的动作，很显然这个效果就是上面动画的逆过程；再是<code>onSharedElementStart-&gt;onSharedElementEnd</code>，这个是MainActivity的动画过程，前面已经在onActivityReenter方法中获取了position和binding等数据，此时传入Callback中的Intent没有存储TextView的属性，因此这个过程在MainActivity中没有对共享元素产生任何动画效果。</p><h3 id="32-在fragment中实现类似效果"><a class="markdownIt-Anchor" href="#32-在fragment中实现类似效果"></a> 3.2 在Fragment中实现类似效果</h3><p>在Fragment中实现类似ImageView共享元素+ViewPager的效果会遇到几个问题，一是Fragment仅支持一个元素的动画，所以不能再使用TextView和ImageView一起变化；二是Fragment没有类似Activity的onActivityReenter方法，因此Fragment无法知道是从哪个position返回的，也就是说返回动画可能会出错，当然通过传参的方式（可能有传空数据的异常）或者ViewModel的方式是可以共享数据，如果没有使用ViewModel，那么可以考虑禁用返回动画来避免错误，当然动画效果就不是很好。具体代码可参考<a href="https://github.com/android/animation-samples" target="_blank" rel="noopener">Github animation-samples</a>中的GridToPager示例。</p><p>如果使用ViewModel来实现相同的效果可以参考<a href="https://github.com/zhuantou233/ShareElementWithViewModel" target="_blank" rel="noopener">ShareElementWithViewModel</a>。大部分代码都是参考<a href="https://github.com/android/animation-samples" target="_blank" rel="noopener">Github animation-samples</a>中的示例，仅修改了数据处理部分以使用ViewModel。下面大致说明一下修改的思路。</p><p>首先是依赖库，包括ViewModel和Navigation，以及使用了Databinding，用Glide加载图片</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    dataBinding &#123;</span><br><span class="line">        enabled = <span class="keyword">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    implementation <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</span><br><span class="line">    implementation <span class="string">'androidx.appcompat:appcompat:1.1.0'</span></span><br><span class="line">    implementation <span class="string">'androidx.constraintlayout:constraintlayout:1.1.3'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> lifecycle_version = <span class="string">"2.1.0"</span></span><br><span class="line">    implementation <span class="string">"androidx.lifecycle:lifecycle-extensions:$lifecycle_version"</span></span><br><span class="line"></span><br><span class="line">    implementation <span class="string">"androidx.recyclerview:recyclerview:1.1.0"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> nav_version = <span class="string">"2.1.0"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Java language implementation</span></span><br><span class="line">    implementation <span class="string">"androidx.navigation:navigation-fragment:$nav_version"</span></span><br><span class="line">    implementation <span class="string">"androidx.navigation:navigation-ui:$nav_version"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    implementation <span class="string">'com.github.bumptech.glide:glide:4.10.0'</span></span><br><span class="line">    implementation <span class="string">'androidx.legacy:legacy-support-v4:1.0.0'</span></span><br><span class="line">    annotationProcessor <span class="string">'com.github.bumptech.glide:compiler:4.10.0'</span></span><br><span class="line"></span><br><span class="line">    implementation <span class="string">'com.google.android.material:material:1.0.0'</span></span><br><span class="line">    implementation <span class="string">'com.squareup.retrofit2:retrofit:2.7.1'</span></span><br><span class="line">    implementation <span class="string">'com.squareup.retrofit2:converter-gson:2.7.1'</span></span><br><span class="line"></span><br><span class="line">    testImplementation <span class="string">'junit:junit:4.12'</span></span><br><span class="line">    androidTestImplementation <span class="string">'androidx.test.ext:junit:1.1.1'</span></span><br><span class="line">    androidTestImplementation <span class="string">'androidx.test.espresso:espresso-core:3.2.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用Navigation控制Fragment跳转，而且仅使用GridListFragment跳转到DetailPagerFragment，同时MainActivity不再进行任何操作。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">navigation</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/nav_graph"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:startDestination</span>=<span class="string">"@id/listFragment"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/listFragment"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">"us.zoom.shareelementwithviewmodel.ui.grid.GridListFragment"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"fragment_list"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:layout</span>=<span class="string">"@layout/fragment_list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/action_listFragment_to_detailPagerFragment"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:destination</span>=<span class="string">"@id/detailPagerFragment"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fragment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/detailPagerFragment"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">"us.zoom.shareelementwithviewmodel.ui.pager.DetailPagerFragment"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"fragment_detail_pager"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:layout</span>=<span class="string">"@layout/fragment_detail_pager"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">navigation</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现ImageListViewModel，用于保存数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageListViewModel</span> <span class="keyword">extends</span> <span class="title">ViewModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存从api获取到的数据</span></span><br><span class="line">    <span class="keyword">private</span> MutableLiveData&lt;List&lt;Photo&gt;&gt; photos = <span class="keyword">new</span> MutableLiveData&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> LiveData&lt;List&lt;Photo&gt;&gt; getPhotos() &#123;</span><br><span class="line">        <span class="keyword">return</span> photos;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 保存请求过程的状态</span></span><br><span class="line">    <span class="keyword">private</span> MutableLiveData&lt;Boolean&gt; isLoading = <span class="keyword">new</span> MutableLiveData&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LiveData&lt;Boolean&gt; <span class="title">getIsLoading</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isLoading;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 保存ViewPager中当前位置</span></span><br><span class="line">    <span class="keyword">private</span> MutableLiveData&lt;Integer&gt; currentPosition = <span class="keyword">new</span> MutableLiveData&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LiveData&lt;Integer&gt; <span class="title">getCurrentPosition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> currentPosition;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCurrentPosition</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        currentPosition.setValue(position);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        loadPhotos();</span><br><span class="line">        setCurrentPosition(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadPhotos</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        isLoading.setValue(<span class="keyword">true</span>);</span><br><span class="line">        UnsplashService unsplashApi = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">                .baseUrl(UnsplashService.BASEURL)</span><br><span class="line">                .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">                .build()</span><br><span class="line">                .create(UnsplashService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        unsplashApi.getPhoto().enqueue(<span class="keyword">new</span> Callback&lt;List&lt;Photo&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call&lt;List&lt;Photo&gt;&gt; call, Response&lt;List&lt;Photo&gt;&gt; response)</span> </span>&#123;</span><br><span class="line">                List&lt;Photo&gt; list = response.body();</span><br><span class="line">                <span class="keyword">if</span> (list != <span class="keyword">null</span> &amp;&amp; !list.isEmpty()) &#123;</span><br><span class="line">                    photos.setValue(<span class="keyword">new</span> ArrayList&lt;&gt;(list.subList(list.size() - PHOTO_COUNT,</span><br><span class="line">                            list.size())));</span><br><span class="line">                &#125;</span><br><span class="line">                isLoading.setValue(<span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call&lt;List&lt;Photo&gt;&gt; call, Throwable t)</span> </span>&#123;</span><br><span class="line">                Log.i(<span class="string">"ShareElement"</span>, <span class="string">"UnsplashService onFailure: "</span> + t.getMessage());</span><br><span class="line">                isLoading.setValue(<span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Unsplash示例使用的api有时候会用不了，可以用本地的url替代，对应需要修改Photo的getPhotoUrl方法</span></span><br><span class="line">        <span class="comment">// List&lt;Photo&gt; data = new ArrayList&lt;&gt;();</span></span><br><span class="line">        <span class="comment">// for (String url : Constants.getImageUrls()) &#123;</span></span><br><span class="line">        <span class="comment">//     Photo photo = new Photo("", 0, 0, "", url.hashCode(), "", "", url);</span></span><br><span class="line">        <span class="comment">//     data.add(photo);</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// photos.setValue(data);</span></span><br><span class="line">        <span class="comment">// isLoading.setValue(false);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Databinding适配，修改BindingAdapters，实现Glide加载并增加回调，回调会影响后续Fragment跳转的动画</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BindingAdapters</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定RecyclerView的list数据</span></span><br><span class="line">    <span class="meta">@BindingAdapter</span>(<span class="string">"listData"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bindRecyclerView</span><span class="params">(RecyclerView recyclerView, List&lt;Photo&gt; data)</span> </span>&#123;</span><br><span class="line">        GridPhotoAdapter adapter = (GridPhotoAdapter) recyclerView.getAdapter();</span><br><span class="line">        <span class="keyword">assert</span> adapter != <span class="keyword">null</span>;</span><br><span class="line">        adapter.submitList(data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 绑定Progressbar的状态</span></span><br><span class="line">    <span class="meta">@BindingAdapter</span>(<span class="string">"loadingStatus"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bindStatus</span><span class="params">(ProgressBar progressBar, Boolean isLoading)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isLoading) &#123;</span><br><span class="line">            progressBar.setVisibility(View.VISIBLE);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            progressBar.setVisibility(View.GONE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Glide加载以及增加回调</span></span><br><span class="line">    <span class="meta">@BindingAdapter</span>(value = &#123;<span class="string">"imageUrl"</span>, <span class="string">"glideListener"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bindImage</span><span class="params">(ImageView imageView, Photo photo, OnGlideRequestListener listener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> requestedPhotoWidth = imageView.getContext().getResources().getDisplayMetrics().widthPixels;</span><br><span class="line">        Glide.with(imageView.getContext())</span><br><span class="line">                .load(photo.getPhotoUrl(requestedPhotoWidth))</span><br><span class="line">                .placeholder(R.drawable.ic_launcher_foreground)</span><br><span class="line">                .override(ImageSize.NORMAL[<span class="number">0</span>], ImageSize.NORMAL[<span class="number">1</span>])</span><br><span class="line">                .addListener(<span class="keyword">new</span> RequestListener&lt;Drawable&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onLoadFailed</span><span class="params">(@Nullable GlideException e, Object model, Target&lt;Drawable&gt; target, <span class="keyword">boolean</span> isFirstResource)</span> </span>&#123;</span><br><span class="line">                        listener.onLoadFailed(e, model, target, isFirstResource);</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onResourceReady</span><span class="params">(Drawable resource, Object model, Target&lt;Drawable&gt; target, DataSource dataSource, <span class="keyword">boolean</span> isFirstResource)</span> </span>&#123;</span><br><span class="line">                        listener.onResourceReady(resource, model, target, dataSource, isFirstResource);</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .into(imageView);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为使用ViewModel在GridListFragment和DetailPagerFragment共享数据，所以ViewModel与MainActivity绑定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">viewModel = ViewModelProviders.of(requireActivity()).get(ImageListViewModel<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><p>GridListFragment使用了RecyclerView和Databinding，所以GridPhotoAdapter继承自ListAdapter，并实现DiffUtil.ItemCallback，以及点击事件的监听，又因为共享元素动画效果受Glide加载状态影响，所以需要把加载状态再通过OnLoadCompletedListener传到Fragment中，PhotoViewHolder采用Databinding实现。</p><p>在GridListFragment使用<code>postponeEnterTransition()</code>控制加载动画，但是我遇到了一些非常奇怪的问题，所以只能在<code>onStart()</code>中调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onStart();</span><br><span class="line">    <span class="comment">// 其他生命周期会触发不显示RecyclerView</span></span><br><span class="line">    postponeEnterTransition();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为通过GridPhotoAdapter传出了Glide的状态，所以可以在这里控制<code>startPostponedEnterTransition</code>，否则需要将Fragment实例传给Adapter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onImageLoadCompleted</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Call startPostponedEnterTransition only when the 'selected' image loading is completed.</span></span><br><span class="line">    <span class="keyword">if</span> (currentPosition != position) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    startPostponedEnterTransition();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击跳转Fragment也可以通过Navigation实现了，同时更新ViewModel的数据，共享元素的绑定也是通过FragmentNavigator.Extras实现，不过看了这个的代码后发现似乎使用Navigation可以实现在Fragment中同时有多个共享元素动画。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onListItemClick</span><span class="params">(View view, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Update the position.</span></span><br><span class="line">    viewModel.setCurrentPosition(position);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Exclude the clicked card from the exit transition (e.g. the card will disappear immediately</span></span><br><span class="line">    <span class="comment">// instead of fading out with the rest to prevent an overlapping animation of fade and move).</span></span><br><span class="line">    <span class="function"><span class="keyword">assert</span> <span class="title">getExitTransition</span><span class="params">()</span> !</span>= <span class="keyword">null</span>;</span><br><span class="line">    ((TransitionSet) getExitTransition()).excludeTarget(view, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    ImageView transitioningView = view.findViewById(R.id.photo);</span><br><span class="line">    FragmentNavigator.Extras extras = <span class="keyword">new</span> FragmentNavigator.Extras.Builder()</span><br><span class="line">            .addSharedElement(transitioningView, transitioningView.getTransitionName())</span><br><span class="line">            .build();</span><br><span class="line">    Navigation.findNavController(view).navigate(R.id.action_listFragment_to_detailPagerFragment, <span class="keyword">null</span>, <span class="keyword">null</span>, extras);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是DetailPagerFragment和DetailFragment，因为在实现过程中DetailFragment其实不是非常依赖ViewModel的数据，它只是作为显示结果被使用的，无论是当前位置还是全部图片数据都不需要获取或修改，所以DetailFragment仅需要进行Databinding即可，其他左右滑动数据修改都是在DetailPagerFragment中处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DetailFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> <span class="keyword">implements</span> <span class="title">OnGlideRequestListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = DetailFragment<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Photo photo;</span><br><span class="line">    <span class="comment">// 仅需要Photo数据</span></span><br><span class="line">    DetailFragment(Photo photo) &#123;</span><br><span class="line">        <span class="keyword">this</span>.photo = photo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(@NonNull LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class="line"><span class="function"><span class="params">                             Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Inflate the layout for this fragment</span></span><br><span class="line">        FragmentDetailBinding binding = FragmentDetailBinding.inflate(inflater);</span><br><span class="line">        binding.setLifecycleOwner(<span class="keyword">this</span>);</span><br><span class="line">        binding.setListener(<span class="keyword">this</span>);</span><br><span class="line">        binding.setData(photo);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> binding.getRoot();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 同样需要处理动画</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadFailed</span><span class="params">(@Nullable GlideException e, Object model, Target&lt;Drawable&gt; target, <span class="keyword">boolean</span> isFirstResource)</span> </span>&#123;</span><br><span class="line">        requireParentFragment().startPostponedEnterTransition();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResourceReady</span><span class="params">(Drawable resource, Object model, Target&lt;Drawable&gt; target, DataSource dataSource, <span class="keyword">boolean</span> isFirstResource)</span> </span>&#123;</span><br><span class="line">        requireParentFragment().startPostponedEnterTransition();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DetailViewPagerAdapter的实现就比较简单了，继承自FragmentStatePagerAdapter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DetailViewPagerAdapter</span> <span class="keyword">extends</span> <span class="title">FragmentStatePagerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Photo&gt; photos;</span><br><span class="line"></span><br><span class="line">    DetailViewPagerAdapter(<span class="meta">@NonNull</span> FragmentManager fm, <span class="keyword">int</span> size, List&lt;Photo&gt; photos) &#123;</span><br><span class="line">        <span class="keyword">super</span>(fm, BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT);</span><br><span class="line">        <span class="keyword">this</span>.size = size;</span><br><span class="line">        <span class="keyword">this</span>.photos = photos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DetailFragment(photos.get(position));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后是DetailPagerFragment，ViewModel中Photo数据的观察，以及Toolbar返回功能的修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回现过必须通过onBackPressed实现，否则共享元素动画会消失</span></span><br><span class="line"><span class="keyword">private</span> View.OnClickListener navigateListener = view -&gt; requireActivity().onBackPressed();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">viewModel.getPhotos().observe(<span class="keyword">this</span>, photos -&gt; viewPager.setAdapter(<span class="keyword">new</span> DetailViewPagerAdapter(</span><br><span class="line">        getChildFragmentManager(), photos.size(), photos)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set the current position and add a listener that will update the selection coordinator when</span></span><br><span class="line"><span class="comment">// paging the images.</span></span><br><span class="line">viewModel.getCurrentPosition().observe(<span class="keyword">this</span>, position -&gt; &#123;</span><br><span class="line">    viewPager.setCurrentItem(position);</span><br><span class="line">    currentPosition = position;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Toolbar toolbar = view.findViewById(R.id.toolbar);</span><br><span class="line">toolbar.setNavigationOnClickListener(navigateListener);</span><br></pre></td></tr></table></figure><h2 id="4-使用技巧总结"><a class="markdownIt-Anchor" href="#4-使用技巧总结"></a> 4. 使用技巧总结</h2><ol><li>Fragment中使用时，当前Fragment的共享元素的<code>transitionName</code>必须存在但是与目的地Fragment不同也能用，且RecyclerView中的每一个共享元素都必须设置为不同的<code>transitionName</code>（Activity中当前Activity的<code>transitionName</code>可以不设置，包括使用了RecyclerView，目的地Activity必须设置），<strong>但是实际使用时请务必将对应共享元素的<code>transitionName</code>设置为相同（RecyclerView除外）</strong>；</li><li>Fragment中使用时，当目的地Fragment中共享元素被嵌套了多层，则可能出现滑动动画缺失现象，可以通过<code>marginTop:1dp</code>解决；Activity中不会有这种现象；</li><li>切换动画产生时会导致状态栏、ActionBar以及Toolbar的闪烁，可以通过在动画中将这些View的id排除即可避免；</li><li>如果使用了Glide或者Picasso等图片加载框架从网络请求加载图片，可以在Activity中设置<code>supportPostponeEnterTransition()</code>以及<code>supportStartPostponedEnterTransition()</code>方法来确保图片能够先缓存再显示（或者是<code>postponeEnterTransition()</code>和<code>startPostponedEnterTransition()</code>），但是会导致另一个问题，点击跳转非常卡顿；</li><li>ViewPager配合使用实现左右滑动查看图片时，返回动画会出错，显示错误的图片，此时可以通过对ViewPager中的Fragment设置<code>setSharedElementReturnTransition(null)</code>来禁用返回动画（<a href="https://mikescamell.com/shared-element-transitions-part-4-recyclerview/" target="_blank" rel="noopener">参考</a>）；</li><li>如果需要完成良好的动画效果体验，请参考Github上的示例，在SharedElementCallback中处理共享元素匹配，并在合适的实际调用<code>postponeEnterTransition()</code>和<code>startPostponedEnterTransition()</code>。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.android.com/training/transitions/start-activity&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android Developers文档指南&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/android/animation-samples&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github animation-samples&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://mikescamell.com/shared-element-transitions-part-1/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Shared Element Transitions - Part 1: Activities&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://mikescamell.com/shared-element-transitions-part-2/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Shared Element Transitions - Part 2: Fragments&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://mikescamell.com/shared-element-transitions-part-3/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Shared Element Transitions - Part 3: Picasso &amp;amp; Glide&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/codepath/android_guides/wiki/Shared-Element-Activity-Transition&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;android_guides&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://medium.com/@bherbst/fragment-transitions-with-shared-elements-7c7d71d31cbb&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Fragment transitions with shared elements&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;共享元素可以在Activity之间或者Fragment之间实现非常舒适的动画效果，如下图所示，特别是在跳转的界面之间拥有相同的界面元素，比如同一张图片但是大小不同，同一个View但是位置不同。需要注意的是最低api需要为21，即Android LOLLIPOP。&lt;/p&gt;
&lt;!--  --&gt;
&lt;p&gt;&lt;img src=&quot;http://114.116.9.65:7777/images/2020/01/18/cat.gif&quot; alt=&quot;cat.gif&quot; /&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://zhoutao822.coding.me/categories/Android/"/>
    
    
      <category term="Android" scheme="http://zhoutao822.coding.me/tags/Android/"/>
    
      <category term="Material" scheme="http://zhoutao822.coding.me/tags/Material/"/>
    
      <category term="ShareElement" scheme="http://zhoutao822.coding.me/tags/ShareElement/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu+linuxbrew+zsh+oh-my-zsh</title>
    <link href="http://zhoutao822.coding.me/archives/3a6fd8b5.html"/>
    <id>http://zhoutao822.coding.me/archives/3a6fd8b5.html</id>
    <published>2020-01-11T12:52:42.000Z</published>
    <updated>2020-01-18T14:56:01.708Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><blockquote><p><a href="https://docs.brew.sh/Homebrew-on-Linux" target="_blank" rel="noopener">Homebrew Documentation</a><br /><a href="https://ohmyz.sh/" target="_blank" rel="noopener">Oh My ZSH!</a><br /><a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Installing-ZSH" target="_blank" rel="noopener">Installing ZSH</a></p></blockquote><p>租一个服务器能干什么，我想大致分为两个方面：使用和学习。可以将云盘部署到服务器上，那么你就拥有了一个私有云盘，也可以将WordPress部署到服务器上，那么你就拥有了一个可以写博客的个人网站；学习JavaWeb，需要了解Tomcat、MySQL、Nginx、Redis等等，你可以在服务器上运行这些程序而不必使用宝贵的本地资源。为了后续的使用以及学习，首先需要优化一下我们的服务器配置，因为控制服务器一般都是通过命令行，所以前期优化一下，后续会更好操作。</p><a id="more"></a><h2 id="1-为什么需要标题中的工具"><a class="markdownIt-Anchor" href="#1-为什么需要标题中的工具"></a> 1. 为什么需要标题中的工具</h2><p>首先你需要一个云服务器，可以是华为云、腾讯云、阿里云等等，注册购买即可，最便宜的1核心CPU加2GB内存加40GB/50GB的硬盘存储基本足够前期的学习使用，你可以先租1个月玩玩，如果有学生优惠基本上一个月只要10元。云服务器的操作系统一般有Windows Server、CentOS以及Ubuntu等等，我最常用的是Ubuntu而且出了问题能够最容易找到解决方法，稳定性什么的以后再说。Ubuntu版本可以直接上18.04，不用考虑旧版本16.04。</p><p>得到服务器后我会先安装zsh，zsh就是命令行工具，我们在服务器上输入的指令都通过zsh执行，zsh搭配oh-my-zsh可以实现非常舒适的UI效果并且提供一些很有用的插件，比如自动提示命令等等。</p><p>然后安装Linuxbrew，这是一个包管理工具，是从Homebrew迁移而来（Homebrew只能在macOS上使用），在服务器上安装了brew之后，后续需要安装的软件就都可以通过brew安装，如果brew仓库没有再考虑自行安装。使用brew最明显的好处是你可以直接通过brew更新、删除、查看所安装的软件，而且brew可以提供快速开启某些服务的命令，比如MySQL、Redis、Tomcat等等。</p><h2 id="2-ubuntu服务器配置"><a class="markdownIt-Anchor" href="#2-ubuntu服务器配置"></a> 2. Ubuntu服务器配置</h2><p>我的服务器是Ubuntu18.04，拿到服务器后首先可以ssh登录上服务器，购买之后会给你用户名和首次登录密码，有些厂商给的是root用户有些是其他用户例如ubuntu</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh ubuntu@175.24.47.141</span><br></pre></td></tr></table></figure><p>第一次登录需要输入密码</p><p><img src="http://114.116.9.65:7777/images/2020/01/18/ssh.png" alt="ssh.png" /></p><!--  --><p>登录成功结果</p><p><img src="http://114.116.9.65:7777/images/2020/01/18/login.png" alt="login.png" /></p><!--  --><p>一般来说初始的服务器是不支持中文的，此时你将输入法调为中文也是无法打字的，而且某些文件如果里面包含中文，则会显示为乱码或者问号，所以第一步我会先配置中文支持。</p><h3 id="21-中文支持"><a class="markdownIt-Anchor" href="#21-中文支持"></a> 2.1 中文支持</h3><p>先给出我写好的脚本，在服务器任意目录保存为<code>ch.sh</code>，然后执行<code>chmod 777 ch.sh</code>，最后执行<code>sh ch.sh</code>，服务器会重启，之后再登录就可以用中文打字了，而且中文不会乱码。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"------Start to support Chinese------"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"------Install Chinese language pack------"</span></span><br><span class="line">sudo apt-get install language-pack-zh-hans -y</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"------Set environment------"</span></span><br><span class="line">sudo sed -i <span class="string">'$aLANG=zh_CN.UTF-8\nLANGUAGE=zh_CN:zh:en_US:en\nLC_CTYPE="en_US.UTF-8"\nLC_ALL=en_US.UTF-8'</span> /etc/environment</span><br><span class="line"></span><br><span class="line">sudo locale-gen</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"------Reboot------"</span></span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><p>然后再说明一下脚本里都干了些什么，首先<code>sudo apt-get install language-pack-zh-hans -y</code>安装中文支持包，然后执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sed -i '$aLANG=zh_CN.UTF-8\nLANGUAGE=zh_CN:zh:en_US:en\nLC_CTYPE="en_US.UTF-8"\nLC_ALL=en_US.UTF-8 /etc/environment</span><br></pre></td></tr></table></figure><p>在<code>/etc/environment</code>末尾添加以下几行配置，这个是永久设置环境变量</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LANG=zh_CN.UTF-8</span><br><span class="line">LANGUAGE=zh_CN:zh:en_US:en</span><br><span class="line">LC_CTYPE=<span class="string">"en_US.UTF-8"</span></span><br><span class="line">LC_ALL=en_US.UTF-8</span><br></pre></td></tr></table></figure><p>最后是<code>sudo locale-gen</code>编译生成编码相关文件，然后<code>sudo reboot</code>重启。</p><h3 id="22-ssh免密登录"><a class="markdownIt-Anchor" href="#22-ssh免密登录"></a> 2.2 ssh免密登录</h3><p>每次ssh登录都需要输入密码，这是非常烦人的事情，可以配置ssh免密登录，需要本机和服务器做一个联动，你在本机生成一个key，然后将key保存到服务器上的某个位置，之后再从本机ssh服务器时，服务器就知道了是从哪个机器访问的服务器，如果有对应的key就直接让你连接，否则需要密码。</p><p>本机输入指令<code>ssh-keygen -t rsa</code>，然后你就可以在<code>/home/usera/.ssh/id_rsa.pub</code>中查看生成的密钥，注意这个目录是在指令执行了输出结果里出现的，不是所有人都一样</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[usera@local ~]$ ssh-keygen -t rsa</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/home/usera/.ssh/id_rsa): </span><br><span class="line">Created directory '/home/usera/.ssh'.</span><br><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved in /home/usera/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /home/usera/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">39:f2:fc:70:ef:e9:bd:05:40:6e:64:b0:99:56:6e:01 usera@local</span><br><span class="line">The key's randomart image is:</span><br><span class="line">+--[ RSA 2048]----+</span><br><span class="line">|          Eo*    |</span><br><span class="line">|           @ .   |</span><br><span class="line">|          = *    |</span><br><span class="line">|         o o .   |</span><br><span class="line">|      . S     .  |</span><br><span class="line">|       + .     . |</span><br><span class="line">|        + .     .|</span><br><span class="line">|         + . o . |</span><br><span class="line">|          .o= o. |</span><br><span class="line">+-----------------+</span><br></pre></td></tr></table></figure><p>我们需要的是<code>id_rsa.pub</code>的内容，以<code>ssh-rsa</code>开头的文本，将<code>id_rsa.pub</code>的内容复制一份放到服务器的根目录的<code>.ssh/authorized_keys</code>文件中，如果没有<code>.ssh</code>目录及<code>authorized_keys</code>文件，那就创建一份，之后ssh就不需要密码了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDG79mJLYz80Q+kh7MNUH4uLc&#x2F;sBRyJPQqjOoSEA&#x2F;co2XXXXXXXXjrxcLoKySsGchi&#x2F;zALeo9aTaNZSn8nNwaIcg&#x2F;S+yxZeB6XuqJhjWxQGOonRbAPPcnOldxk&#x2F;S0J4WS+cFbp0gCmBuu17fjaQXXXXXXXXXXXXXXXXXXXXXXXXXX+N9YXXXXXXXXXXXXXXXXm37ArgxfKoh5U0W2pZhDDdeHeriK5oPu&#x2F;D8ZN36RVMQ&#x2F;kxUnuA+Kpv35MjboAjPsT6sa+RnsT&#x2F;Ftg&#x2F;ZQXOMV&#x2F;Tz7UQa7vOERjFoTzMidHhwztZuOw&#x2F;cTNpDozextbPGBxoWb7rpA0sMNLNoPAX XXXXXXXXXXX</span><br></pre></td></tr></table></figure><h2 id="3-zshoh-my-zsh安装"><a class="markdownIt-Anchor" href="#3-zshoh-my-zsh安装"></a> 3. zsh&amp;oh-my-zsh安装</h2><h3 id="31-zsh"><a class="markdownIt-Anchor" href="#31-zsh"></a> 3.1 zsh</h3><p>接下来安装zsh和oh-my-zsh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install zsh</span><br></pre></td></tr></table></figure><p>然后设置默认为zsh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure><p>重新ssh登录，会提示需要完成zsh配置，这里选<code>1</code>即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">This is the Z Shell configuration function for new users,</span><br><span class="line">zsh-newuser-install.</span><br><span class="line">You are seeing this message because you have no zsh startup files</span><br><span class="line">(the files .zshenv, .zprofile, .zshrc, .zlogin in the directory</span><br><span class="line">~).  This function can help you with a few settings that should</span><br><span class="line">make your use of the shell easier.</span><br><span class="line"></span><br><span class="line">You can:</span><br><span class="line"></span><br><span class="line">(q)  Quit and do nothing.  The function will be run again next time.</span><br><span class="line"></span><br><span class="line">(0)  Exit, creating the file ~/.zshrc containing just a comment.</span><br><span class="line">     That will prevent this function being run again.</span><br><span class="line"></span><br><span class="line">(1)  Continue to the main menu.</span><br><span class="line"></span><br><span class="line">(2)  Populate your ~/.zshrc with the configuration recommended</span><br><span class="line">     by the system administrator and exit (you will need to edit</span><br><span class="line">     the file by hand, if so desired).</span><br><span class="line"></span><br><span class="line">--- Type one of the keys in parentheses ---</span><br></pre></td></tr></table></figure><p>然后会出现一些初始配置，这里直接选<code>0</code>即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Please pick one of the following options:</span><br><span class="line"></span><br><span class="line">(1)  Configure settings for history, i.e. command lines remembered</span><br><span class="line">     and saved by the shell.  (Recommended.)</span><br><span class="line"></span><br><span class="line">(2)  Configure the new completion system.  (Recommended.)</span><br><span class="line"></span><br><span class="line">(3)  Configure how keys behave when editing command lines.  (Recommended.)</span><br><span class="line"></span><br><span class="line">(4)  Pick some of the more common shell options.  These are simple "on"</span><br><span class="line">     or "off" switches controlling the shell's features.</span><br><span class="line"></span><br><span class="line">(0)  Exit, creating a blank ~/.zshrc file.</span><br><span class="line"></span><br><span class="line">(a)  Abort all settings and start from scratch.  Note this will overwrite</span><br><span class="line">     any settings from zsh-newuser-install already in the startup file.</span><br><span class="line">     It will not alter any of your other settings, however.</span><br><span class="line"></span><br><span class="line">(q)  Quit and do nothing else.  The function will be run again next time.</span><br><span class="line">--- Type one of the keys in parentheses ---</span><br></pre></td></tr></table></figure><p>最后安装完成的结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">The function will not be run in future, but you can run</span><br><span class="line">it yourself as follows:</span><br><span class="line">  autoload -Uz zsh-newuser-install</span><br><span class="line">  zsh-newuser-install -f</span><br><span class="line"></span><br><span class="line">The code added to ~/.zshrc is marked by the lines</span><br><span class="line"><span class="meta">#</span><span class="bash"> Lines configured by zsh-newuser-install</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> End of lines configured by zsh-newuser-install</span></span><br><span class="line">You should not edit anything between these lines if you intend to</span><br><span class="line">run zsh-newuser-install again.  You may, however, edit any other part</span><br><span class="line">of the file.</span><br><span class="line"><span class="meta">#</span><span class="bash"> 此时你的用户名会改变，且UI有变化</span></span><br><span class="line"><span class="meta">VM-0-9-ubuntu%</span></span><br></pre></td></tr></table></figure><h3 id="32-oh-my-zsh"><a class="markdownIt-Anchor" href="#32-oh-my-zsh"></a> 3.2 oh-my-zsh</h3><p>然后安装oh-my-zsh，这里可能出现443问题<code>curl: (7) Failed to connect to raw.github.com port 443: Connection refused</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"</span><br></pre></td></tr></table></figure><p>翻墙查看<code>https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh</code>的内容，并将内容保存为<code>install.sh</code>，然后执行<code>sh install.sh</code>即可完成安装。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This script should be run via curl:</span></span><br><span class="line"><span class="comment">#   sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"</span></span><br><span class="line"><span class="comment"># or wget:</span></span><br><span class="line"><span class="comment">#   sh -c "$(wget -qO- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># As an alternative, you can first download the install script and run it afterwards:</span></span><br><span class="line"><span class="comment">#   wget https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh</span></span><br><span class="line"><span class="comment">#   sh install.sh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You can tweak the install behavior by setting variables when running the script. For</span></span><br><span class="line"><span class="comment"># example, to change the path to the Oh My Zsh repository:</span></span><br><span class="line"><span class="comment">#   ZSH=~/.zsh sh install.sh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Respects the following environment variables:</span></span><br><span class="line"><span class="comment">#   ZSH     - path to the Oh My Zsh repository folder (default: $HOME/.oh-my-zsh)</span></span><br><span class="line"><span class="comment">#   REPO    - name of the GitHub repo to install from (default: ohmyzsh/ohmyzsh)</span></span><br><span class="line"><span class="comment">#   REMOTE  - full remote URL of the git repo to install (default: GitHub via HTTPS)</span></span><br><span class="line"><span class="comment">#   BRANCH  - branch to check out immediately after install (default: master)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Other options:</span></span><br><span class="line"><span class="comment">#   CHSH    - 'no' means the installer will not change the default shell (default: yes)</span></span><br><span class="line"><span class="comment">#   RUNZSH  - 'no' means the installer will not run zsh after the install (default: yes)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You can also pass some arguments to the install script to set some these options:</span></span><br><span class="line"><span class="comment">#   --skip-chsh: has the same behavior as setting CHSH to 'no'</span></span><br><span class="line"><span class="comment">#   --unattended: sets both CHSH and RUNZSH to 'no'</span></span><br><span class="line"><span class="comment"># For example:</span></span><br><span class="line"><span class="comment">#   sh install.sh --unattended</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="comment"># Default settings</span></span><br><span class="line">ZSH=<span class="variable">$&#123;ZSH:-~/.oh-my-zsh&#125;</span></span><br><span class="line">REPO=<span class="variable">$&#123;REPO:-ohmyzsh/ohmyzsh&#125;</span></span><br><span class="line">REMOTE=<span class="variable">$&#123;REMOTE:-https://github.com/$&#123;REPO&#125;</span>.git&#125;</span><br><span class="line">BRANCH=<span class="variable">$&#123;BRANCH:-master&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Other options</span></span><br><span class="line">CHSH=<span class="variable">$&#123;CHSH:-yes&#125;</span></span><br><span class="line">RUNZSH=<span class="variable">$&#123;RUNZSH:-yes&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">command_exists</span></span>() &#123;</span><br><span class="line"> <span class="built_in">command</span> -v <span class="string">"<span class="variable">$@</span>"</span> &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">error</span></span>() &#123;</span><br><span class="line"> <span class="built_in">echo</span> <span class="variable">$&#123;RED&#125;</span><span class="string">"Error: <span class="variable">$@</span>"</span><span class="variable">$&#123;RESET&#125;</span> &gt;&amp;2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">setup_color</span></span>() &#123;</span><br><span class="line"> <span class="comment"># Only use colors if connected to a terminal</span></span><br><span class="line"> <span class="keyword">if</span> [ -t 1 ]; <span class="keyword">then</span></span><br><span class="line">  RED=$(<span class="built_in">printf</span> <span class="string">'\033[31m'</span>)</span><br><span class="line">  GREEN=$(<span class="built_in">printf</span> <span class="string">'\033[32m'</span>)</span><br><span class="line">  YELLOW=$(<span class="built_in">printf</span> <span class="string">'\033[33m'</span>)</span><br><span class="line">  BLUE=$(<span class="built_in">printf</span> <span class="string">'\033[34m'</span>)</span><br><span class="line">  BOLD=$(<span class="built_in">printf</span> <span class="string">'\033[1m'</span>)</span><br><span class="line">  RESET=$(<span class="built_in">printf</span> <span class="string">'\033[m'</span>)</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">  RED=<span class="string">""</span></span><br><span class="line">  GREEN=<span class="string">""</span></span><br><span class="line">  YELLOW=<span class="string">""</span></span><br><span class="line">  BLUE=<span class="string">""</span></span><br><span class="line">  BOLD=<span class="string">""</span></span><br><span class="line">  RESET=<span class="string">""</span></span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">setup_ohmyzsh</span></span>() &#123;</span><br><span class="line"> <span class="comment"># Prevent the cloned repository from having insecure permissions. Failing to do</span></span><br><span class="line"> <span class="comment"># so causes compinit() calls to fail with "command not found: compdef" errors</span></span><br><span class="line"> <span class="comment"># for users with insecure umasks (e.g., "002", allowing group writability). Note</span></span><br><span class="line"> <span class="comment"># that this will be ignored under Cygwin by default, as Windows ACLs take</span></span><br><span class="line"> <span class="comment"># precedence over umasks except for filesystems mounted with option "noacl".</span></span><br><span class="line"> <span class="built_in">umask</span> g-w,o-w</span><br><span class="line"></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;BLUE&#125;</span>Cloning Oh My Zsh...<span class="variable">$&#123;RESET&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"> command_exists git || &#123;</span><br><span class="line">  error <span class="string">"git is not installed"</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> [ <span class="string">"<span class="variable">$OSTYPE</span>"</span> = cygwin ] &amp;&amp; git --version | grep -q msysgit; <span class="keyword">then</span></span><br><span class="line">  error <span class="string">"Windows/MSYS Git is not supported on Cygwin"</span></span><br><span class="line">  error <span class="string">"Make sure the Cygwin git package is installed and is first on the \$PATH"</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"> git <span class="built_in">clone</span> -c core.eol=lf -c core.autocrlf=<span class="literal">false</span> \</span><br><span class="line">  -c fsck.zeroPaddedFilemode=ignore \</span><br><span class="line">  -c fetch.fsck.zeroPaddedFilemode=ignore \</span><br><span class="line">  -c receive.fsck.zeroPaddedFilemode=ignore \</span><br><span class="line">  --depth=1 --branch <span class="string">"<span class="variable">$BRANCH</span>"</span> <span class="string">"<span class="variable">$REMOTE</span>"</span> <span class="string">"<span class="variable">$ZSH</span>"</span> || &#123;</span><br><span class="line">  error <span class="string">"git clone of oh-my-zsh repo failed"</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">echo</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">setup_zshrc</span></span>() &#123;</span><br><span class="line"> <span class="comment"># Keep most recent old .zshrc at .zshrc.pre-oh-my-zsh, and older ones</span></span><br><span class="line"> <span class="comment"># with datestamp of installation that moved them aside, so we never actually</span></span><br><span class="line"> <span class="comment"># destroy a user's original zshrc</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;BLUE&#125;</span>Looking for an existing zsh config...<span class="variable">$&#123;RESET&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># Must use this exact name so uninstall.sh can find it</span></span><br><span class="line"> OLD_ZSHRC=~/.zshrc.pre-oh-my-zsh</span><br><span class="line"> <span class="keyword">if</span> [ -f ~/.zshrc ] || [ -h ~/.zshrc ]; <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">if</span> [ -e <span class="string">"<span class="variable">$OLD_ZSHRC</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">   OLD_OLD_ZSHRC=<span class="string">"<span class="variable">$&#123;OLD_ZSHRC&#125;</span>-<span class="variable">$(date +%Y-%m-%d_%H-%M-%S)</span>"</span></span><br><span class="line">   <span class="keyword">if</span> [ -e <span class="string">"<span class="variable">$OLD_OLD_ZSHRC</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    error <span class="string">"<span class="variable">$OLD_OLD_ZSHRC</span> exists. Can't back up <span class="variable">$&#123;OLD_ZSHRC&#125;</span>"</span></span><br><span class="line">    error <span class="string">"re-run the installer again in a couple of seconds"</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line">   mv <span class="string">"<span class="variable">$OLD_ZSHRC</span>"</span> <span class="string">"<span class="variable">$&#123;OLD_OLD_ZSHRC&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;YELLOW&#125;</span>Found old ~/.zshrc.pre-oh-my-zsh."</span> \</span><br><span class="line">    <span class="string">"<span class="variable">$&#123;GREEN&#125;</span>Backing up to <span class="variable">$&#123;OLD_OLD_ZSHRC&#125;</span><span class="variable">$&#123;RESET&#125;</span>"</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;YELLOW&#125;</span>Found ~/.zshrc.<span class="variable">$&#123;RESET&#125;</span> <span class="variable">$&#123;GREEN&#125;</span>Backing up to <span class="variable">$&#123;OLD_ZSHRC&#125;</span><span class="variable">$&#123;RESET&#125;</span>"</span></span><br><span class="line">  mv ~/.zshrc <span class="string">"<span class="variable">$OLD_ZSHRC</span>"</span></span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;GREEN&#125;</span>Using the Oh My Zsh template file and adding it to ~/.zshrc.<span class="variable">$&#123;RESET&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"> cp <span class="string">"<span class="variable">$ZSH</span>/templates/zshrc.zsh-template"</span> ~/.zshrc</span><br><span class="line"> sed <span class="string">"/^export ZSH=/ c\\</span></span><br><span class="line"><span class="string">export ZSH=\"<span class="variable">$ZSH</span>\"</span></span><br><span class="line"><span class="string">"</span> ~/.zshrc &gt; ~/.zshrc-omztemp</span><br><span class="line"> mv -f ~/.zshrc-omztemp ~/.zshrc</span><br><span class="line"></span><br><span class="line"> <span class="built_in">echo</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">setup_shell</span></span>() &#123;</span><br><span class="line"> <span class="comment"># Skip setup if the user wants or stdin is closed (not running interactively).</span></span><br><span class="line"> <span class="keyword">if</span> [ <span class="variable">$CHSH</span> = no ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># If this user's login shell is already "zsh", do not attempt to switch.</span></span><br><span class="line"> <span class="keyword">if</span> [ <span class="string">"<span class="variable">$(basename "$SHELL")</span>"</span> = <span class="string">"zsh"</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># If this platform doesn't provide a "chsh" command, bail out.</span></span><br><span class="line"> <span class="keyword">if</span> ! command_exists chsh; <span class="keyword">then</span></span><br><span class="line">  cat &lt;&lt;-EOF</span><br><span class="line">   I can<span class="string">'t change your shell automatically because this system does not have chsh.</span></span><br><span class="line"><span class="string">   $&#123;BLUE&#125;Please manually change your default shell to zsh$&#123;RESET&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="string">  return</span></span><br><span class="line"><span class="string"> fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> echo "$&#123;BLUE&#125;Time to change your default shell to zsh:$&#123;RESET&#125;"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> # Prompt for user choice on changing the default login shell</span></span><br><span class="line"><span class="string"> printf "$&#123;YELLOW&#125;Do you want to change your default shell to zsh? [Y/n]$&#123;RESET&#125; "</span></span><br><span class="line"><span class="string"> read opt</span></span><br><span class="line"><span class="string"> case $opt in</span></span><br><span class="line"><span class="string">  y*|Y*|"") echo "Changing the shell..." ;;</span></span><br><span class="line"><span class="string">  n*|N*) echo "Shell change skipped."; return ;;</span></span><br><span class="line"><span class="string">  *) echo "Invalid choice. Shell change skipped."; return ;;</span></span><br><span class="line"><span class="string"> esac</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> # Check if we'</span>re running on Termux</span><br><span class="line"> <span class="keyword">case</span> <span class="string">"<span class="variable">$PREFIX</span>"</span> <span class="keyword">in</span></span><br><span class="line">  *com.termux*) termux=<span class="literal">true</span>; zsh=zsh ;;</span><br><span class="line">  *) termux=<span class="literal">false</span> ;;</span><br><span class="line"> <span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> [ <span class="string">"<span class="variable">$termux</span>"</span> != <span class="literal">true</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="comment"># Test for the right location of the "shells" file</span></span><br><span class="line">  <span class="keyword">if</span> [ -f /etc/shells ]; <span class="keyword">then</span></span><br><span class="line">   shells_file=/etc/shells</span><br><span class="line">  <span class="keyword">elif</span> [ -f /usr/share/defaults/etc/shells ]; <span class="keyword">then</span> <span class="comment"># Solus OS</span></span><br><span class="line">   shells_file=/usr/share/defaults/etc/shells</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">   error <span class="string">"could not find /etc/shells file. Change your default shell manually."</span></span><br><span class="line">   <span class="built_in">return</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Get the path to the right zsh binary</span></span><br><span class="line">  <span class="comment"># 1. Use the most preceding one based on $PATH, then check that it's in the shells file</span></span><br><span class="line">  <span class="comment"># 2. If that fails, get a zsh path from the shells file, then check it actually exists</span></span><br><span class="line">  <span class="keyword">if</span> ! zsh=$(<span class="built_in">which</span> zsh) || ! grep -qx <span class="string">"<span class="variable">$zsh</span>"</span> <span class="string">"<span class="variable">$shells_file</span>"</span>; <span class="keyword">then</span></span><br><span class="line">   <span class="keyword">if</span> ! zsh=$(grep <span class="string">'^/.*/zsh$'</span> <span class="string">"<span class="variable">$shells_file</span>"</span> | tail -1) || [ ! -f <span class="string">"<span class="variable">$zsh</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    error <span class="string">"no zsh binary found or not present in '<span class="variable">$shells_file</span>'"</span></span><br><span class="line">    error <span class="string">"change your default shell manually."</span></span><br><span class="line">    <span class="built_in">return</span></span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># We're going to change the default shell, so back up the current one</span></span><br><span class="line"> <span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$SHELL</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$SHELL</span> &gt; ~/.shell.pre-oh-my-zsh</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">  grep <span class="string">"^<span class="variable">$USER</span>:"</span> /etc/passwd | awk -F: <span class="string">'&#123;print $7&#125;'</span> &gt; ~/.shell.pre-oh-my-zsh</span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># Actually change the default shell to zsh</span></span><br><span class="line"> <span class="keyword">if</span> ! chsh -s <span class="string">"<span class="variable">$zsh</span>"</span>; <span class="keyword">then</span></span><br><span class="line">  error <span class="string">"chsh command unsuccessful. Change your default shell manually."</span></span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">  <span class="built_in">export</span> SHELL=<span class="string">"<span class="variable">$zsh</span>"</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;GREEN&#125;</span>Shell successfully changed to '<span class="variable">$zsh</span>'.<span class="variable">$&#123;RESET&#125;</span>"</span></span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"> <span class="built_in">echo</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line"> <span class="comment"># Run as unattended if stdin is closed</span></span><br><span class="line"> <span class="keyword">if</span> [ ! -t 0 ]; <span class="keyword">then</span></span><br><span class="line">  RUNZSH=no</span><br><span class="line">  CHSH=no</span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># Parse arguments</span></span><br><span class="line"> <span class="keyword">while</span> [ <span class="variable">$#</span> -gt 0 ]; <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">   --unattended) RUNZSH=no; CHSH=no ;;</span><br><span class="line">   --skip-chsh) CHSH=no ;;</span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line">  <span class="built_in">shift</span></span><br><span class="line"> <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"> setup_color</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> ! command_exists zsh; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;YELLOW&#125;</span>Zsh is not installed.<span class="variable">$&#123;RESET&#125;</span> Please install zsh first."</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> [ -d <span class="string">"<span class="variable">$ZSH</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">  cat &lt;&lt;-EOF</span><br><span class="line">   <span class="variable">$&#123;YELLOW&#125;</span>You already have Oh My Zsh installed.<span class="variable">$&#123;RESET&#125;</span></span><br><span class="line">   You<span class="string">'ll need to remove '</span><span class="variable">$ZSH</span><span class="string">' if you want to reinstall.</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="string">  exit 1</span></span><br><span class="line"><span class="string"> fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> setup_ohmyzsh</span></span><br><span class="line"><span class="string"> setup_zshrc</span></span><br><span class="line"><span class="string"> setup_shell</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> printf "$GREEN"</span></span><br><span class="line"><span class="string"> cat &lt;&lt;-'</span>EOF<span class="string">'</span></span><br><span class="line"><span class="string">           __                                     __</span></span><br><span class="line"><span class="string">    ____  / /_     ____ ___  __  __   ____  _____/ /_</span></span><br><span class="line"><span class="string">   / __ \/ __ \   / __ `__ \/ / / /  /_  / / ___/ __ \</span></span><br><span class="line"><span class="string">  / /_/ / / / /  / / / / / / /_/ /    / /_(__  ) / / /</span></span><br><span class="line"><span class="string">  \____/_/ /_/  /_/ /_/ /_/\__, /    /___/____/_/ /_/</span></span><br><span class="line"><span class="string">                          /____/                       ....is now installed!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  Please look over the ~/.zshrc file to select plugins, themes, and options.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  p.s. Follow us on https://twitter.com/ohmyzsh</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  p.p.s. Get stickers, shirts, and coffee mugs at https://shop.planetargon.com/collections/oh-my-zsh</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="string"> printf "$RESET"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> if [ $RUNZSH = no ]; then</span></span><br><span class="line"><span class="string">  echo "$&#123;YELLOW&#125;Run zsh to try it out.$&#123;RESET&#125;"</span></span><br><span class="line"><span class="string">  exit</span></span><br><span class="line"><span class="string"> fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> exec zsh -l</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">main "$@"</span></span><br></pre></td></tr></table></figure><p>安装完成结果如下：</p><p><img src="http://114.116.9.65:7777/images/2020/01/18/ohmyzsh.png" alt="ohmyzsh.png" /></p><!--  --><p>oh-my-zsh安装成功会在根目录下重写<code>.zshrc</code>文件，这是zsh的配置文件，可以在其中修改主题以及增加插件等等</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 比如设置主题为agnoster</span></span><br><span class="line">ZSH_THEME="agnoster"</span><br></pre></td></tr></table></figure><p>以及安装命令提示插件<code>zsh-autosuggestions</code>，首先在终端里执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure><p>然后修改<code>.zshrc</code>文件，修改完记得<code>source .zshrc</code>，使配置生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plugins=(</span><br><span class="line">    git</span><br><span class="line">    zsh-autosuggestions</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>最终效果如下，包括命令提示功能</p><!--  --><p><img src="http://114.116.9.65:7777/images/2020/01/18/auto.png" alt="auto.png" /></p><h2 id="4-linuxbrew安装"><a class="markdownIt-Anchor" href="#4-linuxbrew安装"></a> 4. Linuxbrew安装</h2><p><strong>注意先安装zsh再安装linuxbrew，否则可能出现brew无法在zsh中使用</strong></p><h3 id="41-创建非root用户可选"><a class="markdownIt-Anchor" href="#41-创建非root用户可选"></a> 4.1 创建非root用户（可选）</h3><p>安装Linuxbrew参考官网不一定有效，因为Linuxbrew不能在root用户下安装，所以你如果之前登陆的是root用户需要创建一个新的非root用户，通过以下几个指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建your_user，需要设置密码</span></span><br><span class="line">sudo adduser your_user</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加your_user到sudo组</span></span><br><span class="line">sudo adduser your_user sudo</span><br></pre></td></tr></table></figure><p>然后修改系统中/etc/sudoers文件的方法分配用户权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +w /etc/sudoers</span><br><span class="line">sudo vim /etc/sudoers</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> User privilege specification</span></span><br><span class="line">root　ALL=(ALL:ALL) ALL</span><br><span class="line"><span class="meta">#</span><span class="bash"> 新增your_user</span></span><br><span class="line">your_user ALL=(ALL:ALL) ALL</span><br></pre></td></tr></table></figure><p>将sudoers文件的操作权限还原只读模式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod -w /etc/sudoers</span><br></pre></td></tr></table></figure><p>最后再登录<code>your_user</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - your_user</span><br></pre></td></tr></table></figure><h3 id="42-linuxbrew"><a class="markdownIt-Anchor" href="#42-linuxbrew"></a> 4.2 Linuxbrew</h3><p>如果已经是非root用户则可以跳过以上创建新用户步骤。</p><p>按照Linuxbrew官网的指令安装brew，在这里可能会出现问题，我的华为云服务器这里会报443错误，无法访问<code>raw.githubusercontent.com</code>，而腾讯云没有问题，安装成功，需要几分钟。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c "$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)"</span><br></pre></td></tr></table></figure><p>如果出现443错误<code>Failed to connect to raw.githubusercontent.com port 443: Operation timed out</code>，则直接将以下内容保存为<code>brew_install.rb</code>，然后执行<code>ruby brew_install.rb</code>即可，如果系统没有ruby，则执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ruby</span><br></pre></td></tr></table></figure><p>以下内容来自于<code>https://raw.githubusercontent.com/Linuxbrew/install/master/install</code>，如有更新，请翻墙访问</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line"><span class="comment"># On macOS, this script installs to /usr/local only.</span></span><br><span class="line"><span class="comment"># On Linux, it installs to /home/linuxbrew/.linuxbrew if you have sudo access</span></span><br><span class="line"><span class="comment"># and ~/.linuxbrew otherwise.</span></span><br><span class="line"><span class="comment"># To install elsewhere (which is unsupported) you can untar</span></span><br><span class="line"><span class="comment"># https://github.com/Homebrew/brew/tarball/master anywhere you like.</span></span><br><span class="line"><span class="comment"># or set the environment variable HOMEBREW_PREFIX.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">"fileutils"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mac?</span></span></span><br><span class="line">  RUBY_PLATFORM[<span class="regexp">/darwin/</span>]</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">BREW_REPO = <span class="string">"https://github.com/Homebrew/brew"</span>.freeze</span><br><span class="line"><span class="keyword">if</span> mac?</span><br><span class="line">  HOMEBREW_PREFIX = <span class="string">"/usr/local"</span>.freeze</span><br><span class="line">  HOMEBREW_REPOSITORY = <span class="string">"/usr/local/Homebrew"</span>.freeze</span><br><span class="line">  HOMEBREW_CACHE = <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"HOME"</span>]&#125;</span>/Library/Caches/Homebrew"</span>.freeze</span><br><span class="line">  HOME_CACHE = <span class="literal">nil</span></span><br><span class="line">  CHOWN = <span class="string">"/usr/sbin/chown"</span>.freeze</span><br><span class="line">  CHGRP = <span class="string">"/usr/bin/chgrp"</span>.freeze</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  HOMEBREW_PREFIX_DEFAULT = <span class="string">"/home/linuxbrew/.linuxbrew"</span>.freeze</span><br><span class="line">  HOME_CACHE = <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"HOME"</span>]&#125;</span>/.cache"</span>.freeze</span><br><span class="line">  HOMEBREW_CACHE = <span class="string">"<span class="subst">#&#123;HOME_CACHE&#125;</span>/Homebrew"</span>.freeze</span><br><span class="line">  CHOWN = <span class="string">"/bin/chown"</span>.freeze</span><br><span class="line">  CHGRP = <span class="string">"/bin/chgrp"</span>.freeze</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> bump version when new macOS is released</span></span><br><span class="line">MACOS_LATEST_SUPPORTED = <span class="string">"10.15"</span>.freeze</span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> bump version when new macOS is released</span></span><br><span class="line">MACOS_OLDEST_SUPPORTED = <span class="string">"10.13"</span>.freeze</span><br><span class="line"></span><br><span class="line"><span class="comment"># no analytics during installation</span></span><br><span class="line">ENV[<span class="string">"HOMEBREW_NO_ANALYTICS_THIS_RUN"</span>] = <span class="string">"1"</span></span><br><span class="line">ENV[<span class="string">"HOMEBREW_NO_ANALYTICS_MESSAGE_OUTPUT"</span>] = <span class="string">"1"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># get nicer global variables</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">"English"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Tty</span></span></span><br><span class="line">  module_function</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">blue</span></span></span><br><span class="line">    bold <span class="number">34</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">red</span></span></span><br><span class="line">    bold <span class="number">31</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">reset</span></span></span><br><span class="line">    escape <span class="number">0</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">bold</span><span class="params">(code = <span class="number">39</span>)</span></span></span><br><span class="line">    escape <span class="string">"1;<span class="subst">#&#123;code&#125;</span>"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">underline</span></span></span><br><span class="line">    escape <span class="string">"4;39"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">escape</span><span class="params">(code)</span></span></span><br><span class="line">    <span class="string">"\033[<span class="subst">#&#123;code&#125;</span>m"</span> <span class="keyword">if</span> STDOUT.tty?</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Array</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">shell_s</span></span></span><br><span class="line">    cp = dup</span><br><span class="line">    first = cp.shift</span><br><span class="line">    cp.map &#123; <span class="params">|arg|</span> arg.gsub <span class="string">" "</span>, <span class="string">"\\ "</span> &#125;.unshift(first).join(<span class="string">" "</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ohai</span><span class="params">(*args)</span></span></span><br><span class="line">  puts <span class="string">"<span class="subst">#&#123;Tty.blue&#125;</span>==&gt;<span class="subst">#&#123;Tty.bold&#125;</span> <span class="subst">#&#123;args.shell_s&#125;</span><span class="subst">#&#123;Tty.reset&#125;</span>"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">warn</span><span class="params">(warning)</span></span></span><br><span class="line">  puts <span class="string">"<span class="subst">#&#123;Tty.red&#125;</span>Warning<span class="subst">#&#123;Tty.reset&#125;</span>: <span class="subst">#&#123;warning.chomp&#125;</span>"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">system</span><span class="params">(*args)</span></span></span><br><span class="line">  abort <span class="string">"Failed during: <span class="subst">#&#123;args.shell_s&#125;</span>"</span> <span class="keyword">unless</span> Kernel.system(*args)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sudo?</span></span></span><br><span class="line">  <span class="keyword">return</span> @have_sudo <span class="keyword">unless</span> @have_sudo.<span class="literal">nil</span>?</span><br><span class="line"></span><br><span class="line">  Kernel.system <span class="string">"/usr/bin/sudo"</span>, <span class="string">"-l"</span>, <span class="string">"mkdir"</span></span><br><span class="line">  @have_sudo = $CHILD_STATUS.success?</span><br><span class="line"><span class="keyword">rescue</span> Interrupt</span><br><span class="line">  exit</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sudo</span><span class="params">(*args)</span></span></span><br><span class="line">  <span class="keyword">if</span> sudo?</span><br><span class="line">    args.unshift(<span class="string">"-A"</span>) <span class="keyword">unless</span> ENV[<span class="string">"SUDO_ASKPASS"</span>].<span class="literal">nil</span>?</span><br><span class="line">    ohai <span class="string">"/usr/bin/sudo"</span>, *args</span><br><span class="line">    system <span class="string">"/usr/bin/sudo"</span>, *args</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    ohai *args</span><br><span class="line">    system *args</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getc</span></span></span><br><span class="line">  system <span class="string">"/bin/stty raw -echo"</span></span><br><span class="line">  <span class="keyword">if</span> STDIN.respond_to?(<span class="symbol">:getbyte</span>)</span><br><span class="line">    STDIN.getbyte</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    STDIN.getc</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">ensure</span></span><br><span class="line">  system <span class="string">"/bin/stty -raw echo"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wait_for_user</span></span></span><br><span class="line">  puts</span><br><span class="line">  puts <span class="string">"Press RETURN to continue or any other key to abort"</span></span><br><span class="line">  c = getc</span><br><span class="line">  <span class="comment"># we test for \r and \n because some stuff does \r instead</span></span><br><span class="line">  abort <span class="keyword">unless</span> (c == <span class="number">13</span>) <span class="params">||</span> (c == <span class="number">10</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Version</span></span></span><br><span class="line">  <span class="keyword">include</span> Comparable</span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:parts</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(str)</span></span></span><br><span class="line">    @parts = str.split(<span class="string">"."</span>).map(&amp;<span class="symbol">:to_i</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">&lt;=&gt;</span><span class="params">(other)</span></span></span><br><span class="line">    parts &lt;=&gt; <span class="keyword">self</span><span class="class">.<span class="keyword">class</span>.<span class="title">new</span>(<span class="title">other</span>).<span class="title">parts</span></span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">to_s</span></span></span><br><span class="line">    parts.join(<span class="string">"."</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">macos_version</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">unless</span> mac?</span><br><span class="line"></span><br><span class="line">  @macos_version <span class="params">||</span>= Version.new(<span class="string">`/usr/bin/sw_vers -productVersion`</span>.chomp[<span class="regexp">/10\.\d+/</span>])</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">should_install_command_line_tools?</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span> <span class="keyword">unless</span> mac?</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> macos_version &gt; <span class="string">"10.13"</span></span><br><span class="line">    !File.exist?(<span class="string">"/Library/Developer/CommandLineTools/usr/bin/git"</span>)</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    !File.exist?(<span class="string">"/Library/Developer/CommandLineTools/usr/bin/git"</span>) <span class="params">||</span></span><br><span class="line">      !File.exist?(<span class="string">"/usr/include/iconv.h"</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_only_chmod?</span><span class="params">(path)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span> <span class="keyword">unless</span> File.directory?(path)</span><br><span class="line"></span><br><span class="line">  mode = File.stat(path).mode &amp; <span class="number">0777</span></span><br><span class="line">  <span class="comment"># u = (mode &gt;&gt; 6) &amp; 07</span></span><br><span class="line">  <span class="comment"># g = (mode &gt;&gt; 3) &amp; 07</span></span><br><span class="line">  <span class="comment"># o = (mode &gt;&gt; 0) &amp; 07</span></span><br><span class="line">  mode != <span class="number">0755</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chmod?</span><span class="params">(path)</span></span></span><br><span class="line">  File.exist?(path) &amp;&amp; !(File.readable?(path) &amp;&amp; File.writable?(path) &amp;&amp; File.executable?(path))</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chown?</span><span class="params">(path)</span></span></span><br><span class="line">  !File.owned?(path)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chgrp?</span><span class="params">(path)</span></span></span><br><span class="line">  !File.grpowned?(path)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># return the shell profile file based on users' preference shell</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell_profile</span></span></span><br><span class="line">  <span class="keyword">case</span> ENV[<span class="string">"SHELL"</span>]</span><br><span class="line">  <span class="keyword">when</span> %r&#123;<span class="regexp">/bash$&#125; then File.readable?("<span class="subst">#&#123;ENV[<span class="string">"HOME"</span>]&#125;</span>/</span>.bash_profile<span class="string">") ? "</span>~<span class="regexp">/.bash_profile" : "~/</span>.profile<span class="string">"</span></span><br><span class="line"><span class="string">  when %r&#123;/zsh$&#125; then "</span>~<span class="regexp">/.zprofile"</span></span><br><span class="line"><span class="regexp">  else "~/</span>.profile<span class="string">"</span></span><br><span class="line"><span class="string">  end</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># USER isn't always set so provide a fall back for the installer and subprocesses.</span></span><br><span class="line"><span class="string">ENV["</span>USER<span class="string">"] ||= `id -un`.chomp</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Invalidate sudo timestamp before exiting (if it wasn't active before).</span></span><br><span class="line"><span class="string">Kernel.system "</span>/usr/bin/sudo -n -v <span class="number">2</span>&gt;<span class="regexp">/dev/null</span><span class="string">"</span></span><br><span class="line"><span class="string">at_exit &#123; Kernel.system "</span>/usr/bin/sudo<span class="string">", "</span>-k<span class="string">" &#125; unless $CHILD_STATUS.success?</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># The block form of Dir.chdir fails later if Dir.CWD doesn't exist which I</span></span><br><span class="line"><span class="string"># guess is fair enough. Also sudo prints a warning message for no good reason</span></span><br><span class="line"><span class="string">Dir.chdir "</span>/usr<span class="string">"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">####################################################################### script</span></span><br><span class="line"><span class="string">unless mac?</span></span><br><span class="line"><span class="string">  if File.writable?(HOMEBREW_PREFIX_DEFAULT) || File.writable?("</span>/home/linuxbrew<span class="string">") || File.writable?("</span>/home<span class="string">")</span></span><br><span class="line"><span class="string">    HOMEBREW_PREFIX = HOMEBREW_PREFIX_DEFAULT.freeze</span></span><br><span class="line"><span class="string">  else</span></span><br><span class="line"><span class="string">    sudo_output = `/usr/bin/sudo -n -l mkdir 2&gt;&amp;1`</span></span><br><span class="line"><span class="string">    if !$CHILD_STATUS.success? &amp;&amp; sudo_output == "</span><span class="symbol">sudo:</span> a password is required\n<span class="string">"</span></span><br><span class="line"><span class="string">      ohai "</span>Select the Homebrew installation directory<span class="string">"</span></span><br><span class="line"><span class="string">      puts "</span>- <span class="comment">#&#123;Tty.bold&#125;Enter your password#&#123;Tty.reset&#125; to install to #&#123;Tty.underline&#125;#&#123;HOMEBREW_PREFIX_DEFAULT&#125;#&#123;Tty.reset&#125; (#&#123;Tty.bold&#125;recommended#&#123;Tty.reset&#125;)"</span></span><br><span class="line">      puts <span class="string">"- <span class="subst">#&#123;Tty.bold&#125;</span>Press Control-D<span class="subst">#&#123;Tty.reset&#125;</span> to install to <span class="subst">#&#123;Tty.underline&#125;</span><span class="subst">#&#123;ENV[<span class="string">"HOME"</span>]&#125;</span>/.linuxbrew<span class="subst">#&#123;Tty.reset&#125;</span>"</span></span><br><span class="line">      puts <span class="string">"- <span class="subst">#&#123;Tty.bold&#125;</span>Press Control-C<span class="subst">#&#123;Tty.reset&#125;</span> to cancel installation"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> sudo?</span><br><span class="line">      HOMEBREW_PREFIX = HOMEBREW_PREFIX_DEFAULT.freeze</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      HOMEBREW_PREFIX = <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"HOME"</span>]&#125;</span>/.linuxbrew"</span>.freeze</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  HOMEBREW_REPOSITORY = <span class="string">"<span class="subst">#&#123;HOMEBREW_PREFIX&#125;</span>/Homebrew"</span>.freeze</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> mac? &amp;&amp; macos_version &lt; <span class="string">"10.7"</span></span><br><span class="line">  abort &lt;&lt;-EOABORT</span><br><span class="line">Your Mac OS X version is too old. <span class="symbol">See:</span></span><br><span class="line">  <span class="comment">#&#123;Tty.underline&#125;https://github.com/mistydemeo/tigerbrew#&#123;Tty.reset&#125;"</span></span><br><span class="line">  EOABORT</span><br><span class="line"><span class="keyword">elsif</span> mac? &amp;&amp; macos_version &lt; <span class="string">"10.9"</span></span><br><span class="line">  abort <span class="string">"Your OS X version is too old"</span></span><br><span class="line"><span class="keyword">elsif</span> Process.uid.zero?</span><br><span class="line">  abort <span class="string">"Don't run this as root!"</span></span><br><span class="line"><span class="keyword">elsif</span> mac? &amp;&amp; !<span class="string">`dsmemberutil checkmembership -U "<span class="subst">#&#123;ENV[<span class="string">"USER"</span>]&#125;</span>" -G admin`</span>.<span class="keyword">include</span>?(<span class="string">"user is a member"</span>)</span><br><span class="line">  abort <span class="string">"This script requires the user <span class="subst">#&#123;ENV[<span class="string">"USER"</span>]&#125;</span> to be an Administrator."</span></span><br><span class="line"><span class="keyword">elsif</span> File.directory?(HOMEBREW_PREFIX) &amp;&amp; (!File.executable? HOMEBREW_PREFIX)</span><br><span class="line">  abort &lt;&lt;-EOABORT</span><br><span class="line">The Homebrew prefix, <span class="comment">#&#123;HOMEBREW_PREFIX&#125;, exists but is not searchable. If this is</span></span><br><span class="line"><span class="keyword">not</span> intentional, please restore the default permissions <span class="keyword">and</span> try running the</span><br><span class="line">installer <span class="symbol">again:</span></span><br><span class="line">    sudo chmod <span class="number">775</span> <span class="comment">#&#123;HOMEBREW_PREFIX&#125;</span></span><br><span class="line">  EOABORT</span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> bump version when new macOS is released</span></span><br><span class="line"><span class="keyword">elsif</span> mac? &amp;&amp; (macos_version &gt; MACOS_LATEST_SUPPORTED <span class="params">||</span> macos_version &lt; MACOS_OLDEST_SUPPORTED)</span><br><span class="line">  who = <span class="string">"We"</span></span><br><span class="line">  <span class="keyword">if</span> macos_version &gt; MACOS_LATEST_SUPPORTED</span><br><span class="line">    what = <span class="string">"pre-release version"</span></span><br><span class="line">  <span class="keyword">elsif</span> macos_version &lt; MACOS_OLDEST_SUPPORTED</span><br><span class="line">    who &lt;&lt; <span class="string">" (and Apple)"</span></span><br><span class="line">    what = <span class="string">"old version"</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  ohai <span class="string">"You are using macOS <span class="subst">#&#123;macos_version.parts.join(<span class="string">"."</span>)&#125;</span>."</span></span><br><span class="line">  ohai <span class="string">"<span class="subst">#&#123;who&#125;</span> do not provide support for this <span class="subst">#&#123;what&#125;</span>."</span></span><br><span class="line"></span><br><span class="line">  puts &lt;&lt;-EOS</span><br><span class="line">This installation may <span class="keyword">not</span> succeed.</span><br><span class="line">After installation, you will encounter build failures with some formulae.</span><br><span class="line">Please create pull requests instead of asking <span class="keyword">for</span> help on Homebrew<span class="string">'s GitHub,</span></span><br><span class="line"><span class="string">Discourse, Twitter or IRC. You are responsible for resolving any issues you</span></span><br><span class="line"><span class="string">experience while you are running this <span class="subst">#&#123;what&#125;</span>.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  EOS</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ohai "This script will install:"</span></span><br><span class="line"><span class="string">puts "<span class="subst">#&#123;HOMEBREW_PREFIX&#125;</span>/bin/brew"</span></span><br><span class="line"><span class="string">puts "<span class="subst">#&#123;HOMEBREW_PREFIX&#125;</span>/share/doc/homebrew"</span></span><br><span class="line"><span class="string">puts "<span class="subst">#&#123;HOMEBREW_PREFIX&#125;</span>/share/man/man1/brew.1"</span></span><br><span class="line"><span class="string">puts "<span class="subst">#&#123;HOMEBREW_PREFIX&#125;</span>/share/zsh/site-functions/_brew"</span></span><br><span class="line"><span class="string">puts "<span class="subst">#&#123;HOMEBREW_PREFIX&#125;</span>/etc/bash_completion.d/brew"</span></span><br><span class="line"><span class="string">puts "<span class="subst">#&#123;HOMEBREW_CACHE&#125;</span>/"</span></span><br><span class="line"><span class="string">puts HOMEBREW_REPOSITORY.to_s</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Keep relatively in sync with</span></span><br><span class="line"><span class="string"># https://github.com/Homebrew/brew/blob/master/Library/Homebrew/keg.rb</span></span><br><span class="line"><span class="string">group_chmods = %w[bin etc include lib sbin share opt var</span></span><br><span class="line"><span class="string">                  Frameworks</span></span><br><span class="line"><span class="string">                  etc/bash_completion.d lib/pkgconfig</span></span><br><span class="line"><span class="string">                  share/aclocal share/doc share/info share/locale share/man</span></span><br><span class="line"><span class="string">                  share/man/man1 share/man/man2 share/man/man3 share/man/man4</span></span><br><span class="line"><span class="string">                  share/man/man5 share/man/man6 share/man/man7 share/man/man8</span></span><br><span class="line"><span class="string">                  var/log var/homebrew var/homebrew/linked</span></span><br><span class="line"><span class="string">                  bin/brew]</span></span><br><span class="line"><span class="string">               .map &#123; |d| File.join(HOMEBREW_PREFIX, d) &#125;</span></span><br><span class="line"><span class="string">               .select &#123; |d| chmod?(d) &#125;</span></span><br><span class="line"><span class="string"># zsh refuses to read from these directories if group writable</span></span><br><span class="line"><span class="string">zsh_dirs = %w[share/zsh share/zsh/site-functions]</span></span><br><span class="line"><span class="string">           .map &#123; |d| File.join(HOMEBREW_PREFIX, d) &#125;</span></span><br><span class="line"><span class="string">mkdirs = %w[bin etc include lib sbin share var opt</span></span><br><span class="line"><span class="string">            share/zsh share/zsh/site-functions</span></span><br><span class="line"><span class="string">            var/homebrew var/homebrew/linked</span></span><br><span class="line"><span class="string">            Cellar Caskroom Homebrew Frameworks]</span></span><br><span class="line"><span class="string">         .map &#123; |d| File.join(HOMEBREW_PREFIX, d) &#125;</span></span><br><span class="line"><span class="string">         .reject &#123; |d| File.directory?(d) &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">user_chmods = zsh_dirs.select &#123; |d| user_only_chmod?(d) &#125;</span></span><br><span class="line"><span class="string">chmods = group_chmods + user_chmods</span></span><br><span class="line"><span class="string">chowns = chmods.select &#123; |d| chown?(d) &#125;</span></span><br><span class="line"><span class="string">chgrps = chmods.select &#123; |d| chgrp?(d) &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">group = `id -gn`.chomp</span></span><br><span class="line"><span class="string">abort "error: id -gn: failed" unless $CHILD_STATUS.success? &amp;&amp; !group.empty?</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">unless group_chmods.empty?</span></span><br><span class="line"><span class="string">  ohai "The following existing directories will be made group writable:"</span></span><br><span class="line"><span class="string">  puts(*group_chmods)</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">unless user_chmods.empty?</span></span><br><span class="line"><span class="string">  ohai "The following existing directories will be made writable by user only:"</span></span><br><span class="line"><span class="string">  puts(*user_chmods)</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">unless chowns.empty?</span></span><br><span class="line"><span class="string">  ohai "The following existing directories will have their owner set to <span class="subst">#&#123;Tty.underline&#125;</span><span class="subst">#&#123;ENV[<span class="string">"USER"</span>]&#125;</span><span class="subst">#&#123;Tty.reset&#125;</span>:"</span></span><br><span class="line"><span class="string">  puts(*chowns)</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">unless chgrps.empty?</span></span><br><span class="line"><span class="string">  ohai "The following existing directories will have their group set to <span class="subst">#&#123;Tty.underline&#125;</span><span class="subst">#&#123;group&#125;</span><span class="subst">#&#123;Tty.reset&#125;</span>:"</span></span><br><span class="line"><span class="string">  puts(*chgrps)</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">unless mkdirs.empty?</span></span><br><span class="line"><span class="string">  ohai "The following new directories will be created:"</span></span><br><span class="line"><span class="string">  puts(*mkdirs)</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">if should_install_command_line_tools?</span></span><br><span class="line"><span class="string">  ohai "The Xcode Command Line Tools will be installed."</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">wait_for_user if STDIN.tty? &amp;&amp; !ENV["CI"]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if File.directory? HOMEBREW_PREFIX</span></span><br><span class="line"><span class="string">  sudo "/bin/chmod", "u+rwx", *chmods unless chmods.empty?</span></span><br><span class="line"><span class="string">  sudo "/bin/chmod", "g+rwx", *group_chmods unless group_chmods.empty?</span></span><br><span class="line"><span class="string">  sudo "/bin/chmod", "755", *user_chmods unless user_chmods.empty?</span></span><br><span class="line"><span class="string">  sudo CHOWN, ENV["USER"], *chowns unless chowns.empty?</span></span><br><span class="line"><span class="string">  sudo CHGRP, group, *chgrps unless chgrps.empty?</span></span><br><span class="line"><span class="string">else</span></span><br><span class="line"><span class="string">  sudo "/bin/mkdir", "-p", HOMEBREW_PREFIX</span></span><br><span class="line"><span class="string">  sudo CHOWN, "<span class="subst">#&#123;ENV[<span class="string">"USER"</span>]&#125;</span>:<span class="subst">#&#123;group&#125;</span>", HOMEBREW_PREFIX</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">unless mkdirs.empty?</span></span><br><span class="line"><span class="string">  sudo "/bin/mkdir", "-p", *mkdirs</span></span><br><span class="line"><span class="string">  sudo "/bin/chmod", "g+rwx", *mkdirs</span></span><br><span class="line"><span class="string">  sudo "/bin/chmod", "755", *zsh_dirs</span></span><br><span class="line"><span class="string">  sudo CHOWN, ENV["USER"], *mkdirs</span></span><br><span class="line"><span class="string">  sudo CHGRP, group, *mkdirs</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">sudo "/bin/mkdir", "-p", HOMEBREW_CACHE unless File.directory? HOMEBREW_CACHE</span></span><br><span class="line"><span class="string">sudo "/bin/chmod", "g+rwx", HOMEBREW_CACHE if chmod? HOMEBREW_CACHE</span></span><br><span class="line"><span class="string">sudo CHOWN, ENV["USER"], HOMEBREW_CACHE if chown? HOMEBREW_CACHE</span></span><br><span class="line"><span class="string">sudo CHGRP, group, HOMEBREW_CACHE if chgrp? HOMEBREW_CACHE</span></span><br><span class="line"><span class="string">if HOME_CACHE</span></span><br><span class="line"><span class="string">  sudo CHOWN, ENV["USER"], HOME_CACHE if chown? HOME_CACHE</span></span><br><span class="line"><span class="string">  sudo CHGRP, group, HOME_CACHE if chgrp? HOME_CACHE</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">FileUtils.touch "<span class="subst">#&#123;HOMEBREW_CACHE&#125;</span>/.cleaned" if File.directory? HOMEBREW_CACHE</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if should_install_command_line_tools? &amp;&amp; macos_version &gt;= "10.13"</span></span><br><span class="line"><span class="string">  ohai "Searching online for the Command Line Tools"</span></span><br><span class="line"><span class="string">  # This temporary file prompts the '</span>softwareupdate<span class="string">' utility to list the Command Line Tools</span></span><br><span class="line"><span class="string">  clt_placeholder = "/tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress"</span></span><br><span class="line"><span class="string">  sudo "/usr/bin/touch", clt_placeholder</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  clt_label_command = "/usr/sbin/softwareupdate -l | " \</span></span><br><span class="line"><span class="string">                      "grep -B 1 -E '</span>Command Line Tools<span class="string">' | " \</span></span><br><span class="line"><span class="string">                      "awk -F'</span>*<span class="string">' '</span>/^ *\\*<span class="regexp">/ &#123;print $2&#125;' | " \</span></span><br><span class="line"><span class="regexp">                      "sed -e 's/</span>^ *<span class="symbol">Label:</span> /<span class="regexp">/' -e 's/</span>^ *<span class="regexp">//</span><span class="string">' | " \</span></span><br><span class="line"><span class="string">                      "sort -V | " \</span></span><br><span class="line"><span class="string">                      "tail -n1"</span></span><br><span class="line"><span class="string">  clt_label = `<span class="subst">#&#123;clt_label_command&#125;</span>`.chomp</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  unless clt_label.empty?</span></span><br><span class="line"><span class="string">    ohai "Installing <span class="subst">#&#123;clt_label&#125;</span>"</span></span><br><span class="line"><span class="string">    sudo "/usr/sbin/softwareupdate", "-i", clt_label</span></span><br><span class="line"><span class="string">    sudo "/bin/rm", "-f", clt_placeholder</span></span><br><span class="line"><span class="string">    sudo "/usr/bin/xcode-select", "--switch", "/Library/Developer/CommandLineTools"</span></span><br><span class="line"><span class="string">  end</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Headless install may have failed, so fallback to original '</span>xcode-select<span class="string">' method</span></span><br><span class="line"><span class="string">if should_install_command_line_tools? &amp;&amp; STDIN.tty?</span></span><br><span class="line"><span class="string">  ohai "Installing the Command Line Tools (expect a GUI popup):"</span></span><br><span class="line"><span class="string">  sudo "/usr/bin/xcode-select", "--install"</span></span><br><span class="line"><span class="string">  puts "Press any key when the installation has completed."</span></span><br><span class="line"><span class="string">  getc</span></span><br><span class="line"><span class="string">  sudo "/usr/bin/xcode-select", "--switch", "/Library/Developer/CommandLineTools"</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">abort &lt;&lt;-EOABORT if mac? &amp;&amp; `/usr/bin/xcrun clang 2&gt;&amp;1` =~ /license/ &amp;&amp; !$CHILD_STATUS.success?</span></span><br><span class="line"><span class="string">You have not agreed to the Xcode license.</span></span><br><span class="line"><span class="string">Before running the installer again please agree to the license by opening</span></span><br><span class="line"><span class="string">Xcode.app or running:</span></span><br><span class="line"><span class="string">    sudo xcodebuild -license</span></span><br><span class="line"><span class="string">EOABORT</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ohai "Downloading and installing Homebrew..."</span></span><br><span class="line"><span class="string">Dir.chdir HOMEBREW_REPOSITORY do</span></span><br><span class="line"><span class="string">  # we do it in four steps to avoid merge errors when reinstalling</span></span><br><span class="line"><span class="string">  system "git", "init", "-q"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  # "git remote add" will fail if the remote is defined in the global config</span></span><br><span class="line"><span class="string">  system "git", "config", "remote.origin.url", BREW_REPO</span></span><br><span class="line"><span class="string">  system "git", "config", "remote.origin.fetch", "+refs/heads/*:refs/remotes/origin/*"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  # ensure we don'</span>t munge line endings on checkout</span><br><span class="line">  system <span class="string">"git"</span>, <span class="string">"config"</span>, <span class="string">"core.autocrlf"</span>, <span class="string">"false"</span></span><br><span class="line"></span><br><span class="line">  system <span class="string">"git"</span>, <span class="string">"fetch"</span>, <span class="string">"origin"</span>, <span class="string">"master:refs/remotes/origin/master"</span>,</span><br><span class="line">         <span class="string">"--tags"</span>, <span class="string">"--force"</span></span><br><span class="line"></span><br><span class="line">  system <span class="string">"git"</span>, <span class="string">"reset"</span>, <span class="string">"--hard"</span>, <span class="string">"origin/master"</span></span><br><span class="line"></span><br><span class="line">  system <span class="string">"ln"</span>, <span class="string">"-sf"</span>, <span class="string">"<span class="subst">#&#123;HOMEBREW_REPOSITORY&#125;</span>/bin/brew"</span>, <span class="string">"<span class="subst">#&#123;HOMEBREW_PREFIX&#125;</span>/bin/brew"</span></span><br><span class="line"></span><br><span class="line">  system <span class="string">"<span class="subst">#&#123;HOMEBREW_PREFIX&#125;</span>/bin/brew"</span>, <span class="string">"update"</span>, <span class="string">"--force"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">ohai <span class="string">"Installation successful!"</span></span><br><span class="line">puts</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use the shell's audible bell.</span></span><br><span class="line">print <span class="string">"\a"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use an extra newline and bold to avoid this being missed.</span></span><br><span class="line">ohai <span class="string">"Homebrew has enabled anonymous aggregate formulae and cask analytics."</span></span><br><span class="line">puts &lt;&lt;-EOS</span><br><span class="line"><span class="comment">#&#123;Tty.bold&#125;Read the analytics documentation (and how to opt-out) here:</span></span><br><span class="line">  <span class="comment">#&#123;Tty.underline&#125;https://docs.brew.sh/Analytics#&#123;Tty.reset&#125;</span></span><br><span class="line"></span><br><span class="line">EOS</span><br><span class="line"></span><br><span class="line">ohai <span class="string">"Homebrew is run entirely by unpaid volunteers. Please consider donating:"</span></span><br><span class="line">puts &lt;&lt;-EOS</span><br><span class="line">  <span class="comment">#&#123;Tty.underline&#125;https://github.com/Homebrew/brew#donations#&#123;Tty.reset&#125;</span></span><br><span class="line">EOS</span><br><span class="line"></span><br><span class="line">Dir.chdir HOMEBREW_REPOSITORY <span class="keyword">do</span></span><br><span class="line">  system <span class="string">"git"</span>, <span class="string">"config"</span>, <span class="string">"--replace-all"</span>, <span class="string">"homebrew.analyticsmessage"</span>, <span class="string">"true"</span></span><br><span class="line">  system <span class="string">"git"</span>, <span class="string">"config"</span>, <span class="string">"--replace-all"</span>, <span class="string">"homebrew.caskanalyticsmessage"</span>, <span class="string">"true"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">ohai <span class="string">"Next steps:"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unless</span> mac?</span><br><span class="line">  puts &lt;&lt;-EOS</span><br><span class="line">- Install the Homebrew dependencies <span class="keyword">if</span> you have sudo <span class="symbol">access:</span></span><br><span class="line">  <span class="comment">#&#123;Tty.bold&#125;Debian, Ubuntu, etc.#&#123;Tty.reset&#125;</span></span><br><span class="line">    sudo apt-get install build-essential</span><br><span class="line">  <span class="comment">#&#123;Tty.bold&#125;Fedora, Red Hat, CentOS, etc.#&#123;Tty.reset&#125;</span></span><br><span class="line">    sudo yum groupinstall <span class="string">'Development Tools'</span></span><br><span class="line">  See <span class="comment">#&#123;Tty.underline&#125;https://docs.brew.sh/linux#&#123;Tty.reset&#125; for more information.</span></span><br><span class="line">- Configure Homebrew <span class="keyword">in</span> your <span class="comment">#&#123;Tty.underline&#125;#&#123;shell_profile&#125;#&#123;Tty.reset&#125; by running</span></span><br><span class="line">    echo <span class="string">'eval $(<span class="subst">#&#123;HOMEBREW_PREFIX&#125;</span>/bin/brew shellenv)'</span> &gt;&gt;<span class="comment">#&#123;shell_profile&#125;</span></span><br><span class="line">- Add Homebrew to your <span class="comment">#&#123;Tty.bold&#125;PATH#&#123;Tty.reset&#125;</span></span><br><span class="line">    eval $(<span class="comment">#&#123;HOMEBREW_PREFIX&#125;/bin/brew shellenv)</span></span><br><span class="line">- We recommend that you install GCC by <span class="symbol">running:</span></span><br><span class="line">    brew install gcc</span><br><span class="line">  EOS</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">puts <span class="string">"- Run `brew help` to get started"</span></span><br><span class="line">puts <span class="string">"- Further documentation: "</span></span><br><span class="line">puts <span class="string">"    <span class="subst">#&#123;Tty.underline&#125;</span>https://docs.brew.sh<span class="subst">#&#123;Tty.reset&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">warn <span class="string">"<span class="subst">#&#123;HOMEBREW_PREFIX&#125;</span>/bin is not in your PATH."</span> <span class="keyword">unless</span> ENV[<span class="string">"PATH"</span>].split(<span class="string">":"</span>).<span class="keyword">include</span>? <span class="string">"<span class="subst">#&#123;HOMEBREW_PREFIX&#125;</span>/bin"</span></span><br></pre></td></tr></table></figure><p>安装成功结果如下，这里需要按照提示依次执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential</span><br><span class="line"></span><br><span class="line">echo 'eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)' &gt;&gt;~/.zprofile</span><br><span class="line"></span><br><span class="line">eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)</span><br><span class="line"></span><br><span class="line">brew install gcc</span><br></pre></td></tr></table></figure><p>就可以正常使用brew了，最后一步安装gcc可能会非常耗时（腾讯云网络速度非常奇葩，有时快有时慢，最后从源码编译gcc花了两个小时）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">==&gt; Installation successful!</span><br><span class="line"></span><br><span class="line">==&gt; Homebrew has enabled anonymous aggregate formulae and cask analytics.</span><br><span class="line">Read the analytics documentation (and how to opt-out) here:</span><br><span class="line">  https://docs.brew.sh/Analytics</span><br><span class="line"></span><br><span class="line">==&gt; Homebrew is run entirely by unpaid volunteers. Please consider donating:</span><br><span class="line">  https://github.com/Homebrew/brew#donations</span><br><span class="line">==&gt; Next steps:</span><br><span class="line">- Install the Homebrew dependencies if you have sudo access:</span><br><span class="line">  Debian, Ubuntu, etc.</span><br><span class="line">    sudo apt-get install build-essential</span><br><span class="line">  Fedora, Red Hat, CentOS, etc.</span><br><span class="line">    sudo yum groupinstall 'Development Tools'</span><br><span class="line">  See https://docs.brew.sh/linux for more information.</span><br><span class="line">- Configure Homebrew in your ~/.zprofile by running</span><br><span class="line">    echo 'eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)' &gt;&gt;~/.zprofile</span><br><span class="line">- Add Homebrew to your PATH</span><br><span class="line">    eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)</span><br><span class="line">- We recommend that you install GCC by running:</span><br><span class="line">    brew install gcc</span><br><span class="line">- Run `brew help` to get started</span><br><span class="line">- Further documentation: </span><br><span class="line">    https://docs.brew.sh</span><br><span class="line">Warning: /home/linuxbrew/.linuxbrew/bin is not in your PATH.</span><br></pre></td></tr></table></figure><p>若brew正确安装，则可以通过<code>brew -v</code>查看brew版本信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Homebrew 2.2.2</span><br><span class="line">Homebrew/linuxbrew-core (git revision 906b; last commit 2020-01-11)</span><br></pre></td></tr></table></figure><h3 id="43-腾讯云下载问题"><a class="markdownIt-Anchor" href="#43-腾讯云下载问题"></a> 4.3 腾讯云下载问题</h3><p>在安装linuxbrew时，我发现腾讯云服务器在下载<a href="https://linuxbrew.bintray.com/bottles-portable-ruby/portable-ruby-2.6.3.x86_64_linux.bottle.tar.gz" target="_blank" rel="noopener"><code>portable-ruby-2.6.3.x86_64_linux.bottle.tar.gz</code></a>这个包的时候速度非常慢并且导致超时（华为云没有问题），结果brew安装失败，如果失败了可以先将linuxbrew删除（执行<code>sudo rm -rf /home/linuxbrew</code>，具体看你的linuxbrew安装目录），再通过其他方式预先把<code>portable-ruby-2.6.3.x86_64_linux.bottle.tar.gz</code>下载下来并且放到<code>~/.cache/Homebrew/</code>目录下，这样重新安装linuxbrew时就会直接从<code>.cache</code>中解压安装了。</p><h3 id="44-brew更换源ubuntu不要使用macos可以使用"><a class="markdownIt-Anchor" href="#44-brew更换源ubuntu不要使用macos可以使用"></a> 4.4 brew更换源（<strong>Ubuntu不要使用，macOS可以使用</strong>）</h3><p>brew下载某些软件时会因为网络原因非常慢，甚至导致安装失败的问题，所以可以使用国内源，比如<a href="https://mirror.tuna.tsinghua.edu.cn/help/homebrew/" target="_blank" rel="noopener">清华大学开源软件镜像站</a>以及<a href="https://lug.ustc.edu.cn/wiki/mirrors/help/brew.git" target="_blank" rel="noopener">中科大镜像源</a>，可以更换4个位置的源，分别是<code>brew/homebrew-core/homebrew-cask/homebrew-bottles</code>，前三个可以修改本地仓库的信息，最后一个需要修改<code>.zshrc</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> brew自己的仓库</span></span><br><span class="line">git -C "$(brew --repo)" remote set-url origin https://mirrors.ustc.edu.cn/brew.git</span><br><span class="line"><span class="meta">#</span><span class="bash"> brew可以安装的软件名称的仓库</span></span><br><span class="line">git -C "$(brew --repo homebrew/core)" remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br><span class="line"><span class="meta">#</span><span class="bash"> brew可以安装的GUI软件的仓库，如果提示没有cask，可以先执行brew cask</span></span><br><span class="line">git -C "$(brew --repo homebrew/cask)" remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新brew自己</span></span><br><span class="line">brew update</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新brew安装的软件</span></span><br><span class="line">brew upgrade</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 清楚无效连接以及本地下载的安装文件缓存</span></span><br><span class="line">brew cleanup</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> brew可以安装的软件的仓库</span></span><br><span class="line">echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles' &gt;&gt; ~/.zshrc</span><br><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><h3 id="45-卸载linuxbrew"><a class="markdownIt-Anchor" href="#45-卸载linuxbrew"></a> 4.5 卸载linuxbrew</h3><p>执行以下命令，同理如果出现443问题，翻墙查看并保存，然后直接运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/uninstall)"</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.brew.sh/Homebrew-on-Linux&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Homebrew Documentation&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://ohmyz.sh/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Oh My ZSH!&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/ohmyzsh/ohmyzsh/wiki/Installing-ZSH&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Installing ZSH&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;租一个服务器能干什么，我想大致分为两个方面：使用和学习。可以将云盘部署到服务器上，那么你就拥有了一个私有云盘，也可以将WordPress部署到服务器上，那么你就拥有了一个可以写博客的个人网站；学习JavaWeb，需要了解Tomcat、MySQL、Nginx、Redis等等，你可以在服务器上运行这些程序而不必使用宝贵的本地资源。为了后续的使用以及学习，首先需要优化一下我们的服务器配置，因为控制服务器一般都是通过命令行，所以前期优化一下，后续会更好操作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tips" scheme="http://zhoutao822.coding.me/categories/Tips/"/>
    
    
      <category term="Ubuntu" scheme="http://zhoutao822.coding.me/tags/Ubuntu/"/>
    
      <category term="Linuxbrew" scheme="http://zhoutao822.coding.me/tags/Linuxbrew/"/>
    
      <category term="Zsh" scheme="http://zhoutao822.coding.me/tags/Zsh/"/>
    
      <category term="Oh-my-zsh" scheme="http://zhoutao822.coding.me/tags/Oh-my-zsh/"/>
    
  </entry>
  
  <entry>
    <title>Android-Q适配-存储方式</title>
    <link href="http://zhoutao822.coding.me/archives/bb3604db.html"/>
    <id>http://zhoutao822.coding.me/archives/bb3604db.html</id>
    <published>2019-10-26T03:02:06.000Z</published>
    <updated>2020-01-18T15:00:54.056Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><blockquote><p><a href="https://developer.android.com/preview/privacy/scoped-storage" target="_blank" rel="noopener">Android Q 隐私权变更：分区存储</a><br /><a href="https://developer.android.com/training/data-storage/files/external" target="_blank" rel="noopener">Save a file on external storage</a><br /><a href="https://juejin.im/post/5d838a7af265da03ee6a90cd" target="_blank" rel="noopener">Android 10(Android Q) 适配</a><br /><a href="https://developer.android.com/guide/topics/providers/document-provider?hl=zh-cn" target="_blank" rel="noopener">使用存储访问框架打开文件</a><br /><a href="https://segmentfault.com/a/1190000019224425" target="_blank" rel="noopener">Android Q 沙箱适配多媒体文件总结</a></p></blockquote><p>Android Q之后对系统存储方式进行了调整，简而言之就是禁止开发人员随意通过路径访问操作外部存储文件，内部存储没有影响。这样做的目的很明显，即往后原生Android的文件管理器将不会出现各种App生成的乱七八糟的文件，不同类型的文件都在其各自相应的位置。</p><p>示意图如下，主要行为变更在媒体文件（音频、视频、图片）以及下载文件中</p><!--  --><p><img src="http://114.116.9.65:7777/images/2020/01/18/file.png" alt="file.png" /></p><a id="more"></a><h2 id="1-saf框架"><a class="markdownIt-Anchor" href="#1-saf框架"></a> 1. SAF框架</h2><p>SAF（Storage Access Framework，存储访问框架），是Android 4.4之后提供的文件选择器，通过Intent方式启动，UI界面由系统提供，一般来说其他厂商魔改的系统都没有对这方面进行重写，所以示意图基本相同，如下</p><!--  --><p><img src="http://114.116.9.65:7777/images/2020/01/18/saf.png" alt="saf.png" /></p><h3 id="11-外部存储"><a class="markdownIt-Anchor" href="#11-外部存储"></a> 1.1 外部存储</h3><p>如果应用有发送文件、选择文件等功能，特别是需要读取系统文件目录的方法都需要修改，在target Q的情况下，试图通过路径访问外部公共文件的方式都会失效，如下所示，因此需要使用SAF框架选取文件，得到的结果是文件的Uri，然后再使用Uri读取或者处理该文件，外部存储路径如果打印出来类似<code>/storage/emulated/0/Android/data/us.zoom.androidqdemo/files/aabb.rar</code>、<code>/storage/emulated/0/Pictures/Screenshots/Screenshot_20191014-141713.png</code>，前者是当前应用的外部路径（可以直接访问），后者是公共图片文件下外部路径；内部路径类似<code>/data/user/0/us.zoom.androidqdemo/data/aabb.png</code>，内部路径无法直接在系统中查看。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在手机外部存储根目录下创建text.txt文件，在Android P上可以成功创建此文件并写入数据，file.exists()返回True；</span></span><br><span class="line"><span class="comment">// 在Android Q上无法创建此文件，返回False</span></span><br><span class="line">String filename = <span class="string">"text.txt"</span>;</span><br><span class="line">File file = <span class="keyword">new</span> File(Environment.getExternalStorageDirectory(), filename);</span><br><span class="line"><span class="comment">// File file = new File(getFilesDir(), filename); //如果是内部存储，则两者都是正常访问</span></span><br><span class="line"><span class="comment">// File file = new File(getExternalFilesDir(""), filename); // 外部存储的当前应用路径可以正常访问</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    FileOutputStream outputStream = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">    outputStream.write(<span class="string">"123456"</span>.getBytes());</span><br><span class="line">    outputStream.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">Toast.makeText(<span class="keyword">this</span>, file.exists() ? <span class="string">"True"</span> : <span class="string">"False"</span>, Toast.LENGTH_SHORT).show();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同理对读文件，Android P上可以读取text.txt内容，并且file.exists()返回True；Android Q上FileInputStream报错：</span></span><br><span class="line"><span class="comment">// 无法访问，拒绝权限，但是file.exists()返回true</span></span><br><span class="line">String filename = <span class="string">"text.txt"</span>;</span><br><span class="line">File file = <span class="keyword">new</span> File(Environment.getExternalStorageDirectory(), filename);</span><br><span class="line"><span class="comment">// File file = new File(getFilesDir(), filename); //如果是内部存储，则两者都是正常访问</span></span><br><span class="line"><span class="comment">// File file = new File(getExternalFilesDir(""), filename); // 外部存储的当前应用路径可以正常访问</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">    InputStreamReader reader = <span class="keyword">new</span> InputStreamReader(inputStream);</span><br><span class="line">    BufferedReader br = <span class="keyword">new</span> BufferedReader(reader);</span><br><span class="line">    String line = <span class="string">""</span>;</span><br><span class="line">    line = br.readLine();</span><br><span class="line">    <span class="keyword">while</span> (line != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Log.i(<span class="string">"TestRead"</span>, line);</span><br><span class="line">        line = br.readLine(); <span class="comment">// 一次读入一行数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">Toast.makeText(<span class="keyword">this</span>, file.exists() ? <span class="string">"True"</span> : <span class="string">"False"</span>, Toast.LENGTH_SHORT).show();</span><br></pre></td></tr></table></figure><h3 id="12-saf使用"><a class="markdownIt-Anchor" href="#12-saf使用"></a> 1.2 SAF使用</h3><p>SAF原理可以在Google官网<a href="https://developer.android.com/guide/topics/providers/document-provider?hl=zh-cn" target="_blank" rel="noopener">使用存储访问框架打开文件</a>中查看，发送文件不能通过公共路径，那么就需要使用SAF。SAF读取到的文件有四类：图片、音频、视频、下载、内部存储空间（外部存储）以及各种网盘，可以通过setType设置显示的文件类别，其中图片（一般包含根目录以及照片DCIM文件夹、公有图片Pictures文件夹、Download下图片文件）、音频（一般包含根目录以及公有音频Music文件夹、Download下音频文件）、视频（一般包含根目录以及视频DCIM文件夹、公有视频Movies文件夹、Download下视频文件）中都是通过MediaStore保存的文件，下载中都是通过DownloadManager下载的文件，否则不显示在这几个目录中；内部存储空间即外部存储，从这里可以访问各个应用的外部存储；各种网盘也可以访问，从网盘获取文件会先调用网盘的下载功能，然后再获取下载好的文件，下载过程不可见。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4.3及以下用 ACTION_PICK 或 ACTION_GET_CONTENT，Android 4.4以上可以多一个选择ACTION_OPEN_DOCUMENT，ACTION_PICK弹出单项选择窗口</span></span><br><span class="line"><span class="comment">// ACTION_GET_CONTENT与ACTION_OPEN_DOCUMENT类似，且使用ACTION_GET_CONTENT时，应用会导入数据（如图片文件）的副本，即如果</span></span><br><span class="line"><span class="comment">// 只是需要读取数据而不修改原始数据，那就用ACTION_GET_CONTENT，如果需要修改，使用ACTION_OPEN_DOCUMENT</span></span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_OPEN_DOCUMENT);</span><br><span class="line"><span class="comment">// 过滤器只显示可以打开的结果</span></span><br><span class="line">intent.addCategory(Intent.CATEGORY_OPENABLE);</span><br><span class="line"><span class="comment">// 使用图像MIME数据类型过滤以仅显示图像</span></span><br><span class="line"><span class="comment">// intent.setType("image/*");</span></span><br><span class="line"><span class="comment">// 要搜索通过已安装的存储提供商提供的所有文档</span></span><br><span class="line">intent.setType(<span class="string">"*/*"</span>);</span><br><span class="line"><span class="comment">// 如果需要多选，对应的onActivityResult获取Uri通过data.getClipData()</span></span><br><span class="line"><span class="comment">// intent.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true)</span></span><br><span class="line">startActivityForResult(intent, READ_REQUEST_CODE);</span><br></pre></td></tr></table></figure><p>在onActivityResult中获取到文件的Uri，如果是发送文件功能的话，还需要文件名和文件类型，然后加上FileInputStream发送出去，所以需要通过Uri获取文件相关信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode,</span></span></span><br><span class="line"><span class="function"><span class="params">                                Intent resultData)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (requestCode == READ_REQUEST_CODE &amp;&amp; resultCode == Activity.RESULT_OK) &#123;</span><br><span class="line">        Uri uri = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (resultData != <span class="keyword">null</span>) &#123;</span><br><span class="line">            uri = resultData.getData();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如：</p><ul><li>图片目录下的图片Uri类似于<code>content://com.android.providers.media.documents/document/image%3A616260</code>，</li><li>音频目录下<code>content://com.android.providers.media.documents/document/audio%3A417558</code>，</li><li>视频目录下<code>content://com.android.providers.media.documents/document/video%3A616341</code>，</li><li>下载目录下<code>content://com.android.providers.downloads.documents/document/2884</code>。</li></ul><p>根据Uri可以使用ContentResolver查询相关文件的信息，比如ID、MIME_TYPE等等，查询代码可以看下面的FileUtils，在使用getDataColumn之前需要对Uri进行判断，获取文件种类以及id，比如<code>image%3A616260</code>，这就是一个Image文件，并且id为<code>616260</code>，<code>%3A</code>为冒号<code>:</code>，然后根据文件类型，使用相应的Uri查询，比如Image对应<code>contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;</code>，打印出来的结果是<code>content://media/external/images/media</code>，然后selection为<code>_id=?</code>，selectionArgs为id值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getDataColumn</span><span class="params">(Context context, Uri uri, String selection,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    String[] selectionArgs)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Cursor cursor = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// ContentProvider查询方式，通过uri加上指定的column，类似于查询数据库，uri中包括了provider的全称以及id，</span></span><br><span class="line">    <span class="comment">// 等价于数据库表与id，column等价于列，这样就可以直接取到对应的值；这里查询的是DISPLAY_NAME，一般来说文件名</span></span><br><span class="line">    <span class="comment">// 应该就包含了文件类型，但是在实际使用中，有的文件的DISPLAY_NAME与文件名并不相同，所以需要知道文件类型，</span></span><br><span class="line">    <span class="comment">// 可以使用MIME_TYPE，还有其他种类的信息例如修改时间等等，并不常用（DATA列已被弃用，但可以查询到文件路径）</span></span><br><span class="line">    <span class="keyword">final</span> String column = MediaStore.Images.ImageColumns.DISPLAY_NAME;</span><br><span class="line">    <span class="keyword">final</span> String[] projection = &#123;</span><br><span class="line">            column</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 查询方法调用query</span></span><br><span class="line">        cursor = context.getContentResolver().query(</span><br><span class="line">            uri, projection, selection, selectionArgs,<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (cursor != <span class="keyword">null</span> &amp;&amp; cursor.moveToFirst()) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> column_index = cursor.getColumnIndexOrThrow(column);</span><br><span class="line">            <span class="keyword">return</span> cursor.getString(column_index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cursor != <span class="keyword">null</span>)</span><br><span class="line">            cursor.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在测试过程中发现，对于SAF中图片、音频、视频三个目录下的文件都可以获取其正确的信息，但是对于下载目录下的文件存在问题。网上的对于<code>com.android.providers.downloads</code>的查询Uri是如下三种，但是全部无法查询到任何结果，<code>public_downloads</code>报异常<code>Unknown URI</code>（Android 6可以查询到），<code>my_downloads</code>查询结果为空，<code>all_downloads</code>报异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.SecurityException: Permission Denial: reading com.android.providers.downloads.provider.DownloadProvider uri content:&#x2F;&#x2F;downloads&#x2F;all_downloads&#x2F;2884 from pid&#x3D;25434, uid&#x3D;10786 requires android.permission.ACCESS_ALL_DOWNLOADS, or grantUriPermission()</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String id = DocumentsContract.getDocumentId(uri);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (id != <span class="keyword">null</span> &amp;&amp; id.startsWith(<span class="string">"raw:"</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> id.substring(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line">String[] contentUriPrefixesToTry = <span class="keyword">new</span> String[]&#123;</span><br><span class="line">        <span class="string">"content://downloads/public_downloads"</span>,</span><br><span class="line">        <span class="string">"content://downloads/my_downloads"</span>,</span><br><span class="line">        <span class="string">"content://downloads/all_downloads"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 在API 29上多了一个新的Uri MediaStore.Downloads.EXTERNAL_CONTENT_URI，打印结果是</span></span><br><span class="line"><span class="comment">// content://media/external/downloads，类似于上面的MediaStore.Images.Media.EXTERNAL_CONTENT_URI，</span></span><br><span class="line"><span class="comment">// 但是还是查询不到任何结果；如果直接拿content://com.android.providers.downloads.documents/document/2884</span></span><br><span class="line"><span class="comment">// 来查询可以查到MIME_TYPE和DISPLAY_NAME，或者通过context.getContentResolver().getType(uri)获取MIME_TYPE</span></span><br><span class="line"><span class="keyword">for</span> (String contentUriPrefix : contentUriPrefixesToTry) &#123;</span><br><span class="line">    Uri contentUri = ContentUris.withAppendedId(Uri.parse(contentUriPrefix), Long.valueOf(id));</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String path = getDataColumn(context, contentUri, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (path != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> path;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于下载目录下的文件获取其文件名以及文件类型的方式就只能通过原始Uri查询了，但是DISPLAY_NAME并不一定与真实文件名相同，然后通过Uri取文件数据，如下所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取文件中的字符串</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">readTextFromUri</span><span class="params">(Uri uri)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">try</span> (InputStream inputStream =</span><br><span class="line">            getContentResolver().openInputStream(uri);</span><br><span class="line">            BufferedReader reader = <span class="keyword">new</span> BufferedReader(</span><br><span class="line">            <span class="keyword">new</span> InputStreamReader(Objects.requireNonNull(inputStream)))) &#123;</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stringBuilder.append(line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者取数据的FileInputStream，再利用FileInputStream进行其他操作，比如复制文件或者发送</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">ContentResolver contentResolver = <span class="keyword">this</span>.getContentResolver();</span><br><span class="line">ParcelFileDescriptor parcelFileDescriptor = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    parcelFileDescriptor = contentResolver.openFileDescriptor(uri, <span class="string">"r"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (parcelFileDescriptor == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FileChannel inputChannel = <span class="keyword">null</span>;</span><br><span class="line">FileChannel outputChannel = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为了验证是否获取到数据，可以将数据保存到其他位置，比如这里的aabb.rar</span></span><br><span class="line">String dest = <span class="string">"/storage/emulated/0/Android/data/us.zoom.androidqdemo/files/aabb.rar"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(</span><br><span class="line">            parcelFileDescriptor.getFileDescriptor());</span><br><span class="line">    inputChannel = inputStream.getChannel();</span><br><span class="line">    outputChannel = <span class="keyword">new</span> FileOutputStream(dest).getChannel();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> srcSize = inputChannel.size();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> size = outputChannel.transferFrom(inputChannel, <span class="number">0</span>, srcSize);</span><br><span class="line">    <span class="keyword">if</span> (size == srcSize) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">    Toast.makeText(<span class="keyword">this</span>, <span class="string">"Time: "</span> + (end - start), Toast.LENGTH_LONG).show();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (inputChannel != <span class="keyword">null</span>) &#123;</span><br><span class="line">            inputChannel.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (outputChannel != <span class="keyword">null</span>) &#123;</span><br><span class="line">            outputChannel.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-mediastore使用"><a class="markdownIt-Anchor" href="#13-mediastore使用"></a> 1.3 MediaStore使用</h3><p>MediaStore是用于获取或者添加媒体文件（图片、音频、视频）信息的工具，需要配合ContentResolver使用，MediaStore定义列的名称，通过ContentResolver的query和insert方法去查询和添加文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取系统外部存储内所有的图片</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> list</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;ImageInfo&gt; <span class="title">getImageList</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    List&lt;ImageInfo&gt; list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    ContentResolver contentResolver = context.getContentResolver();</span><br><span class="line">    <span class="comment">// 查询图片需要的Uri</span></span><br><span class="line">    Uri uri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;</span><br><span class="line">    String[] projection = <span class="keyword">null</span>;</span><br><span class="line">    String selection = <span class="keyword">null</span>;</span><br><span class="line">    String[] selectionArgs = <span class="keyword">null</span>;</span><br><span class="line">    String sortOrder = <span class="keyword">null</span>;</span><br><span class="line">    Cursor cursor = contentResolver.query(uri, projection, selection, selectionArgs, sortOrder);</span><br><span class="line">    <span class="keyword">if</span> (cursor != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (cursor.moveToNext()) &#123;</span><br><span class="line">            ImageInfo imageInfo = <span class="keyword">new</span> ImageInfo();</span><br><span class="line">            imageInfo.id = cursor.getInt(cursor.getColumnIndexOrThrow(MediaStore.Images.Media._ID));</span><br><span class="line">            <span class="comment">// 组装图片uri</span></span><br><span class="line">            imageInfo.uri = ContentUris.withAppendedId(uri, imageInfo.id);</span><br><span class="line">            imageInfo.filePath = cursor.getString(cursor.getColumnIndex(MediaStore.Images.Media.DATA));</span><br><span class="line">            imageInfo.mimeType = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.MIME_TYPE));</span><br><span class="line">            imageInfo.title = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.TITLE));</span><br><span class="line">            imageInfo.addTime = cursor.getLong(cursor.getColumnIndex(MediaStore.Images.Media.DATE_ADDED));</span><br><span class="line">            list.add(imageInfo);</span><br><span class="line">        &#125;</span><br><span class="line">        cursor.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到uri后可以通过上面提到的方式取数据也可以直接通过<code>ImageView.setImageURI(imageInfo.uri)</code>展示出来。如果有加载缩略图的要求，也可以通过Uri获取缩略图的Bitmap，调用loadThumbnail方法，并且可以指定缩略图大小（视频文件也可以加载缩略图），通过query方式查询缩略图的方式在Android Q上基本失效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context.getContentResolver().loadThumbnail(imageInfo.uri, <span class="keyword">new</span> Size(<span class="number">50</span>, <span class="number">50</span>), <span class="keyword">null</span>)</span><br></pre></td></tr></table></figure><p>除了查询之外，比较重要的是插入媒体文件的功能，比如在外部存储的应用私有目录下的图片不会显示在SAF框架中，如果需要将其显示在图片目录中，需要将文件另存到公有目录下，一般是Pictures文件夹中。同理对音频、视频文件也是如此，通过insert方法传入的Uri决定文件保存位置。在Android Q上通过Uri将文件保存到Download目录下似乎不太可行，只能依靠DownloadManager直接下载保存到Download下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">SavePictureFile</span><span class="params">(Context context, File file)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 首先需要获取到源文件的File对象，然后根据File对象的相关信息构造Uri，比如MIME_TYPE和DISPLAY_NAME等等</span></span><br><span class="line">    Uri uri = insertFileIntoMediaStore(context, file, <span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">// 然后通过FileInputStream的方式将文件拷贝到目的文件中</span></span><br><span class="line">    <span class="keyword">return</span> copyFile(context, file, uri);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Uri <span class="title">insertFileIntoMediaStore</span><span class="params">(Context context, File file, <span class="keyword">boolean</span> isPicture)</span> </span>&#123;</span><br><span class="line">    ContentValues contentValues = <span class="keyword">new</span> ContentValues();</span><br><span class="line">    contentValues.put(MediaStore.Video.Media.DISPLAY_NAME, file.getName());</span><br><span class="line">    contentValues.put(MediaStore.Video.Media.MIME_TYPE, isPicture ? <span class="string">"image/jpeg"</span> : <span class="string">"video/mp4"</span>);</span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">29</span>) &#123;</span><br><span class="line">        contentValues.put(MediaStore.Video.Media.DATE_TAKEN, file.lastModified());</span><br><span class="line">        <span class="comment">// Android Q如果不设置RELATIVE_PATH，则默认保存在Pictures文件夹下，可以通过RELATIVE_PATH添加</span></span><br><span class="line">        <span class="comment">// Pictures/MyPictures子文件夹，文件将会保存在MyPictures中</span></span><br><span class="line">        <span class="comment">// contentValues.put(MediaStore.Video.Media.RELATIVE_PATH, Environment.DIRECTORY_PICTURES + File.separator + "MyPictures");</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Uri uri = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 通过insert方法得到公有目录下目的文件的Uri</span></span><br><span class="line">        uri = context.getContentResolver().insert(</span><br><span class="line">                (isPicture ? MediaStore.Images.Media.EXTERNAL_CONTENT_URI : MediaStore.Video.Media.EXTERNAL_CONTENT_URI)</span><br><span class="line">                , contentValues</span><br><span class="line">        );</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> uri;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件复制的方式同上</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">copyFile</span><span class="params">(Context context, File srcFile, Uri destFile)</span> </span>&#123;</span><br><span class="line">    ContentResolver contentResolver = context.getContentResolver();</span><br><span class="line">    ParcelFileDescriptor parcelFileDescriptor = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        parcelFileDescriptor = contentResolver.openFileDescriptor(destFile, <span class="string">"w"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (parcelFileDescriptor == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    FileChannel inputChannel = <span class="keyword">null</span>;</span><br><span class="line">    FileChannel outputChannel = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(</span><br><span class="line">                srcFile);</span><br><span class="line">        inputChannel = inputStream.getChannel();</span><br><span class="line">        outputChannel = <span class="keyword">new</span> FileOutputStream(parcelFileDescriptor.getFileDescriptor()).getChannel();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> srcSize = inputChannel.size();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> size = outputChannel.transferFrom(inputChannel, <span class="number">0</span>, srcSize);</span><br><span class="line">        <span class="keyword">if</span> (size == srcSize) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (inputChannel != <span class="keyword">null</span>) &#123;</span><br><span class="line">                inputChannel.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (outputChannel != <span class="keyword">null</span>) &#123;</span><br><span class="line">                outputChannel.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-android系统路径api补充说明"><a class="markdownIt-Anchor" href="#2-android系统路径api补充说明"></a> 2. Android系统路径API补充说明</h2><h3 id="21-内部存储与外部存储"><a class="markdownIt-Anchor" href="#21-内部存储与外部存储"></a> 2.1 内部存储与外部存储</h3><p>首先是内部存储与外部存储，内部存储类似<code>/data/user/0/us.zoom.androidqdemo/</code>，其中<code>us.zoom.androidqdemo</code>是包名，可以通过以下几个方法获取到当前应用的内部路径，内部存储一个最主要的特点就是与应用绑定，如果应用卸载了那么内部存储中应用私有目录的所有文件都会被删除，另一个特点就是内部存储无法直接通过手机中的文件管理或者其他名字的系统应用查看（而外部存储可见），内部存储的空间一般较小，需要谨慎使用，外部存储空间很大。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Environment.getDataDirectory().getAbsolutePath() <span class="comment">// /data</span></span><br><span class="line">getFilesDir().getAbsolutePath() <span class="comment">// /data/user/0/us.zoom.androidqdemo/files</span></span><br><span class="line">getCacheDir().getAbsolutePath() <span class="comment">// /data/user/0/us.zoom.androidqdemo/cache</span></span><br><span class="line">getDir(<span class="string">"myFile"</span>, MODE_PRIVATE).getAbsolutePath() <span class="comment">// /data/user/0/us.zoom.androidqdemo/app_myFile</span></span><br></pre></td></tr></table></figure><p>外部存储类似<code>/storage/emulated/0/Android/data/us.zoom.androidqdemo/files/</code>（外部存储的应用私有目录）、<code>/storage/emulated/0/Pictures/Screenshots/</code>（外部存储的公有目录）这样的路径，我们通过文件管理这个系统应用进入的根目录就是<code>/storage/emulated/0</code>，在Android Q之前我们会发现这个目录下有非常多的乱七八糟的文件夹，除了<code>Alarms, Android, DCIM, Download, Movies, Music, Notifications, Pictures, Podcasts, Ringtones</code>之外，其他文件或者文件夹都是由你安装的其他APP自行生成的，所以Android Q之前的文件系统极其混乱，因此在Android Q之后不允许对外部存储中公有目录随意访问（可能提示权限拒绝），而内部存储以及外部存储的应用私有目录可以直接通过路径访问，因此在Android Q上我们就会发现外部存储的根目录仅有上面我提到的几个文件夹。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Environment.getExternalStorageDirectory().getAbsolutePath() <span class="comment">// /storage/emulated/0</span></span><br><span class="line">Environment.getExternalStoragePublicDirectory(<span class="string">""</span>).getAbsolutePath() <span class="comment">// /storage/emulated/0</span></span><br><span class="line">getExternalFilesDir(<span class="string">""</span>).getAbsolutePath() <span class="comment">// /storage/emulated/0/Android/data/us.zoom.androidqdemo/files</span></span><br><span class="line">getExternalCacheDir().getAbsolutePath() <span class="comment">// /storage/emulated/0/Android/data/us.zoom.androidqdemo/cache</span></span><br><span class="line"><span class="comment">// 如果手机支持SD卡扩展，那么可以通过getExternalFilesDirs("")获取所有的外部存储（手机内置外部存储+SD卡）</span></span><br></pre></td></tr></table></figure><p>现在的Android手机一般情况下存储空间都非常大了基本在32GB起步，64GB比较常见，一般用到的都是外部存储，但是还是需要判断外部存储空间是否可用，比如通过<code>Environment.getExternalStorageState()</code>判断是否正常挂载，如果不可用那么就需要使用到内部存储。</p><h3 id="22-缓存与其他文件"><a class="markdownIt-Anchor" href="#22-缓存与其他文件"></a> 2.2 缓存与其他文件</h3><p>在内部存储和外部存储的应用私有目录下会发现两个文件夹<code>files</code>和<code>cache</code>，很显然，<code>files</code>用于存储普通数据，<code>cache</code>用于存储缓存数据，如何使用这两个目录存储应用的文件就依赖开发人员的选择了，比如如果是应用本身下载的文件但是不想对外公开，那么可以放在<code>files</code>中，如果是应用读写文件过程中产生的临时文件可以放在<code>cache</code>中，实际开发时需自行设计。</p><ul><li><p>清除缓存：我们知道应用程序在运行过程中需要经过很多过程，比如读入程序，计算，输入输出等等，这些过程中肯定会产生很多的数据，它们在内存中，以供程序运行时调用。所以清除缓存清除的是APP运行过程中所产生的临时数据。</p></li><li><p>清除数据：清除数据才是真正的删除了我们保存在文件中的数据（永久性数据，如果不人为删除的话会一直保存在文件中）例如当我们在设置里面清除了某个应用的数据，那么<code>/data/user/0/packname/</code>和<code>/storage/emulated/0/Android/data/packname/</code>下的文件里面的数据会全部删除，包括<code>cache</code>，<code>files</code>，<code>lib</code>，<code>shared_prefs</code>等等。</p></li></ul><h2 id="3-fileutils相关代码"><a class="markdownIt-Anchor" href="#3-fileutils相关代码"></a> 3. FileUtils相关代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> us.zoom.androidqdemo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (C) 2018 OpenIntents.org</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.ContentUris;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.database.Cursor;</span><br><span class="line"><span class="keyword">import</span> android.database.DatabaseUtils;</span><br><span class="line"><span class="keyword">import</span> android.net.Uri;</span><br><span class="line"><span class="keyword">import</span> android.os.Build;</span><br><span class="line"><span class="keyword">import</span> android.os.Environment;</span><br><span class="line"><span class="keyword">import</span> android.provider.DocumentsContract;</span><br><span class="line"><span class="keyword">import</span> android.provider.MediaStore;</span><br><span class="line"><span class="keyword">import</span> android.provider.OpenableColumns;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.webkit.MimeTypeMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.annotation.NonNull;</span><br><span class="line"><span class="keyword">import</span> androidx.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> androidx.core.content.FileProvider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.text.DecimalFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DOCUMENTS_DIR = <span class="string">"documents"</span>;</span><br><span class="line">    <span class="comment">// configured android:authorities in AndroidManifest (https://developer.android.com/reference/android/support/v4/content/FileProvider)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTHORITY =  <span class="string">"YOUR_AUTHORITY.provider"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String HIDDEN_PREFIX = <span class="string">"."</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * TAG for log messages.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"FileUtils"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> DEBUG = <span class="keyword">false</span>; <span class="comment">// Set to true to enable logging</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * File and folder comparator. TODO Expose sorting option method</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Comparator&lt;File&gt; sComparator = (f1, f2) -&gt; &#123;</span><br><span class="line">        <span class="comment">// Sort alphabetically by lower case, which is much cleaner</span></span><br><span class="line">        <span class="keyword">return</span> f1.getName().toLowerCase().compareTo(</span><br><span class="line">                f2.getName().toLowerCase());</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * File (not directories) filter.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> FileFilter sFileFilter = file -&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> String fileName = file.getName();</span><br><span class="line">        <span class="comment">// Return files only (not directories) and skip hidden files</span></span><br><span class="line">        <span class="keyword">return</span> file.isFile() &amp;&amp; !fileName.startsWith(HIDDEN_PREFIX);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Folder (directories) filter.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> FileFilter sDirFilter = file -&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> String fileName = file.getName();</span><br><span class="line">        <span class="comment">// Return directories only and skip hidden directories</span></span><br><span class="line">        <span class="keyword">return</span> file.isDirectory() &amp;&amp; !fileName.startsWith(HIDDEN_PREFIX);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">FileUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125; <span class="comment">//private constructor to enforce Singleton pattern</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Gets the extension of a file name, like ".png" or ".jpg".</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uri</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Extension including the dot("."); "" if there is no extension;</span></span><br><span class="line"><span class="comment">     * null if uri was null.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getExtension</span><span class="params">(String uri)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (uri == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> dot = uri.lastIndexOf(<span class="string">"."</span>);</span><br><span class="line">        <span class="keyword">if</span> (dot &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> uri.substring(dot);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// No extension.</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Whether the URI is a local one.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isLocal</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> url != <span class="keyword">null</span> &amp;&amp; !url.startsWith(<span class="string">"http://"</span>) &amp;&amp; !url.startsWith(<span class="string">"https://"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> True if Uri is a MediaStore Uri.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> paulburke</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isMediaUri</span><span class="params">(Uri uri)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"media"</span>.equalsIgnoreCase(uri.getAuthority());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Convert File into Uri.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> uri</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Uri <span class="title">getUri</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (file != <span class="keyword">null</span>) ? Uri.fromFile(file) : <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the path only (without file name).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">getPathWithoutFilename</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (file != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">                <span class="comment">// no file to be split off. Return everything</span></span><br><span class="line">                <span class="keyword">return</span> file;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                String filename = file.getName();</span><br><span class="line">                String filepath = file.getAbsolutePath();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Construct path without file name.</span></span><br><span class="line">                String pathwithoutname = filepath.substring(<span class="number">0</span>,</span><br><span class="line">                        filepath.length() - filename.length());</span><br><span class="line">                <span class="keyword">if</span> (pathwithoutname.endsWith(<span class="string">"/"</span>)) &#123;</span><br><span class="line">                    pathwithoutname = pathwithoutname.substring(<span class="number">0</span>, pathwithoutname.length() - <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> File(pathwithoutname);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The MIME type for the given file.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getMimeType</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String extension = getExtension(file.getName());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (extension.length() &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> MimeTypeMap.getSingleton().getMimeTypeFromExtension(extension.substring(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"application/octet-stream"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The MIME type for the give Uri.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getMimeType</span><span class="params">(Context context, Uri uri)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(getPath(context, uri));</span><br><span class="line">        <span class="keyword">return</span> getMimeType(file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The MIME type for the give String Uri.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getMimeType</span><span class="params">(Context context, String url)</span> </span>&#123;</span><br><span class="line">        String type = context.getContentResolver().getType(Uri.parse(url));</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="keyword">null</span>) &#123;</span><br><span class="line">            type = <span class="string">"application/octet-stream"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uri The Uri to check.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Whether the Uri authority is local.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isLocalStorageDocument</span><span class="params">(Uri uri)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> AUTHORITY.equals(uri.getAuthority());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uri The Uri to check.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Whether the Uri authority is ExternalStorageProvider.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isExternalStorageDocument</span><span class="params">(Uri uri)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"com.android.externalstorage.documents"</span>.equals(uri.getAuthority());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uri The Uri to check.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Whether the Uri authority is DownloadsProvider.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isDownloadsDocument</span><span class="params">(Uri uri)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"com.android.providers.downloads.documents"</span>.equals(uri.getAuthority());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uri The Uri to check.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Whether the Uri authority is MediaProvider.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isMediaDocument</span><span class="params">(Uri uri)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"com.android.providers.media.documents"</span>.equals(uri.getAuthority());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uri The Uri to check.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Whether the Uri authority is Google Photos.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isGooglePhotosUri</span><span class="params">(Uri uri)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"com.google.android.apps.photos.content"</span>.equals(uri.getAuthority());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the value of the data column for this Uri. This is useful for</span></span><br><span class="line"><span class="comment">     * MediaStore Uris, and other file-based ContentProviders.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context       The context.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uri           The Uri to query.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> selection     (Optional) Filter used in the query.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> selectionArgs (Optional) Selection arguments used in the query.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The value of the _data column, which is typically a file path.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getDataColumn</span><span class="params">(Context context, Uri uri, String selection,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       String[] selectionArgs)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Cursor cursor = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">final</span> String column = MediaStore.Files.FileColumns.DATA;</span><br><span class="line">        <span class="keyword">final</span> String[] projection = &#123;</span><br><span class="line">                column</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cursor = context.getContentResolver().query(uri, projection, selection, selectionArgs,</span><br><span class="line">                    <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (cursor != <span class="keyword">null</span> &amp;&amp; cursor.moveToFirst()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG)</span><br><span class="line">                    DatabaseUtils.dumpCursor(cursor);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> column_index = cursor.getColumnIndexOrThrow(column);</span><br><span class="line">                <span class="keyword">return</span> cursor.getString(column_index);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;  <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (cursor != <span class="keyword">null</span>)</span><br><span class="line">                cursor.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get a file path from a Uri. This will get the the path for Storage Access</span></span><br><span class="line"><span class="comment">     * Framework Documents, as well as the _data field for the MediaStore and</span></span><br><span class="line"><span class="comment">     * other file-based ContentProviders.&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * &lt;br&gt;</span></span><br><span class="line"><span class="comment">     * Callers should check whether the path is local before assuming it</span></span><br><span class="line"><span class="comment">     * represents a local file.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context The context.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uri     The Uri to query.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #isLocal(String)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #getFile(Context, Uri)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPath</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> Uri uri)</span> </span>&#123;</span><br><span class="line">        String absolutePath = getLocalPath(context, uri);</span><br><span class="line">        <span class="keyword">return</span> absolutePath != <span class="keyword">null</span> ? absolutePath : uri.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getLocalPath</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> Uri uri)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (DEBUG)</span><br><span class="line">            Log.d(TAG + <span class="string">" File -"</span>,</span><br><span class="line">                    <span class="string">"Authority: "</span> + uri.getAuthority() +</span><br><span class="line">                            <span class="string">", Fragment: "</span> + uri.getFragment() +</span><br><span class="line">                            <span class="string">", Port: "</span> + uri.getPort() +</span><br><span class="line">                            <span class="string">", Query: "</span> + uri.getQuery() +</span><br><span class="line">                            <span class="string">", Scheme: "</span> + uri.getScheme() +</span><br><span class="line">                            <span class="string">", Host: "</span> + uri.getHost() +</span><br><span class="line">                            <span class="string">", Segments: "</span> + uri.getPathSegments().toString()</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> isKitKat = Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// DocumentProvider</span></span><br><span class="line">        <span class="keyword">if</span> (isKitKat &amp;&amp; DocumentsContract.isDocumentUri(context, uri)) &#123;</span><br><span class="line">            <span class="comment">// LocalStorageProvider</span></span><br><span class="line">            <span class="keyword">if</span> (isLocalStorageDocument(uri)) &#123;</span><br><span class="line">                <span class="comment">// The path is the id</span></span><br><span class="line">                <span class="keyword">return</span> DocumentsContract.getDocumentId(uri);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// ExternalStorageProvider</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (isExternalStorageDocument(uri)) &#123;</span><br><span class="line">                <span class="keyword">final</span> String docId = DocumentsContract.getDocumentId(uri);</span><br><span class="line">                <span class="keyword">final</span> String[] split = docId.split(<span class="string">":"</span>);</span><br><span class="line">                <span class="keyword">final</span> String type = split[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"primary"</span>.equalsIgnoreCase(type)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> Environment.getExternalStorageDirectory() + <span class="string">"/"</span> + split[<span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"home"</span>.equalsIgnoreCase(type)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> Environment.getExternalStorageDirectory() + <span class="string">"/documents/"</span> + split[<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// DownloadsProvider</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (isDownloadsDocument(uri)) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">final</span> String id = DocumentsContract.getDocumentId(uri);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (id != <span class="keyword">null</span> &amp;&amp; id.startsWith(<span class="string">"raw:"</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> id.substring(<span class="number">4</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// Android Q 似乎无效</span></span><br><span class="line">                String[] contentUriPrefixesToTry = <span class="keyword">new</span> String[]&#123;</span><br><span class="line">                        <span class="string">"content://downloads/public_downloads"</span>,</span><br><span class="line">                        <span class="string">"content://downloads/my_downloads"</span>,</span><br><span class="line">                        <span class="string">"content://downloads/all_downloads"</span></span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (String contentUriPrefix : contentUriPrefixesToTry) &#123;</span><br><span class="line">                    Uri contentUri = ContentUris.withAppendedId(Uri.parse(contentUriPrefix), Long.valueOf(id));</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        String path = getDataColumn(context, contentUri, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> (path != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> path;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// path could not be retrieved using ContentResolver, therefore copy file to accessible cache using streams</span></span><br><span class="line">                String fileName = getFileName(context, uri);</span><br><span class="line">                File cacheDir = getDocumentCacheDir(context);</span><br><span class="line">                File file = generateFileName(fileName, cacheDir);</span><br><span class="line">                String destinationPath = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (file != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    destinationPath = file.getAbsolutePath();</span><br><span class="line">                    saveFileFromUri(context, uri, destinationPath);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> destinationPath;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// MediaProvider</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (isMediaDocument(uri)) &#123;</span><br><span class="line">                <span class="keyword">final</span> String docId = DocumentsContract.getDocumentId(uri);</span><br><span class="line">                <span class="keyword">final</span> String[] split = docId.split(<span class="string">":"</span>);</span><br><span class="line">                <span class="keyword">final</span> String type = split[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">                Uri contentUri = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"image"</span>.equals(type)) &#123;</span><br><span class="line">                    contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"video"</span>.equals(type)) &#123;</span><br><span class="line">                    contentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"audio"</span>.equals(type)) &#123;</span><br><span class="line">                    contentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">final</span> String selection = <span class="string">"_id=?"</span>;</span><br><span class="line">                <span class="keyword">final</span> String[] selectionArgs = <span class="keyword">new</span> String[]&#123;</span><br><span class="line">                        split[<span class="number">1</span>]</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> getDataColumn(context, contentUri, selection, selectionArgs);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// MediaStore (and general)</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"content"</span>.equalsIgnoreCase(uri.getScheme())) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Return the remote address</span></span><br><span class="line">            <span class="keyword">if</span> (isGooglePhotosUri(uri)) &#123;</span><br><span class="line">                <span class="keyword">return</span> uri.getLastPathSegment();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> getDataColumn(context, uri, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// File</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"file"</span>.equalsIgnoreCase(uri.getScheme())) &#123;</span><br><span class="line">            <span class="keyword">return</span> uri.getPath();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Convert Uri into File, if possible.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> file A local file that the Uri was pointing to, or null if the</span></span><br><span class="line"><span class="comment">     * Uri is unsupported or pointed to a remote resource.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> paulburke</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #getPath(Context, Uri)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">getFile</span><span class="params">(Context context, Uri uri)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (uri != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String path = getPath(context, uri);</span><br><span class="line">            <span class="keyword">if</span> (path != <span class="keyword">null</span> &amp;&amp; isLocal(path)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> File(path);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the file size in a human-readable string.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> paulburke</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getReadableFileSize</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> BYTES_IN_KILOBYTES = <span class="number">1024</span>;</span><br><span class="line">        <span class="keyword">final</span> DecimalFormat dec = <span class="keyword">new</span> DecimalFormat(<span class="string">"###.#"</span>);</span><br><span class="line">        <span class="keyword">final</span> String KILOBYTES = <span class="string">" KB"</span>;</span><br><span class="line">        <span class="keyword">final</span> String MEGABYTES = <span class="string">" MB"</span>;</span><br><span class="line">        <span class="keyword">final</span> String GIGABYTES = <span class="string">" GB"</span>;</span><br><span class="line">        <span class="keyword">float</span> fileSize = <span class="number">0</span>;</span><br><span class="line">        String suffix = KILOBYTES;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (size &gt; BYTES_IN_KILOBYTES) &#123;</span><br><span class="line">            fileSize = size / BYTES_IN_KILOBYTES;</span><br><span class="line">            <span class="keyword">if</span> (fileSize &gt; BYTES_IN_KILOBYTES) &#123;</span><br><span class="line">                fileSize = fileSize / BYTES_IN_KILOBYTES;</span><br><span class="line">                <span class="keyword">if</span> (fileSize &gt; BYTES_IN_KILOBYTES) &#123;</span><br><span class="line">                    fileSize = fileSize / BYTES_IN_KILOBYTES;</span><br><span class="line">                    suffix = GIGABYTES;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    suffix = MEGABYTES;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(dec.format(fileSize) + suffix);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the Intent for selecting content to be used in an Intent Chooser.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The intent for opening a file with Intent.createChooser()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Intent <span class="title">createGetContentIntent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Implicitly allow the user to select a particular kind of data</span></span><br><span class="line">        <span class="keyword">final</span> Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_GET_CONTENT);</span><br><span class="line">        <span class="comment">// The MIME data type filter</span></span><br><span class="line">        intent.setType(<span class="string">"*/*"</span>);</span><br><span class="line">        <span class="comment">// Only return URIs that can be opened with ContentResolver</span></span><br><span class="line">        intent.addCategory(Intent.CATEGORY_OPENABLE);</span><br><span class="line">        <span class="keyword">return</span> intent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates View intent for given file</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The intent for viewing file</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Intent <span class="title">getViewIntent</span><span class="params">(Context context, File file)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Uri uri = Uri.fromFile(file);</span></span><br><span class="line">        Uri uri = FileProvider.getUriForFile(context, AUTHORITY, file);</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW);</span><br><span class="line">        String url = file.toString();</span><br><span class="line">        <span class="keyword">if</span> (url.contains(<span class="string">".doc"</span>) || url.contains(<span class="string">".docx"</span>)) &#123;</span><br><span class="line">            <span class="comment">// Word document</span></span><br><span class="line">            intent.setDataAndType(uri, <span class="string">"application/msword"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url.contains(<span class="string">".pdf"</span>)) &#123;</span><br><span class="line">            <span class="comment">// PDF file</span></span><br><span class="line">            intent.setDataAndType(uri, <span class="string">"application/pdf"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url.contains(<span class="string">".ppt"</span>) || url.contains(<span class="string">".pptx"</span>)) &#123;</span><br><span class="line">            <span class="comment">// Powerpoint file</span></span><br><span class="line">            intent.setDataAndType(uri, <span class="string">"application/vnd.ms-powerpoint"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url.contains(<span class="string">".xls"</span>) || url.contains(<span class="string">".xlsx"</span>)) &#123;</span><br><span class="line">            <span class="comment">// Excel file</span></span><br><span class="line">            intent.setDataAndType(uri, <span class="string">"application/vnd.ms-excel"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url.contains(<span class="string">".zip"</span>) || url.contains(<span class="string">".rar"</span>)) &#123;</span><br><span class="line">            <span class="comment">// WAV audio file</span></span><br><span class="line">            intent.setDataAndType(uri, <span class="string">"application/x-wav"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url.contains(<span class="string">".rtf"</span>)) &#123;</span><br><span class="line">            <span class="comment">// RTF file</span></span><br><span class="line">            intent.setDataAndType(uri, <span class="string">"application/rtf"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url.contains(<span class="string">".wav"</span>) || url.contains(<span class="string">".mp3"</span>)) &#123;</span><br><span class="line">            <span class="comment">// WAV audio file</span></span><br><span class="line">            intent.setDataAndType(uri, <span class="string">"audio/x-wav"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url.contains(<span class="string">".gif"</span>)) &#123;</span><br><span class="line">            <span class="comment">// GIF file</span></span><br><span class="line">            intent.setDataAndType(uri, <span class="string">"image/gif"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url.contains(<span class="string">".jpg"</span>) || url.contains(<span class="string">".jpeg"</span>) || url.contains(<span class="string">".png"</span>)) &#123;</span><br><span class="line">            <span class="comment">// JPG file</span></span><br><span class="line">            intent.setDataAndType(uri, <span class="string">"image/jpeg"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url.contains(<span class="string">".txt"</span>)) &#123;</span><br><span class="line">            <span class="comment">// Text file</span></span><br><span class="line">            intent.setDataAndType(uri, <span class="string">"text/plain"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url.contains(<span class="string">".3gp"</span>) || url.contains(<span class="string">".mpg"</span>) || url.contains(<span class="string">".mpeg"</span>) ||</span><br><span class="line">                url.contains(<span class="string">".mpe"</span>) || url.contains(<span class="string">".mp4"</span>) || url.contains(<span class="string">".avi"</span>)) &#123;</span><br><span class="line">            <span class="comment">// Video files</span></span><br><span class="line">            intent.setDataAndType(uri, <span class="string">"video/*"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            intent.setDataAndType(uri, <span class="string">"*/*"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">        intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);</span><br><span class="line">        intent.addFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION);</span><br><span class="line">        <span class="keyword">return</span> intent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">getDownloadsDir</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">getDocumentCacheDir</span><span class="params">(@NonNull Context context)</span> </span>&#123;</span><br><span class="line">        File dir = <span class="keyword">new</span> File(context.getCacheDir(), DOCUMENTS_DIR);</span><br><span class="line">        <span class="keyword">if</span> (!dir.exists()) &#123;</span><br><span class="line">            dir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        logDir(context.getCacheDir());</span><br><span class="line">        logDir(dir);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dir;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">logDir</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!DEBUG) <span class="keyword">return</span>;</span><br><span class="line">        Log.d(TAG, <span class="string">"Dir="</span> + dir);</span><br><span class="line">        File[] files = dir.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"File="</span> + file.getPath());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">generateFileName</span><span class="params">(@Nullable String name, File directory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        File file = <span class="keyword">new</span> File(directory, name);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">            String fileName = name;</span><br><span class="line">            String extension = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">int</span> dotIndex = name.lastIndexOf(<span class="string">'.'</span>);</span><br><span class="line">            <span class="keyword">if</span> (dotIndex &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                fileName = name.substring(<span class="number">0</span>, dotIndex);</span><br><span class="line">                extension = name.substring(dotIndex);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (file.exists()) &#123;</span><br><span class="line">                index++;</span><br><span class="line">                name = fileName + <span class="string">'('</span> + index + <span class="string">')'</span> + extension;</span><br><span class="line">                file = <span class="keyword">new</span> File(directory, name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!file.createNewFile()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            Log.w(TAG, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        logDir(directory);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> file;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    /**</span></span><br><span class="line"><span class="comment">//     * Writes response body to disk</span></span><br><span class="line"><span class="comment">//     *</span></span><br><span class="line"><span class="comment">//     * @param body ResponseBody</span></span><br><span class="line"><span class="comment">//     * @param path file path</span></span><br><span class="line"><span class="comment">//     * @return File</span></span><br><span class="line"><span class="comment">//     */</span></span><br><span class="line"><span class="comment">//    public static File writeResponseBodyToDisk(ResponseBody body, String path) &#123;</span></span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//            File target = new File(path);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            InputStream inputStream = null;</span></span><br><span class="line"><span class="comment">//            OutputStream outputStream = null;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            try &#123;</span></span><br><span class="line"><span class="comment">//                byte[] fileReader = new byte[4096];</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                inputStream = body.byteStream();</span></span><br><span class="line"><span class="comment">//                outputStream = new FileOutputStream(target);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                while (true) &#123;</span></span><br><span class="line"><span class="comment">//                    int read = inputStream.read(fileReader);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                    if (read == -1) &#123;</span></span><br><span class="line"><span class="comment">//                        break;</span></span><br><span class="line"><span class="comment">//                    &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                    outputStream.write(fileReader, 0, read);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                outputStream.flush();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                return target;</span></span><br><span class="line"><span class="comment">//            &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">//                return null;</span></span><br><span class="line"><span class="comment">//            &#125; finally &#123;</span></span><br><span class="line"><span class="comment">//                if (inputStream != null) &#123;</span></span><br><span class="line"><span class="comment">//                    inputStream.close();</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                if (outputStream != null) &#123;</span></span><br><span class="line"><span class="comment">//                    outputStream.close();</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">//            return null;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">saveFileFromUri</span><span class="params">(Context context, Uri uri, String destinationPath)</span> </span>&#123;</span><br><span class="line">        InputStream is = <span class="keyword">null</span>;</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            is = context.getContentResolver().openInputStream(uri);</span><br><span class="line">            bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(destinationPath, <span class="keyword">false</span>));</span><br><span class="line">            <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            is.read(buf);</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                bos.write(buf);</span><br><span class="line">            &#125; <span class="keyword">while</span> (is.read(buf) != -<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (is != <span class="keyword">null</span>) is.close();</span><br><span class="line">                <span class="keyword">if</span> (bos != <span class="keyword">null</span>) bos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] readBytesFromFile(String filePath) &#123;</span><br><span class="line"></span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] bytesArray = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            File file = <span class="keyword">new</span> File(filePath);</span><br><span class="line">            bytesArray = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>) file.length()];</span><br><span class="line"></span><br><span class="line">            <span class="comment">//read file into bytes[]</span></span><br><span class="line">            fileInputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">            fileInputStream.read(bytesArray);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fileInputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fileInputStream.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bytesArray;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">createTempImageFile</span><span class="params">(Context context, String fileName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// Create an image file name</span></span><br><span class="line">        File storageDir = <span class="keyword">new</span> File(context.getCacheDir(), DOCUMENTS_DIR);</span><br><span class="line">        <span class="keyword">return</span> File.createTempFile(fileName, <span class="string">".jpg"</span>, storageDir);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFileName</span><span class="params">(@NonNull Context context, Uri uri)</span> </span>&#123;</span><br><span class="line">        String mimeType = context.getContentResolver().getType(uri);</span><br><span class="line">        String filename = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mimeType == <span class="keyword">null</span> &amp;&amp; context != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String path = getPath(context, uri);</span><br><span class="line">            <span class="keyword">if</span> (path == <span class="keyword">null</span>) &#123;</span><br><span class="line">                filename = getName(uri.toString());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                File file = <span class="keyword">new</span> File(path);</span><br><span class="line">                filename = file.getName();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Cursor returnCursor = context.getContentResolver().query(uri, <span class="keyword">null</span>,</span><br><span class="line">                    <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (returnCursor != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> nameIndex = returnCursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);</span><br><span class="line">                returnCursor.moveToFirst();</span><br><span class="line">                filename = returnCursor.getString(nameIndex);</span><br><span class="line">                returnCursor.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> filename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getName</span><span class="params">(String filename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (filename == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> index = filename.lastIndexOf(<span class="string">'/'</span>);</span><br><span class="line">        <span class="keyword">return</span> filename.substring(index + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.android.com/preview/privacy/scoped-storage&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android Q 隐私权变更：分区存储&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://developer.android.com/training/data-storage/files/external&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Save a file on external storage&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://juejin.im/post/5d838a7af265da03ee6a90cd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android 10(Android Q) 适配&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://developer.android.com/guide/topics/providers/document-provider?hl=zh-cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;使用存储访问框架打开文件&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://segmentfault.com/a/1190000019224425&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android Q 沙箱适配多媒体文件总结&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Android Q之后对系统存储方式进行了调整，简而言之就是禁止开发人员随意通过路径访问操作外部存储文件，内部存储没有影响。这样做的目的很明显，即往后原生Android的文件管理器将不会出现各种App生成的乱七八糟的文件，不同类型的文件都在其各自相应的位置。&lt;/p&gt;
&lt;p&gt;示意图如下，主要行为变更在媒体文件（音频、视频、图片）以及下载文件中&lt;/p&gt;
&lt;!--  --&gt;
&lt;p&gt;&lt;img src=&quot;http://114.116.9.65:7777/images/2020/01/18/file.png&quot; alt=&quot;file.png&quot; /&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://zhoutao822.coding.me/categories/Android/"/>
    
    
      <category term="AndroidQ" scheme="http://zhoutao822.coding.me/tags/AndroidQ/"/>
    
  </entry>
  
  <entry>
    <title>LSGAN</title>
    <link href="http://zhoutao822.coding.me/archives/8f4a6b8f.html"/>
    <id>http://zhoutao822.coding.me/archives/8f4a6b8f.html</id>
    <published>2019-08-29T12:51:48.000Z</published>
    <updated>2020-01-18T15:02:03.461Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><blockquote><p><a href="https://arxiv.org/abs/1611.04076" target="_blank" rel="noopener">Least Squares Generative Adversarial Networks</a></p></blockquote><a id="more"></a><h2 id="1-lsgan作者说"><a class="markdownIt-Anchor" href="#1-lsgan作者说"></a> 1. LSGAN作者说</h2><p>LSGAN(Least Squares Generative Adversarial Networks)，提出的目的也是为了加强训练过程的稳定性，同时经过对比实验发现LSGAN能生成质量更好的<br />图片，它的做法是修改损失函数，通过对判别器使用最小均方损失来实现。</p><p>对于原始GAN来说，其目标函数为</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder><mo><mi>min</mi><mo>⁡</mo></mo><mi>G</mi></munder><munder><mo><mi>max</mi><mo>⁡</mo></mo><mi>D</mi></munder><msub><mi>V</mi><mrow><mi>G</mi><mi>A</mi><mi>N</mi></mrow></msub><mo stretchy="false">(</mo><mi>D</mi><mo separator="true">,</mo><mi>G</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi mathvariant="double-struck">E</mi><mrow><mi mathvariant="bold-italic">x</mi><mo>∼</mo><msub><mi>p</mi><mrow><mi>d</mi><mi>a</mi><mi>t</mi><mi>a</mi></mrow></msub><mo stretchy="false">(</mo><mi mathvariant="bold-italic">x</mi><mo stretchy="false">)</mo></mrow></msub><mo stretchy="false">[</mo><mi>log</mi><mo>⁡</mo><mi>D</mi><mo stretchy="false">(</mo><mi mathvariant="bold-italic">x</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>+</mo><msub><mi mathvariant="double-struck">E</mi><mrow><mi mathvariant="bold-italic">z</mi><mo>∼</mo><msub><mi>p</mi><mi>z</mi></msub><mo stretchy="false">(</mo><mi mathvariant="bold-italic">z</mi><mo stretchy="false">)</mo></mrow></msub><mo stretchy="false">[</mo><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>D</mi><mo stretchy="false">(</mo><mi>G</mi><mo stretchy="false">(</mo><mi mathvariant="bold-italic">z</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">\min_G \max_D V_{GAN}(D, G) = \mathbb{E}_{\boldsymbol{x} \sim p_{data}(\boldsymbol{x})}[\log D(\boldsymbol{x})] + \mathbb{E}_{\boldsymbol{z} \sim p_{z}(\boldsymbol{z})}[\log (1 - D(G(\boldsymbol{z})))]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.494331em;vertical-align:-0.7443310000000001em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.66786em;"><span style="top:-2.055669em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">G</span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">min</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.744331em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.43055999999999983em;"><span style="top:-2.055669em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">max</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7443310000000001em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">G</span><span class="mord mathdefault mtight">A</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">G</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1052em;vertical-align:-0.3551999999999999em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">E</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord boldsymbol mtight">x</span></span></span><span class="mrel mtight">∼</span><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mtight"><span class="mord boldsymbol mtight">x</span></span></span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mopen">[</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord boldsymbol">x</span></span></span><span class="mclose">)</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1052em;vertical-align:-0.3551999999999999em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">E</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord boldsymbol mtight" style="margin-right:0.04213em;">z</span></span></span><span class="mrel mtight">∼</span><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mtight"><span class="mord boldsymbol mtight" style="margin-right:0.04213em;">z</span></span></span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mopen">[</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathdefault">G</span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.04213em;">z</span></span></span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">]</span></span></span></span></span></p><p>原始GAN的判别器使用了Sigmoid激活函数输出结果，我们知道Sigmoid有一个很显著的特点就是对于输出结果非常容易将其划分到1或者0，这一点可以从Sigmoid函数图像中看出，这在CNN分类任务中是很有效的，因为分类任务的目的是将目标的种类进行划分，而目标的种类不是0就是1（二分类），但是对于GAN来说使用Sigmoid会产生问题，GAN的目的是生成对抗样本，如果判别器将生成样本判别为1，则生成器梯度下降为0，那么此样本将不会对模型产生任何训练影响，但是此样本是否属于接近真实样本我们不得而知，而仅仅依靠判别器进行判断，所以说Sigmoid作为最后一层的激活函数应该不适合用于GAN的判别器。</p><!--  --><p><img src="http://114.116.9.65:7777/images/2020/01/18/sigmoid.png" alt="sigmoid.png" /></p><p>因此LSGAN的作者提出了使用最小二乘法作为损失函数</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder><mo><mi>min</mi><mo>⁡</mo></mo><mi>D</mi></munder><msub><mi>V</mi><mrow><mi>L</mi><mi>S</mi><mi>G</mi><mi>A</mi><mi>N</mi></mrow></msub><mo stretchy="false">(</mo><mi>D</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><msub><mi mathvariant="double-struck">E</mi><mrow><mi mathvariant="bold-italic">x</mi><mo>∼</mo><msub><mi>p</mi><mrow><mi>d</mi><mi>a</mi><mi>t</mi><mi>a</mi></mrow></msub><mo stretchy="false">(</mo><mi mathvariant="bold-italic">x</mi><mo stretchy="false">)</mo></mrow></msub><mo stretchy="false">[</mo><mo stretchy="false">(</mo><mi>D</mi><mo stretchy="false">(</mo><mi mathvariant="bold-italic">x</mi><mo stretchy="false">)</mo><mo>−</mo><mi>b</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo stretchy="false">]</mo><mo>+</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><msub><mi mathvariant="double-struck">E</mi><mrow><mi mathvariant="bold-italic">z</mi><mo>∼</mo><msub><mi>p</mi><mi>z</mi></msub><mo stretchy="false">(</mo><mi mathvariant="bold-italic">z</mi><mo stretchy="false">)</mo></mrow></msub><mo stretchy="false">[</mo><mo stretchy="false">(</mo><mi>D</mi><mo stretchy="false">(</mo><mi>G</mi><mo stretchy="false">(</mo><mi mathvariant="bold-italic">z</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>−</mo><mi>a</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo stretchy="false">]</mo><mspace linebreak="newline"></mspace><munder><mo><mi>min</mi><mo>⁡</mo></mo><mi>G</mi></munder><msub><mi>V</mi><mrow><mi>L</mi><mi>S</mi><mi>G</mi><mi>A</mi><mi>N</mi></mrow></msub><mo stretchy="false">(</mo><mi>G</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><msub><mi mathvariant="double-struck">E</mi><mrow><mi mathvariant="bold-italic">z</mi><mo>∼</mo><msub><mi>p</mi><mi>z</mi></msub><mo stretchy="false">(</mo><mi mathvariant="bold-italic">z</mi><mo stretchy="false">)</mo></mrow></msub><mo stretchy="false">[</mo><mo stretchy="false">(</mo><mi>D</mi><mo stretchy="false">(</mo><mi>G</mi><mo stretchy="false">(</mo><mi mathvariant="bold-italic">z</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>−</mo><mi>c</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">\min_D V_{LSGAN}(D) = \frac{1}{2} \mathbb{E}_{\boldsymbol{x} \sim p_{data}(\boldsymbol{x})}[(D(\boldsymbol{x}) - b)^2] + \frac{1}{2} \mathbb{E}_{\boldsymbol{z} \sim p_{z}(\boldsymbol{z})}[(D(G(\boldsymbol{z}))-a)^2]\\\min_G V_{LSGAN}(G) = \frac{1}{2}\mathbb{E}_{\boldsymbol{z} \sim p_{z}(\boldsymbol{z})}[(D(G(\boldsymbol{z}))-c)^2]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4943309999999999em;vertical-align:-0.744331em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.66786em;"><span style="top:-2.055669em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">min</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.744331em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">L</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span><span class="mord mathdefault mtight">G</span><span class="mord mathdefault mtight">A</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord"><span class="mord mathbb">E</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord boldsymbol mtight">x</span></span></span><span class="mrel mtight">∼</span><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mtight"><span class="mord boldsymbol mtight">x</span></span></span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mopen">[</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord boldsymbol">x</span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord"><span class="mord mathbb">E</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord boldsymbol mtight" style="margin-right:0.04213em;">z</span></span></span><span class="mrel mtight">∼</span><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mtight"><span class="mord boldsymbol mtight" style="margin-right:0.04213em;">z</span></span></span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mopen">[</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathdefault">G</span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.04213em;">z</span></span></span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.4943309999999999em;vertical-align:-0.744331em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.66786em;"><span style="top:-2.055669em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">G</span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">min</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.744331em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">L</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span><span class="mord mathdefault mtight">G</span><span class="mord mathdefault mtight">A</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">G</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord"><span class="mord mathbb">E</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord boldsymbol mtight" style="margin-right:0.04213em;">z</span></span></span><span class="mrel mtight">∼</span><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mtight"><span class="mord boldsymbol mtight" style="margin-right:0.04213em;">z</span></span></span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mopen">[</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathdefault">G</span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.04213em;">z</span></span></span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span></span></p><p>其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo separator="true">,</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a, b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span></span></span></span>分别是生成样本和真实样本的标签，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span></span></span></span>表示G希望D相信这是生成样本的程度，如果<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mo>=</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">c = b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span>，则表示我们希望G能够生成更加接近真实样本的数据，如果<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>&lt;</mo><mi>c</mi><mo>&lt;</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a &lt; c &lt; b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span>，则表示我们希望G能够生成多样性更强的数据。</p><p>当G固定时，D的最优解为</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>D</mi><mo>∗</mo></msup><mo stretchy="false">(</mo><mi mathvariant="bold-italic">x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>b</mi><msub><mi>p</mi><mrow><mi>d</mi><mi>a</mi><mi>t</mi><mi>a</mi></mrow></msub><mo stretchy="false">(</mo><mi mathvariant="bold-italic">x</mi><mo stretchy="false">)</mo><mo>+</mo><mi>a</mi><msub><mi>p</mi><mi>g</mi></msub><mo stretchy="false">(</mo><mi mathvariant="bold-italic">x</mi><mo stretchy="false">)</mo></mrow><mrow><msub><mi>p</mi><mrow><mi>d</mi><mi>a</mi><mi>t</mi><mi>a</mi></mrow></msub><mo stretchy="false">(</mo><mi mathvariant="bold-italic">x</mi><mo stretchy="false">)</mo><mo>+</mo><msub><mi>p</mi><mi>g</mi></msub><mo stretchy="false">(</mo><mi mathvariant="bold-italic">x</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">D^*(\boldsymbol{x}) = \frac{bp_{data}(\boldsymbol{x}) + ap_g(\boldsymbol{x})}{p_{data}(\boldsymbol{x}) + p_g(\boldsymbol{x})}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.738696em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord boldsymbol">x</span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.399108em;vertical-align:-0.972108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord boldsymbol">x</span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord boldsymbol">x</span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord boldsymbol">x</span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord boldsymbol">x</span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.972108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://arxiv.org/abs/1611.04076&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Least Squares Generative Adversarial Networks&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Deep Learning" scheme="http://zhoutao822.coding.me/categories/Deep-Learning/"/>
    
    
      <category term="Theory" scheme="http://zhoutao822.coding.me/tags/Theory/"/>
    
      <category term="LSGAN" scheme="http://zhoutao822.coding.me/tags/LSGAN/"/>
    
  </entry>
  
  <entry>
    <title>Android IPC-AIDL、Messenger和Socket</title>
    <link href="http://zhoutao822.coding.me/archives/c75dc4ab.html"/>
    <id>http://zhoutao822.coding.me/archives/c75dc4ab.html</id>
    <published>2019-07-25T13:41:57.000Z</published>
    <updated>2020-01-18T15:05:09.347Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><blockquote><p><a href="https://item.m.jd.com/product/11760209.html" target="_blank" rel="noopener">Android开发艺术探索</a></p></blockquote><p>Android系统中的每一个应用都运行在一个各自的进程中，那么不同的应用是如何进行数据交互的呢，大致分为两类，第一类我称之为伪进程间通信，其特征是不同进程都对同一个文件进行操作，数据交互通过此文件，比如两个进程共同读写同一个数据库；第二类我称之为真进程间通信，特征是基于系统级别的Binder进行服务调用从而实现的进程间通信或者Socket，具体细节后面再说。</p><a id="more"></a><h2 id="1-socket"><a class="markdownIt-Anchor" href="#1-socket"></a> 1. Socket</h2><p>首先了解一下Socket，Socket是对TCP和UDP协议的封装，通过Socket建立的连接可以实现互联网中任意两个进程间的通信，不仅限于局域网或者单机多进程，而我们仅需要确定的是设备的IP和监听的端口号，下面看看Socket是如何实现局域网内从手机传数据到笔记本上。</p><p>Socket的使用分为服务端和客户端，服务端需要监听自己设定的端口，客户端需要知道服务端的IP和服务端监听的端口，两者通过Socket建立连接，然后以数据流的形式通过Socket传输数据。</p><p>首先是服务端，在笔记本上运行的代码，同时需要知道笔记本的IP地址（笔记本和手机在同一局域网中）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义线程Server</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    ServerSocket server = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Server</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Server线程初始化需要指定端口号，且服务端使用ServerSocket建立连接</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            server = <span class="keyword">new</span> ServerSocket(port);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.run();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"服务器在启动中...等待用户的连接"</span>);</span><br><span class="line">            <span class="comment">// 一直接收用户的连接，连接之后发送一条短信给用户</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 建立socket接口，accept方法是一个阻塞进程,等到有用户连接才往下走</span></span><br><span class="line">                <span class="comment">// 定义Socket类</span></span><br><span class="line">                Socket socket = server.accept();</span><br><span class="line">                <span class="comment">// 通过socket对象可以获得输出流，用来写数据</span></span><br><span class="line">                OutputStream os = socket.getOutputStream();</span><br><span class="line">                <span class="comment">// 向客户端发送消息</span></span><br><span class="line">                os.write(<span class="string">"服务器正在向你发送消息！"</span>.getBytes());</span><br><span class="line">                <span class="comment">// 在服务器上显示连接的上的电脑、</span></span><br><span class="line">                System.out.println(socket.getInetAddress().getHostAddress() + <span class="string">"连接上了！"</span>);</span><br><span class="line">                <span class="comment">// 通过socket对象可以获得输入流，用来读取用户数据</span></span><br><span class="line">                InputStream is = socket.getInputStream();</span><br><span class="line">                <span class="comment">// 读取数据</span></span><br><span class="line">                <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="keyword">while</span> ((len = is.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="comment">// 直接把获得的数据打印出来</span></span><br><span class="line">                    String msgFromClient = <span class="keyword">new</span> String(buf, <span class="number">0</span>, len);</span><br><span class="line">                    System.out.println(<span class="string">"服务器接收到客户端的数据："</span> + msgFromClient);</span><br><span class="line">                    <span class="comment">// 根据客户端传来的数据，我们再返回数据给客户端</span></span><br><span class="line">                    <span class="keyword">if</span> (msgFromClient.contains(<span class="string">"hello"</span>)) &#123;</span><br><span class="line">                        os.write(<span class="string">"hello too!!"</span>.getBytes());</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (msgFromClient.contains(<span class="string">"are"</span>)) &#123;</span><br><span class="line">                        os.write(<span class="string">"I'm fine."</span>.getBytes());</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (msgFromClient.contains(<span class="string">"bye"</span>)) &#123;</span><br><span class="line">                        os.write(<span class="string">"Bye!"</span>.getBytes());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                os.flush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在main函数中启用即可，这里选择监听的端口为6768</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里服务器只需要定义一个端口号就可以了，程序会自动获取IP地址</span></span><br><span class="line">        <span class="comment">// 但是客户端需要连接这个服务器时，需要知道它的IP地址还有端口号</span></span><br><span class="line">        <span class="comment">// ip地址的查看方法：进入cmd窗口，输入ipconfig/all可以看到</span></span><br><span class="line">        Server server = <span class="keyword">new</span> Server(<span class="number">6768</span>);</span><br><span class="line">        server.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是客户端的设计，需要权限<code>&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;</code></p><blockquote><p>1.简单布局</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Socket socket = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView textView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Button button = findViewById(R.id.button);</span><br><span class="line">        button.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        Button button1 = findViewById(R.id.hello);</span><br><span class="line">        button1.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        Button button2 = findViewById(R.id.how);</span><br><span class="line">        button2.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        Button button3 = findViewById(R.id.bye);</span><br><span class="line">        button3.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        textView = findViewById(R.id.textView);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2.定义连接Socket的方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">connectToServer</span><span class="params">(String host, <span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 需要的参数是IP和端口号，就是局域网中你的笔记本的IP和监听的端口号，对应上文的6768</span></span><br><span class="line">    <span class="keyword">while</span> (socket == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 建立连接</span></span><br><span class="line">            socket = <span class="keyword">new</span> Socket(host, port);</span><br><span class="line">            <span class="comment">// 读socket里面的数据</span></span><br><span class="line">            InputStream s = socket.getInputStream();</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((len = s.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> finalLen = len;</span><br><span class="line">                <span class="comment">// 在主线程中更新读取的数据</span></span><br><span class="line">                runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        textView.setText(<span class="keyword">new</span> String(buf, <span class="number">0</span>, finalLen));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3.创建发送数据到服务器的线程</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SendMessThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SendMessThread</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.run();</span><br><span class="line">        <span class="comment">//写操作</span></span><br><span class="line">        <span class="keyword">if</span> (socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 向Socket中的OutputStream写数据即可</span></span><br><span class="line">                OutputStream os = socket.getOutputStream();</span><br><span class="line">                os.write((<span class="string">"客户端:"</span> + message).getBytes());</span><br><span class="line">                os.flush();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>4.最后是点击事件的处理</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (v.getId()) &#123;</span><br><span class="line">        <span class="keyword">case</span> R.id.button:</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="comment">// 我笔记本的IP为192.168.31.43</span></span><br><span class="line">                    connectToServer(<span class="string">"192.168.31.43"</span>, <span class="number">6768</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> R.id.hello:</span><br><span class="line">            <span class="keyword">new</span> SendMessThread(<span class="string">"hello"</span>).start();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> R.id.how:</span><br><span class="line">            <span class="keyword">new</span> SendMessThread(<span class="string">"how are you?"</span>).start();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> R.id.bye:</span><br><span class="line">            <span class="keyword">new</span> SendMessThread(<span class="string">"bye"</span>).start();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><blockquote><p>服务器（笔记本）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">服务器在启动中...等待用户的连接</span><br><span class="line">192.168.31.100连接上了！</span><br><span class="line">服务器接收到客户端的数据：客户端:hello</span><br><span class="line">服务器接收到客户端的数据：客户端:how are you?</span><br><span class="line">服务器接收到客户端的数据：客户端:bye</span><br></pre></td></tr></table></figure><blockquote><p>客户端（手机）</p></blockquote><!--  --><p><img src="http://114.116.9.65:7777/images/2020/01/18/socket.gif" alt="socket.gif" /></p><p>这样就完成了服务器与客户端的对话。</p><h2 id="2-aidl"><a class="markdownIt-Anchor" href="#2-aidl"></a> 2. AIDL</h2><h2 id="3"><a class="markdownIt-Anchor" href="#3"></a> 3.</h2><h2 id="4"><a class="markdownIt-Anchor" href="#4"></a> 4.</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://item.m.jd.com/product/11760209.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android开发艺术探索&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Android系统中的每一个应用都运行在一个各自的进程中，那么不同的应用是如何进行数据交互的呢，大致分为两类，第一类我称之为伪进程间通信，其特征是不同进程都对同一个文件进行操作，数据交互通过此文件，比如两个进程共同读写同一个数据库；第二类我称之为真进程间通信，特征是基于系统级别的Binder进行服务调用从而实现的进程间通信或者Socket，具体细节后面再说。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://zhoutao822.coding.me/categories/Android/"/>
    
    
      <category term="Android" scheme="http://zhoutao822.coding.me/tags/Android/"/>
    
      <category term="IPC" scheme="http://zhoutao822.coding.me/tags/IPC/"/>
    
      <category term="AIDL" scheme="http://zhoutao822.coding.me/tags/AIDL/"/>
    
      <category term="Binder" scheme="http://zhoutao822.coding.me/tags/Binder/"/>
    
      <category term="Messenger" scheme="http://zhoutao822.coding.me/tags/Messenger/"/>
    
      <category term="Socket" scheme="http://zhoutao822.coding.me/tags/Socket/"/>
    
      <category term="进程间通信" scheme="http://zhoutao822.coding.me/tags/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>Android框架-RxJava</title>
    <link href="http://zhoutao822.coding.me/archives/686da54d.html"/>
    <id>http://zhoutao822.coding.me/archives/686da54d.html</id>
    <published>2019-07-25T12:32:26.000Z</published>
    <updated>2020-01-17T15:07:46.314Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><blockquote><p><a href="https://github.com/ReactiveX/RxJava/tree/2.x" target="_blank" rel="noopener">RxJava2</a><br /><a href="http://greenrobot.org/eventbus/" target="_blank" rel="noopener">EventBus</a><br /><a href="https://www.jianshu.com/p/1a5a3db45cfa" target="_blank" rel="noopener">Android Handler 消息机制详述</a><br /><a href="https://www.jianshu.com/p/ee1342fcf5e7" target="_blank" rel="noopener">Android 多线程：手把手教你使用AsyncTask</a><br /><a href="https://juejin.im/post/5a6c36fff265da3e2f012f82" target="_blank" rel="noopener">EventBus使用详解</a><br /><a href="https://juejin.im/post/5a224cc76fb9a04527256683" target="_blank" rel="noopener">Rxjava这一篇就够了，墙裂推荐</a><br /><a href="http://www.10tiao.com/html/227/201802/2650242399/1.html" target="_blank" rel="noopener">精彩的RxJava源码剖析</a><br /><a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="noopener">给 Android 开发者的 RxJava 详解</a></p></blockquote><p>Android中很多地方都需要跨线程通信，这是由于Android主线程不允许进行复杂的网络请求或者其他非常耗时的操作，否则会导致ANR，主线程只能进行UI操作，比如修改某个控件的text、设置某个控件不可见等等，因此网络请求等操作需要在其他线程中完成，当数据在其他线程中获取完毕时，通过跨线程通信将数据传到主线程中，主线程就可以直接根据数据进行UI操作。常见的跨线程通信的方式有Handler、AsyncTask、EventBus以及RxJava等，前两个是Android自带，后两者是封装好的第三方库。</p><a id="more"></a><h2 id="1-handler"><a class="markdownIt-Anchor" href="#1-handler"></a> 1. Handler</h2><p>Handler是Android中最简单的线程间通信方式，同时也可以在同一个线程中发送消息，但是使用时需要注意内存泄漏的问题。</p><h3 id="11-handler简单使用"><a class="markdownIt-Anchor" href="#11-handler简单使用"></a> 1.1 Handler简单使用</h3><p>还是以和风天气请求为例，我们的目标是在子线程中请求数据，然后通过Handler将数据传到主线程中并显示出来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String KEY = <span class="string">"XXXXXXXXXX"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String URL = <span class="string">"https://free-api.heweather.net/s6/weather/"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView textView;</span><br><span class="line">    <span class="keyword">private</span> Handler handler;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        textView = findViewById(R.id.textView);</span><br><span class="line">        <span class="comment">// Handler的实例化，重写handleMessage方法用于等待处理msg，</span></span><br><span class="line">        <span class="comment">// handleMessage方法是回调，在回调中更新UI，此时执行在主线程，</span></span><br><span class="line">        <span class="comment">// 在Android Studio中会提示这里存在内存泄漏问题</span></span><br><span class="line">        handler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">                textView.setText(msg.obj.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 在子线程开启一个网络请求</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// Retrofit通用代码</span></span><br><span class="line">                Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">                        .baseUrl(URL) <span class="comment">// 设置网络请求的公共Url地址</span></span><br><span class="line">                        .addConverterFactory(GsonConverterFactory.create()) <span class="comment">// 设置数据解析器</span></span><br><span class="line">                        .build();</span><br><span class="line"></span><br><span class="line">                Api api = retrofit.create(Api<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                Call&lt;WeatherEntity&gt; call = api.getNowWeather(<span class="string">"beijing"</span>, KEY);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 为了在当前子线程获取数据，这里直接使用execute</span></span><br><span class="line">                    WeatherEntity result = call.execute().body();</span><br><span class="line">                    <span class="comment">// Message的实例化方法Message.obtain</span></span><br><span class="line">                    Message message = Message.obtain();</span><br><span class="line">                    <span class="comment">// 可以通过Message附加很多数据，这里仅用obj，保存我们网络请求得到的实例</span></span><br><span class="line">                    message.obj = result;</span><br><span class="line">                    <span class="comment">// 通过handler.sendMessage(message)实现调用回调方法，完成数据传输</span></span><br><span class="line">                    <span class="comment">// 这种操作有点类似于接口回调</span></span><br><span class="line">                    handler.sendMessage(message);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的内存泄露的原因可以参考其他资料，主要是<strong>Java 中非静态内部类和匿名内部类会持有外部类的引用</strong>同时<strong>Handler 的生命周期比外部类长</strong>导致的。如何解决，肯定就是让Handler是静态内部类就完事了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String KEY = <span class="string">"XXXXXXXXXX"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String URL = <span class="string">"https://free-api.heweather.net/s6/weather/"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView textView;</span><br><span class="line">    <span class="keyword">private</span> Handler handler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        textView = findViewById(R.id.textView);</span><br><span class="line">        <span class="comment">// 使用自定义的静态内部类</span></span><br><span class="line">        handler = <span class="keyword">new</span> MyHandler(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// 子线程请求没有变化</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123; </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">                        .baseUrl(URL) <span class="comment">// 设置网络请求的公共Url地址</span></span><br><span class="line">                        .addConverterFactory(GsonConverterFactory.create()) <span class="comment">// 设置数据解析器</span></span><br><span class="line">                        .build();</span><br><span class="line"></span><br><span class="line">                Api api = retrofit.create(Api<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                Call&lt;WeatherEntity&gt; call = api.getNowWeather(<span class="string">"beijing"</span>, KEY);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    WeatherEntity result = call.execute().body();</span><br><span class="line">                    Message message = Message.obtain();</span><br><span class="line">                    message.obj = result;</span><br><span class="line">                    handler.sendMessage(message);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        handler.removeCallbacksAndMessages(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        textView.setText(msg.obj.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 自定义静态内部类，与onDestroy中removeCallbacksAndMessages一起使用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> WeakReference&lt;MainActivity&gt; reference;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyHandler</span><span class="params">(MainActivity mainActivity)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 同时需要持有对MainActivity的弱引用</span></span><br><span class="line">            <span class="keyword">this</span>.reference = <span class="keyword">new</span> WeakReference&lt;&gt;(mainActivity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">            MainActivity mainActivity = reference.get();</span><br><span class="line">            <span class="keyword">if</span> (mainActivity != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 将msg传给MainActivity处理</span></span><br><span class="line">                mainActivity.handleMessage(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-handler线程间通信"><a class="markdownIt-Anchor" href="#12-handler线程间通信"></a> 1.2 Handler线程间通信</h3><p>上面的例子仅演示了从子线程传数据给主线程，那么如果同时需要从主线程传数据给子线程，怎么办</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先需要自定义MyThread，完成Looper的初始化，否则子线程不会自动初始化Looper</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Looper looper;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.run();</span><br><span class="line">            Looper.prepare();</span><br><span class="line">            looper = Looper.myLooper();</span><br><span class="line">            Looper.loop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后在onCreate方法中</span></span><br><span class="line">    Log.i(<span class="string">"aaaa"</span>, String.valueOf(Thread.currentThread()));</span><br><span class="line">    MyThread thread = <span class="keyword">new</span> MyThread();</span><br><span class="line">    thread.start(); <span class="comment">// 必须先启动子线程</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 确保子线程中的Looper初始化完成</span></span><br><span class="line">        <span class="keyword">if</span> (thread.looper != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 此时handler的handleMessage方法是在子线程MyThread中执行的</span></span><br><span class="line">            <span class="comment">// 两处log中线程的值是不一样的，通过Handler的构造方法实现子线程的调用</span></span><br><span class="line">            handler = <span class="keyword">new</span> Handler(thread.looper) &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">                    Log.i(<span class="string">"aaaa"</span>, String.valueOf(msg.what) + Thread.currentThread());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            handler.sendEmptyMessage(<span class="number">12321</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果使用定义好的HandlerThread，则不需要继承Thread，直接使用，</span></span><br><span class="line"><span class="comment">// HandlerThread默认帮我们完成了Looper的初始化</span></span><br><span class="line">    Log.i(<span class="string">"aaaa"</span>, String.valueOf(Thread.currentThread()));</span><br><span class="line">    <span class="comment">// HandlerThread需要用String的构造方法，我们在log中也可以看到</span></span><br><span class="line">    HandlerThread thread = <span class="keyword">new</span> HandlerThread(<span class="string">"new thread"</span>);</span><br><span class="line">    thread.start();</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (thread.getLooper() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            handler = <span class="keyword">new</span> Handler(thread.getLooper()) &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">                    Log.i(<span class="string">"aaaa"</span>, String.valueOf(msg.what) + Thread.currentThread());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            handler.sendEmptyMessage(<span class="number">12321</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>为什么子线程需要初始化Looper，而主线程不需要？</p></blockquote><p>首先需要明白的是，只有需要处理消息的线程才需要Looper，即哪个线程执行了handleMessage方法，则线程需要Looper，原因在源码分析中解释；主线程以及HandlerThread会自动进行Looper的初始化，而<code>new Thread()</code>不会，因此在第二个例子中，子线程需要处理消息，所以需要初始化Looper而第一个例子中主线程不需要。</p><blockquote><p>Handler的初始化，其构造方法依赖于什么，为什么第二个例子中Handler不是在主线程中初始化的吗？</p></blockquote><p>首先需要知道的是Handler是可以被跨线程调用的，而View是不可以的，举个例子，如果在第一个例子中我们在子线程中调用<code>textView.setText(result.toString());</code>，则会报错<code>CalledFromWrongThreadException: Only the original thread that created a view hierarchy can touch its views.</code>，而Handler没问题，Handler默认构造方法<code>new Handler()</code>会将当前线程的Looper保存在自己这个实例中，即将主线程中的Looper保存，而带参数的构造方法<code>new Handler(thread.looper)</code>会保存thread的looper在实例中，又因为Handler是可以跨线程调用的，所以区分Handler属于哪个线程其实是根据构造方法传入的参数决定的，至于Handler归属于不同的线程会有什么影响，在源码分析中解释。</p><h3 id="13-handler源码分析"><a class="markdownIt-Anchor" href="#13-handler源码分析"></a> 1.3 Handler源码分析</h3><p>以从子线程向主线程发送消息为例，首先从ActivityThread的main方法开始，前面说过主线程中的Looper是自动初始化的，其初始化的位置就在ActivityThread的main方法中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ActivityThread.java 核心就两个Looper.prepareMainLooper()和Looper.loop()</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        Looper.prepareMainLooper();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="comment">// 显然这里是不会执行的</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">false</span>) &#123;</span><br><span class="line">            Looper.myLooper().setMessageLogging(<span class="keyword">new</span></span><br><span class="line">                    LogPrinter(Log.DEBUG, <span class="string">"ActivityThread"</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// End of event ActivityThreadMain.</span></span><br><span class="line">        Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">        Looper.loop();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Main thread loop unexpectedly exited"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>再看看Looper.prepareMainLooper()的作用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Looper.java 看注释就知道是是为主线程初始化Looper，关键还是看prepare方法，再看myLooper</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Initialize the current thread as a looper, marking it as an</span></span><br><span class="line"><span class="comment">     * application's main looper. The main looper for your application</span></span><br><span class="line"><span class="comment">     * is created by the Android environment, so you should never need</span></span><br><span class="line"><span class="comment">     * to call this function yourself.  See also: &#123;<span class="doctag">@link</span> #prepare()&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepareMainLooper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        prepare(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">synchronized</span> (Looper<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (sMainLooper != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The main Looper has already been prepared."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            sMainLooper = myLooper();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// prepare方法通过sThreadLocal set了一个Looper实例，</span></span><br><span class="line"><span class="comment">// 一个Looper实例保存了MessageQueue和Thread.currentThread()</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sThreadLocal.set(<span class="keyword">new</span> Looper(quitAllowed));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// myLooper方法从sThreadLocal get到Looper，那正好对应上面prepare set的Looper，</span></span><br><span class="line"><span class="comment">// ThreadLocal的作用是可以保存线程内的变量，简而言之就是通过ThreadLocal的set和get方法</span></span><br><span class="line"><span class="comment">// 处理的变量仅属于某个线程，以Looper为例，在某个线程中有且仅有一个</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Return the Looper object associated with the current thread.  Returns</span></span><br><span class="line"><span class="comment">     * null if the calling thread is not associated with a Looper.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="meta">@Nullable</span> <span class="function">Looper <span class="title">myLooper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sThreadLocal.get();</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后调用了Looper.loop()</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Run the message queue in this thread. Be sure to call</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #quit()&#125; to end the loop.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Looper.loop()会进入一个死循环，但是这个循环并不会导致卡死，</span></span><br><span class="line">        <span class="comment">// 涉及到Linux pipe/epoll机制，简单说就是在主线程的MessageQueue没有消息时，</span></span><br><span class="line">        <span class="comment">// 便阻塞在loop的queue.next()中的nativePollOnce()方法里，此时主线程会释放CPU资源进入休眠状态，</span></span><br><span class="line">        <span class="comment">// 直到下个消息到达或者有事务发生，通过往pipe管道写端写入数据来唤醒主线程工作。</span></span><br><span class="line">        <span class="comment">// 这里采用的epoll机制，是一种IO多路复用机制，可以同时监控多个描述符，</span></span><br><span class="line">        <span class="comment">// 当某个描述符就绪(读或写就绪)，则立刻通知相应程序进行读或写操作，本质同步I/O，即读写是阻塞的。</span></span><br><span class="line">        <span class="comment">//  所以说，主线程大多数时候都是处于休眠状态，并不会消耗大量CPU资源。</span></span><br><span class="line">        <span class="comment">// 先拿到当前线程的Looper，然后拿到Looper中的MessageQueue</span></span><br><span class="line">        <span class="keyword">final</span> Looper me = myLooper();</span><br><span class="line">        <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> MessageQueue queue = me.mQueue;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="comment">// 开启循环，Android中主线程上所有的点击事件、UI绘制都是通过Message发送到MessageQueue中等待执行</span></span><br><span class="line">        <span class="comment">// 所以这里必须是死循环，因为如果跳出了这个循环说明已经无法再继续处理任何Message，那么随之而来的肯定就是</span></span><br><span class="line">        <span class="comment">// 应用崩溃或者重启Looper，但是这里的循环并不会导致卡死，理由在上面已经简要说明了</span></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="comment">// 循环的作用就是通过queue.next()不断地从MessageQueue取出Message，next方法中也是一个死循环，</span></span><br><span class="line">            <span class="comment">// 正常情况下queue.next()应该返回一个有效的Message，或者休眠不返回任何值，如果返回null，</span></span><br><span class="line">            <span class="comment">// 说明出了问题</span></span><br><span class="line">            Message msg = queue.next(); <span class="comment">// might block</span></span><br><span class="line">            <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 当取出的message为空时说明MessageQueue被终止了，因此跳出循环，执行其他操作，比如重启Looper或者崩溃？</span></span><br><span class="line">                <span class="comment">// No message indicates that the message queue is quitting.</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">            <span class="comment">// 当我们取到有效的Message后，就需要知道这个Message应该由谁来处理，即Target，从Message源码中可知，</span></span><br><span class="line">            <span class="comment">// 这个Target实际上就是Handler，最终调用的就是Handler的dispatchMessage方法，从这里我们就知道了</span></span><br><span class="line">            <span class="comment">// 只要其他线程能够将Message发送到主线程的MessageQueue中，那么这个Message就可以被主线程的Handler处理</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                msg.target.dispatchMessage(msg);</span><br><span class="line">                dispatchEnd = needEndTime ? SystemClock.uptimeMillis() : <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (traceTag != <span class="number">0</span>) &#123;</span><br><span class="line">                    Trace.traceEnd(traceTag);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">            <span class="comment">// 最后需要对Message对象进行回收</span></span><br><span class="line">            msg.recycleUnchecked();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>ActivityThread的main方法中对主线程的Looper进行初始化，同样的主线程的MessageQueue也准备好对其中的Message进行分发，这都是通过死循环实现的，相当于MessageQueue是一个等待队列，有消息来了，他就取消息并调用Message对应的Handler的dispatchMessage方法，如果没有就休眠，然后我们看看Handler的初始化以及Message的发送是如何实现的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Handler.java Handler的构造方法分为两类，一类是参数带Looper的，另一类是不带Looper</span></span><br><span class="line"><span class="comment">// 不带Looper的构造函数最终会调用到最后一个构造函数，并进行Looper的初始化；</span></span><br><span class="line"><span class="comment">// 带Looper的构造函数会直接保存参数中的Looper实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Callback callback)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(callback, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Looper looper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(looper, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Looper looper, Callback callback)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(looper, callback, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(<span class="keyword">boolean</span> async)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="keyword">null</span>, async);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Looper looper, Callback callback, <span class="keyword">boolean</span> async)</span> </span>&#123;</span><br><span class="line">        mLooper = looper;</span><br><span class="line">        mQueue = looper.mQueue;</span><br><span class="line">        mCallback = callback;</span><br><span class="line">        mAsynchronous = async;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Callback callback, <span class="keyword">boolean</span> async)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (FIND_POTENTIAL_LEAKS) &#123;</span><br><span class="line">            <span class="keyword">final</span> Class&lt;? extends Handler&gt; klass = getClass();</span><br><span class="line">            <span class="keyword">if</span> ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &amp;&amp;</span><br><span class="line">                    (klass.getModifiers() &amp; Modifier.STATIC) == <span class="number">0</span>) &#123;</span><br><span class="line">                Log.w(TAG, <span class="string">"The following Handler class should be static or leaks might occur: "</span> +</span><br><span class="line">                    klass.getCanonicalName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Looper的myLooper方法会初始化当前线程的Looper</span></span><br><span class="line">        mLooper = Looper.myLooper();</span><br><span class="line">        <span class="keyword">if</span> (mLooper == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                <span class="string">"Can't create handler inside thread "</span> + Thread.currentThread()</span><br><span class="line">                        + <span class="string">" that has not called Looper.prepare()"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mQueue = mLooper.mQueue;</span><br><span class="line">        mCallback = callback;</span><br><span class="line">        mAsynchronous = async;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然后调用<code>handler.sendMessage(message);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Handler.java sendMessage方法会直接调用sendMessageDelayed</span></span><br><span class="line"><span class="comment">// sendMessageDelayed就是多个延时的效果</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessage</span><span class="params">(Message msg)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sendMessageDelayed(msg, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessageDelayed</span><span class="params">(Message msg, <span class="keyword">long</span> delayMillis)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (delayMillis &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            delayMillis = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 通过加上SystemClock.uptimeMillis()可以直接得到执行的具体时间</span></span><br><span class="line">        <span class="keyword">return</span> sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendMessageAtTime</span><span class="params">(Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</span><br><span class="line">        MessageQueue queue = mQueue;</span><br><span class="line">        <span class="keyword">if</span> (queue == <span class="keyword">null</span>) &#123;</span><br><span class="line">            RuntimeException e = <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                    <span class="keyword">this</span> + <span class="string">" sendMessageAtTime() called with no mQueue"</span>);</span><br><span class="line">            Log.w(<span class="string">"Looper"</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 最终还是使用Handler的MessageQueue</span></span><br><span class="line">        <span class="keyword">return</span> enqueueMessage(queue, msg, uptimeMillis);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(MessageQueue queue, Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 注意这里将Message的target设置为当前handler</span></span><br><span class="line">        msg.target = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">if</span> (mAsynchronous) &#123;</span><br><span class="line">            msg.setAsynchronous(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 然后调用MessageQueue的enqueueMessage方法</span></span><br><span class="line">        <span class="keyword">return</span> queue.enqueueMessage(msg, uptimeMillis);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MessageQueue.java enqueueMessage将Message加入链表中</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(Message msg, <span class="keyword">long</span> when)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (msg.target == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Message must have a target."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (msg.isInUse()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(msg + <span class="string">" This message is already in use."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果MessageQueue被终止了，那么Message还需要回收</span></span><br><span class="line">            <span class="keyword">if</span> (mQuitting) &#123;</span><br><span class="line">                IllegalStateException e = <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                        msg.target + <span class="string">" sending message to a Handler on a dead thread"</span>);</span><br><span class="line">                Log.w(TAG, e.getMessage(), e);</span><br><span class="line">                msg.recycle();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            msg.markInUse();</span><br><span class="line">            msg.when = when;</span><br><span class="line">            Message p = mMessages;</span><br><span class="line">            <span class="keyword">boolean</span> needWake;</span><br><span class="line">            <span class="comment">// 根据msg.next基本可以发现Message是一个链表中的节点，也就是说MessageQueue中的mMessages</span></span><br><span class="line">            <span class="comment">// 是一种链表形式的结构，其中mMessages是表头，当执行next方法时就会将表头也就是mMessages表示的</span></span><br><span class="line">            <span class="comment">// Message返回，当我们传入的Message满足以下任意条件时，可以将此Message作为表头：</span></span><br><span class="line">            <span class="comment">// 1. 表头本身为空，很明显当没有任何Message传入的时候；</span></span><br><span class="line">            <span class="comment">// 2. 当我们传入的Message没有任何延迟，这也很显然，立即执行的Message当然要放第一个；</span></span><br><span class="line">            <span class="comment">// 3. 当我们传入的Message的执行时间在表头的执行时间之前，这也很显然，按照时间排序。</span></span><br><span class="line">            <span class="keyword">if</span> (p == <span class="keyword">null</span> || when == <span class="number">0</span> || when &lt; p.when) &#123;</span><br><span class="line">                <span class="comment">// New head, wake up the event queue if blocked.</span></span><br><span class="line">                msg.next = p;</span><br><span class="line">                mMessages = msg;</span><br><span class="line">                needWake = mBlocked;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果Message不是表头位置，那么肯定就是链表中的某个位置</span></span><br><span class="line">                <span class="comment">// Inserted within the middle of the queue.  Usually we don't have to wake</span></span><br><span class="line">                <span class="comment">// up the event queue unless there is a barrier at the head of the queue</span></span><br><span class="line">                <span class="comment">// and the message is the earliest asynchronous message in the queue.</span></span><br><span class="line">                needWake = mBlocked &amp;&amp; p.target == <span class="keyword">null</span> &amp;&amp; msg.isAsynchronous();</span><br><span class="line">                Message prev;</span><br><span class="line">                <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                    <span class="comment">// 链表的遍历，还要判断时间when</span></span><br><span class="line">                    prev = p;</span><br><span class="line">                    p = p.next;</span><br><span class="line">                    <span class="keyword">if</span> (p == <span class="keyword">null</span> || when &lt; p.when) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</span><br><span class="line">                        needWake = <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 这就很简单了，有序链表中加入某个节点，排序方式为when的值</span></span><br><span class="line">                msg.next = p; <span class="comment">// invariant: p == prev.next</span></span><br><span class="line">                prev.next = msg;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// We can assume mPtr != 0 because mQuitting is false.</span></span><br><span class="line">            <span class="keyword">if</span> (needWake) &#123;</span><br><span class="line">                nativeWake(mPtr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>到这里我们就知道了Message被Handler加到了Handler线程的MessageQueue中，而Handler线程中的Looper一直在等待Message进入MessageQueue，通过queue.next()取出Message，然后调用Handler的dispatchMessage方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Handle system messages here.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// dispatchMessage处理Message的方式也很简单</span></span><br><span class="line">    <span class="comment">// 首先判断Message是否设置了Callback，如果有</span></span><br><span class="line">    <span class="comment">// 则执行message.callback.run()</span></span><br><span class="line">    <span class="keyword">if</span> (msg.callback != <span class="keyword">null</span>) &#123;</span><br><span class="line">        handleCallback(msg);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果没有，则判断Handler是否初始化设置了Callback，</span></span><br><span class="line">        <span class="comment">// 这个和Handler的构造函数相关</span></span><br><span class="line">        <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 否则就执行handler重写的handleMessage方法，</span></span><br><span class="line">        <span class="comment">// 这个方法是在我们继承Handler时重写的，或者</span></span><br><span class="line">        <span class="comment">// 在使用Handler匿名内部类时重写的</span></span><br><span class="line">        handleMessage(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是完整的通过Handler从子线程发送消息到主线程并执行的过程，也解决了我的一些问题：</p><blockquote><p>1.为什么要设计Handler来传输消息？</p></blockquote><p>因为多线程的情况下并不确定子线程何时能够执行完毕获取数据，所以需要设计Handler实现一种回调机制，即当子线程数据获取完成后将数据传到主线程中，通过主线程中的回调决定如何处理传来的数据。</p><blockquote><p>2.为什么要用MessageQueue和Looper这种工具？</p></blockquote><p>我想是因为既然子线程并不确定何时结束，其次如果存在多个子线程向主线程传递消息，那干脆将这些消息都放在一个队列MessageQueue中，因为多个子线程之间的执行顺序我们也无法确定，如果放在队列中，那么根据消息附加的时间来进行排序我们就可以按照顺序读取从各个子线程发送过来的消息了，与此同时，需要一个能够不停地读取队列中消息的工具Looper，Looper可以循环取数据但是不会阻塞卡死。</p><h3 id="14-handler进阶"><a class="markdownIt-Anchor" href="#14-handler进阶"></a> 1.4 Handler进阶</h3><p>Handler除了可以发送Message外，还可以post Runnable，Runnable是接口，提供run方法，Thread类实现了Runnable接口，所以Thread需要实现run方法，run方法中的内容就是执行在Thread线程中，如果Runnable是通过Handler post，那么根据Message的原理，应该明白此Runnable就是运行在Handler归属的线程中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    textView = findViewById(R.id.textView);</span><br><span class="line">    <span class="comment">// handler不重写handleMessage方法</span></span><br><span class="line">    handler = <span class="keyword">new</span> Handler();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Retrofit通用代码</span></span><br><span class="line">            Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">                    .baseUrl(URL) <span class="comment">// 设置网络请求的公共Url地址</span></span><br><span class="line">                    .addConverterFactory(GsonConverterFactory.create()) <span class="comment">// 设置数据解析器</span></span><br><span class="line">                    .build();</span><br><span class="line"></span><br><span class="line">            Api api = retrofit.create(Api<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            Call&lt;WeatherEntity&gt; call = api.getNowWeather(<span class="string">"beijing"</span>, KEY);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 为了在当前子线程获取数据，这里直接使用execute</span></span><br><span class="line">                <span class="keyword">final</span> WeatherEntity result = call.execute().body();</span><br><span class="line">                <span class="comment">// 通过post直接修改textView的text</span></span><br><span class="line">                handler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        textView.setText(result.toString());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为textView只能在主线程进行设置，所以很显然handler post的Runnable是在主线程运行的，这样就不需要传递数据，而是直接处理数据了，下面看看Runnable是如何被处理的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Handler.java</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">post</span><span class="params">(Runnable r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// sendMessageDelayed之前分析过，这里是将Runnable放入Message中了</span></span><br><span class="line">       <span class="keyword">return</span>  sendMessageDelayed(getPostMessage(r), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过Message保存了这个Runnable，保存在callback，这个之前在dispatchMessage中见过</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Message <span class="title">getPostMessage</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">        Message m = Message.obtain();</span><br><span class="line">        m.callback = r;</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 之前sendMessage都是走的第二个判断，post走的就是第一个判断，</span></span><br><span class="line">        <span class="comment">// 我们的Runnable现在不为空</span></span><br><span class="line">        <span class="keyword">if</span> (msg.callback != <span class="keyword">null</span>) &#123;</span><br><span class="line">            handleCallback(msg);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            handleMessage(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 结果很明显了，就是执行了Runnable的run方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handleCallback</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        message.callback.run();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>下面演示一下多个线程向主线程发送消息会产生怎样的结果，自定义线程MessageThread用于发送Message，普通的Thread用于post Runnable</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    textView = findViewById(R.id.textView);</span><br><span class="line">    <span class="comment">// handler根据传过来的Message的what值进行不同的操作</span></span><br><span class="line">    handler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    Log.i(<span class="string">"aaaa"</span>, <span class="string">"Thread 0: "</span> + msg.obj.toString());</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    Log.i(<span class="string">"aaaa"</span>, <span class="string">"Thread 1: "</span> + msg.obj.toString());</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    Log.i(<span class="string">"aaaa"</span>, <span class="string">"Thread 2: "</span> + msg.obj.toString());</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 开启三个线程发送Message，加上延时</span></span><br><span class="line">    <span class="keyword">new</span> MessageThread(<span class="number">0</span>, <span class="string">"thread 0 hahaha"</span>, <span class="number">3000</span>).start();</span><br><span class="line">    <span class="keyword">new</span> MessageThread(<span class="number">1</span>, <span class="string">"thread 1 oooooo"</span>, <span class="number">1000</span>).start();</span><br><span class="line">    <span class="keyword">new</span> MessageThread(<span class="number">2</span>, <span class="string">"thread 2 yyyyyy"</span>, <span class="number">2000</span>).start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// post Runnable也加上延时，注意这里的postDelayed并不会阻塞主线程，</span></span><br><span class="line">    <span class="comment">// 原理同Looper.loop()，所以不会引起ANR，这个延时只会影响此Message在MessageQueue</span></span><br><span class="line">    <span class="comment">// 中的位置</span></span><br><span class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            handler.postDelayed(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    Log.i(<span class="string">"aaaa"</span>, <span class="string">"MainThread"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="number">10000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> what;</span><br><span class="line">    <span class="keyword">private</span> String text;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> delay;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MessageThread</span><span class="params">(<span class="keyword">int</span> what, String text, <span class="keyword">long</span> delay)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.what = what;</span><br><span class="line">        <span class="keyword">this</span>.text = text;</span><br><span class="line">        <span class="keyword">this</span>.delay = delay;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Message message = Message.obtain();</span><br><span class="line">        message.what = what;</span><br><span class="line">        message.obj = text;</span><br><span class="line">        handler.sendMessageDelayed(message, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>log结果为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Thread 1: thread 1 oooooo</span><br><span class="line">Thread 2: thread 2 yyyyyy</span><br><span class="line">Thread 0: thread 0 hahaha</span><br><span class="line">MainThread</span><br></pre></td></tr></table></figure><h2 id="2-asynctask"><a class="markdownIt-Anchor" href="#2-asynctask"></a> 2. AsyncTask</h2><p>通过Handler实现的多线程通信在使用上还是有很多不方便的地方，比如需要显示的创建子线程，每次创建子线程都是对资源的消耗，当然也可以使用线程池来减少线程资源的创建与销毁，同时需要定义Handler的处理方式，对于每一个需要处理消息的线程都需要定义其Handler，这样就显得比较乱，因此可以使用AsyncTask来替代，先看一下如何使用。</p><h3 id="21-asynctask简单使用"><a class="markdownIt-Anchor" href="#21-asynctask简单使用"></a> 2.1 AsyncTask简单使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 依然以请求和风天气数据为例，现在我们为加载数据时显示进度，为什么要显示进度呢</span></span><br><span class="line"><span class="comment">// 从设计理念来看，当我们给某些需要长时间等待的操作加上进度条时，用户对这个操作的</span></span><br><span class="line"><span class="comment">// 容忍度会增加，比如常见的进入游戏的界面，会显示进度条，这样的话就算耗时相对较长，</span></span><br><span class="line"><span class="comment">// 但是用户可以根据进度有一个心理预期，从而提升容忍度；如果你的耗时操作没有任何进度</span></span><br><span class="line"><span class="comment">// 提示，那么用户很容易觉得你的应用是不是卡死了，从而降低了体验</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY = <span class="string">"XXXXXXXXXXXX"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">"https://free-api.heweather.net/s6/weather/"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView textView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        textView = findViewById(R.id.textView);</span><br><span class="line">        MyTask task = <span class="keyword">new</span> MyTask();</span><br><span class="line">        <span class="comment">// execute的参数等价于doInBackground的参数</span></span><br><span class="line">        task.execute(<span class="string">"beijing"</span>, <span class="number">50L</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// AsyncTask是抽象类，需要自定义Task并实现doInBackground方法，除了doInBackground之外</span></span><br><span class="line"><span class="comment">// 还有几个方法用于初始化、显示进度、输出结果等功能，三个参数Object, Integer, WeatherEntity为泛型参数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Object</span>, <span class="title">Integer</span>, <span class="title">WeatherEntity</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// onPreExecute在主线程执行，用于做一些提前的初始化</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPreExecute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            textView.setText(<span class="string">"Start!!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// doInBackground在子线程执行，不需要显示地创建Thread，这里的参数params</span></span><br><span class="line">        <span class="comment">// 是一个泛型参数，也就是说可以传入多个参数，相当于参数数组，参数的传入是</span></span><br><span class="line">        <span class="comment">// task.execute传入，返回值由AsyncTask第三个泛型参数决定，同时也是</span></span><br><span class="line">        <span class="comment">// onPostExecute的输入参数</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> WeatherEntity <span class="title">doInBackground</span><span class="params">(Object... params)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 根据传入的顺序读取，location就是beijing，delay就是50L，</span></span><br><span class="line">            <span class="comment">// 为了模拟进度，这里传入一个延时，正式使用时需要根据数据实际传输的进度</span></span><br><span class="line">            <span class="comment">// 展示进度</span></span><br><span class="line">            String location = (String) params[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">long</span> delay = (<span class="keyword">long</span>) params[<span class="number">1</span>];</span><br><span class="line">            WeatherEntity result = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 先获取数据，我们知道这里取数据的速度其实是很快的</span></span><br><span class="line">                result = getData(location);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 然后显示进度，这里仅模拟</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">int</span> length = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (count &lt; <span class="number">99</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    count += length;</span><br><span class="line">                    <span class="comment">// 可调用publishProgress（）显示进度, 之后将执行onProgressUpdate（）</span></span><br><span class="line">                    publishProgress(count);</span><br><span class="line">                    <span class="comment">// 模拟耗时任务</span></span><br><span class="line">                    Thread.sleep(delay);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 最后返回取到的数据</span></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// onProgressUpdate在主线程执行，显示进度</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Integer... values)</span> </span>&#123;</span><br><span class="line">            textView.setText(String.format(Locale.CHINA, <span class="string">"加载进度：%d%%"</span>, values[<span class="number">0</span>]));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// onPostExecute在主线程执行，用于处理doInBackground返回的数据</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(WeatherEntity weatherEntity)</span> </span>&#123;</span><br><span class="line">            textView.setText(weatherEntity.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// AsyncTask可以通过调用isCancelled主动终止</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCancelled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            textView.setText(<span class="string">"Cancel!!!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> WeatherEntity <span class="title">getData</span><span class="params">(String location)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">                    .baseUrl(URL)</span><br><span class="line">                    .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">                    .build();</span><br><span class="line">            Api api = retrofit.create(Api<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            Call&lt;WeatherEntity&gt; call = api.getNowWeather(location, KEY);</span><br><span class="line">            <span class="keyword">return</span> call.execute().body();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="22-asynctask源码分析"><a class="markdownIt-Anchor" href="#22-asynctask源码分析"></a> 2.2 AsyncTask源码分析</h3><p>首先从task.execute开始</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AsyncTask.java</span></span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> AsyncTask&lt;Params, Progress, Result&gt; <span class="title">execute</span><span class="params">(Params... params)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// executeOnExecutor传入两个参数sDefaultExecutor和params，</span></span><br><span class="line">        <span class="comment">// sDefaultExecutor看名字就知道是一个Executor，Executor提供execute方法，</span></span><br><span class="line">        <span class="comment">// 用于消耗Runnable，我们先看看sDefaultExecutor是什么</span></span><br><span class="line">        <span class="keyword">return</span> executeOnExecutor(sDefaultExecutor, params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// sDefaultExecutor实际上是new SerialExecutor()，static修饰加上</span></span><br><span class="line">    <span class="comment">// synchronized修饰execute方法，保证多个Task启动execute时是按照顺序执行的</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SerialExecutor</span> <span class="keyword">implements</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">        <span class="comment">// SerialExecutor提供一个队列mTasks用于保存Runnable</span></span><br><span class="line">        <span class="comment">// mActive表示当前需要执行的Runnable</span></span><br><span class="line">        <span class="keyword">final</span> ArrayDeque&lt;Runnable&gt; mTasks = <span class="keyword">new</span> ArrayDeque&lt;Runnable&gt;();</span><br><span class="line">        Runnable mActive;</span><br><span class="line">        <span class="comment">// execute方法把传入的Runnable加入到队列中，但是不是直接加入的，</span></span><br><span class="line">        <span class="comment">// 而是通过new Runnable改造了，让其在执行了run之后会执行scheduleNext</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(<span class="keyword">final</span> Runnable r)</span> </span>&#123;</span><br><span class="line">            mTasks.offer(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        r.run();</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        scheduleNext();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">if</span> (mActive == <span class="keyword">null</span>) &#123;</span><br><span class="line">                scheduleNext();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// scheduleNext从mTasks的对头取Runnable，通过THREAD_POOL_EXECUTOR</span></span><br><span class="line">        <span class="comment">// 执行Runnable，联系SerialExecutor的execute方法，就知道了一旦调用了</span></span><br><span class="line">        <span class="comment">// SerialExecutor的execute方法，就会不断从mTasks取任务，然后交给线程池</span></span><br><span class="line">        <span class="comment">// THREAD_POOL_EXECUTOR去执行，至于线程池是如何execute暂时不解释，</span></span><br><span class="line">        <span class="comment">// 只需要知道线程池会分配空闲的线程并执行传入的mFuture的run方法即可</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">scheduleNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> ((mActive = mTasks.poll()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                THREAD_POOL_EXECUTOR.execute(mActive);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// THREAD_POOL_EXECUTOR就是传说中的线程池，THREAD_POOL_EXECUTOR.execute</span></span><br><span class="line">    <span class="comment">// 会自动使用线程池中空闲的线程完成mActive的任务</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * An &#123;<span class="doctag">@link</span> Executor&#125; that can be used to execute tasks in parallel.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor THREAD_POOL_EXECUTOR;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        ThreadPoolExecutor threadPoolExecutor = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">                CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE_SECONDS, TimeUnit.SECONDS,</span><br><span class="line">                sPoolWorkQueue, sThreadFactory);</span><br><span class="line">        threadPoolExecutor.allowCoreThreadTimeOut(<span class="keyword">true</span>);</span><br><span class="line">        THREAD_POOL_EXECUTOR = threadPoolExecutor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 明白了sDefaultExecutor本质上是线程池，接下来看executeOnExecutor怎么调用线程池</span></span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> AsyncTask&lt;Params, Progress, Result&gt; <span class="title">executeOnExecutor</span><span class="params">(Executor exec,</span></span></span><br><span class="line"><span class="function"><span class="params">            Params... params)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mStatus != Status.PENDING) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (mStatus) &#123;</span><br><span class="line">                <span class="keyword">case</span> RUNNING:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot execute task:"</span></span><br><span class="line">                            + <span class="string">" the task is already running."</span>);</span><br><span class="line">                <span class="keyword">case</span> FINISHED:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot execute task:"</span></span><br><span class="line">                            + <span class="string">" the task has already been executed "</span></span><br><span class="line">                            + <span class="string">"(a task can be executed only once)"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 首先设置了状态为RUNNING</span></span><br><span class="line">        mStatus = Status.RUNNING;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里是不是很熟悉，我们继承AsyncTask时重写的onPreExecute方法</span></span><br><span class="line">        onPreExecute();</span><br><span class="line">        <span class="comment">// 然后将参数保存在mWorker.mParams</span></span><br><span class="line">        mWorker.mParams = params;</span><br><span class="line">        <span class="comment">// 调用exec.execute，这里的exec就是上面的SerialExecutor</span></span><br><span class="line">        exec.execute(mFuture);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时我们需要明白mWorker和mFuture是什么，这里就要了解子类继承父类时，构造方法的执行了</span></span><br><span class="line"><span class="comment">// 在我们MyTask task = new MyTask();时，其实完成了父类的无参构造方法的执行，也就是AsyncTask</span></span><br><span class="line"><span class="comment">// 的无参构造方法</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new asynchronous task. This constructor must be invoked on the UI thread.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AsyncTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>((Looper) <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 也就是说mWorker和mFuture在new MyTask()时已经完成了初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AsyncTask</span><span class="params">(@Nullable Looper callbackLooper)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// callbackLooper为null，所以mHandler为getMainHandler方法的返回值，</span></span><br><span class="line">        <span class="comment">// 看名字就知道返回的是主线程的Handler，但是这个Handler有点东西</span></span><br><span class="line">        mHandler = callbackLooper == <span class="keyword">null</span> || callbackLooper == Looper.getMainLooper()</span><br><span class="line">            ? getMainHandler()</span><br><span class="line">            : <span class="keyword">new</span> Handler(callbackLooper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// mWorker提供了一个对象WorkerRunnable，WorkerRunnable实现了Callable接口的call方法</span></span><br><span class="line">        <span class="comment">// 当mWorker的call方法被执行时，我们就可以得到结果</span></span><br><span class="line">        mWorker = <span class="keyword">new</span> WorkerRunnable&lt;Params, Result&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Result <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                mTaskInvoked.set(<span class="keyword">true</span>);</span><br><span class="line">                Result result = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</span><br><span class="line">                    <span class="comment">//noinspection unchecked</span></span><br><span class="line">                    <span class="comment">// 很熟悉的doInBackground方法，传入的参数为mWorker的mParams，即我们</span></span><br><span class="line">                    <span class="comment">// 在task.execute("beijing", 50L);传入的参数</span></span><br><span class="line">                    result = doInBackground(mParams);</span><br><span class="line">                    Binder.flushPendingCommands();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable tr) &#123;</span><br><span class="line">                    mCancelled.set(<span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">throw</span> tr;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    postResult(result);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// mFuture以mWorker为参数实现了FutureTask，这里的FutureTask可以被SerialExecutor execute，</span></span><br><span class="line">        <span class="comment">// 会调用FutureTask的run方法，run方法中会执行mWorker的call方法，最终会调用FutureTask的done方法</span></span><br><span class="line">        mFuture = <span class="keyword">new</span> FutureTask&lt;Result&gt;(mWorker) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">done</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// get方法得到的是FutureTask执行run方法后得到的result</span></span><br><span class="line">                    postResultIfNotInvoked(get());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    android.util.Log.w(LOG_TAG, e);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"An error occurred while executing doInBackground()"</span>,</span><br><span class="line">                            e.getCause());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (CancellationException e) &#123;</span><br><span class="line">                    postResultIfNotInvoked(<span class="keyword">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// postResultIfNotInvoked会进一步处理结果</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postResultIfNotInvoked</span><span class="params">(Result result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> wasTaskInvoked = mTaskInvoked.get();</span><br><span class="line">        <span class="keyword">if</span> (!wasTaskInvoked) &#123;</span><br><span class="line">            postResult(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// postResult通过主线程的Handler发送了数据result，并标记MESSAGE_POST_RESULT</span></span><br><span class="line">    <span class="comment">// 表示数据已经获取完毕，应该交给主线程处理</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Result <span class="title">postResult</span><span class="params">(Result result)</span> </span>&#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT,</span><br><span class="line">                <span class="keyword">new</span> AsyncTaskResult&lt;Result&gt;(<span class="keyword">this</span>, result));</span><br><span class="line">        message.sendToTarget();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 还是记得上文介绍的Handler吗，它还有额外的功能</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InternalHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">InternalHandler</span><span class="params">(Looper looper)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(looper);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"unchecked"</span>, <span class="string">"RawUseOfParameterizedType"</span>&#125;)</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 在处理Message时，还可以判断并选择执行onProgressUpdate</span></span><br><span class="line">            AsyncTaskResult&lt;?&gt; result = (AsyncTaskResult&lt;?&gt;) msg.obj;</span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                <span class="comment">// 上面说的数据获取完毕会标记MESSAGE_POST_RESULT</span></span><br><span class="line">                <span class="keyword">case</span> MESSAGE_POST_RESULT:</span><br><span class="line">                    <span class="comment">// There is only one result</span></span><br><span class="line">                    <span class="comment">// 调用mTask，这里就是AsyncTask的finish方法</span></span><br><span class="line">                    result.mTask.finish(result.mData[<span class="number">0</span>]);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> MESSAGE_POST_PROGRESS:</span><br><span class="line">                    result.mTask.onProgressUpdate(result.mData);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 熟悉的重写isCancelled和onPostExecute</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">(Result result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isCancelled()) &#123;</span><br><span class="line">            <span class="comment">// 如果主动调用isCancelled则走onCancelled</span></span><br><span class="line">            onCancelled(result);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 或者最终回到我们重写的onPostExecute</span></span><br><span class="line">            onPostExecute(result);</span><br><span class="line">        &#125;</span><br><span class="line">        mStatus = Status.FINISHED;</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上就是正常的AsyncTask执行流程，但是别忘了我们有一个进度显示的功能</span></span><br><span class="line">    <span class="meta">@WorkerThread</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">publishProgress</span><span class="params">(Progress... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isCancelled()) &#123;</span><br><span class="line">            <span class="comment">// 通过Handler发送进度数据values</span></span><br><span class="line">            <span class="comment">// 这里就对应了上面的主线程的Handler的另一个功能，显示进度</span></span><br><span class="line">            getHandler().obtainMessage(MESSAGE_POST_PROGRESS,</span><br><span class="line">                    <span class="keyword">new</span> AsyncTaskResult&lt;Progress&gt;(<span class="keyword">this</span>, values)).sendToTarget();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>整理一下流程，很显然的是AsyncTask本质上还是基于Handler，但是在对线程的处理上采用了线程池，具体的执行过程：</p><ol><li>在<code>new MyTask()</code>时初始化了主线程的Handler和线程池，构造了FutureTask并提供了doInBackground的回调，并提供了通过sendToTarget的方式处理result和progress的方式；</li><li>当我们执行<code>task.execute(&quot;beijing&quot;, 50L);</code>的方法时，提供了onPreExecute的回调，并将参数传给第1步中的FutureTask，然后使用SerialExecutor execute第1步构造的的FutureTask，本质上还是线程池，只是附加了功能：连续处理队列中的所有任务；</li><li>最后将得到结果通过上面sendToTarget后Handler的回调handleMessage处理发送的数据</li></ol><p>仔细思考一下就会发现，AsyncTask提供了一个显示进度的方法，比较适用于上传下载文件的场景，因为下载进度与下载文件的大小是可知的，但是很多http框架比如Retrofit，可以很方便在接受Response的时候监听下载进度，导致AsyncTask无用武之处；同时对于登录注册功能来说，登录进度并不是很适合量化，所以也不适用；还有其他的场景我暂时也没有想到。这就导致了AsyncTask的作用被弱化了，除了集成doInBackground和onPostExecute方法就没有什么亮眼之处。</p><p>AsyncTask也提供了带Looper或者Handler参数的构造函数，此时会影响的只有postResult和publishProgress方法，即这两个方法会发送消息到Looper的线程中，但是子线程的Handler需要自定义handleMessage并自行判断msg.what，包括<code>MESSAGE_POST_RESULT</code>和<code>MESSAGE_POST_PROGRESS</code>，实现从子线程到子线程的消息传递。</p><h2 id="3-eventbus"><a class="markdownIt-Anchor" href="#3-eventbus"></a> 3. EventBus</h2><p>EventBus比上面介绍的两种方式更加强大，除了线程间通信之外，还可以在Activity间传递消息，同时兼具灵活的线程切换功能，先直接上一个简单的例子，依然是请求和风天气数据</p><blockquote><p>1.首先使用EventBus需要自定义MessageEvent，即通过EventBus传递的消息载体</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageEvent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object msg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MessageEvent</span><span class="params">(Object msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span><span class="params">(Object msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"MessageEvent&#123;"</span> + <span class="string">"msg="</span> + msg + <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2.在需要处理消息的地方（Activity）中定义Subscribe方法，这个方法可以自动接收其他地方传来的消息</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Subscribe注解修饰处理MessageEvent的方法，有几个参数threadMode、sticky、priority</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">首先是threadMode：</span></span><br><span class="line"><span class="comment">POSTING：默认，表示事件处理函数的线程跟发布事件的线程在同一个线程。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">MAIN：表示事件处理函数的线程在主线程(UI)线程，因此在这里不能进行耗时操作。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">BACKGROUND：表示事件处理函数的线程在后台线程，因此不能进行UI操作。</span></span><br><span class="line"><span class="comment">如果发布事件的线程是主线程(UI线程)，那么事件处理函数将会开启一个后台线程，</span></span><br><span class="line"><span class="comment">如果果发布事件的线程是在后台线程，那么事件处理函数就使用该线程。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">ASYNC：表示无论事件发布的线程是哪一个，事件处理函数始终会新建一个子线程运行，同样不能进行UI操作。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">然后是sticky，sticky用于表示是否接收粘性事件</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">最后是priority，priority决定不同的Subscribe方法接收事件的优先级，数值越大越早接收，</span></span><br><span class="line"><span class="comment">先接受的Subscribe方法还可以禁止事件继续传递下去</span></span><br><span class="line"><span class="comment">1. 只有当两个订阅方法使用相同的ThreadMode参数的时候，它们的优先级才会与priority指定的值一致；</span></span><br><span class="line"><span class="comment">2. 只有当某个订阅方法的ThreadMode参数为POSTING的时候，它才能停止该事件的继续分发。</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="comment">// requestData方法用于处理发送的消息是String，其他则打印log</span></span><br><span class="line"><span class="meta">@Subscribe</span>(threadMode = ThreadMode.BACKGROUND)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestData</span><span class="params">(MessageEvent message)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (message.getMsg() <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">                .baseUrl(URL)</span><br><span class="line">                .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">                .build();</span><br><span class="line">        Api api = retrofit.create(Api<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Call&lt;WeatherEntity&gt; call = api.getNowWeather(message.getMsg().toString(), KEY);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 通过EventBus把请求得到的天气发送出去</span></span><br><span class="line">            EventBus.getDefault().post(<span class="keyword">new</span> MessageEvent(call.execute().body()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.getMsg() <span class="keyword">instanceof</span> WeatherEntity) &#123;</span><br><span class="line">        Log.i(<span class="string">"aaaa"</span>, <span class="string">"ThreadMode.BACKGROUND: "</span> + message.getMsg().toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// showMessage方法用于处理发送的消息是WeatherEntity，将其显示到TextView上，其他类型则打印log</span></span><br><span class="line"><span class="meta">@Subscribe</span>(threadMode = ThreadMode.MAIN)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showMessage</span><span class="params">(MessageEvent message)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (message.getMsg() <span class="keyword">instanceof</span> WeatherEntity) &#123;</span><br><span class="line">        textView.setText(message.getMsg().toString());</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.getMsg() <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        Log.i(<span class="string">"aaaa"</span>, <span class="string">"ThreadMode.MAIN: "</span> + message.getMsg().toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3.在onStart和onStop中注册和取消注册</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    EventBus.getDefault().register(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">super</span>.onStart();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    EventBus.getDefault().unregister(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">super</span>.onStop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>4.发送消息</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    textView = findViewById(R.id.textView);</span><br><span class="line">    textView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 发送的消息本体是String，即请求的location</span></span><br><span class="line">            EventBus.getDefault().post(<span class="keyword">new</span> MessageEvent(<span class="string">"beijing"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们点击textView的时候就会发送消息<code>new MessageEvent(&quot;beijing&quot;)</code>出去，如果打断点观察消息发送的流程就会清楚：</p><ol><li>我们在主线程发送的消息会首先由<code>ThreadMode.MAIN</code>的方法处理，此时就会打印log：</li><li>然后消息会发送到requestData方法，而requestData方法是<code>ThreadMode.BACKGROUND</code>，所以它会在子线程中执行，我们在子线程中又发了<code>new MessageEvent(call.execute().body())</code>，因此消息会首先由<code>ThreadMode.BACKGROUND</code>的方法处理，即requestData方法自身，此时打印log；</li><li>最后消息又传到了showMessage方法中，而showMessage方法是<code>ThreadMode.MAIN</code>，所以可以执行在主线程，因此textView被设置了text，整个消息传递流程结束。</li></ol><p>根据上面的例子基本可以了解了EventBus发送消息的机制，类似于广播，不同的threadMode参数决定这个方法的执行线程，而消息发送时会首先发到当前线程的方法中，如果在这个方法中消息没有被取消，则会继续广播到其他线程的方法中，具体顺序可以测试一下，直到没有可以处理此消息的方法，整个消息传播的流程就结束了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下列方法处理从主线程发送的MessageEvent，我们观察一下log的顺序</span></span><br><span class="line"><span class="meta">@Subscribe</span>(threadMode = ThreadMode.MAIN)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">broadcastMessage1</span><span class="params">(MessageEvent message)</span> </span>&#123;</span><br><span class="line">    Log.i(<span class="string">"aaaa"</span>, <span class="string">"ThreadMode.MAIN: "</span> + message.getMsg().toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Subscribe</span>(threadMode = ThreadMode.BACKGROUND)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">broadcastMessage2</span><span class="params">(MessageEvent message)</span> </span>&#123;</span><br><span class="line">    Log.i(<span class="string">"aaaa"</span>, <span class="string">"ThreadMode.BACKGROUND: "</span> + message.getMsg().toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Subscribe</span>(threadMode = ThreadMode.POSTING)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">broadcastMessage3</span><span class="params">(MessageEvent message)</span> </span>&#123;</span><br><span class="line">    Log.i(<span class="string">"aaaa"</span>, <span class="string">"ThreadMode.POSTING: "</span> + message.getMsg().toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Subscribe</span>(threadMode = ThreadMode.ASYNC)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">broadcastMessage4</span><span class="params">(MessageEvent message)</span> </span>&#123;</span><br><span class="line">    Log.i(<span class="string">"aaaa"</span>, <span class="string">"ThreadMode.ASYNC: "</span> + message.getMsg().toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>依次是MAIN -&gt; POSTING -&gt; BACKGROUND -&gt; ASYNC</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2019-07-28 20:40:38.419 28604-28604&#x2F;com.example.gsondemo I&#x2F;aaaa: ThreadMode.MAIN: beijing</span><br><span class="line">2019-07-28 20:40:38.420 28604-28604&#x2F;com.example.gsondemo I&#x2F;aaaa: ThreadMode.POSTING: beijing</span><br><span class="line">2019-07-28 20:40:38.421 28604-28765&#x2F;com.example.gsondemo I&#x2F;aaaa: ThreadMode.BACKGROUND: beijing</span><br><span class="line">2019-07-28 20:40:38.422 28604-28766&#x2F;com.example.gsondemo I&#x2F;aaaa: ThreadMode.ASYNC: beijing</span><br></pre></td></tr></table></figure><p>在看一下从BACKGROUND子线程发送的MessageEvent，依次是BACKGROUND -&gt; POSTING -&gt; MAIN -&gt; ASYNC</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2019-07-28 20:53:27.151 30433-30481&#x2F;com.example.gsondemo I&#x2F;aaaa: ThreadMode.BACKGROUND: shanghai</span><br><span class="line">2019-07-28 20:53:27.151 30433-30481&#x2F;com.example.gsondemo I&#x2F;aaaa: ThreadMode.POSTING: shanghai</span><br><span class="line">2019-07-28 20:53:27.152 30433-30433&#x2F;com.example.gsondemo I&#x2F;aaaa: ThreadMode.MAIN: shanghai</span><br><span class="line">2019-07-28 20:53:27.152 30433-30482&#x2F;com.example.gsondemo I&#x2F;aaaa: ThreadMode.ASYNC: shanghai</span><br></pre></td></tr></table></figure><p>消息广播的规则应该是首先是发送到post所在的线程，然后是POSTING，然后是其他线程，最后是ASYNC，因此我们可以在POSTING方法中取消消息的广播，那么消息就会被中断。</p><ul><li>普通事件删除</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus.getDefault().cancelEventDelivery(event);</span><br></pre></td></tr></table></figure><ul><li>粘性事件删除</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定粘性事件删除  </span></span><br><span class="line">T stickyEvent = EventBus.getDefault().getStickyEvent(eventType);  </span><br><span class="line"><span class="keyword">if</span> (stickyEvent != <span class="keyword">null</span>) &#123;</span><br><span class="line">    EventBus.getDefault().removeStickyEvent(stickyEvent);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除所有粘性事件 </span></span><br><span class="line">EventBus.getDefault().removeAllStickyEvents();</span><br></pre></td></tr></table></figure><p>除了普通事件之外，EventBus还可以发送粘性事件，解释起来比较复杂，简而言之就是让消息“飞一会”，在我们主动注册时才处理消息，用代码来解释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码是类似的，只是这次不在onStart方法内注册，而是通过button点击注册</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    textView = findViewById(R.id.textView);</span><br><span class="line">    button = findViewById(R.id.button);</span><br><span class="line">    textView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// postSticky替代post</span></span><br><span class="line">            EventBus.getDefault().postSticky(<span class="keyword">new</span> MessageEvent(<span class="string">"beijing"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">            EventBus.getDefault().register(MainActivity.<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加sticky = true</span></span><br><span class="line"><span class="meta">@Subscribe</span>(threadMode = ThreadMode.BACKGROUND, sticky = <span class="keyword">true</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestData</span><span class="params">(MessageEvent message)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (message.getMsg() <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">                .baseUrl(URL)</span><br><span class="line">                .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">                .build();</span><br><span class="line">        Api api = retrofit.create(Api<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Call&lt;WeatherEntity&gt; call = api.getNowWeather(message.getMsg().toString(), KEY);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            EventBus.getDefault().post(<span class="keyword">new</span> MessageEvent(call.execute().body()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.getMsg() <span class="keyword">instanceof</span> WeatherEntity) &#123;</span><br><span class="line">        Log.i(<span class="string">"aaaa"</span>, <span class="string">"ThreadMode.BACKGROUND: "</span> + message.getMsg().toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加sticky = true</span></span><br><span class="line"><span class="meta">@Subscribe</span>(threadMode = ThreadMode.MAIN, sticky = <span class="keyword">true</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showMessage</span><span class="params">(MessageEvent message)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (message.getMsg() <span class="keyword">instanceof</span> WeatherEntity) &#123;</span><br><span class="line">        textView.setText(message.getMsg().toString());</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.getMsg() <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        Log.i(<span class="string">"aaaa"</span>, <span class="string">"ThreadMode.MAIN: "</span> + message.getMsg().toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onStart();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    EventBus.getDefault().unregister(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">super</span>.onStop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的结果就是当我们点击textView时，事件就会发出，但是Subscribe方法没有接收，当且仅当我们点击了button时，事件才开始被接收，即我们让消息在运行时“飞了一会”，消息并不会丢失，当我们主动去注册时才开始处理，这就是粘性事件。</p><p>priority就不详细解释了，对于有相同threadMode的方法，priority值越大越先接收到消息。</p><p>EventBus源码解析暂时留个坑。</p><h2 id="4-rxjava"><a class="markdownIt-Anchor" href="#4-rxjava"></a> 4. RxJava</h2><p><code>RxJava – Reactive Extensions for the JVM – a library for composing asynchronous and event-based programs using observable sequences for the Java VM.</code></p><p>RxJava也是一个可以用于处理线程间通信的工具，但是功能非常强大（不仅限于线程间通信），不仅可以用于Java Web项目也可以在Android项目中使用，RxJava的使用方式与上述各种工具或者框架不太一样，它是通过流式调用的形式使用的。目前有三个版本分别是Version 1.x、Version 2.x以及最新的Version 3.x，新版本加入新的特性比如背压、Java 8等等，这里仅演示RxJava2</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">"io.reactivex.rxjava2:rxjava:2.2.8"</span> <span class="comment">// 必要rxjava2依赖</span></span><br><span class="line">implementation <span class="string">"io.reactivex.rxjava2:rxandroid:2.1.0"</span> <span class="comment">// 必要rxandrroid依赖，切线程时需要用到AndroidSchedulers.mainThread()</span></span><br></pre></td></tr></table></figure><h3 id="41-rxjava结合retrofit"><a class="markdownIt-Anchor" href="#41-rxjava结合retrofit"></a> 4.1 RxJava结合Retrofit</h3><p>还是以请求和风天气数据为例，这是Retrofit与RxJava的结合使用，RxJava使用的是观察者模式，这里就不详细解释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">        .baseUrl(URL)</span><br><span class="line">        .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">        .addCallAdapterFactory(RxJava2CallAdapterFactory.create())</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">Api api = retrofit.create(Api<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">// 这里的getNowWeather方法在Api.java中返回的是Observable</span></span><br><span class="line">api.getNowWeather(<span class="string">"beijing"</span>, KEY)</span><br><span class="line">        .subscribeOn(Schedulers.io()) <span class="comment">// subscribeOn参数为io线程，表明getNowWeather请求数据执行在io线程</span></span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread()) <span class="comment">// observeOn参数为主线程，表明请求结束传递的数据在主线程处理</span></span><br><span class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;WeatherEntity&gt;() &#123; <span class="comment">// subscribe定义上面observeOn进行的方法，RxJava2中以Consumer代理处理，一般来说有两个Consumer，一个用于处理请求成功的数据，另一个处理异常</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(WeatherEntity weatherEntity)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                textView.setText(weatherEntity.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="keyword">new</span> Consumer&lt;Throwable&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Throwable throwable)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                Log.i(<span class="string">"aaaa"</span>, throwable.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><h3 id="42-rxjava源码分析"><a class="markdownIt-Anchor" href="#42-rxjava源码分析"></a> 4.2 RxJava源码分析</h3><p>虽然上面的代码只演示了RxJava的线程切换功能，但是实际上RxJava的功能非常强大，在处理大量数据的情况下能够更加简洁有效的代码完成，同时兼具数据变换的功能，这里三言两语很难表述清除，需要实战演练就能够明白，与此同时，基于RxJava我们也可以自定义更多的工具函数，以RxJava流式调用的方式来使用。</p><p><strong>Observable警告：RxJava提供的各种方法比如subscribeOn、observeOn以及doOnNext等都会创建新的Observable和Observer，Observable是数据的被观察者，它保存了我们需要的数据；Observer是数据的观察者，数据如何发送、在哪个线程处理、如何处理异常等都是通过Observer处理的，一般来说每一个自定义的Observable都有一个内部类Observer，只是这个Observer是给上一级的Observable调用</strong></p><p>首先我们需要知道<code>retrofit.create(Api.class)</code>创建了什么，这个在Retrofit框架分析中已经做过了，在这种情况下是通过RxJava2CallAdapterFactory的RxJava2CallAdapter调用adapt方法返回的Observable</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RxJava2CallAdapter.java</span></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Object <span class="title">adapt</span><span class="params">(Call&lt;R&gt; call)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 首先是创建CallExecuteObservable</span></span><br><span class="line">    Observable&lt;Response&lt;R&gt;&gt; responseObservable = isAsync</span><br><span class="line">        ? <span class="keyword">new</span> CallEnqueueObservable&lt;&gt;(call)</span><br><span class="line">        : <span class="keyword">new</span> CallExecuteObservable&lt;&gt;(call);</span><br><span class="line"></span><br><span class="line">    Observable&lt;?&gt; observable;</span><br><span class="line">    <span class="keyword">if</span> (isResult) &#123;</span><br><span class="line">      observable = <span class="keyword">new</span> ResultObservable&lt;&gt;(responseObservable);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isBody) &#123;</span><br><span class="line">      <span class="comment">// 然后根据参数，返回的是BodyObservable</span></span><br><span class="line">      observable = <span class="keyword">new</span> BodyObservable&lt;&gt;(responseObservable);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      observable = responseObservable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (scheduler != <span class="keyword">null</span>) &#123;</span><br><span class="line">      observable = observable.subscribeOn(scheduler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isFlowable) &#123;</span><br><span class="line">      <span class="keyword">return</span> observable.toFlowable(BackpressureStrategy.LATEST);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isSingle) &#123;</span><br><span class="line">      <span class="keyword">return</span> observable.singleOrError();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isMaybe) &#123;</span><br><span class="line">      <span class="keyword">return</span> observable.singleElement();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isCompletable) &#123;</span><br><span class="line">      <span class="keyword">return</span> observable.ignoreElements();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> RxJavaPlugins.onAssembly(observable);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>而BodyObservable继承自Observable，并且有一个内部类BodyObserver</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BodyObservable.java</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">BodyObservable</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Observable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Observable&lt;Response&lt;T&gt;&gt; upstream;</span><br><span class="line"></span><br><span class="line">  BodyObservable(Observable&lt;Response&lt;T&gt;&gt; upstream) &#123;</span><br><span class="line">    <span class="keyword">this</span>.upstream = upstream;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// subscribeActual方法会在Observable调用subscribe方法时被调用</span></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">subscribeActual</span><span class="params">(Observer&lt;? <span class="keyword">super</span> T&gt; observer)</span> </span>&#123;</span><br><span class="line">    upstream.subscribe(<span class="keyword">new</span> BodyObserver&lt;T&gt;(observer));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BodyObserver</span>&lt;<span class="title">R</span>&gt; <span class="keyword">implements</span> <span class="title">Observer</span>&lt;<span class="title">Response</span>&lt;<span class="title">R</span>&gt;&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Observer&lt;? <span class="keyword">super</span> R&gt; observer;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> terminated;</span><br><span class="line"></span><br><span class="line">    BodyObserver(Observer&lt;? <span class="keyword">super</span> R&gt; observer) &#123;</span><br><span class="line">      <span class="keyword">this</span>.observer = observer;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// BodyObserver实现了Observer的4个方法onSubscribe、onNext、onComplete、onError，</span></span><br><span class="line"><span class="comment">// 但是不是BodyObserver自己完成的，而是通过传入的observer代替完成大部分功能，而BodyObserver</span></span><br><span class="line"><span class="comment">// 只对传过来的Response进行简单判断就交给observer了</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable disposable)</span> </span>&#123;</span><br><span class="line">      observer.onSubscribe(disposable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Response&lt;R&gt; response)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (response.isSuccessful()) &#123;</span><br><span class="line">        <span class="comment">// 比如判断response是否是成功从服务器返回的，然后交给observer的onNext方法，</span></span><br><span class="line">        <span class="comment">// 此时传给observer的就是response的body了，对应我们使用的GsonConverterFactory，</span></span><br><span class="line">        <span class="comment">// 那这个body就是WeatherEntity实例</span></span><br><span class="line">        observer.onNext(response.body());</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        terminated = <span class="keyword">true</span>;</span><br><span class="line">        Throwable t = <span class="keyword">new</span> HttpException(response);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          observer.onError(t);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable inner) &#123;</span><br><span class="line">          Exceptions.throwIfFatal(inner);</span><br><span class="line">          RxJavaPlugins.onError(<span class="keyword">new</span> CompositeException(t, inner));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!terminated) &#123;</span><br><span class="line">        observer.onComplete();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!terminated) &#123;</span><br><span class="line">        observer.onError(throwable);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// This should never happen! onNext handles and forwards errors automatically.</span></span><br><span class="line">        Throwable broken = <span class="keyword">new</span> AssertionError(</span><br><span class="line">            <span class="string">"This should never happen! Report as a bug with the full stacktrace."</span>);</span><br><span class="line">        <span class="comment">//noinspection UnnecessaryInitCause Two-arg AssertionError constructor is 1.7+ only.</span></span><br><span class="line">        broken.initCause(throwable);</span><br><span class="line">        RxJavaPlugins.onError(broken);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建完Observable后紧接着是subscribeOn、observeOn以及subscribe方法，很显然这些方法都是Observable的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Observable.java</span></span><br><span class="line">    <span class="meta">@CheckReturnValue</span></span><br><span class="line">    <span class="meta">@SchedulerSupport</span>(SchedulerSupport.CUSTOM)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Observable&lt;T&gt; <span class="title">subscribeOn</span><span class="params">(Scheduler scheduler)</span> </span>&#123;</span><br><span class="line">        ObjectHelper.requireNonNull(scheduler, <span class="string">"scheduler is null"</span>);</span><br><span class="line">        <span class="keyword">return</span> RxJavaPlugins.onAssembly(<span class="keyword">new</span> ObservableSubscribeOn&lt;T&gt;(<span class="keyword">this</span>, scheduler));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Observable.java</span></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Observable&lt;T&gt; <span class="title">onAssembly</span><span class="params">(@NonNull Observable&lt;T&gt; source)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 一般来说onObservableAssembly在没有调用reset方法的情况下为空，所以这里肯定为空</span></span><br><span class="line">        Function&lt;? <span class="keyword">super</span> Observable, ? extends Observable&gt; f = onObservableAssembly;</span><br><span class="line">        <span class="keyword">if</span> (f != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> apply(f, source);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 也就是说这个onAssembly方法直接返回了source，所以上面的subscribeOn方法返回的是ObservableSubscribeOn</span></span><br><span class="line">        <span class="keyword">return</span> source;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>subscribeOn方法之后我们得到了一个新的ObservableSubscribeOn，<a href="http://xn--BodyObservableSchedulers-fw12b88d4ukcom82ivyi9go50urfbb77r75wg.io" target="_blank" rel="noopener">它保存了BodyObservable以及加入的参数Schedulers.io</a>()，接下来继续调用observeOn</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Observable.java</span></span><br><span class="line">    <span class="meta">@CheckReturnValue</span></span><br><span class="line">    <span class="meta">@SchedulerSupport</span>(SchedulerSupport.CUSTOM)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Observable&lt;T&gt; <span class="title">observeOn</span><span class="params">(Scheduler scheduler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> observeOn(scheduler, <span class="keyword">false</span>, bufferSize());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CheckReturnValue</span></span><br><span class="line">    <span class="meta">@SchedulerSupport</span>(SchedulerSupport.CUSTOM)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Observable&lt;T&gt; <span class="title">observeOn</span><span class="params">(Scheduler scheduler, <span class="keyword">boolean</span> delayError, <span class="keyword">int</span> bufferSize)</span> </span>&#123;</span><br><span class="line">        ObjectHelper.requireNonNull(scheduler, <span class="string">"scheduler is null"</span>);</span><br><span class="line">        ObjectHelper.verifyPositive(bufferSize, <span class="string">"bufferSize"</span>);</span><br><span class="line">        <span class="comment">// observeOn显然又返回了一个ObservableObserveOn</span></span><br><span class="line">        <span class="keyword">return</span> RxJavaPlugins.onAssembly(<span class="keyword">new</span> ObservableObserveOn&lt;T&gt;(<span class="keyword">this</span>, scheduler, delayError, bufferSize));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>observeOn方法之后我们得到了新的ObservableObserveOn，它保存了ObservableSubscribeOn以及参数AndroidSchedulers.mainThread()，最后调用subscribe方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Observable.java</span></span><br><span class="line">    <span class="meta">@CheckReturnValue</span></span><br><span class="line">    <span class="meta">@SchedulerSupport</span>(SchedulerSupport.NONE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Disposable <span class="title">subscribe</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; onNext, Consumer&lt;? <span class="keyword">super</span> Throwable&gt; onError)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// subscribe方法可以接受多种参数，比如我这里对应上面的两个Consumer参数，其中第一个Consumer名字是onNext，</span></span><br><span class="line">        <span class="comment">// 第二个Consumer名字是onError，看到这里基本上明白了这两个Consumer的功能，就是执行处理onNext传入的数据以及处理</span></span><br><span class="line">        <span class="comment">// onError传入的异常</span></span><br><span class="line">        <span class="keyword">return</span> subscribe(onNext, onError, Functions.EMPTY_ACTION, Functions.emptyConsumer());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CheckReturnValue</span></span><br><span class="line">    <span class="meta">@SchedulerSupport</span>(SchedulerSupport.NONE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Disposable <span class="title">subscribe</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; onNext, Consumer&lt;? <span class="keyword">super</span> Throwable&gt; onError,</span></span></span><br><span class="line"><span class="function"><span class="params">            Action onComplete, Consumer&lt;? <span class="keyword">super</span> Disposable&gt; onSubscribe)</span> </span>&#123;</span><br><span class="line">        ObjectHelper.requireNonNull(onNext, <span class="string">"onNext is null"</span>);</span><br><span class="line">        ObjectHelper.requireNonNull(onError, <span class="string">"onError is null"</span>);</span><br><span class="line">        ObjectHelper.requireNonNull(onComplete, <span class="string">"onComplete is null"</span>);</span><br><span class="line">        ObjectHelper.requireNonNull(onSubscribe, <span class="string">"onSubscribe is null"</span>);</span><br><span class="line">        <span class="comment">// 然后对onNext、onError、onComplete、onSubscribe四个Consumer进行封装，</span></span><br><span class="line">        <span class="comment">// 整合成一个LambdaObserver，也就是说，本质上我们subscribe的参数最终还是Observer</span></span><br><span class="line">        LambdaObserver&lt;T&gt; ls = <span class="keyword">new</span> LambdaObserver&lt;T&gt;(onNext, onError, onComplete, onSubscribe);</span><br><span class="line"></span><br><span class="line">        subscribe(ls);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ls;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SchedulerSupport</span>(SchedulerSupport.NONE)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(Observer&lt;? <span class="keyword">super</span> T&gt; observer)</span> </span>&#123;</span><br><span class="line">        ObjectHelper.requireNonNull(observer, <span class="string">"observer is null"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// RxJavaPlugins.onSubscribe类似上面的onAssembly方法，这里没有做任何操作</span></span><br><span class="line">            <span class="comment">// 等价于observer = observer</span></span><br><span class="line">            observer = RxJavaPlugins.onSubscribe(<span class="keyword">this</span>, observer);</span><br><span class="line"></span><br><span class="line">            ObjectHelper.requireNonNull(observer, <span class="string">"The RxJavaPlugins.onSubscribe hook returned a null Observer. Please change the handler provided to RxJavaPlugins.setOnObservableSubscribe for invalid null returns. Further reading: https://github.com/ReactiveX/RxJava/wiki/Plugins"</span>);</span><br><span class="line">            <span class="comment">// 然后调用subscribeActual，要知道ObservableObserveOn中重写了subscribeActual方法，所以我们再回到</span></span><br><span class="line">            <span class="comment">// ObservableObserveOn中，需要记住的是这个observer保存了我们定义的两个Consumer</span></span><br><span class="line">            subscribeActual(observer);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123; <span class="comment">// NOPMD</span></span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            Exceptions.throwIfFatal(e);</span><br><span class="line">            <span class="comment">// can't call onError because no way to know if a Disposable has been set or not</span></span><br><span class="line">            <span class="comment">// can't call onSubscribe because the call might have set a Subscription already</span></span><br><span class="line">            RxJavaPlugins.onError(e);</span><br><span class="line"></span><br><span class="line">            NullPointerException npe = <span class="keyword">new</span> NullPointerException(<span class="string">"Actually not, but can't throw other exceptions due to RS"</span>);</span><br><span class="line">            npe.initCause(e);</span><br><span class="line">            <span class="keyword">throw</span> npe;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>前面的构造Observable的顺序是：CallExecuteObservable -&gt; BodyObservable -&gt; ObservableSubscribeOn -&gt; ObservableObserveOn，每一级Observable都是以上一级Observable作为参数够早的，CallExecuteObservable和BodyObservable是没有设置Scheduler参数的，ObservableSubscribeOn和ObservableObserveOn有Scheduler参数，Scheduler参数决定了Observer执行的线程；当我们调用subscribe方法会自底向上依次调用Observable的subscribeActual方法，在调用subscribeActual方法是会调用上一级的subscribe方法，传入的参数就是Observer，Observer的构造顺序是：自定义Consumer -&gt; LambdaObserver -&gt; ObserveOnObserver -&gt; SubscribeOnObserver -&gt; BodyObserver，最顶层的CallExecuteObservable是没有Observer的，每一级的Observer都会以下一级的Observer作为参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ObservableObserveOn.java</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">subscribeActual</span><span class="params">(Observer&lt;? <span class="keyword">super</span> T&gt; observer)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// source就是ObservableObserveOn构造时传入的第一个参数，对应ObservableSubscribeOn，</span></span><br><span class="line">        <span class="comment">// 由于scheduler对应AndroidSchedulers.mainThread()，本质上是HandlerScheduler</span></span><br><span class="line">        <span class="keyword">if</span> (scheduler <span class="keyword">instanceof</span> TrampolineScheduler) &#123;</span><br><span class="line">            source.subscribe(observer);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 调用的是HandlerScheduler的createWorker方法,返回的是HandlerWorker，</span></span><br><span class="line">            <span class="comment">// HandlerWorker保存了两个参数，一个是Handler，另一个bool async，</span></span><br><span class="line">            <span class="comment">// 因为AndroidSchedulers.mainThread()，所以此处的Handler是new Handler(Looper.getMainLooper())，</span></span><br><span class="line">            <span class="comment">// 即主线程中的Handler，async为false</span></span><br><span class="line">            Scheduler.Worker w = scheduler.createWorker();</span><br><span class="line">            <span class="comment">// 构造新的ObserveOnObserver，传入的参数有LambdaObserver和HandlerWorker</span></span><br><span class="line">            <span class="comment">// 然后调用ObservableSubscribeOn的subscribe方法，这是一个递归调用，subscribe就是上面的，</span></span><br><span class="line">            <span class="comment">// 又因为subscribeActual，所以还是调用ObservableSubscribeOn的subscribeActual方法</span></span><br><span class="line">            source.subscribe(<span class="keyword">new</span> ObserveOnObserver&lt;T&gt;(observer, w, delayError, bufferSize));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>当我们走到了ObservableSubscribeOn的subscribeActual方法时，需要开始使用observer（上一级Observable的内部类Observer）进行预处理或者发送数据，因为RxJava的onSubscribe是最先被调用的，所以我们需要先调用onSubscribe方法，会依次向上调用Observer的onSubscribe方法，由于Observer保存了如何发送数据的方法onNext以及处理异常的方法onError以及表示已完成的onComplete，所以如果传到最上级的Observable，那么就可以在CallExecuteObservable的subscribeActual方法中调用传入的Observer的各种方法，从而对数据进行发送、处理等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ObservableSubscribeOn.java</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribeActual</span><span class="params">(<span class="keyword">final</span> Observer&lt;? <span class="keyword">super</span> T&gt; observer)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// observer是上面构造的ObserveOnObserver，将其转换为SubscribeOnObserver</span></span><br><span class="line">        <span class="comment">// 将上一级传进来的订阅者包装为线程安全的原子变量</span></span><br><span class="line">        <span class="keyword">final</span> SubscribeOnObserver&lt;T&gt; parent = <span class="keyword">new</span> SubscribeOnObserver&lt;T&gt;(observer);</span><br><span class="line">        <span class="comment">// 然后调用ObserveOnObserver的onSubscribe，调用onSubscribe即开始预处理，onSubscribe会调用</span></span><br><span class="line">        <span class="comment">// 我们定义的Consumer（本示例未使用onSubscribe的Consumer，所以没有做任何操作）</span></span><br><span class="line">        observer.onSubscribe(parent);</span><br><span class="line">        <span class="comment">// ObservableSubscribeOn的scheduler对应Schedulers.io()，即IoScheduler</span></span><br><span class="line">        <span class="comment">// SubscribeTask会被放在BlockingQueue队列中，这里就是开始执行我们实际请求的关键转折了，</span></span><br><span class="line">        <span class="comment">// 之前都是铺垫，然后在指定的线程中执行source(上一级)的subscribe，即IO线程的工作</span></span><br><span class="line">        <span class="comment">// source.subscribe(parent)，这里的source实际就是BodyObservable</span></span><br><span class="line">        parent.setDisposable(scheduler.scheduleDirect(<span class="keyword">new</span> SubscribeTask(parent)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SubscribeTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> SubscribeOnObserver&lt;T&gt; parent;</span><br><span class="line"></span><br><span class="line">        SubscribeTask(SubscribeOnObserver&lt;T&gt; parent) &#123;</span><br><span class="line">            <span class="keyword">this</span>.parent = parent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 这里的source是BodyObservable</span></span><br><span class="line">            source.subscribe(parent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>scheduler的作用就是通过内部Worker将task交给线程池进行处理，因为ObservableSubscribeOn是通过调用subscribeOn方法生成的，因此很大程度上会运行在其他线程，也就是说SubscribeTask的run方法是执行在Worker的线程池中，即从现在开始的subscribe都是在Worker线程中而不是主线程了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Scheduler.java</span></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Disposable <span class="title">scheduleDirect</span><span class="params">(@NonNull Runnable run)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> scheduleDirect(run, <span class="number">0L</span>, TimeUnit.NANOSECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Disposable <span class="title">scheduleDirect</span><span class="params">(@NonNull Runnable run, <span class="keyword">long</span> delay, @NonNull TimeUnit unit)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这个createWorker就是IoScheduler的createWorker，返回的是EventLoopWorker，此EventLoopWorker</span></span><br><span class="line">        <span class="comment">// 运行的线程通过线程池CachedWorkerPool提供</span></span><br><span class="line">        <span class="keyword">final</span> Worker w = createWorker();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Runnable decoratedRun = RxJavaPlugins.onSchedule(run);</span><br><span class="line"></span><br><span class="line">        DisposeTask task = <span class="keyword">new</span> DisposeTask(decoratedRun, w);</span><br><span class="line">        <span class="comment">// w.schedule会在ScheduledThreadPoolExecutor中安排task被执行，task会被放在队列中</span></span><br><span class="line">        w.schedule(task, delay, unit);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> task;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在看BodyObservable的subscribe方法前先看一下onSubscribe做了些什么</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ObservableObserveOn.java 内部类ObserveOnObserver的onSubscribe方法</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (DisposableHelper.validate(<span class="keyword">this</span>.upstream, d)) &#123;</span><br><span class="line">                <span class="keyword">this</span>.upstream = d;</span><br><span class="line">                <span class="comment">// 这里的d是SubscribeOnObserver，所以跳过</span></span><br><span class="line">                <span class="keyword">if</span> (d <span class="keyword">instanceof</span> QueueDisposable) &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                    QueueDisposable&lt;T&gt; qd = (QueueDisposable&lt;T&gt;) d;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">int</span> m = qd.requestFusion(QueueDisposable.ANY | QueueDisposable.BOUNDARY);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (m == QueueDisposable.SYNC) &#123;</span><br><span class="line">                        sourceMode = m;</span><br><span class="line">                        queue = qd;</span><br><span class="line">                        done = <span class="keyword">true</span>;</span><br><span class="line">                        downstream.onSubscribe(<span class="keyword">this</span>);</span><br><span class="line">                        schedule();</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (m == QueueDisposable.ASYNC) &#123;</span><br><span class="line">                        sourceMode = m;</span><br><span class="line">                        queue = qd;</span><br><span class="line">                        downstream.onSubscribe(<span class="keyword">this</span>);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 这个队列用于保存数据，之后会用，bufferSize大小默认是128</span></span><br><span class="line">                queue = <span class="keyword">new</span> SpscLinkedArrayQueue&lt;T&gt;(bufferSize);</span><br><span class="line">                <span class="comment">// 而downstream是ObserveOnObserver构造函数的第一个参数，即我们调用subscribe方法时</span></span><br><span class="line">                <span class="comment">// 传入的LambdaObserver（但是通过Consumer实现的）</span></span><br><span class="line">                downstream.onSubscribe(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LambdaObserver.java</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (DisposableHelper.setOnce(<span class="keyword">this</span>, d)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// onSubscribe也只是调用onSubscribe.accept，还记得上面我们的LambdaObserver构造时仅使用了</span></span><br><span class="line">                <span class="comment">// onNext和onError，所以onSubscribe其实是空的，这里没有任何作用</span></span><br><span class="line">                onSubscribe.accept(<span class="keyword">this</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                Exceptions.throwIfFatal(ex);</span><br><span class="line">                d.dispose();</span><br><span class="line">                onError(ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>回到subscribe的调用链，在子线程（线程池）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BodyObservable.java</span></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">subscribeActual</span><span class="params">(Observer&lt;? <span class="keyword">super</span> T&gt; observer)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里的upstream是CallExecuteObservable</span></span><br><span class="line">    upstream.subscribe(<span class="keyword">new</span> BodyObserver&lt;T&gt;(observer));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>通过subscribe最终调用到了最顶层的Observable的subscribeActual方法，且传入的下一级的内部类Observer，用于提供onXXX方法传递数据，执行在子线程（线程池）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CallExecuteObservable.java</span></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">subscribeActual</span><span class="params">(Observer&lt;? <span class="keyword">super</span> Response&lt;T&gt;&gt; observer)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Since Call is a one-shot type, clone it for each new observer.</span></span><br><span class="line">    Call&lt;T&gt; call = originalCall.clone();</span><br><span class="line">    CallDisposable disposable = <span class="keyword">new</span> CallDisposable(call);</span><br><span class="line">    <span class="comment">// CallExecuteObservable是我们实际开始调用Retrofit请求数据的开始</span></span><br><span class="line">    <span class="comment">// 首先需要调用observer的onSubscribe，这里是BodyObserver，</span></span><br><span class="line">    <span class="comment">// 还记得上面的LambdaObserver的onSubscribe，</span></span><br><span class="line">    <span class="comment">// 这里其实什么事情都没有做</span></span><br><span class="line">    observer.onSubscribe(disposable);</span><br><span class="line">    <span class="keyword">if</span> (disposable.isDisposed()) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> terminated = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 然后调用call.execute()，如果记得Retrofit，那么就知道这里发出了请求，也就是说这个方法执行在IO线程</span></span><br><span class="line">      Response&lt;T&gt; response = call.execute();</span><br><span class="line">      <span class="keyword">if</span> (!disposable.isDisposed()) &#123;</span><br><span class="line">        <span class="comment">// 然后通过onNext方法将结果发射出去，这个observer就是BodyObserver</span></span><br><span class="line">        observer.onNext(response);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!disposable.isDisposed()) &#123;</span><br><span class="line">        terminated = <span class="keyword">true</span>;</span><br><span class="line">        observer.onComplete();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">      Exceptions.throwIfFatal(t);</span><br><span class="line">      <span class="keyword">if</span> (terminated) &#123;</span><br><span class="line">        RxJavaPlugins.onError(t);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!disposable.isDisposed()) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          observer.onError(t);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable inner) &#123;</span><br><span class="line">          Exceptions.throwIfFatal(inner);</span><br><span class="line">          RxJavaPlugins.onError(<span class="keyword">new</span> CompositeException(t, inner));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>onNext方法的向下一级传递</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BodyObservable.java 内部类BodyObserver的onNext方法</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Response&lt;R&gt; response)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (response.isSuccessful()) &#123;</span><br><span class="line">        <span class="comment">// BodyObserver判断了一下请求结果response，然后将body发射出去</span></span><br><span class="line">        <span class="comment">// 这里的observer就是SubscribeOnObserver</span></span><br><span class="line">        observer.onNext(response.body());</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        terminated = <span class="keyword">true</span>;</span><br><span class="line">        Throwable t = <span class="keyword">new</span> HttpException(response);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          observer.onError(t);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable inner) &#123;</span><br><span class="line">          Exceptions.throwIfFatal(inner);</span><br><span class="line">          RxJavaPlugins.onError(<span class="keyword">new</span> CompositeException(t, inner));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ObservableSubscribeOn.java 内部类SubscribeOnObserver</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 这里的downstream是ObserveOnObserver</span></span><br><span class="line">            downstream.onNext(t);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>这里因为ObservableObserveOn是通过observeOn创建的，而这里发生了线程切换，我们的例子中是主线程，所以需要通过Handler将后续的任务切换到主线程中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ObservableObserveOn.java 内部类ObserveOnObserver</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (done) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (sourceMode != QueueDisposable.ASYNC) &#123;</span><br><span class="line">                <span class="comment">// 这里的queue是SpscLinkedArrayQueue，我们把传出来的数据保存在队列中了</span></span><br><span class="line">                queue.offer(t);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 最终调用schedule</span></span><br><span class="line">            schedule();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">schedule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (getAndIncrement() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// worker是初始化时调用observeOn传入的主线程的HandlerScheduler的内部类HandlerWorker，</span></span><br><span class="line">                <span class="comment">// 这里的schedule方法传入this，即ObserveOnObserver，与此同时ObserveOnObserver</span></span><br><span class="line">                <span class="comment">// 实现了Runnable的接口，可以作为Runnable，它的run方法会在下面被执行</span></span><br><span class="line">                worker.schedule(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HandlerScheduler.java 内部类HandlerWorker</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="meta">@SuppressLint</span>(<span class="string">"NewApi"</span>) <span class="comment">// Async will only be true when the API is available to call.</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Disposable <span class="title">schedule</span><span class="params">(Runnable run, <span class="keyword">long</span> delay, TimeUnit unit)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (run == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"run == null"</span>);</span><br><span class="line">            <span class="keyword">if</span> (unit == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"unit == null"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (disposed) &#123;</span><br><span class="line">                <span class="keyword">return</span> Disposables.disposed();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            run = RxJavaPlugins.onSchedule(run);</span><br><span class="line">            <span class="comment">// HandlerWorker的schedule方法，我们传入的run即上面的ObserveOnObserver</span></span><br><span class="line">            <span class="comment">// ScheduledRunnable也是Runnable，但是它的run方法仅仅是调用了传入的run的run方法</span></span><br><span class="line">            <span class="comment">// 也就是说如果我们执行了scheduled的run方法等价于执行了run的方法，也就是</span></span><br><span class="line">            <span class="comment">// ObserveOnObserver的run方法</span></span><br><span class="line">            ScheduledRunnable scheduled = <span class="keyword">new</span> ScheduledRunnable(handler, run);</span><br><span class="line">            <span class="comment">// scheduled的run方法执行是通过handler处理的，通过sendMessageDelayed实现的</span></span><br><span class="line">            Message message = Message.obtain(handler, scheduled);</span><br><span class="line">            message.obj = <span class="keyword">this</span>; <span class="comment">// Used as token for batch disposal of this worker's runnables.</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (async) &#123;</span><br><span class="line">                message.setAsynchronous(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 也就是在这里我们将在主线程执行ObserveOnObserver的run方法</span></span><br><span class="line">            handler.sendMessageDelayed(message, unit.toMillis(delay));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Re-check disposed state for removing in case we were racing a call to dispose().</span></span><br><span class="line">            <span class="keyword">if</span> (disposed) &#123;</span><br><span class="line">                handler.removeCallbacks(scheduled);</span><br><span class="line">                <span class="keyword">return</span> Disposables.disposed();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> scheduled;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ObservableObserveOn.java 内部类ObserveOnObserver</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (outputFused) &#123;</span><br><span class="line">                drainFused();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 这里执行的是drainNormal</span></span><br><span class="line">                drainNormal();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">drainNormal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> missed = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 还记得上面的SpscLinkedArrayQueue，之前我们在onNext方法中把传过来的数据保存在队列中</span></span><br><span class="line">            <span class="comment">// 接下来需要从队列中取出数据</span></span><br><span class="line">            <span class="keyword">final</span> SimpleQueue&lt;T&gt; q = queue;</span><br><span class="line">            <span class="comment">// downstream即LambdaObserver</span></span><br><span class="line">            <span class="keyword">final</span> Observer&lt;? <span class="keyword">super</span> T&gt; a = downstream;</span><br><span class="line">            <span class="comment">// 这里用循环是因为RxJava支持连续发送多个数据，那么最终数据都保存在队列中</span></span><br><span class="line">            <span class="comment">// 所以取数据的时候就可以通过循环来一次性获取队列中的所有数据，而SpscLinkedArrayQueue</span></span><br><span class="line">            <span class="comment">// 的最大容量，根据之前的代码我们知道是128</span></span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="keyword">if</span> (checkTerminated(done, q.isEmpty(), a)) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                    <span class="keyword">boolean</span> d = done;</span><br><span class="line">                    T v;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// q.poll从队列中取出数据</span></span><br><span class="line">                        v = q.poll();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                        Exceptions.throwIfFatal(ex);</span><br><span class="line">                        disposed = <span class="keyword">true</span>;</span><br><span class="line">                        upstream.dispose();</span><br><span class="line">                        q.clear();</span><br><span class="line">                        a.onError(ex);</span><br><span class="line">                        worker.dispose();</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">boolean</span> empty = v == <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (checkTerminated(d, empty, a)) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (empty) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// a即为LambdaObserver，v为我们从队列中取出来的数据，也是</span></span><br><span class="line">                    <span class="comment">// 我们通过handler传入的数据，通过onNext发出，而这个onNext</span></span><br><span class="line">                    <span class="comment">// 就是我们定义的第一个Consumer，通过这个Consumer的accept方法</span></span><br><span class="line">                    <span class="comment">// 在主线程实现TextView的设置</span></span><br><span class="line">                    a.onNext(v);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                missed = addAndGet(-missed);</span><br><span class="line">                <span class="keyword">if</span> (missed == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LambdaObserver.java</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isDisposed()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 我们定义的Consumer的accept方法</span></span><br><span class="line">                onNext.accept(t);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                Exceptions.throwIfFatal(e);</span><br><span class="line">                get().dispose();</span><br><span class="line">                onError(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>综上，RxJava的简单源码分析流程就完成了，整个RxJava调用流程可以分为两个阶段：构造阶段和subscribe阶段，在调用subscribe方法前的步骤我称之为构造阶段，这个过程中主要工作是创建被观察者Observable，每一次使用RxJava的方法时都会创建新的Observable，每个新的Observable都会以上一级的Observable作为参数，其中部分Observable还需要Scheduler参数，用于切换线程，构造阶段仅仅是将Observable连接起来；在调用subscribe方法时开始了subscribe阶段，这个阶段的任务是将我们自定义的Consumer（或者可以当作观察者Observer）通过Observable的subscribe方法连接起来（subscribe的过程中可能会调用onSubscribe方法进行预处理，初始化一些队列什么的，onSubscribe方法与onNext、onError、onComplete方法有点区别），当我们的subscribe方法走到最顶层时会开始启动Observer的onXXX方法传递数据或者传出异常等等，因为之前已经将Observer连接起来，所以此时onXXX方法的调用也是链式的，层层向下传递，直到调用我们自定义的Consumer（在此过程中会通过在构造阶段传入的Scheduler实现线程切换）。</p><p>如果完整的看过一遍分析流程就会发现其实Observable和Observer的调用链是很简单的，但是随之也有几个疑问：</p><blockquote><p>1.为什么要用Observable和Observer的形式？</p></blockquote><p>首先需要明白的是，RxJava的目的是提供一个便于进行数据处理的框架，通过流式调用实现线程切换、数据类型转换等，也就是说数据从A -&gt; B -&gt; C可以是不同类型的数据或者是在不同线程处理，最适合的模式就是观察者模式，比如我们常见的OnClickListener，它传递的是点击事件，再比如我们自定义的传递数据的接口回调，都是观察者模式。简而言之就是，A通过B提供的接口将数据传到B中进行处理，B通过C提供的接口将数传到C中进行处理，由此可以进行数据的传递，当然这只是数据传递的流程，具体的调用流程就是上面的总结。使用Observable和Observer的形式，一是便于我们自定义数据转换的Observable和Observer，二是可以实现流式调用，三是这里面实现了这种接口回调的功能。</p><blockquote><p>2.subscribeOn和observeOn是如何切换线程的？</p></blockquote><p>subscribeOn会指定我们在调用subscribeOn之前的Observable中数据处理的线程，observeOn会指定我们在调用observeOn之后的Observable中数据处理的线程。这是因为两者切换线程的位置不同，subscribeOn会在subscribeActual的方法中切换线程，导致后续所有的调用都是在subscribeOn指定的线程中，而subscribeActual方法是自底向上调用的，因此会影响subscribeOn之前的所有方法；而observeOn是在ObserveOnObserver的onNext方法中进行线程切换的，因此会影响observeOn后面数据传递的方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ReactiveX/RxJava/tree/2.x&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RxJava2&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://greenrobot.org/eventbus/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;EventBus&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.jianshu.com/p/1a5a3db45cfa&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android Handler 消息机制详述&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.jianshu.com/p/ee1342fcf5e7&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android 多线程：手把手教你使用AsyncTask&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://juejin.im/post/5a6c36fff265da3e2f012f82&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;EventBus使用详解&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://juejin.im/post/5a224cc76fb9a04527256683&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Rxjava这一篇就够了，墙裂推荐&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://www.10tiao.com/html/227/201802/2650242399/1.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;精彩的RxJava源码剖析&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://gank.io/post/560e15be2dca930e00da1083&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;给 Android 开发者的 RxJava 详解&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Android中很多地方都需要跨线程通信，这是由于Android主线程不允许进行复杂的网络请求或者其他非常耗时的操作，否则会导致ANR，主线程只能进行UI操作，比如修改某个控件的text、设置某个控件不可见等等，因此网络请求等操作需要在其他线程中完成，当数据在其他线程中获取完毕时，通过跨线程通信将数据传到主线程中，主线程就可以直接根据数据进行UI操作。常见的跨线程通信的方式有Handler、AsyncTask、EventBus以及RxJava等，前两个是Android自带，后两者是封装好的第三方库。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://zhoutao822.coding.me/categories/Android/"/>
    
    
      <category term="Android" scheme="http://zhoutao822.coding.me/tags/Android/"/>
    
      <category term="Handler" scheme="http://zhoutao822.coding.me/tags/Handler/"/>
    
      <category term="AsyncTask" scheme="http://zhoutao822.coding.me/tags/AsyncTask/"/>
    
      <category term="EventBus" scheme="http://zhoutao822.coding.me/tags/EventBus/"/>
    
      <category term="RxJava" scheme="http://zhoutao822.coding.me/tags/RxJava/"/>
    
      <category term="多线程" scheme="http://zhoutao822.coding.me/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Material组件-Snackbar</title>
    <link href="http://zhoutao822.coding.me/archives/d1370632.html"/>
    <id>http://zhoutao822.coding.me/archives/d1370632.html</id>
    <published>2019-07-23T13:46:04.000Z</published>
    <updated>2020-01-19T03:33:49.808Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><blockquote><p><a href="https://material.io/collections/developer-tutorials/" target="_blank" rel="noopener">MATERIAL DESIGN</a></p></blockquote><p>Snackbar是类似与Toast的一种信息提示控件，但是与Toast不同的是Snackbar是从界面底部弹出的且支持一个点击事件，默认情况下Snackbar内部有两个子控件分别是TextView和Button，两者水平排列，TextView用于显示信息，Button用于实现点击事件。</p><!--  --><p><img src="http://114.116.9.65:7777/images/2020/01/19/snackbar1.gif" alt="snackbar1.gif" /></p><h2 id="1-snackbar使用"><a class="markdownIt-Anchor" href="#1-snackbar使用"></a> 1. Snackbar使用</h2><p>Snackbar属于Material组件中的一种，如果你的应用使用了Material Theme以及AppCompatActivity，则Snackbar会获得圆角、四周有margin空隙的效果。</p><p>默认情况下使用Snackbar，调用的方式也非常类似Toast</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// view是当前页面内的某个view，根据源码可知，make方法会找view的父view，</span></span><br><span class="line"><span class="comment">// 直到父view是FrameLayout或者CoordinateLayout，然后将其作为root给inflate方法调用</span></span><br><span class="line"><span class="comment">// inflate会加载默认的布局文件，这里根据是否使用Material Theme会加载不同的布局文件，</span></span><br><span class="line"><span class="comment">// 即上文我提到的效果，与此同时会将text的内容赋给布局文件中的TextView，</span></span><br><span class="line"><span class="comment">// 如果父view是CoordinateLayout，则Snackbar还支持右滑取消的功能，</span></span><br><span class="line"><span class="comment">// Snackbar.LENGTH_SHORT就类似于Toast.LENGTH_SHORT用于控制Snackbar的持续时间</span></span><br><span class="line">Snackbar snackbar = Snackbar.make(view, text, Snackbar.LENGTH_SHORT);</span><br><span class="line">snackbar.show();</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="2-snackbar自定义content"><a class="markdownIt-Anchor" href="#2-snackbar自定义content"></a> 2. Snackbar自定义Content</h2><p>显然原生的Snackbar没有提供setContentView的方法，为了能够自定义Snackbar的布局，我们需要对Snackbar的一些参数进行修改，比如如果我们需要自定义Snackbar的margin以及自定义Snackbar的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SnackbarUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> duration;</span><br><span class="line">    <span class="keyword">private</span> View anchor;</span><br><span class="line">    <span class="keyword">private</span> ViewGroup customView;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sideMargin;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bottomMargin;</span><br><span class="line">    <span class="keyword">private</span> Snackbar delegete;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SnackbarUtil is used to create Snackbar, if you setEnableCustom(false) or in default</span></span><br><span class="line"><span class="comment">     * you will get the origin Snackbar from Snackbar.make(anchor, text, duration); if you</span></span><br><span class="line"><span class="comment">     * setEnableCustom(true) in Builder, you must add your defined customView and you can</span></span><br><span class="line"><span class="comment">     * modify the margin of the customView in Snackbar.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Your customView's layout should container 2 layer of Layout, because there is some</span></span><br><span class="line"><span class="comment">     * UI bug if you just only use 1 layer</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="comment">     * &lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"</span></span><br><span class="line"><span class="comment">     * android:layout_width="match_parent"</span></span><br><span class="line"><span class="comment">     * android:layout_height="match_parent"&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *      &lt;LinearLayout</span></span><br><span class="line"><span class="comment">     *      android:layout_width="match_parent"</span></span><br><span class="line"><span class="comment">     *      android:layout_height="wrap_content"</span></span><br><span class="line"><span class="comment">     *      android:background="<span class="doctag">@drawable</span>/radius_background"</span></span><br><span class="line"><span class="comment">     *      android:orientation="vertical"&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *          &lt;TextView</span></span><br><span class="line"><span class="comment">     *          android:layout_width="wrap_content"</span></span><br><span class="line"><span class="comment">     *          android:layout_height="wrap_content"</span></span><br><span class="line"><span class="comment">     *          android:layout_gravity="center"</span></span><br><span class="line"><span class="comment">     *          android:padding="8dp"</span></span><br><span class="line"><span class="comment">     *          android:id="@+id/textView"</span></span><br><span class="line"><span class="comment">     *          android:text="hahahahh"</span></span><br><span class="line"><span class="comment">     *          android:textColor="<span class="doctag">@color</span>/colorPrimaryDark"</span></span><br><span class="line"><span class="comment">     *          android:textSize="24sp" /&gt;</span></span><br><span class="line"><span class="comment">     *      &lt;/LinearLayout&gt;</span></span><br><span class="line"><span class="comment">     * &lt;/LinearLayout&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Usage:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * snackView is your customView, layout_snackbar is the layout above.</span></span><br><span class="line"><span class="comment">     * button is the anchor view, if your button is in CoordinatorLayout</span></span><br><span class="line"><span class="comment">     * the snackbar can be dismissed with swipe action.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * ViewGroup snackView = (ViewGroup) LayoutInflater.from(MainActivity.this).inflate(</span></span><br><span class="line"><span class="comment">     *                                      R.layout.layout_snackbar,</span></span><br><span class="line"><span class="comment">     *                                      new LinearLayout(MainActivity.this),</span></span><br><span class="line"><span class="comment">     *                                      false);</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * TextView textView = snackView.findViewById(R.id.textView);</span></span><br><span class="line"><span class="comment">     * textView.setOnClickListener(new View.OnClickListener() &#123;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> duration     Snackbar duration, default Snackbar.LENGTH_SHORT;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> anchor       must need, with anchor the Snackbar will find its root;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customView   must need if setEnableCustom(true) in Builder;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sideMargin   customView left and right margin in Snackbar;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bottomMargin customView bottom margin in Snackbar;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Override</span> public void onClick(View v) &#123;</span></span><br><span class="line"><span class="comment">     * Toast.makeText(MainActivity.this, "12121", Toast.LENGTH_LONG).show();</span></span><br><span class="line"><span class="comment">     * &#125;</span></span><br><span class="line"><span class="comment">     * &#125;);</span></span><br><span class="line"><span class="comment">     * Snackbar snackbar = new SnackbarUtil.Builder()</span></span><br><span class="line"><span class="comment">     *                  .setAnchor(button)</span></span><br><span class="line"><span class="comment">     *                  .setBottomMargin(80)</span></span><br><span class="line"><span class="comment">     *                  .setDuration(Snackbar.LENGTH_SHORT)</span></span><br><span class="line"><span class="comment">     *                  .setText("32323")</span></span><br><span class="line"><span class="comment">     *                  .setCustomView(snackView)</span></span><br><span class="line"><span class="comment">     *                  .setSideMargin(20)</span></span><br><span class="line"><span class="comment">     *                  .build();</span></span><br><span class="line"><span class="comment">     * snackbar.show();</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SnackbarUtil(<span class="keyword">int</span> duration, View anchor, ViewGroup customView, <span class="keyword">int</span> sideMargin, <span class="keyword">int</span> bottomMargin) &#123;</span><br><span class="line">        <span class="keyword">this</span>.duration = duration;</span><br><span class="line">        <span class="keyword">this</span>.anchor = anchor;</span><br><span class="line">        <span class="keyword">this</span>.customView = customView;</span><br><span class="line">        <span class="keyword">this</span>.sideMargin = sideMargin;</span><br><span class="line">        <span class="keyword">this</span>.bottomMargin = bottomMargin;</span><br><span class="line">        <span class="keyword">this</span>.delegete = Snackbar.make(anchor, <span class="string">""</span>, duration);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Snackbar <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 通过getView获取Snackbar的layout</span></span><br><span class="line">        Snackbar.SnackbarLayout layout = (Snackbar.SnackbarLayout) delegete.getView();</span><br><span class="line">        <span class="comment">// 为了自定义margin，这里需要将Snackbar的背景设置为透明，textView可以设置为INVISIBLE也可以不设置</span></span><br><span class="line">        <span class="comment">// 只要没有在make加入text即可</span></span><br><span class="line">        layout.setBackgroundColor(Color.TRANSPARENT);</span><br><span class="line">        TextView textView = layout.findViewById(com.google.android.material.R.id.snackbar_text);</span><br><span class="line">        textView.setVisibility(View.INVISIBLE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// customView为我们传入的自定义view，自定义view是如何调用inflate可以参考注释，</span></span><br><span class="line">        <span class="comment">// 但是customView必须包含两层layout这是因为UI上有bug，具体可以自行测试，</span></span><br><span class="line">        <span class="comment">// 所以我们实际设置的margin是第2层layout的margin，第2层layout有背景色，</span></span><br><span class="line">        <span class="comment">// 所以最终呈现出Snackbar有margin的效果，但是要知道实际上Snackbar的布局</span></span><br><span class="line">        <span class="comment">// 还是占据了整个底部空间</span></span><br><span class="line">        View childLayout = customView.getChildAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">final</span> ViewGroup.MarginLayoutParams params = (ViewGroup.MarginLayoutParams) childLayout.getLayoutParams();</span><br><span class="line">        <span class="comment">// MarginLayoutParams设置margin</span></span><br><span class="line">        params.setMargins(params.leftMargin + sideMargin,</span><br><span class="line">                params.topMargin,</span><br><span class="line">                params.rightMargin + sideMargin,</span><br><span class="line">                params.bottomMargin + bottomMargin);</span><br><span class="line">        childLayout.setLayoutParams(params);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add the view to the Snackbar's layout</span></span><br><span class="line">        layout.addView(customView, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// Show the Snackbar</span></span><br><span class="line">        <span class="keyword">return</span> delegete;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 由于参数较多，所以采用建造者模式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> enableCustom;</span><br><span class="line">        <span class="keyword">private</span> String text;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> duration;</span><br><span class="line">        <span class="keyword">private</span> View anchor;</span><br><span class="line">        <span class="keyword">private</span> ViewGroup customView;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> sideMargin;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> bottomMargin;</span><br><span class="line"></span><br><span class="line">        Builder(<span class="keyword">boolean</span> enableCustom) &#123;</span><br><span class="line">            <span class="keyword">this</span>.enableCustom = enableCustom;</span><br><span class="line">            <span class="keyword">this</span>.duration = Snackbar.LENGTH_SHORT;</span><br><span class="line">            <span class="keyword">this</span>.text = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">this</span>.sideMargin = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>.bottomMargin = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setEnableCustom</span><span class="params">(<span class="keyword">boolean</span> enableCustom)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.enableCustom = enableCustom;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setText</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.text = text;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setDuration</span><span class="params">(<span class="keyword">int</span> duration)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.duration = duration;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setAnchor</span><span class="params">(View anchor)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.anchor = anchor;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setCustomView</span><span class="params">(ViewGroup customView)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.customView = customView;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setSideMargin</span><span class="params">(<span class="keyword">int</span> sideMargin)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.sideMargin = sideMargin;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setBottomMargin</span><span class="params">(<span class="keyword">int</span> bottomMargin)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.bottomMargin = bottomMargin;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Snackbar <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 通过enableCustom控制是否使用自定义Content，自定义Content的点击事件需要</span></span><br><span class="line">            <span class="comment">// 在Snackbar的外面处理</span></span><br><span class="line">            <span class="keyword">if</span> (!enableCustom) &#123;</span><br><span class="line">                <span class="keyword">return</span> Snackbar.make(anchor, text, duration);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (anchor == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                        <span class="string">"No suitable parent found from the given view. Please provide a valid view."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (customView == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                        <span class="string">"No custom view found. Please provide a valid view or setEnableCustom(false)."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SnackbarUtil(duration, anchor, customView, sideMargin, bottomMargin).create();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终效果</p><!--  --><p><img src="http://114.116.9.65:7777/images/2020/01/18/snackbar0.gif" alt="snackbar0.gif" /></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://material.io/collections/developer-tutorials/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MATERIAL DESIGN&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Snackbar是类似与Toast的一种信息提示控件，但是与Toast不同的是Snackbar是从界面底部弹出的且支持一个点击事件，默认情况下Snackbar内部有两个子控件分别是TextView和Button，两者水平排列，TextView用于显示信息，Button用于实现点击事件。&lt;/p&gt;
&lt;!--  --&gt;
&lt;p&gt;&lt;img src=&quot;http://114.116.9.65:7777/images/2020/01/19/snackbar1.gif&quot; alt=&quot;snackbar1.gif&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-snackbar使用&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-snackbar使用&quot;&gt;&lt;/a&gt; 1. Snackbar使用&lt;/h2&gt;
&lt;p&gt;Snackbar属于Material组件中的一种，如果你的应用使用了Material Theme以及AppCompatActivity，则Snackbar会获得圆角、四周有margin空隙的效果。&lt;/p&gt;
&lt;p&gt;默认情况下使用Snackbar，调用的方式也非常类似Toast&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// view是当前页面内的某个view，根据源码可知，make方法会找view的父view，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 直到父view是FrameLayout或者CoordinateLayout，然后将其作为root给inflate方法调用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// inflate会加载默认的布局文件，这里根据是否使用Material Theme会加载不同的布局文件，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 即上文我提到的效果，与此同时会将text的内容赋给布局文件中的TextView，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 如果父view是CoordinateLayout，则Snackbar还支持右滑取消的功能，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Snackbar.LENGTH_SHORT就类似于Toast.LENGTH_SHORT用于控制Snackbar的持续时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Snackbar snackbar = Snackbar.make(view, text, Snackbar.LENGTH_SHORT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;snackbar.show();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://zhoutao822.coding.me/categories/Android/"/>
    
    
      <category term="Android" scheme="http://zhoutao822.coding.me/tags/Android/"/>
    
      <category term="Material" scheme="http://zhoutao822.coding.me/tags/Material/"/>
    
      <category term="Snackbar" scheme="http://zhoutao822.coding.me/tags/Snackbar/"/>
    
  </entry>
  
  <entry>
    <title>Android框架-Gson</title>
    <link href="http://zhoutao822.coding.me/archives/b0107659.html"/>
    <id>http://zhoutao822.coding.me/archives/b0107659.html</id>
    <published>2019-07-20T15:09:12.000Z</published>
    <updated>2020-01-17T15:07:46.301Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><blockquote><p><a href="https://github.com/google/gson/blob/master/UserGuide.md" target="_blank" rel="noopener">Gson User Guide</a></p></blockquote><p>json是一种数据格式，类似与键值对的形式，常用于服务器与客户端之间数据传输，以键值对形式传输的数据在客户端进行解析时必然需要对不同的key寻找其对应的value，通常来说这种解析数据的过程非常繁琐，但是没有难度，所以Google推出了Gson这个工具，用于解析json数据并直接将其实例化。</p><a id="more"></a><h2 id="1-gson使用"><a class="markdownIt-Anchor" href="#1-gson使用"></a> 1. Gson使用</h2><p>以解析和风天气的数据为例，请求返回的json数据如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"HeWeather6"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"basic"</span>: &#123;</span><br><span class="line">                <span class="attr">"cid"</span>: <span class="string">"CN101010100"</span>,</span><br><span class="line">                <span class="attr">"location"</span>: <span class="string">"北京"</span>,</span><br><span class="line">                <span class="attr">"parent_city"</span>: <span class="string">"北京"</span>,</span><br><span class="line">                <span class="attr">"admin_area"</span>: <span class="string">"北京"</span>,</span><br><span class="line">                <span class="attr">"cnty"</span>: <span class="string">"中国"</span>,</span><br><span class="line">                <span class="attr">"lat"</span>: <span class="string">"39.90498734"</span>,</span><br><span class="line">                <span class="attr">"lon"</span>: <span class="string">"116.4052887"</span>,</span><br><span class="line">                <span class="attr">"tz"</span>: <span class="string">"+8.00"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"update"</span>: &#123;</span><br><span class="line">                <span class="attr">"loc"</span>: <span class="string">"2019-07-18 16:45"</span>,</span><br><span class="line">                <span class="attr">"utc"</span>: <span class="string">"2019-07-18 08:45"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"status"</span>: <span class="string">"ok"</span>,</span><br><span class="line">            <span class="attr">"now"</span>: &#123;</span><br><span class="line">                <span class="attr">"cloud"</span>: <span class="string">"10"</span>,</span><br><span class="line">                <span class="attr">"cond_code"</span>: <span class="string">"101"</span>,</span><br><span class="line">                <span class="attr">"cond_txt"</span>: <span class="string">"多云"</span>,</span><br><span class="line">                <span class="attr">"fl"</span>: <span class="string">"35"</span>,</span><br><span class="line">                <span class="attr">"hum"</span>: <span class="string">"54"</span>,</span><br><span class="line">                <span class="attr">"pcpn"</span>: <span class="string">"0.0"</span>,</span><br><span class="line">                <span class="attr">"pres"</span>: <span class="string">"1000"</span>,</span><br><span class="line">                <span class="attr">"tmp"</span>: <span class="string">"32"</span>,</span><br><span class="line">                <span class="attr">"vis"</span>: <span class="string">"6"</span>,</span><br><span class="line">                <span class="attr">"wind_deg"</span>: <span class="string">"279"</span>,</span><br><span class="line">                <span class="attr">"wind_dir"</span>: <span class="string">"西风"</span>,</span><br><span class="line">                <span class="attr">"wind_sc"</span>: <span class="string">"1"</span>,</span><br><span class="line">                <span class="attr">"wind_spd"</span>: <span class="string">"3"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>1.构造对应json数据的实体类，这里使用的Android Studio的插件GsonFormat，可以直接根据json数据生成代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;HeWeather6Bean&gt; HeWeather6;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;HeWeather6Bean&gt; <span class="title">getHeWeather6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HeWeather6;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeWeather6</span><span class="params">(List&lt;HeWeather6Bean&gt; HeWeather6)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.HeWeather6 = HeWeather6;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 重写以下toString方法，便于后续观察数据传输是否正确</span></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HeWeather6.get(<span class="number">0</span>).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HeWeather6Bean</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * basic : &#123;"cid":"CN101010100","location":"北京","parent_city":"北京","admin_area":"北京","cnty":"中国","lat":"39.90498734","lon":"116.4052887","tz":"+8.00"&#125;</span></span><br><span class="line"><span class="comment">         * update : &#123;"loc":"2019-07-18 16:45","utc":"2019-07-18 08:45"&#125;</span></span><br><span class="line"><span class="comment">         * status : ok</span></span><br><span class="line"><span class="comment">         * now : &#123;"cloud":"10","cond_code":"101","cond_txt":"多云","fl":"35","hum":"54","pcpn":"0.0","pres":"1000","tmp":"32","vis":"6","wind_deg":"279","wind_dir":"西风","wind_sc":"1","wind_spd":"3"&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> BasicBean basic;</span><br><span class="line">        <span class="keyword">private</span> UpdateBean update;</span><br><span class="line">        <span class="keyword">private</span> String status;</span><br><span class="line">        <span class="keyword">private</span> NowBean now;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@NonNull</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> status + <span class="string">" \n "</span> + basic.toString() + <span class="string">" \n "</span> + update.toString() + <span class="string">" \n "</span> + now.toString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> BasicBean <span class="title">getBasic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> basic;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBasic</span><span class="params">(BasicBean basic)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.basic = basic;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> UpdateBean <span class="title">getUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> update;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpdate</span><span class="params">(UpdateBean update)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.update = update;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> status;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatus</span><span class="params">(String status)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.status = status;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> NowBean <span class="title">getNow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> now;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNow</span><span class="params">(NowBean now)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.now = now;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicBean</span> </span>&#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * cid : CN101010100</span></span><br><span class="line"><span class="comment">             * location : 北京</span></span><br><span class="line"><span class="comment">             * parent_city : 北京</span></span><br><span class="line"><span class="comment">             * admin_area : 北京</span></span><br><span class="line"><span class="comment">             * cnty : 中国</span></span><br><span class="line"><span class="comment">             * lat : 39.90498734</span></span><br><span class="line"><span class="comment">             * lon : 116.4052887</span></span><br><span class="line"><span class="comment">             * tz : +8.00</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> String cid;</span><br><span class="line">            <span class="keyword">private</span> String location;</span><br><span class="line">            <span class="keyword">private</span> String parent_city;</span><br><span class="line">            <span class="keyword">private</span> String admin_area;</span><br><span class="line">            <span class="keyword">private</span> String cnty;</span><br><span class="line">            <span class="keyword">private</span> String lat;</span><br><span class="line">            <span class="keyword">private</span> String lon;</span><br><span class="line">            <span class="keyword">private</span> String tz;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@NonNull</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"cid : "</span> + cid + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"location : "</span> + location + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"parent_city : "</span> + parent_city + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"admin_area : "</span> + admin_area + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"cnty : "</span> + cnty + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"lat : "</span> + lat + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"lon : "</span> + lon + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"tz : "</span> + tz + <span class="string">"\n"</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getCid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> cid;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCid</span><span class="params">(String cid)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.cid = cid;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getLocation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> location;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocation</span><span class="params">(String location)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.location = location;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getParent_city</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> parent_city;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParent_city</span><span class="params">(String parent_city)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.parent_city = parent_city;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getAdmin_area</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> admin_area;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAdmin_area</span><span class="params">(String admin_area)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.admin_area = admin_area;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getCnty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> cnty;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCnty</span><span class="params">(String cnty)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.cnty = cnty;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getLat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> lat;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLat</span><span class="params">(String lat)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.lat = lat;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getLon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> lon;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLon</span><span class="params">(String lon)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.lon = lon;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getTz</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> tz;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTz</span><span class="params">(String tz)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.tz = tz;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdateBean</span> </span>&#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * loc : 2019-07-18 16:45</span></span><br><span class="line"><span class="comment">             * utc : 2019-07-18 08:45</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> String loc;</span><br><span class="line">            <span class="keyword">private</span> String utc;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@NonNull</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"loc : "</span> + loc + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"utc : "</span> + utc + <span class="string">"\n"</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getLoc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> loc;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoc</span><span class="params">(String loc)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.loc = loc;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getUtc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> utc;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUtc</span><span class="params">(String utc)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.utc = utc;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NowBean</span> </span>&#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * cloud : 10</span></span><br><span class="line"><span class="comment">             * cond_code : 101</span></span><br><span class="line"><span class="comment">             * cond_txt : 多云</span></span><br><span class="line"><span class="comment">             * fl : 35</span></span><br><span class="line"><span class="comment">             * hum : 54</span></span><br><span class="line"><span class="comment">             * pcpn : 0.0</span></span><br><span class="line"><span class="comment">             * pres : 1000</span></span><br><span class="line"><span class="comment">             * tmp : 32</span></span><br><span class="line"><span class="comment">             * vis : 6</span></span><br><span class="line"><span class="comment">             * wind_deg : 279</span></span><br><span class="line"><span class="comment">             * wind_dir : 西风</span></span><br><span class="line"><span class="comment">             * wind_sc : 1</span></span><br><span class="line"><span class="comment">             * wind_spd : 3</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> String cloud;</span><br><span class="line">            <span class="keyword">private</span> String cond_code;</span><br><span class="line">            <span class="keyword">private</span> String cond_txt;</span><br><span class="line">            <span class="keyword">private</span> String fl;</span><br><span class="line">            <span class="keyword">private</span> String hum;</span><br><span class="line">            <span class="keyword">private</span> String pcpn;</span><br><span class="line">            <span class="keyword">private</span> String pres;</span><br><span class="line">            <span class="keyword">private</span> String tmp;</span><br><span class="line">            <span class="keyword">private</span> String vis;</span><br><span class="line">            <span class="keyword">private</span> String wind_deg;</span><br><span class="line">            <span class="keyword">private</span> String wind_dir;</span><br><span class="line">            <span class="keyword">private</span> String wind_sc;</span><br><span class="line">            <span class="keyword">private</span> String wind_spd;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@NonNull</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"cloud : "</span> + cloud + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"cond_code : "</span> + cond_code + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"cond_txt : "</span> + cond_txt + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"fl : "</span> + fl + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"hum : "</span> + hum + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"pcpn : "</span> + pcpn + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"pres : "</span> + pres + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"tmp : "</span> + tmp + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"vis : "</span> + vis + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"wind_deg : "</span> + wind_deg + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"wind_dir : "</span> + wind_dir + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"wind_sc : "</span> + wind_sc + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"wind_spd : "</span> + wind_spd + <span class="string">"\n"</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getCloud</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> cloud;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCloud</span><span class="params">(String cloud)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.cloud = cloud;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getCond_code</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> cond_code;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCond_code</span><span class="params">(String cond_code)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.cond_code = cond_code;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getCond_txt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> cond_txt;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCond_txt</span><span class="params">(String cond_txt)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.cond_txt = cond_txt;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getFl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> fl;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFl</span><span class="params">(String fl)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.fl = fl;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getHum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> hum;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHum</span><span class="params">(String hum)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.hum = hum;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getPcpn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> pcpn;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPcpn</span><span class="params">(String pcpn)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.pcpn = pcpn;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getPres</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> pres;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPres</span><span class="params">(String pres)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.pres = pres;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getTmp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> tmp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTmp</span><span class="params">(String tmp)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.tmp = tmp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getVis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> vis;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVis</span><span class="params">(String vis)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.vis = vis;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getWind_deg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> wind_deg;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWind_deg</span><span class="params">(String wind_deg)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.wind_deg = wind_deg;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getWind_dir</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> wind_dir;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWind_dir</span><span class="params">(String wind_dir)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.wind_dir = wind_dir;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getWind_sc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> wind_sc;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWind_sc</span><span class="params">(String wind_sc)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.wind_sc = wind_sc;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getWind_spd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> wind_spd;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWind_spd</span><span class="params">(String wind_spd)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.wind_spd = wind_spd;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2.使用OkHttp构造请求</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">        .get()</span><br><span class="line">        .url(baseUrl)</span><br><span class="line">        .build();</span><br><span class="line">Call call = client.newCall(request);</span><br><span class="line">call.enqueue(<span class="keyword">new</span> Callback() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(@NotNull Call call, @NotNull IOException e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(@NotNull Call call, @NotNull Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>3.在onResponse方法中处理请求，使用Gson对response的json数据进行实例化</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(@NotNull Call call, @NotNull Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String ret = response.body().string();</span><br><span class="line">    runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">            WeatherEntity weatherEntity = gson.fromJson(ret, WeatherEntity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            textView.setText(weatherEntity.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要对比一下就知道了，从ret到weatherEntity，完成了对json数据的实例化，我们不需要new一个对象再通过set方法赋值就可以得到一个实例，最后直接使用此实例即可。</p><h2 id="2-gson源码分析"><a class="markdownIt-Anchor" href="#2-gson源码分析"></a> 2. Gson源码分析</h2><p>首先new了一个Gson对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Gson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(Excluder.DEFAULT, FieldNamingPolicy.IDENTITY,</span><br><span class="line">        Collections.&lt;Type, InstanceCreator&lt;?&gt;&gt;emptyMap(), DEFAULT_SERIALIZE_NULLS,</span><br><span class="line">        DEFAULT_COMPLEX_MAP_KEYS, DEFAULT_JSON_NON_EXECUTABLE, DEFAULT_ESCAPE_HTML,</span><br><span class="line">        DEFAULT_PRETTY_PRINT, DEFAULT_LENIENT, DEFAULT_SPECIALIZE_FLOAT_VALUES,</span><br><span class="line">        LongSerializationPolicy.DEFAULT, <span class="keyword">null</span>, DateFormat.DEFAULT, DateFormat.DEFAULT,</span><br><span class="line">        Collections.&lt;TypeAdapterFactory&gt;emptyList(), Collections.&lt;TypeAdapterFactory&gt;emptyList(),</span><br><span class="line">        Collections.&lt;TypeAdapterFactory&gt;emptyList());</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 这里很明显，比较重要的类是TypeAdapterFactory，作用稍后再说</span></span><br><span class="line">  Gson(<span class="keyword">final</span> Excluder excluder, <span class="keyword">final</span> FieldNamingStrategy fieldNamingStrategy,</span><br><span class="line">      <span class="keyword">final</span> Map&lt;Type, InstanceCreator&lt;?&gt;&gt; instanceCreators, <span class="keyword">boolean</span> serializeNulls,</span><br><span class="line">      <span class="keyword">boolean</span> complexMapKeySerialization, <span class="keyword">boolean</span> generateNonExecutableGson, <span class="keyword">boolean</span> htmlSafe,</span><br><span class="line">      <span class="keyword">boolean</span> prettyPrinting, <span class="keyword">boolean</span> lenient, <span class="keyword">boolean</span> serializeSpecialFloatingPointValues,</span><br><span class="line">      LongSerializationPolicy longSerializationPolicy, String datePattern, <span class="keyword">int</span> dateStyle,</span><br><span class="line">      <span class="keyword">int</span> timeStyle, List&lt;TypeAdapterFactory&gt; builderFactories,</span><br><span class="line">      List&lt;TypeAdapterFactory&gt; builderHierarchyFactories,</span><br><span class="line">      List&lt;TypeAdapterFactory&gt; factoriesToBeAdded) &#123;</span><br><span class="line">    <span class="keyword">this</span>.excluder = excluder;</span><br><span class="line">    <span class="keyword">this</span>.fieldNamingStrategy = fieldNamingStrategy;</span><br><span class="line">    <span class="keyword">this</span>.instanceCreators = instanceCreators;</span><br><span class="line">    <span class="keyword">this</span>.constructorConstructor = <span class="keyword">new</span> ConstructorConstructor(instanceCreators);</span><br><span class="line">    <span class="keyword">this</span>.serializeNulls = serializeNulls;</span><br><span class="line">    <span class="keyword">this</span>.complexMapKeySerialization = complexMapKeySerialization;</span><br><span class="line">    <span class="keyword">this</span>.generateNonExecutableJson = generateNonExecutableGson;</span><br><span class="line">    <span class="keyword">this</span>.htmlSafe = htmlSafe;</span><br><span class="line">    <span class="keyword">this</span>.prettyPrinting = prettyPrinting;</span><br><span class="line">    <span class="keyword">this</span>.lenient = lenient;</span><br><span class="line">    <span class="keyword">this</span>.serializeSpecialFloatingPointValues = serializeSpecialFloatingPointValues;</span><br><span class="line">    <span class="keyword">this</span>.longSerializationPolicy = longSerializationPolicy;</span><br><span class="line">    <span class="keyword">this</span>.datePattern = datePattern;</span><br><span class="line">    <span class="keyword">this</span>.dateStyle = dateStyle;</span><br><span class="line">    <span class="keyword">this</span>.timeStyle = timeStyle;</span><br><span class="line">    <span class="keyword">this</span>.builderFactories = builderFactories;</span><br><span class="line">    <span class="keyword">this</span>.builderHierarchyFactories = builderHierarchyFactories;</span><br><span class="line"></span><br><span class="line">    List&lt;TypeAdapterFactory&gt; factories = <span class="keyword">new</span> ArrayList&lt;TypeAdapterFactory&gt;();</span><br><span class="line">    <span class="comment">// 内置的TypeAdapter，比如ObjectTypeAdapter用于处理Object类型数据</span></span><br><span class="line">    <span class="comment">// built-in type adapters that cannot be overridden</span></span><br><span class="line">    factories.add(TypeAdapters.JSON_ELEMENT_FACTORY);</span><br><span class="line">    factories.add(ObjectTypeAdapter.FACTORY);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// excluder用于控制属性的是否支持序列化与反序列化，比如用@Expose修饰的属性，</span></span><br><span class="line">    <span class="comment">// 优先级必须在所有TypeAdapter之前</span></span><br><span class="line">    <span class="comment">// the excluder must precede all adapters that handle user-defined types</span></span><br><span class="line">    factories.add(excluder);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开发人员自定义的TypeAdapter，优先级相对较高</span></span><br><span class="line">    <span class="comment">// users' type adapters</span></span><br><span class="line">    factories.addAll(factoriesToBeAdded);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 基础类型数据，包括String、Integer等包装类型</span></span><br><span class="line">    <span class="comment">// type adapters for basic platform types</span></span><br><span class="line">    factories.add(TypeAdapters.STRING_FACTORY);</span><br><span class="line">    factories.add(TypeAdapters.INTEGER_FACTORY);</span><br><span class="line">    factories.add(TypeAdapters.BOOLEAN_FACTORY);</span><br><span class="line">    factories.add(TypeAdapters.BYTE_FACTORY);</span><br><span class="line">    factories.add(TypeAdapters.SHORT_FACTORY);</span><br><span class="line">    TypeAdapter&lt;Number&gt; longAdapter = longAdapter(longSerializationPolicy);</span><br><span class="line">    factories.add(TypeAdapters.newFactory(<span class="keyword">long</span><span class="class">.<span class="keyword">class</span>, <span class="title">Long</span>.<span class="title">class</span>, <span class="title">longAdapter</span>))</span>;</span><br><span class="line">    factories.add(TypeAdapters.newFactory(<span class="keyword">double</span><span class="class">.<span class="keyword">class</span>, <span class="title">Double</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">doubleAdapter</span>(<span class="title">serializeSpecialFloatingPointValues</span>)))</span>;</span><br><span class="line">    factories.add(TypeAdapters.newFactory(<span class="keyword">float</span><span class="class">.<span class="keyword">class</span>, <span class="title">Float</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">floatAdapter</span>(<span class="title">serializeSpecialFloatingPointValues</span>)))</span>;</span><br><span class="line">    factories.add(TypeAdapters.NUMBER_FACTORY);</span><br><span class="line">    factories.add(TypeAdapters.ATOMIC_INTEGER_FACTORY);</span><br><span class="line">    factories.add(TypeAdapters.ATOMIC_BOOLEAN_FACTORY);</span><br><span class="line">    factories.add(TypeAdapters.newFactory(AtomicLong<span class="class">.<span class="keyword">class</span>, <span class="title">atomicLongAdapter</span>(<span class="title">longAdapter</span>)))</span>;</span><br><span class="line">    factories.add(TypeAdapters.newFactory(AtomicLongArray<span class="class">.<span class="keyword">class</span>, <span class="title">atomicLongArrayAdapter</span>(<span class="title">longAdapter</span>)))</span>;</span><br><span class="line">    factories.add(TypeAdapters.ATOMIC_INTEGER_ARRAY_FACTORY);</span><br><span class="line">    factories.add(TypeAdapters.CHARACTER_FACTORY);</span><br><span class="line">    factories.add(TypeAdapters.STRING_BUILDER_FACTORY);</span><br><span class="line">    factories.add(TypeAdapters.STRING_BUFFER_FACTORY);</span><br><span class="line">    factories.add(TypeAdapters.newFactory(BigDecimal<span class="class">.<span class="keyword">class</span>, <span class="title">TypeAdapters</span>.<span class="title">BIG_DECIMAL</span>))</span>;</span><br><span class="line">    factories.add(TypeAdapters.newFactory(BigInteger<span class="class">.<span class="keyword">class</span>, <span class="title">TypeAdapters</span>.<span class="title">BIG_INTEGER</span>))</span>;</span><br><span class="line">    factories.add(TypeAdapters.URL_FACTORY);</span><br><span class="line">    factories.add(TypeAdapters.URI_FACTORY);</span><br><span class="line">    factories.add(TypeAdapters.UUID_FACTORY);</span><br><span class="line">    factories.add(TypeAdapters.CURRENCY_FACTORY);</span><br><span class="line">    factories.add(TypeAdapters.LOCALE_FACTORY);</span><br><span class="line">    factories.add(TypeAdapters.INET_ADDRESS_FACTORY);</span><br><span class="line">    factories.add(TypeAdapters.BIT_SET_FACTORY);</span><br><span class="line">    factories.add(DateTypeAdapter.FACTORY);</span><br><span class="line">    factories.add(TypeAdapters.CALENDAR_FACTORY);</span><br><span class="line">    factories.add(TimeTypeAdapter.FACTORY);</span><br><span class="line">    factories.add(SqlDateTypeAdapter.FACTORY);</span><br><span class="line">    factories.add(TypeAdapters.TIMESTAMP_FACTORY);</span><br><span class="line">    factories.add(ArrayTypeAdapter.FACTORY);</span><br><span class="line">    factories.add(TypeAdapters.CLASS_FACTORY);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 集合类型优先级较低，包括Map、Collection等</span></span><br><span class="line">    <span class="comment">// type adapters for composite and user-defined types</span></span><br><span class="line">    factories.add(<span class="keyword">new</span> CollectionTypeAdapterFactory(constructorConstructor));</span><br><span class="line">    factories.add(<span class="keyword">new</span> MapTypeAdapterFactory(constructorConstructor, complexMapKeySerialization));</span><br><span class="line">    <span class="keyword">this</span>.jsonAdapterFactory = <span class="keyword">new</span> JsonAdapterAnnotationTypeAdapterFactory(constructorConstructor);</span><br><span class="line">    factories.add(jsonAdapterFactory);</span><br><span class="line">    factories.add(TypeAdapters.ENUM_FACTORY);</span><br><span class="line">    <span class="comment">// 反射类型优先级最低，而这个反射类型就是我们自定义WeatherEntity的TypeAdapter</span></span><br><span class="line">    factories.add(<span class="keyword">new</span> ReflectiveTypeAdapterFactory(</span><br><span class="line">        constructorConstructor, fieldNamingStrategy, excluder, jsonAdapterFactory));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.factories = Collections.unmodifiableList(factories);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>然后直接看fromJson方法，传入的参数为String和.class，返回值为.class的实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">fromJson</span><span class="params">(String json, Class&lt;T&gt; classOfT)</span> <span class="keyword">throws</span> JsonSyntaxException </span>&#123;</span><br><span class="line">  <span class="comment">// 此处只要分析fromJson方法</span></span><br><span class="line">  Object object = fromJson(json, (Type) classOfT);</span><br><span class="line">  <span class="comment">// wrap仅仅把基础类型转为包装类型，cast用于类型转换，把Object类型转为object的实际类型</span></span><br><span class="line">  <span class="keyword">return</span> Primitives.wrap(classOfT).cast(object);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">fromJson</span><span class="params">(String json, Type typeOfT)</span> <span class="keyword">throws</span> JsonSyntaxException </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (json == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 通过StringReader将String类型的json数据转为StringReader</span></span><br><span class="line">  StringReader reader = <span class="keyword">new</span> StringReader(json);</span><br><span class="line">  <span class="comment">// 又调用fromJson方法</span></span><br><span class="line">  T target = (T) fromJson(reader, typeOfT);</span><br><span class="line">  <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">fromJson</span><span class="params">(Reader json, Type typeOfT)</span> <span class="keyword">throws</span> JsonIOException, JsonSyntaxException </span>&#123;</span><br><span class="line">  <span class="comment">// 又将StringReader转为JsonReader</span></span><br><span class="line">  JsonReader jsonReader = newJsonReader(json);</span><br><span class="line">  <span class="comment">// 继续调用fromJson</span></span><br><span class="line">  T object = (T) fromJson(jsonReader, typeOfT);</span><br><span class="line">  assertFullConsumption(object, jsonReader);</span><br><span class="line">  <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">fromJson</span><span class="params">(JsonReader reader, Type typeOfT)</span> <span class="keyword">throws</span> JsonIOException, JsonSyntaxException </span>&#123;</span><br><span class="line">  <span class="keyword">boolean</span> isEmpty = <span class="keyword">true</span>;</span><br><span class="line">  <span class="keyword">boolean</span> oldLenient = reader.isLenient();</span><br><span class="line">  reader.setLenient(<span class="keyword">true</span>);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 核心代码在try catch内，我们得到的JsonReader需要通过TypeAdapter的read方法转为Java对象</span></span><br><span class="line">    <span class="comment">// 所以接下来需要分析JsonReader的功能，以及这里默认使用的TypeAdapter的功能</span></span><br><span class="line">    reader.peek();</span><br><span class="line">    isEmpty = <span class="keyword">false</span>;</span><br><span class="line">    TypeToken&lt;T&gt; typeToken = (TypeToken&lt;T&gt;) TypeToken.get(typeOfT);</span><br><span class="line">    TypeAdapter&lt;T&gt; typeAdapter = getAdapter(typeToken);</span><br><span class="line">    T object = typeAdapter.read(reader);</span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (EOFException e) &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * For compatibility with JSON 1.5 and earlier, we return null for empty</span></span><br><span class="line"><span class="comment">     * documents instead of throwing.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (isEmpty) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> JsonSyntaxException(e);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IllegalStateException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> JsonSyntaxException(e);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    <span class="comment">// TODO(inder): Figure out whether it is indeed right to rethrow this as JsonSyntaxException</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> JsonSyntaxException(e);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (AssertionError e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(<span class="string">"AssertionError (GSON "</span> + GsonBuildConfig.VERSION + <span class="string">"): "</span> + e.getMessage(), e);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    reader.setLenient(oldLenient);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JsonReader并不是直接通过String解析出来的，首先经过了StringReader，那么先看看StringReader的构造，StringReader继承自Reader，需要实现read方法，read方法一般是用于读取字符到buffer中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// StringReader.java 这里只保存了String的值和长度</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new string reader.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s  String providing the character stream.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StringReader</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.str = s;</span><br><span class="line">        <span class="keyword">this</span>.length = s.length();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>JsonReader并不是继承自Reader，JsonReader需要配合TypeAdapter使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Gson.java newJsonReader将StringReader转为JsonReader对象，DEFAULT_LENIENT为false，暂时不明白</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns a new JSON reader configured for the settings on this Gson instance.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> JsonReader <span class="title">newJsonReader</span><span class="params">(Reader reader)</span> </span>&#123;</span><br><span class="line">    JsonReader jsonReader = <span class="keyword">new</span> JsonReader(reader);</span><br><span class="line">    jsonReader.setLenient(lenient);</span><br><span class="line">    <span class="keyword">return</span> jsonReader;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>getAdapter方法如何获取到TypeAdapter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the type adapter for &#123;<span class="doctag">@code</span>&#125; type.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException if this GSON cannot serialize and</span></span><br><span class="line"><span class="comment"> *     deserialize &#123;<span class="doctag">@code</span> type&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">TypeAdapter&lt;T&gt; <span class="title">getAdapter</span><span class="params">(TypeToken&lt;T&gt; type)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 初始情况下typeTokenCache为空</span></span><br><span class="line">  TypeAdapter&lt;?&gt; cached = typeTokenCache.get(type == <span class="keyword">null</span> ? NULL_KEY_SURROGATE : type);</span><br><span class="line">  <span class="keyword">if</span> (cached != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (TypeAdapter&lt;T&gt;) cached;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// calls初始也为空</span></span><br><span class="line">  Map&lt;TypeToken&lt;?&gt;, FutureTypeAdapter&lt;?&gt;&gt; threadCalls = calls.get();</span><br><span class="line">  <span class="keyword">boolean</span> requiresThreadLocalCleanup = <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (threadCalls == <span class="keyword">null</span>) &#123;</span><br><span class="line">    threadCalls = <span class="keyword">new</span> HashMap&lt;TypeToken&lt;?&gt;, FutureTypeAdapter&lt;?&gt;&gt;();</span><br><span class="line">    calls.set(threadCalls);</span><br><span class="line">    requiresThreadLocalCleanup = <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ThreadLocal在这里是防止老是执行for (TypeAdapterFactory factory : factories) 递归查找，</span></span><br><span class="line">  <span class="comment">// 如果不用ThreadLocal干预的话，就会导致堆栈溢出</span></span><br><span class="line">  <span class="comment">// the key and value type parameters always agree</span></span><br><span class="line">  FutureTypeAdapter&lt;T&gt; ongoingCall = (FutureTypeAdapter&lt;T&gt;) threadCalls.get(type);</span><br><span class="line">  <span class="keyword">if</span> (ongoingCall != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> ongoingCall;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    FutureTypeAdapter&lt;T&gt; call = <span class="keyword">new</span> FutureTypeAdapter&lt;T&gt;();</span><br><span class="line">    threadCalls.put(type, call);</span><br><span class="line">    <span class="comment">// TypeAdapter是从Gson初始化的factories中按照顺序遍历得到的，</span></span><br><span class="line">    <span class="comment">// 所以接下来需要看这里使用的是哪个TypeAdapterFactory</span></span><br><span class="line">    <span class="keyword">for</span> (TypeAdapterFactory factory : factories) &#123;</span><br><span class="line">      TypeAdapter&lt;T&gt; candidate = factory.create(<span class="keyword">this</span>, type);</span><br><span class="line">      <span class="keyword">if</span> (candidate != <span class="keyword">null</span>) &#123;</span><br><span class="line">        call.setDelegate(candidate);</span><br><span class="line">        typeTokenCache.put(type, candidate);</span><br><span class="line">        <span class="keyword">return</span> candidate;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"GSON ("</span> + GsonBuildConfig.VERSION + <span class="string">") cannot handle "</span> + type);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    threadCalls.remove(type);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (requiresThreadLocalCleanup) &#123;</span><br><span class="line">      calls.remove();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ReflectiveTypeAdapterFactory的create方法得到我们处理WeatherEntity的TypeAdapter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ReflectiveTypeAdapterFactory.java create方法返回的是Adapter</span></span><br><span class="line">  <span class="meta">@Override</span> <span class="keyword">public</span> &lt;T&gt; <span class="function">TypeAdapter&lt;T&gt; <span class="title">create</span><span class="params">(Gson gson, <span class="keyword">final</span> TypeToken&lt;T&gt; type)</span> </span>&#123;</span><br><span class="line">    Class&lt;? <span class="keyword">super</span> T&gt; raw = type.getRawType();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!Object<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">raw</span>)) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// it's a primitive!</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ObjectConstructor&lt;T&gt; constructor = constructorConstructor.get(type);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Adapter&lt;T&gt;(constructor, getBoundFields(gson, type, raw));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Adapter的read方法就是返回WeatherEntity的位置</span></span><br><span class="line">    Adapter(ObjectConstructor&lt;T&gt; constructor, Map&lt;String, BoundField&gt; boundFields) &#123;</span><br><span class="line">      <span class="keyword">this</span>.constructor = constructor;</span><br><span class="line">      <span class="keyword">this</span>.boundFields = boundFields;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// read实际上是被递归调用的</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> T <span class="title">read</span><span class="params">(JsonReader in)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      <span class="comment">// JsonReader中保存了我们需要解析的字符串数据，所以也封装了一些读取的函数，</span></span><br><span class="line">      <span class="comment">// 通过peek判断JsonReader是否已经读到结尾了来结束解析的过程</span></span><br><span class="line">      <span class="keyword">if</span> (in.peek() == JsonToken.NULL) &#123;</span><br><span class="line">        in.nextNull();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 两个类ObjectConstructor和BoundField，看名字就知道了ObjectConstructor</span></span><br><span class="line">      <span class="comment">// 用于构造实例，BoundField用于指定属性</span></span><br><span class="line">      T instance = constructor.construct();</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// JsonReader有几个方法，比如beginObject和beginArray，表明要开始解析</span></span><br><span class="line">        <span class="comment">// JsonReader的数据了，beginObject表明需要解析为对象，beginArray表明需要解析为</span></span><br><span class="line">        <span class="comment">// 数组</span></span><br><span class="line">        in.beginObject();</span><br><span class="line">        <span class="comment">// hasNext表明数据是否到达结尾</span></span><br><span class="line">        <span class="keyword">while</span> (in.hasNext()) &#123;</span><br><span class="line">          <span class="comment">// nextName可以获取json数据中的key</span></span><br><span class="line">          String name = in.nextName();</span><br><span class="line">          <span class="comment">// 通过将name转为BoundField，为后续生成属性做铺垫</span></span><br><span class="line">          BoundField field = boundFields.get(name);</span><br><span class="line">          <span class="comment">// 如果不能生成此属性或者不允许反序列化，则跳过此key对应的value数据</span></span><br><span class="line">          <span class="keyword">if</span> (field == <span class="keyword">null</span> || !field.deserialized) &#123;</span><br><span class="line">            in.skipValue();</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 然后需要对属性进行赋值，因此需要看BoundField的read方法做了些什么</span></span><br><span class="line">            field.read(in, instance);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IllegalStateException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> JsonSyntaxException(e);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(e);</span><br><span class="line">      &#125;</span><br><span class="line">      in.endObject();</span><br><span class="line">      <span class="comment">// 最后返回我们的实例</span></span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BoundField来源于getBoundFields方法</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> Map&lt;String, BoundField&gt; <span class="title">getBoundFields</span><span class="params">(Gson context, TypeToken&lt;?&gt; type, Class&lt;?&gt; raw)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, BoundField&gt; result = <span class="keyword">new</span> LinkedHashMap&lt;String, BoundField&gt;();</span><br><span class="line">    <span class="keyword">if</span> (raw.isInterface()) &#123;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Type declaredType = type.getType();</span><br><span class="line">    <span class="keyword">while</span> (raw != Object<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 首先获得我们自定义WeatherEntity的属性</span></span><br><span class="line">      Field[] fields = raw.getDeclaredFields();</span><br><span class="line">      <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">        <span class="comment">// 对于每一个属性我们通过Excluder判断是否有@Expose或者其他注解修饰</span></span><br><span class="line">        <span class="comment">// 根据注解的要求保存这个属性是否支持序列化serialize和反序列化deserialize</span></span><br><span class="line">        <span class="keyword">boolean</span> serialize = excludeField(field, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">boolean</span> deserialize = excludeField(field, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (!serialize &amp;&amp; !deserialize) &#123;</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        accessor.makeAccessible(field);</span><br><span class="line">        Type fieldType = $Gson$Types.resolve(type.getType(), raw, field.getGenericType());</span><br><span class="line">        <span class="comment">// 因为Gson支持序列化时指定key的名称，所以会有一些替代名称，替代名称可以有多个，因此需要</span></span><br><span class="line">        <span class="comment">// 通过getFieldNames获取属性的所有序列化时的名称列表（第一个为属性名，其他可以是设置的替代名称）</span></span><br><span class="line">        List&lt;String&gt; fieldNames = getFieldNames(field);</span><br><span class="line">        BoundField previous = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, size = fieldNames.size(); i &lt; size; ++i) &#123;</span><br><span class="line">          String name = fieldNames.get(i);</span><br><span class="line">          <span class="keyword">if</span> (i != <span class="number">0</span>) serialize = <span class="keyword">false</span>; <span class="comment">// only serialize the default name</span></span><br><span class="line">          <span class="comment">// result的value boundField是通过createBoundField得到的，且只有第一个名称允许序列化</span></span><br><span class="line">          BoundField boundField = createBoundField(context, field, name,</span><br><span class="line">              TypeToken.get(fieldType), serialize, deserialize);</span><br><span class="line">          BoundField replaced = result.put(name, boundField);</span><br><span class="line">          <span class="keyword">if</span> (previous == <span class="keyword">null</span>) previous = replaced;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (previous != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(declaredType</span><br><span class="line">              + <span class="string">" declares multiple JSON fields named "</span> + previous.name);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      type = TypeToken.get($Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));</span><br><span class="line">      raw = type.getRawType();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// createBoundField返回我们需要的BoundField</span></span><br><span class="line">  <span class="keyword">private</span> ReflectiveTypeAdapterFactory.<span class="function">BoundField <span class="title">createBoundField</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">final</span> Gson context, <span class="keyword">final</span> Field field, <span class="keyword">final</span> String name,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">final</span> TypeToken&lt;?&gt; fieldType, <span class="keyword">boolean</span> serialize, <span class="keyword">boolean</span> deserialize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> isPrimitive = Primitives.isPrimitive(fieldType.getRawType());</span><br><span class="line">    <span class="comment">// special casing primitives here saves ~5% on Android...</span></span><br><span class="line">    JsonAdapter annotation = field.getAnnotation(JsonAdapter<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    TypeAdapter&lt;?&gt; mapped = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (annotation != <span class="keyword">null</span>) &#123;</span><br><span class="line">      mapped = jsonAdapterFactory.getTypeAdapter(</span><br><span class="line">          constructorConstructor, context, fieldType, annotation);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// mapped也是通过getAdapter获取的，但是fieldType已经改变了，变成了我们定义的实体类的下一级</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> jsonAdapterPresent = mapped != <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (mapped == <span class="keyword">null</span>) mapped = context.getAdapter(fieldType);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> TypeAdapter&lt;?&gt; typeAdapter = mapped;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) &#123;</span><br><span class="line">      <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"unchecked"</span>, <span class="string">"rawtypes"</span>&#125;) <span class="comment">// the type adapter and field type always agree</span></span><br><span class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(JsonWriter writer, Object value)</span></span></span><br><span class="line"><span class="function">          <span class="keyword">throws</span> IOException, IllegalAccessException </span>&#123;</span><br><span class="line">        Object fieldValue = field.get(value);</span><br><span class="line">        TypeAdapter t = jsonAdapterPresent ? typeAdapter</span><br><span class="line">            : <span class="keyword">new</span> TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());</span><br><span class="line">        t.write(writer, fieldValue);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 在调用read方法时就产生了递归</span></span><br><span class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(JsonReader reader, Object value)</span></span></span><br><span class="line"><span class="function">          <span class="keyword">throws</span> IOException, IllegalAccessException </span>&#123;</span><br><span class="line">        <span class="comment">// 由于属性的类型不同，此处的typeAdapter变为从factories遍历获取，</span></span><br><span class="line">        <span class="comment">// 如果我们这里的reader是String，那么typeAdapter为TypeAdapters.STRING_FACTORY</span></span><br><span class="line">        <span class="comment">// 然后按照TypeAdapters.STRING_FACTORY的逻辑读取数据</span></span><br><span class="line">        Object fieldValue = typeAdapter.read(reader);</span><br><span class="line">        <span class="keyword">if</span> (fieldValue != <span class="keyword">null</span> || !isPrimitive) &#123;</span><br><span class="line">          <span class="comment">// set方法把值fieldValue赋给对象value</span></span><br><span class="line">          field.set(value, fieldValue);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">writeField</span><span class="params">(Object value)</span> <span class="keyword">throws</span> IOException, IllegalAccessException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!serialized) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Object fieldValue = field.get(value);</span><br><span class="line">        <span class="keyword">return</span> fieldValue != value; <span class="comment">// avoid recursion for example for Throwable.cause</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>我们目前知道了属性是通过getDeclaredFields拿到的，然后通过递归的方式调用typeAdapter的read方法，然后将从JsonReader中获取到的值赋给属性，关键是属性实例是如何得到的<code>T instance = constructor.construct();</code>，默认情况下是ConstructorConstructor，通过ConstructorConstructor构造某个属性的实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ConstructorConstructor.java 默认instanceCreators为空</span></span><br><span class="line">  <span class="keyword">public</span> &lt;T&gt; <span class="function">ObjectConstructor&lt;T&gt; <span class="title">get</span><span class="params">(TypeToken&lt;T&gt; typeToken)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Type type = typeToken.getType();</span><br><span class="line">    <span class="keyword">final</span> Class&lt;? <span class="keyword">super</span> T&gt; rawType = typeToken.getRawType();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// first try an instance creator</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>) <span class="comment">// types must agree</span></span><br><span class="line">    <span class="keyword">final</span> InstanceCreator&lt;T&gt; typeCreator = (InstanceCreator&lt;T&gt;) instanceCreators.get(type);</span><br><span class="line">    <span class="keyword">if</span> (typeCreator != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ObjectConstructor&lt;T&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> T <span class="title">construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> typeCreator.createInstance(type);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Next try raw type match for instance creators</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>) <span class="comment">// types must agree</span></span><br><span class="line">    <span class="keyword">final</span> InstanceCreator&lt;T&gt; rawTypeCreator =</span><br><span class="line">        (InstanceCreator&lt;T&gt;) instanceCreators.get(rawType);</span><br><span class="line">    <span class="keyword">if</span> (rawTypeCreator != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ObjectConstructor&lt;T&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> T <span class="title">construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> rawTypeCreator.createInstance(type);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 我们构造的实例一般是通过newDefaultConstructor得到的</span></span><br><span class="line">    ObjectConstructor&lt;T&gt; defaultConstructor = newDefaultConstructor(rawType);</span><br><span class="line">    <span class="keyword">if</span> (defaultConstructor != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> defaultConstructor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// newDefaultImplementationConstructor用于构造Map和List以及它们的父类接口的实例</span></span><br><span class="line">    ObjectConstructor&lt;T&gt; defaultImplementation = newDefaultImplementationConstructor(type, rawType);</span><br><span class="line">    <span class="keyword">if</span> (defaultImplementation != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> defaultImplementation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// finally try unsafe</span></span><br><span class="line">    <span class="keyword">return</span> newUnsafeAllocator(type, rawType);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> &lt;T&gt; <span class="function">ObjectConstructor&lt;T&gt; <span class="title">newDefaultConstructor</span><span class="params">(Class&lt;? <span class="keyword">super</span> T&gt; rawType)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// getDeclaredConstructor通过反射得到目标类的构造函数</span></span><br><span class="line">      <span class="keyword">final</span> Constructor&lt;? <span class="keyword">super</span> T&gt; constructor = rawType.getDeclaredConstructor();</span><br><span class="line">      <span class="keyword">if</span> (!constructor.isAccessible()) &#123;</span><br><span class="line">        accessor.makeAccessible(constructor);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ObjectConstructor&lt;T&gt;() &#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>) <span class="comment">// T is the same raw type as is requested</span></span><br><span class="line">        <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> T <span class="title">construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            Object[] args = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// 返回初始参数都为null的实例</span></span><br><span class="line">            <span class="keyword">return</span> (T) constructor.newInstance(args);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> JsonParseException ?</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Failed to invoke "</span> + constructor + <span class="string">" with no args"</span>, e);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> don't wrap if cause is unchecked!</span></span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> JsonParseException ?</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Failed to invoke "</span> + constructor + <span class="string">" with no args"</span>,</span><br><span class="line">                e.getTargetException());</span><br><span class="line">          &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(e);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>读取json字符串的工作是由JsonReader完成的，以解析下面此json字符串为例（删减版），服务器传过来的数据可能没有换行</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"HeWeather6"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"basic"</span>: &#123;</span><br><span class="line">                <span class="attr">"cid"</span>: <span class="string">"CN101010100"</span>,</span><br><span class="line">                <span class="attr">"location"</span>: <span class="string">"北京"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"update"</span>: &#123;</span><br><span class="line">                <span class="attr">"loc"</span>: <span class="string">"2019-07-18 16:45"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"status"</span>: <span class="string">"ok"</span></span><br><span class="line">        &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据上文代码分析我们知道解析数据的起点是ReflectiveTypeAdapterFactory中Adapter的read方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> T <span class="title">read</span><span class="params">(JsonReader in)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (in.peek() == JsonToken.NULL) &#123;</span><br><span class="line">    in.nextNull();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  T instance = constructor.construct();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 从in.beginObject开始对json数据进行解析</span></span><br><span class="line">    in.beginObject();</span><br><span class="line">    <span class="keyword">while</span> (in.hasNext()) &#123;</span><br><span class="line">      String name = in.nextName();</span><br><span class="line">      <span class="comment">// 14. 得到解析的key后构造属性</span></span><br><span class="line">      BoundField field = boundFields.get(name);</span><br><span class="line">      <span class="keyword">if</span> (field == <span class="keyword">null</span> || !field.deserialized) &#123;</span><br><span class="line">        in.skipValue();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 15. 并且递归解析后面的数据，深度优先，这里会调用CollectionTypeAdapterFactory的Adapter的read方法</span></span><br><span class="line">        <span class="comment">// CollectionTypeAdapterFactory用于处理集合类数据，这里会调用peek方法</span></span><br><span class="line">        field.read(in, instance);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IllegalStateException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> JsonSyntaxException(e);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(e);</span><br><span class="line">  &#125;</span><br><span class="line">  in.endObject();</span><br><span class="line">  <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JsonReader.java peeked是标志位，初始为PEEKED_NONE，表明还没有开始任何解析过程</span></span><br><span class="line"><span class="comment">// JsonReader解析数据的过程很有意思，它是依靠peeked标志位来决定如何处理下一个字符，</span></span><br><span class="line"><span class="comment">// peeked初始值为PEEKED_NONE，表明标志位为空所以需要读取json数据，根据读取的字符设置peeked</span></span><br><span class="line"><span class="comment">// 的值，然后再根据peeked的值决定下一个字符如何处理</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Consumes the next token from the JSON stream and asserts that it is the</span></span><br><span class="line"><span class="comment">   * beginning of a new object.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beginObject</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = peeked;</span><br><span class="line">    <span class="keyword">if</span> (p == PEEKED_NONE) &#123;</span><br><span class="line">      <span class="comment">// 初始值peeked为PEEKED_NONE，调用doPeek方法设置peeked的标志</span></span><br><span class="line">      p = doPeek();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p == PEEKED_BEGIN_OBJECT) &#123;</span><br><span class="line">      <span class="comment">// 4. 由于doPeek将p置为PEEKED_BEGIN_OBJECT，所以需要将JsonScope.EMPTY_OBJECT</span></span><br><span class="line">      <span class="comment">// 加入stack中，并peeked重置为PEEKED_NONE</span></span><br><span class="line">      push(JsonScope.EMPTY_OBJECT);</span><br><span class="line">      peeked = PEEKED_NONE;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Expected BEGIN_OBJECT but was "</span> + peek() + locationString());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// doPeek是整个解析过程中的核心代码，其他的函数都会调用到doPeek</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">doPeek</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 除了有peeked标志还有stack数组，stack数组保存解析json数据的进度，stack初始值全为0，</span></span><br><span class="line">    <span class="comment">// 初始化后将stack[0]置为JsonScope.EMPTY_DOCUMENT，表明还未开始解析</span></span><br><span class="line">    <span class="comment">// 6. 在hasNext方法中再次执行doPeek，此时peekStack为JsonScope.NONEMPTY_OBJECT</span></span><br><span class="line">    <span class="keyword">int</span> peekStack = stack[stackSize - <span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 25. stack的top被置为JsonScope.EMPTY_ARRAY，表明期望的数据是Array</span></span><br><span class="line">    <span class="keyword">if</span> (peekStack == JsonScope.EMPTY_ARRAY) &#123;</span><br><span class="line">      <span class="comment">// 继续重置stack top为JsonScope.NONEMPTY_ARRAY</span></span><br><span class="line">      stack[stackSize - <span class="number">1</span>] = JsonScope.NONEMPTY_ARRAY;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (peekStack == JsonScope.NONEMPTY_ARRAY) &#123;</span><br><span class="line">      <span class="comment">// Look for a comma before the next element.</span></span><br><span class="line">      <span class="keyword">int</span> c = nextNonWhitespace(<span class="keyword">true</span>);</span><br><span class="line">      <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">']'</span>:</span><br><span class="line">        <span class="keyword">return</span> peeked = PEEKED_END_ARRAY;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">';'</span>:</span><br><span class="line">        checkLenient(); <span class="comment">// fall-through</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">','</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> syntaxError(<span class="string">"Unterminated array"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (peekStack == JsonScope.EMPTY_OBJECT || peekStack == JsonScope.NONEMPTY_OBJECT) &#123;</span><br><span class="line">      <span class="comment">// 7. 又将stack的top置为JsonScope.DANGLING_NAME</span></span><br><span class="line">      stack[stackSize - <span class="number">1</span>] = JsonScope.DANGLING_NAME;</span><br><span class="line">      <span class="comment">// Look for a comma before the next element.</span></span><br><span class="line">      <span class="keyword">if</span> (peekStack == JsonScope.NONEMPTY_OBJECT) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = nextNonWhitespace(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'&#125;'</span>:</span><br><span class="line">          <span class="keyword">return</span> peeked = PEEKED_END_OBJECT;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">';'</span>:</span><br><span class="line">          checkLenient(); <span class="comment">// fall-through</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">','</span>:</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">throw</span> syntaxError(<span class="string">"Unterminated object"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 8. 读取下一个字符 "</span></span><br><span class="line">      <span class="keyword">int</span> c = nextNonWhitespace(<span class="keyword">true</span>);</span><br><span class="line">      <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'"'</span>:</span><br><span class="line">      <span class="comment">// 9. 显然将peeked置为PEEKED_DOUBLE_QUOTED_NAME</span></span><br><span class="line">        <span class="keyword">return</span> peeked = PEEKED_DOUBLE_QUOTED_NAME;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'\''</span>:</span><br><span class="line">        checkLenient();</span><br><span class="line">        <span class="keyword">return</span> peeked = PEEKED_SINGLE_QUOTED_NAME;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'&#125;'</span>:</span><br><span class="line">        <span class="keyword">if</span> (peekStack != JsonScope.NONEMPTY_OBJECT) &#123;</span><br><span class="line">          <span class="keyword">return</span> peeked = PEEKED_END_OBJECT;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">throw</span> syntaxError(<span class="string">"Expected name"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        checkLenient();</span><br><span class="line">        pos--; <span class="comment">// Don't consume the first character in an unquoted string.</span></span><br><span class="line">        <span class="keyword">if</span> (isLiteral((<span class="keyword">char</span>) c)) &#123;</span><br><span class="line">          <span class="keyword">return</span> peeked = PEEKED_UNQUOTED_NAME;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">throw</span> syntaxError(<span class="string">"Expected name"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (peekStack == JsonScope.DANGLING_NAME) &#123;</span><br><span class="line">      <span class="comment">// 17. 之前stack的top被置为JsonScope.DANGLING_NAME</span></span><br><span class="line">      <span class="comment">// 然后stack的top置为JsonScope.NONEMPTY_OBJECT，表明object对象还没有读取完成</span></span><br><span class="line">      stack[stackSize - <span class="number">1</span>] = JsonScope.NONEMPTY_OBJECT;</span><br><span class="line">      <span class="comment">// Look for a colon before the value.</span></span><br><span class="line">      <span class="comment">// 下一个字符是 :</span></span><br><span class="line">      <span class="keyword">int</span> c = nextNonWhitespace(<span class="keyword">true</span>);</span><br><span class="line">      <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">':'</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'='</span>:</span><br><span class="line">        checkLenient();</span><br><span class="line">        <span class="keyword">if</span> ((pos &lt; limit || fillBuffer(<span class="number">1</span>)) &amp;&amp; buffer[pos] == <span class="string">'&gt;'</span>) &#123;</span><br><span class="line">          pos++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> syntaxError(<span class="string">"Expected ':'"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (peekStack == JsonScope.EMPTY_DOCUMENT) &#123;</span><br><span class="line">      <span class="comment">// 1. peekStack初始为JsonScope.EMPTY_DOCUMENT</span></span><br><span class="line">      <span class="keyword">if</span> (lenient) &#123;</span><br><span class="line">        <span class="comment">// lenient在调用read方法之前被置为true，结束后被置为false</span></span><br><span class="line">        consumeNonExecutePrefix();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// stack[0]被置为JsonScope.NONEMPTY_DOCUMENT</span></span><br><span class="line">      stack[stackSize - <span class="number">1</span>] = JsonScope.NONEMPTY_DOCUMENT;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (peekStack == JsonScope.NONEMPTY_DOCUMENT) &#123;</span><br><span class="line">      <span class="keyword">int</span> c = nextNonWhitespace(<span class="keyword">false</span>);</span><br><span class="line">      <span class="keyword">if</span> (c == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> peeked = PEEKED_EOF;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        checkLenient();</span><br><span class="line">        pos--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (peekStack == JsonScope.CLOSED) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"JsonReader is closed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. c是第一个字符 &#123;</span></span><br><span class="line">    <span class="comment">// 18. c是 [</span></span><br><span class="line">    <span class="comment">// 26. c是 &#123;</span></span><br><span class="line">    <span class="keyword">int</span> c = nextNonWhitespace(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">']'</span>:</span><br><span class="line">      <span class="keyword">if</span> (peekStack == JsonScope.EMPTY_ARRAY) &#123;</span><br><span class="line">        <span class="keyword">return</span> peeked = PEEKED_END_ARRAY;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// fall-through to handle ",]"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">';'</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">','</span>:</span><br><span class="line">      <span class="comment">// In lenient mode, a 0-length literal in an array means 'null'.</span></span><br><span class="line">      <span class="keyword">if</span> (peekStack == JsonScope.EMPTY_ARRAY || peekStack == JsonScope.NONEMPTY_ARRAY) &#123;</span><br><span class="line">        checkLenient();</span><br><span class="line">        pos--;</span><br><span class="line">        <span class="keyword">return</span> peeked = PEEKED_NULL;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> syntaxError(<span class="string">"Unexpected value"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'\''</span>:</span><br><span class="line">      checkLenient();</span><br><span class="line">      <span class="keyword">return</span> peeked = PEEKED_SINGLE_QUOTED;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'"'</span>:</span><br><span class="line">      <span class="keyword">return</span> peeked = PEEKED_DOUBLE_QUOTED;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'['</span>:</span><br><span class="line">    <span class="comment">// 19. 将peeked置为PEEKED_BEGIN_ARRAY</span></span><br><span class="line">    <span class="comment">// 表明开始解析Array类型数据</span></span><br><span class="line">      <span class="keyword">return</span> peeked = PEEKED_BEGIN_ARRAY;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'&#123;'</span>:</span><br><span class="line">    <span class="comment">// 3. peeked被置为PEEKED_BEGIN_OBJECT</span></span><br><span class="line">    <span class="comment">// 27. peeked被置为PEEKED_BEGIN_OBJECT</span></span><br><span class="line">      <span class="keyword">return</span> peeked = PEEKED_BEGIN_OBJECT;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      pos--; <span class="comment">// Don't consume the first character in a literal value.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> result = peekKeyword();</span><br><span class="line">    <span class="keyword">if</span> (result != PEEKED_NONE) &#123;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    result = peekNumber();</span><br><span class="line">    <span class="keyword">if</span> (result != PEEKED_NONE) &#123;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!isLiteral(buffer[pos])) &#123;</span><br><span class="line">      <span class="keyword">throw</span> syntaxError(<span class="string">"Expected value"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    checkLenient();</span><br><span class="line">    <span class="keyword">return</span> peeked = PEEKED_UNQUOTED;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NON_EXECUTE_PREFIX包括")]&#125;'\n"，即如果json字符串第一个字符在NON_EXECUTE_PREFIX中</span></span><br><span class="line"><span class="comment">// 说明这个字符出了错误，buffer是1024长度的数组用于缓存json数据，pos表示我们读取数据的位置，</span></span><br><span class="line"><span class="comment">// consumeNonExecutePrefix用于</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Consumes the non-execute prefix if it exists.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">consumeNonExecutePrefix</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// fast forward through the leading whitespace</span></span><br><span class="line">    nextNonWhitespace(<span class="keyword">true</span>);</span><br><span class="line">    pos--;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pos + NON_EXECUTE_PREFIX.length &gt; limit &amp;&amp; !fillBuffer(NON_EXECUTE_PREFIX.length)) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NON_EXECUTE_PREFIX.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (buffer[pos + i] != NON_EXECUTE_PREFIX[i]) &#123;</span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">// not a security token!</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// we consumed a security token!</span></span><br><span class="line">    pos += NON_EXECUTE_PREFIX.length;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 在while循环里判断hasNext，显然peeked此时为PEEKED_NONE，所以执行doPeek</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns true if the current array or object has another element.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = peeked;</span><br><span class="line">    <span class="keyword">if</span> (p == PEEKED_NONE) &#123;</span><br><span class="line">      p = doPeek();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 10. p为PEEKED_DOUBLE_QUOTED_NAME，显然返回true</span></span><br><span class="line">    <span class="keyword">return</span> p != PEEKED_END_OBJECT &amp;&amp; p != PEEKED_END_ARRAY;</span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 11. 然后通过in.nextName()读取json数据</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns the next token, a &#123;<span class="doctag">@link</span> com.google.gson.stream.JsonToken#NAME property name&#125;, and</span></span><br><span class="line"><span class="comment">   * consumes it.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> java.io.IOException if the next token in the stream is not a property</span></span><br><span class="line"><span class="comment">   *     name.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">nextName</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 12. 此时peeked为PEEKED_DOUBLE_QUOTED_NAME</span></span><br><span class="line">    <span class="keyword">int</span> p = peeked;</span><br><span class="line">    <span class="keyword">if</span> (p == PEEKED_NONE) &#123;</span><br><span class="line">      p = doPeek();</span><br><span class="line">    &#125;</span><br><span class="line">    String result;</span><br><span class="line">    <span class="keyword">if</span> (p == PEEKED_UNQUOTED_NAME) &#123;</span><br><span class="line">      result = nextUnquotedValue();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p == PEEKED_SINGLE_QUOTED_NAME) &#123;</span><br><span class="line">      result = nextQuotedValue(<span class="string">'\''</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p == PEEKED_DOUBLE_QUOTED_NAME) &#123;</span><br><span class="line">      <span class="comment">// 13. 调用nextQuotedValue，nextQuotedValue方法读取buffer中不为 " 的字符串，</span></span><br><span class="line">      <span class="comment">// 简而言之就是在已知我们已经读取到双引号的情况下，将两个双引号之间的数据获取到，</span></span><br><span class="line">      <span class="comment">// 所以这里的result为HeWeather6</span></span><br><span class="line">      result = nextQuotedValue(<span class="string">'"'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Expected a name but was "</span> + peek() + locationString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 最后还是需要重置peeked为PEEKED_NONE</span></span><br><span class="line">    peeked = PEEKED_NONE;</span><br><span class="line">    <span class="comment">// 将result保存到pathNames中</span></span><br><span class="line">    pathNames[stackSize - <span class="number">1</span>] = result;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 16. peek继续调用doPeek</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns the type of the next token without consuming it.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> JsonToken <span class="title">peek</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = peeked;</span><br><span class="line">    <span class="keyword">if</span> (p == PEEKED_NONE) &#123;</span><br><span class="line">      p = doPeek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (p) &#123;</span><br><span class="line">    <span class="keyword">case</span> PEEKED_BEGIN_OBJECT:</span><br><span class="line">      <span class="keyword">return</span> JsonToken.BEGIN_OBJECT;</span><br><span class="line">    <span class="keyword">case</span> PEEKED_END_OBJECT:</span><br><span class="line">      <span class="keyword">return</span> JsonToken.END_OBJECT;</span><br><span class="line">    <span class="keyword">case</span> PEEKED_BEGIN_ARRAY:</span><br><span class="line">    <span class="comment">// 20. 返回JsonToken.BEGIN_ARRAY</span></span><br><span class="line">      <span class="keyword">return</span> JsonToken.BEGIN_ARRAY;</span><br><span class="line">    <span class="keyword">case</span> PEEKED_END_ARRAY:</span><br><span class="line">      <span class="keyword">return</span> JsonToken.END_ARRAY;</span><br><span class="line">    <span class="keyword">case</span> PEEKED_SINGLE_QUOTED_NAME:</span><br><span class="line">    <span class="keyword">case</span> PEEKED_DOUBLE_QUOTED_NAME:</span><br><span class="line">    <span class="keyword">case</span> PEEKED_UNQUOTED_NAME:</span><br><span class="line">      <span class="keyword">return</span> JsonToken.NAME;</span><br><span class="line">    <span class="keyword">case</span> PEEKED_TRUE:</span><br><span class="line">    <span class="keyword">case</span> PEEKED_FALSE:</span><br><span class="line">      <span class="keyword">return</span> JsonToken.BOOLEAN;</span><br><span class="line">    <span class="keyword">case</span> PEEKED_NULL:</span><br><span class="line">      <span class="keyword">return</span> JsonToken.NULL;</span><br><span class="line">    <span class="keyword">case</span> PEEKED_SINGLE_QUOTED:</span><br><span class="line">    <span class="keyword">case</span> PEEKED_DOUBLE_QUOTED:</span><br><span class="line">    <span class="keyword">case</span> PEEKED_UNQUOTED:</span><br><span class="line">    <span class="keyword">case</span> PEEKED_BUFFERED:</span><br><span class="line">      <span class="keyword">return</span> JsonToken.STRING;</span><br><span class="line">    <span class="keyword">case</span> PEEKED_LONG:</span><br><span class="line">    <span class="keyword">case</span> PEEKED_NUMBER:</span><br><span class="line">      <span class="keyword">return</span> JsonToken.NUMBER;</span><br><span class="line">    <span class="keyword">case</span> PEEKED_EOF:</span><br><span class="line">      <span class="keyword">return</span> JsonToken.END_DOCUMENT;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 23. beginArray用于解析Array类型数据</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Consumes the next token from the JSON stream and asserts that it is the</span></span><br><span class="line"><span class="comment">   * beginning of a new array.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beginArray</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = peeked;</span><br><span class="line">    <span class="keyword">if</span> (p == PEEKED_NONE) &#123;</span><br><span class="line">      p = doPeek();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 由于peeked被置为PEEKED_BEGIN_ARRAY</span></span><br><span class="line">    <span class="comment">// stack的top被置为JsonScope.EMPTY_ARRAY</span></span><br><span class="line">    <span class="keyword">if</span> (p == PEEKED_BEGIN_ARRAY) &#123;</span><br><span class="line">      push(JsonScope.EMPTY_ARRAY);</span><br><span class="line">      pathIndices[stackSize - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">      peeked = PEEKED_NONE;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Expected BEGIN_ARRAY but was "</span> + peek() + locationString());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Collection&lt;E&gt; <span class="title">read</span><span class="params">(JsonReader in)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  <span class="comment">// 21. in.peek()返回JsonToken.BEGIN_ARRAY</span></span><br><span class="line">  <span class="keyword">if</span> (in.peek() == JsonToken.NULL) &#123;</span><br><span class="line">    in.nextNull();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Collection&lt;E&gt; collection = constructor.construct();</span><br><span class="line">  <span class="comment">// 22.所以调用beginArray解析数据</span></span><br><span class="line">  in.beginArray();</span><br><span class="line">  <span class="comment">// 24. 继续判断hasNext，但是还是通过doPeek解析</span></span><br><span class="line">  <span class="keyword">while</span> (in.hasNext()) &#123;</span><br><span class="line">    <span class="comment">// 28. hasNext返回true，elementTypeAdapter是通过gson.getAdapter获取的，</span></span><br><span class="line">    <span class="comment">// 本质上还是ReflectiveTypeAdapterFactory的Adapter的read方法，那么下一个属性的实例化</span></span><br><span class="line">    <span class="comment">// 又进入了递归的模式，与此同时我们对于Array类型的属性是通过构造collection对象来加入下一级的</span></span><br><span class="line">    <span class="comment">// 对象</span></span><br><span class="line">    E instance = elementTypeAdapter.read(in);</span><br><span class="line">    collection.add(instance);</span><br><span class="line">  &#125;</span><br><span class="line">  in.endArray();</span><br><span class="line">  <span class="keyword">return</span> collection;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JsonReader可以完成的内容非常多，基本可以解析大多数的数据，而你只需要调用其中的beginArray、endArray、beginObject、endObject、hasNext等方法就可以得到json字符串中正确的数据部分，而且不需要考虑括号、引号、分号等等，在这些方法中就已经帮你跳过了，所以你也可以自定义json解析规则，实例代码在JsonReader的注释中给出了</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">912345678901</span>,</span><br><span class="line">    <span class="attr">"text"</span>: <span class="string">"How do I read a JSON stream in Java?"</span>,</span><br><span class="line">    <span class="attr">"geo"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"user"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"json_newb"</span>,</span><br><span class="line">      <span class="attr">"followers_count"</span>: <span class="number">41</span></span><br><span class="line">     &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">912345678902</span>,</span><br><span class="line">    <span class="attr">"text"</span>: <span class="string">"@json_newb just use JsonReader!"</span>,</span><br><span class="line">    <span class="attr">"geo"</span>: [<span class="number">50.454722</span>, <span class="number">-104.606667</span>],</span><br><span class="line">    <span class="attr">"user"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"jesse"</span>,</span><br><span class="line">      <span class="attr">"followers_count"</span>: <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Message&gt; <span class="title">readJsonStream</span><span class="params">(InputStream in)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  JsonReader reader = <span class="keyword">new</span> JsonReader(<span class="keyword">new</span> InputStreamReader(in, <span class="string">"UTF-8"</span>));</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> readMessagesArray(reader);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    reader.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Message&gt; <span class="title">readMessagesArray</span><span class="params">(JsonReader reader)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  List&lt;Message&gt; messages = <span class="keyword">new</span> ArrayList&lt;Message&gt;();</span><br><span class="line"></span><br><span class="line">  reader.beginArray();</span><br><span class="line">  <span class="keyword">while</span> (reader.hasNext()) &#123;</span><br><span class="line">    messages.add(readMessage(reader));</span><br><span class="line">  &#125;</span><br><span class="line">  reader.endArray();</span><br><span class="line">  <span class="keyword">return</span> messages;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Message <span class="title">readMessage</span><span class="params">(JsonReader reader)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  <span class="keyword">long</span> id = -<span class="number">1</span>;</span><br><span class="line">  String text = <span class="keyword">null</span>;</span><br><span class="line">  User user = <span class="keyword">null</span>;</span><br><span class="line">  List&lt;Double&gt; geo = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  reader.beginObject();</span><br><span class="line">  <span class="keyword">while</span> (reader.hasNext()) &#123;</span><br><span class="line">    String name = reader.nextName();</span><br><span class="line">    <span class="keyword">if</span> (name.equals(<span class="string">"id"</span>)) &#123;</span><br><span class="line">      id = reader.nextLong();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name.equals(<span class="string">"text"</span>)) &#123;</span><br><span class="line">      text = reader.nextString();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name.equals(<span class="string">"geo"</span>) &amp;&amp; reader.peek() != JsonToken.NULL) &#123;</span><br><span class="line">      geo = readDoublesArray(reader);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name.equals(<span class="string">"user"</span>)) &#123;</span><br><span class="line">      user = readUser(reader);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      reader.skipValue();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  reader.endObject();</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Message(id, text, user, geo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Double&gt; <span class="title">readDoublesArray</span><span class="params">(JsonReader reader)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  List&lt;Double&gt; doubles = <span class="keyword">new</span> ArrayList&lt;Double&gt;();</span><br><span class="line"></span><br><span class="line">  reader.beginArray();</span><br><span class="line">  <span class="keyword">while</span> (reader.hasNext()) &#123;</span><br><span class="line">    doubles.add(reader.nextDouble());</span><br><span class="line">  &#125;</span><br><span class="line">  reader.endArray();</span><br><span class="line">  <span class="keyword">return</span> doubles;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">readUser</span><span class="params">(JsonReader reader)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  String username = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">int</span> followersCount = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  reader.beginObject();</span><br><span class="line">  <span class="keyword">while</span> (reader.hasNext()) &#123;</span><br><span class="line">    String name = reader.nextName();</span><br><span class="line">    <span class="keyword">if</span> (name.equals(<span class="string">"name"</span>)) &#123;</span><br><span class="line">      username = reader.nextString();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name.equals(<span class="string">"followers_count"</span>)) &#123;</span><br><span class="line">      followersCount = reader.nextInt();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      reader.skipValue();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  reader.endObject();</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> User(username, followersCount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是Gson解析json数据并实例化的过程，反之toJson将实例转为json数据也差不多。解析json数据是一个深度优先遍历的过程，同时根据各种括号、分号、引号判断数据类型以及数据的值，Gson在解析的过程中有一些非常亮眼的设计思路：</p><ol><li>TypeAdapterFactory工厂类，用于提供TypeAdapter，TypeAdapter用于将json数据转为实例，由于Java中包含大量的基础类型和自定义类型，所以Gson提供了对应的基础类型的TypeAdapterFactory工厂，这些工厂提供的Adapter可以按照设计好的方式调用JsonReader的各种方法读取数据并转为实例；同时对于自定义类型，提供了ReflectiveTypeAdapterFactory，通过反射的方式构造实例，同时根据不同的属性的类型，又可以使用TypeToken来表示便于后续查找合适的TypeAdapter；</li><li>JsonReader的强大功能，为了获取到json数据中的有效数据，比如属性名称、属性的值以及属性的类型，JsonReader加入了两个非常关键的参数peeked和stack，peeked用于标志当前的解析步骤是否完成，比如在调用beginObject后，peeked经历PEEKED_NONE -&gt; PEEKED_BEGIN_OBJECT -&gt; PEEKED_NONE的过程，通过doPeek完成这些步骤的转换，只要最终为PEEKED_NONE，说明前面都没有发生错误；其次是stack，stack保存了当前进行的流程，比如JsonScope.EMPTY_ARRAY、JsonScope.NONEMPTY_ARRAY、JsonScope.NONEMPTY_OBJECT等等，通过doPeek判断字符串，我们就知道了当前json数据可能是属于什么类型，从而将符号进行划分再判断，减少了需要判断的条件。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/google/gson/blob/master/UserGuide.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Gson User Guide&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;json是一种数据格式，类似与键值对的形式，常用于服务器与客户端之间数据传输，以键值对形式传输的数据在客户端进行解析时必然需要对不同的key寻找其对应的value，通常来说这种解析数据的过程非常繁琐，但是没有难度，所以Google推出了Gson这个工具，用于解析json数据并直接将其实例化。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://zhoutao822.coding.me/categories/Android/"/>
    
    
      <category term="Android" scheme="http://zhoutao822.coding.me/tags/Android/"/>
    
      <category term="Gson" scheme="http://zhoutao822.coding.me/tags/Gson/"/>
    
      <category term="json" scheme="http://zhoutao822.coding.me/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>Android框架-Retrofit与OkHttp</title>
    <link href="http://zhoutao822.coding.me/archives/6c51e275.html"/>
    <id>http://zhoutao822.coding.me/archives/6c51e275.html</id>
    <published>2019-07-20T01:58:58.000Z</published>
    <updated>2020-01-22T03:17:44.714Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><blockquote><p><a href="https://www.tutorialsteacher.com/https" target="_blank" rel="noopener">HTTPS Tutorials</a><br /><a href="http://www.ruanyifeng.com/blog/2016/08/http.html" target="_blank" rel="noopener">HTTP 协议入门</a><br /><a href="https://square.github.io/retrofit/" target="_blank" rel="noopener">Retrofit</a><br /><a href="https://square.github.io/okhttp/" target="_blank" rel="noopener">OkHttp</a><br /><a href="https://juejin.im/post/5a31db566fb9a045257820b2#heading-2" target="_blank" rel="noopener">OkHttp使用详解</a><br /><a href="https://www.baeldung.com/retrofit" target="_blank" rel="noopener">Introduction to Retrofit</a><br /><a href="https://juejin.im/post/5c9cb008e51d455ec63f7aa6" target="_blank" rel="noopener">Android Retrofit 2.5.0使用基础详解</a><br /><a href="https://juejin.im/post/5d1f2462f265da1bbc6ff5e8#heading-13" target="_blank" rel="noopener">Retrofit使用拦截器添加Cookie</a><br /><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/simple_factory.html" target="_blank" rel="noopener">Factory Pattern</a></p></blockquote><p>Http，超文本传输协议，Https，更加安全的超文本传输协议，目前大量用于客户端与服务端之间的信息交流，属于应用层协议，下面有传输层TCP协议、网络层IP协议以及数据链路层为其提供保障。以登录功能为例，每一次输入账户密码后点击登录按钮就做了一次对服务器的Http请求（POST），我们收到的结果比如账号密码错误或者登录成功等信息就是服务器对Http请求的回复。Http与Https的区别在于后者采用了SSL（Secure Socket Layer安全套接层），简而言之就是对传输的数据进行了加密。具体细节可以在<a href="https://www.tutorialsteacher.com/https" target="_blank" rel="noopener">HTTPS Tutorials</a>或者其他资料中找到。</p><a id="more"></a><h2 id="1-get和post"><a class="markdownIt-Anchor" href="#1-get和post"></a> 1. GET和POST</h2><p>Http协议中比较常用的请求是GET和POST请求，可以说大部分客户端与服务端之间的数据交互都是通过这两个请求方法，以GET和POST请求为例</p><p>GET用于请求数据，按照设计要求，GET请求不会对服务器数据进行修改，也就是说我们通过GET可以请求各种资源（静态页面等等），其中比较重要的参数包括：</p><p>Host：需要请求的服务器</p><p>User-Agent：代理，表明你的身份，一般来说浏览器发送的请求会自动添加，可以人为修改伪造身份</p><p>Connection：可以建立TCP长连接，属于HTTP/1.1的优化功能</p><p>这个GET请求的目的就是从www.wrox.com这个服务器取index.htm这个页面</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/index.htm</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: www.wrox.com</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)</span><br><span class="line">Gecko/20050225 Firefox/1.0.1</span><br><span class="line"><span class="attribute">Connection</span>: Keep-Alive</span><br></pre></td></tr></table></figure><p>POST请求用于修改服务器数据，按照设计的要求，可以通过POST方法可以向服务器提交数据由服务器处理后返回，这里比较重要的参数包括：</p><p>Content-Type：请求实体的格式</p><p>Content-Length：请求实体的长度</p><p>以及请求实体的内容，会空一行再写，比如这里的name1=value1&amp;name2=value2</p><p>这个POST请求的目的是向w3schools.com服务器下/test/demo_form.asp发送数据参数name1=value1&amp;name2=value2，然后服务器会返回处理后的结果</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/test/demo_form.asp</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: w3schools.com</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)</span><br><span class="line">Gecko/20050225 Firefox/1.0.1</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 40</span><br><span class="line"><span class="attribute">Connection</span>: Keep-Alive</span><br><span class="line"></span><br><span class="line">name1=value1&amp;name2=value2</span><br></pre></td></tr></table></figure><p>以上就是Http中GET和POST方法的简要介绍了，实际上Http协议还包括一些其他方法，以及TCP握手、SSL握手等建立连接的过程、对称与非对称加密等细节步骤，这里就不多描述，可以看其他资料。</p><h2 id="2-okhttp"><a class="markdownIt-Anchor" href="#2-okhttp"></a> 2. OkHttp</h2><p>OkHttp是一个封装好的Http请求客户端，它既可用于Java项目也可以用于Android项目，通过调用构建好的http client，我们就可以发出http请求。</p><p><strong>Android中需要网络权限</strong><code>&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;</code></p><h3 id="21-okhttpget"><a class="markdownIt-Anchor" href="#21-okhttpget"></a> 2.1 OkHttp.GET</h3><blockquote><p>1.创建OkHttpClient对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br></pre></td></tr></table></figure><blockquote><p>2.创建Request对象，URL则为我们需要的请求URL，一般来说此URL包含了Host、请求内容，比如<code>https://zhoutao822.coding.me/2019/01/03/XGBoost/0.png</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">        .url(URL)</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure><blockquote><p>3.将Request封装为Call</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Call call = client.newCall(request);</span><br></pre></td></tr></table></figure><blockquote><p>4.调用同步或异步的请求方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是异步调用，通过enqueue方法</span></span><br><span class="line">call.enqueue(<span class="keyword">new</span> Callback() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"get failed"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String ret = response.body().string();</span><br><span class="line">        runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                textView.setText(ret);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是同步调用</span></span><br><span class="line">Response response = call.execute();</span><br></pre></td></tr></table></figure><p>异步调用意味着可以在主线程中调用call.enqueue方法，而同步调用方式只能在另一个线程中调用，通过handler将数据传回主线程，完整代码为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String URL = <span class="string">"https://free-api.heweather.net/s6/weather/now?location=beijing&amp;key=XXXXXXXXX"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Handler handler = <span class="keyword">new</span> Handler();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="keyword">final</span> TextView textView = findViewById(R.id.text);</span><br><span class="line"></span><br><span class="line">        OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">        Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">                .get()</span><br><span class="line">                .url(URL)</span><br><span class="line">                .build();</span><br><span class="line">        Call call = client.newCall(request);</span><br><span class="line">        call.enqueue(<span class="keyword">new</span> Callback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</span><br><span class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"get failed"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">final</span> String ret = response.body().string();</span><br><span class="line">                runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        textView.setText(ret);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面是同步调用</span></span><br><span class="line"><span class="comment">//        new Thread(new Runnable() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public void run() &#123;</span></span><br><span class="line"><span class="comment">//                OkHttpClient client = new OkHttpClient();</span></span><br><span class="line"><span class="comment">//                Request request = new Request.Builder()</span></span><br><span class="line"><span class="comment">//                        .get()</span></span><br><span class="line"><span class="comment">//                        .url(URL)</span></span><br><span class="line"><span class="comment">//                        .build();</span></span><br><span class="line"><span class="comment">//                Call call = client.newCall(request);</span></span><br><span class="line"><span class="comment">//                try &#123;</span></span><br><span class="line"><span class="comment">//                    final Response response = call.execute();</span></span><br><span class="line"><span class="comment">//                    handler.post(new Runnable() &#123;</span></span><br><span class="line"><span class="comment">//                        @Override</span></span><br><span class="line"><span class="comment">//                        public void run() &#123;</span></span><br><span class="line"><span class="comment">//                            try &#123;</span></span><br><span class="line"><span class="comment">//                                textView.setText(response.body().string());</span></span><br><span class="line"><span class="comment">//                            &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">//                                e.printStackTrace();</span></span><br><span class="line"><span class="comment">//                            &#125;</span></span><br><span class="line"><span class="comment">//                        &#125;</span></span><br><span class="line"><span class="comment">//                    &#125;);</span></span><br><span class="line"><span class="comment">//                &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">//                    e.printStackTrace();</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;).start();</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GET请求下载文件，对于图片url，我们也可以通过GET的方式进行下载，将返回的数据转为本地图片或者直接用在ImageView上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloadImg</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">        Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">                .get()</span><br><span class="line">                .url(URL)</span><br><span class="line">                .build();</span><br><span class="line">        Call call = client.newCall(request);</span><br><span class="line">        call.enqueue(<span class="keyword">new</span> Callback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</span><br><span class="line">                Log.e(<span class="string">"aaaa"</span>, <span class="string">"onFailure: "</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">//拿到字节流</span></span><br><span class="line">                InputStream is = response.body().byteStream();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">                File file = <span class="keyword">new</span> File(Environment.getExternalStorageDirectory(), <span class="string">"image.png"</span>);</span><br><span class="line">                FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">                <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">128</span>];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> ((len = is.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    fos.write(buf, <span class="number">0</span>, len);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                fos.flush();</span><br><span class="line">                <span class="comment">//关闭流</span></span><br><span class="line">                fos.close();</span><br><span class="line">                is.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面是直接把图片放到ImageView上                </span></span><br><span class="line"><span class="comment">//                final Bitmap bitmap = BitmapFactory.decodeStream(is);</span></span><br><span class="line"><span class="comment">//                runOnUiThread(new Runnable() &#123;</span></span><br><span class="line"><span class="comment">//                    @Override</span></span><br><span class="line"><span class="comment">//                    public void run() &#123;</span></span><br><span class="line"><span class="comment">//                        imageView.setImageBitmap(bitmap);</span></span><br><span class="line"><span class="comment">//                    &#125;</span></span><br><span class="line"><span class="comment">//                &#125;);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                is.close();</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>GET请求下载文件的同时我们可以计算出下载进度，通过<code>response.body().contentLength()</code>拿到文件总大小，只需要修改上面的<code>onResponse</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//拿到字节流</span></span><br><span class="line">    InputStream is = response.body().byteStream();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> sum = <span class="number">0L</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> total = response.body().contentLength();</span><br><span class="line"></span><br><span class="line">    File file = <span class="keyword">new</span> File(Environment.getExternalStorageDirectory(), <span class="string">"image.png"</span>);</span><br><span class="line">    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">    <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">128</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((len = is.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        fos.write(buf, <span class="number">0</span>, len);</span><br><span class="line">        sum += len;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> finalSum = sum;</span><br><span class="line">        Log.i(<span class="string">"aaaa"</span>, <span class="string">"onResponse: "</span> + finalSum + <span class="string">"/"</span> + total);</span><br><span class="line">        runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//将进度设置到TextView中</span></span><br><span class="line">                textView.setText(finalSum + <span class="string">"/"</span> + total);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fos.flush();</span><br><span class="line">    <span class="comment">//关闭流</span></span><br><span class="line">    fos.close();</span><br><span class="line">    is.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="22-okhttppost"><a class="markdownIt-Anchor" href="#22-okhttppost"></a> 2.2 OkHttp.POST</h3><p>POST与GET非常类似，以传入键值对数据为例</p><blockquote><p>1.创建OkHttpClient对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br></pre></td></tr></table></figure><blockquote><p>2.构建FormBody，传入参数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FormBody formBody = <span class="keyword">new</span> FormBody.Builder()</span><br><span class="line">                .add(<span class="string">"username"</span>, <span class="string">"admin"</span>)</span><br><span class="line">                .add(<span class="string">"password"</span>, <span class="string">"admin"</span>)</span><br><span class="line">                .build();</span><br></pre></td></tr></table></figure><blockquote><p>3.创建Request对象，URL则为我们需要的请求URL，一般将此URL作为BaseUrl，比如<code>https://www.wanandroid.com/user/login</code>，我们就知道通过这个URL可以发送登录请求，根据API文档直到传入的参数包括<code>username</code>和<code>password</code>，因此需要FormBody</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">        .url(URL)</span><br><span class="line">        .post(formBody)</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure><blockquote><p>4.将Request封装为Call</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Call call = client.newCall(request);</span><br></pre></td></tr></table></figure><blockquote><p>5.调用异步的请求方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">call.enqueue(<span class="keyword">new</span> Callback() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</span><br><span class="line">        Log.e(<span class="string">"aaaa"</span>, <span class="string">"onFailure: "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String res = response.body().string();</span><br><span class="line">        runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                textView.setText(res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>POST除了可以发送键值对FormBody形式的请求外，还可以发送json字符串，将FormBody替换为RequestBody</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RequestBody requestBody = RequestBody.create(MediaType.parse(<span class="string">"text/plain;charset=utf-8"</span>), <span class="string">"&#123;username:admin;password:admin&#125;"</span>);</span><br></pre></td></tr></table></figure><p>除了以上两种形式的数据之外，Http还可以接受表单形式的数据请求，这也是正常情况下登录流程中发送账号密码的要求，通过表单保存这些数据，再发送到服务器上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">File file = <span class="keyword">new</span> File(Environment.getExternalStorageDirectory(), <span class="string">"image.png"</span>);</span><br><span class="line"><span class="keyword">if</span> (!file.exists())&#123;</span><br><span class="line">    Toast.makeText(<span class="keyword">this</span>, <span class="string">"文件不存在"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">RequestBody muiltipartBody = <span class="keyword">new</span> MultipartBody.Builder()</span><br><span class="line">        <span class="comment">//一定要设置这句</span></span><br><span class="line">        .setType(MultipartBody.FORM)</span><br><span class="line">        .addFormDataPart(<span class="string">"username"</span>, <span class="string">"admin"</span>)</span><br><span class="line">        .addFormDataPart(<span class="string">"password"</span>, <span class="string">"admin"</span>)</span><br><span class="line">        .addFormDataPart(<span class="string">"myfile"</span>, <span class="string">"image.png"</span>, RequestBody.create(MediaType.parse(<span class="string">"application/octet-stream"</span>), file))</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure><p>在发送表单请求时，除了字符串还可以添加二进制文件，比如这里将图片转为二进制加入到了表单中。</p><p>除了在表单中上传文件之外，还可以直接发送二进制文件，需要存储权限<code>&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;/&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">File file = <span class="keyword">new</span> File(Environment.getExternalStorageDirectory(), <span class="string">"image.png"</span>);</span><br><span class="line"><span class="keyword">if</span> (!file.exists())&#123;</span><br><span class="line">    Toast.makeText(<span class="keyword">this</span>, <span class="string">"文件不存在"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    RequestBody requestBody2 = RequestBody.create(MediaType.parse(<span class="string">"application/octet-stream"</span>), file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>POST也可以显示上传进度，但是需要自定义接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountingRequestBody</span> <span class="keyword">extends</span> <span class="title">RequestBody</span> </span>&#123;</span><br><span class="line">    <span class="comment">//实际起作用的RequestBody</span></span><br><span class="line">    <span class="keyword">private</span> RequestBody delegate;</span><br><span class="line">    <span class="comment">//回调监听</span></span><br><span class="line">    <span class="keyword">private</span> Listener listener;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CountingSink countingSink;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数初始化成员变量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delegate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> listener</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CountingRequestBody</span><span class="params">(RequestBody delegate, Listener listener)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.delegate = delegate;</span><br><span class="line">        <span class="keyword">this</span>.listener = listener;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MediaType <span class="title">contentType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> delegate.contentType();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeTo</span><span class="params">(BufferedSink sink)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        countingSink = <span class="keyword">new</span> CountingSink(sink);</span><br><span class="line">        <span class="comment">//将CountingSink转化为BufferedSink供writeTo()使用</span></span><br><span class="line">        BufferedSink bufferedSink = Okio.buffer(countingSink);</span><br><span class="line">        delegate.writeTo(bufferedSink);</span><br><span class="line">        bufferedSink.flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CountingSink</span> <span class="keyword">extends</span> <span class="title">ForwardingSink</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">long</span> byteWritten;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CountingSink</span><span class="params">(Sink delegate)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(delegate);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 上传时调用该方法,在其中调用回调函数将上传进度暴露出去,该方法提供了缓冲区的自己大小</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> source</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> byteCount</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(Buffer source, <span class="keyword">long</span> byteCount)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.write(source, byteCount);</span><br><span class="line">            byteWritten += byteCount;</span><br><span class="line">            listener.onRequestProgress(byteWritten, contentLength());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回文件总的字节大小</span></span><br><span class="line"><span class="comment">     * 如果文件大小获取失败则返回-1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">contentLength</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> delegate.contentLength();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 回调监听接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">interface</span> <span class="title">Listener</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 暴露出上传进度</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> byteWritted  已经上传的字节大小</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> contentLength 文件的总字节大小</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onRequestProgress</span><span class="params">(<span class="keyword">long</span> byteWritted, <span class="keyword">long</span> contentLength)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">File file = <span class="keyword">new</span> File(Environment.getExternalStorageDirectory(), <span class="string">"image.png"</span>);</span><br><span class="line"><span class="keyword">if</span> (!file.exists())&#123;</span><br><span class="line">    Toast.makeText(<span class="keyword">this</span>, <span class="string">"文件不存在"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    RequestBody requestBody2 = RequestBody.create(MediaType.parse(<span class="string">"application/octet-stream"</span>), file);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用我们自己封装的类</span></span><br><span class="line">CountingRequestBody countingRequestBody = <span class="keyword">new</span> CountingRequestBody(requestBody2, <span class="keyword">new</span> CountingRequestBody.Listener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestProgress</span><span class="params">(<span class="keyword">long</span> byteWritted, <span class="keyword">long</span> contentLength)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//打印进度</span></span><br><span class="line">        Log.d(<span class="string">"aaaa"</span>, <span class="string">"进度 ："</span> + byteWritted + <span class="string">"/"</span> + contentLength);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="23-okhttp源码分析"><a class="markdownIt-Anchor" href="#23-okhttp源码分析"></a> 2.3 OkHttp源码分析</h3><p>以发送表单数据请求为例，大致有4步：OkHttpClient构建 -&gt; RequestBody构建 -&gt; Request构建 -&gt; Call构建并调用</p><p>首先看一下OkHttpClient到底是个什么东西，从注释中可以知道OkHttpClient时Call的工厂，具体发送HTTP请求以及接收服务器响应都是通过Call来实现的。</p><p>OkHttpClient还包括以下几个特性：</p><ol><li>OkHttpClient应该用单例模式，这样是为了复用减少内存消耗；</li><li>每一个OkHttpClient都持有独立的连接池和线程池；</li><li>直接new出来的OkHttpClient是默认配置的；</li><li><code>new OkHttpClient.Builder()</code>可以对Client进行配置；</li><li>通过<code>client.newBuilder()</code>可以得到一个与client共享连接池和线程池的OkHttpClient，仅在特殊情形下需要；</li><li>OkHttpClient不是必须主动关闭，client持有的线程和连接在空闲的情况下会被自动回收；</li><li>如果需要主动回收，<code>client.dispatcher().executorService().shutdown()</code>可以回收执行的Service，但会导致之后的call被拒绝；</li><li><code>client.connectionPool().evictAll()</code>会回收连接池；</li><li><code>client.cache().close()</code>会回收Client的缓存（如果在第4步中配置了的话）。</li></ol><p>调用默认构造方法话，则默认参数为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    dispatcher = <span class="keyword">new</span> Dispatcher(); <span class="comment">// Dispatcher持有ExecutorService，通过ExecutorService调用call</span></span><br><span class="line">    protocols = DEFAULT_PROTOCOLS; <span class="comment">// 默认支持HTTP/2和HTTP/1.1</span></span><br><span class="line">    connectionSpecs = DEFAULT_CONNECTION_SPECS; <span class="comment">// 默认连接配置，支持TLS加密的https和普通的不加密http</span></span><br><span class="line">    eventListenerFactory = EventListener.factory(EventListener.NONE); <span class="comment">// 提供监听各种Event的Listener，通常需要继承EventListener并实现其方法</span></span><br><span class="line">    proxySelector = ProxySelector.getDefault(); <span class="comment">// 设置代理，默认是获取系统范围的代理</span></span><br><span class="line">    <span class="keyword">if</span> (proxySelector == <span class="keyword">null</span>) &#123;</span><br><span class="line">    proxySelector = <span class="keyword">new</span> NullProxySelector(); <span class="comment">// 如果系统没有设置代理则将proxySelector设置为NullProxySelector</span></span><br><span class="line">    &#125;</span><br><span class="line">    cookieJar = CookieJar.NO_COOKIES; <span class="comment">// CookieJar是一个接口，实现这个接口的方法可以保存Cookies，也可以在发送请求时加上Cookies</span></span><br><span class="line">    socketFactory = SocketFactory.getDefault(); <span class="comment">// SocketFactory用于构建socket，默认返回DefaultSocketFactory，通过DefaultSocketFactory可以创建Socket</span></span><br><span class="line">    hostnameVerifier = OkHostnameVerifier.INSTANCE; <span class="comment">// 用于在握手期间验证URL主机名和server的身份信息是否相同</span></span><br><span class="line">    certificatePinner = CertificatePinner.DEFAULT; <span class="comment">// CertificatePinner用于在发送请求的过程中嵌入证书（Certificate Pinning），可以防止连接到危险的服务器</span></span><br><span class="line">    proxyAuthenticator = Authenticator.NONE; <span class="comment">// 代理服务器需要身份验证的时候需要用到，默认不需要身份验证</span></span><br><span class="line">    authenticator = Authenticator.NONE; </span><br><span class="line">    connectionPool = <span class="keyword">new</span> ConnectionPool(); <span class="comment">// 默认连接池允许最大5个空闲连接，超过5分钟空闲会被回收</span></span><br><span class="line">    dns = Dns.SYSTEM; <span class="comment">// DNS服务，默认使用系统的DNS服务</span></span><br><span class="line">    followSslRedirects = <span class="keyword">true</span>; <span class="comment">// 重定向到https域名，下面都是一些简单配置参数</span></span><br><span class="line">    followRedirects = <span class="keyword">true</span>;</span><br><span class="line">    retryOnConnectionFailure = <span class="keyword">true</span>;</span><br><span class="line">    callTimeout = <span class="number">0</span>;</span><br><span class="line">    connectTimeout = <span class="number">10_000</span>;</span><br><span class="line">    readTimeout = <span class="number">10_000</span>;</span><br><span class="line">    writeTimeout = <span class="number">10_000</span>;</span><br><span class="line">    pingInterval = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>client只在后面构建Call的时候用到，那先看一下RequestBody，RequestBody是个抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果需要自定义RequestBody，则需要继承RequestBody并实现两个抽象方法contentType和writeTo，</span></span><br><span class="line"><span class="comment">// 一般来说contentType返回此RequestBody的Content-Type，contentLength返回Content的大小，</span></span><br><span class="line"><span class="comment">// 重写writeTo方法实际上是调用BufferedSink的write(content)方法</span></span><br><span class="line"><span class="comment">// RequestBody包含几个默认的create，如果只是发送简单请求，Content的内容不太复杂可以直接使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestBody</span> </span>&#123;</span><br><span class="line">  <span class="comment">/** Returns the Content-Type header for this body. */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="meta">@Nullable</span> <span class="function">MediaType <span class="title">contentType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns the number of bytes that will be written to &#123;<span class="doctag">@code</span> sink&#125; in a call to &#123;<span class="doctag">@link</span> #writeTo&#125;,</span></span><br><span class="line"><span class="comment">   * or -1 if that count is unknown.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">contentLength</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Writes the content of this request to &#123;<span class="doctag">@code</span> sink&#125;. */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">writeTo</span><span class="params">(BufferedSink sink)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns a new request body that transmits &#123;<span class="doctag">@code</span> content&#125;. If &#123;<span class="doctag">@code</span> contentType&#125; is non-null</span></span><br><span class="line"><span class="comment">   * and lacks a charset, this will use UTF-8.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RequestBody <span class="title">create</span><span class="params">(@Nullable MediaType contentType, String content)</span> </span>&#123;</span><br><span class="line">    Charset charset = Util.UTF_8;</span><br><span class="line">    <span class="keyword">if</span> (contentType != <span class="keyword">null</span>) &#123;</span><br><span class="line">      charset = contentType.charset();</span><br><span class="line">      <span class="keyword">if</span> (charset == <span class="keyword">null</span>) &#123;</span><br><span class="line">        charset = Util.UTF_8;</span><br><span class="line">        contentType = MediaType.parse(contentType + <span class="string">"; charset=utf-8"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">byte</span>[] bytes = content.getBytes(charset);</span><br><span class="line">    <span class="keyword">return</span> create(contentType, bytes);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Returns a new request body that transmits &#123;<span class="doctag">@code</span> content&#125;. */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RequestBody <span class="title">create</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">final</span> @Nullable MediaType contentType, <span class="keyword">final</span> ByteString content)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RequestBody() &#123;</span><br><span class="line">      <span class="meta">@Override</span> <span class="keyword">public</span> <span class="meta">@Nullable</span> <span class="function">MediaType <span class="title">contentType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> contentType;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">contentLength</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content.size();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeTo</span><span class="params">(BufferedSink sink)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        sink.write(content);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Returns a new request body that transmits &#123;<span class="doctag">@code</span> content&#125;. */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RequestBody <span class="title">create</span><span class="params">(<span class="keyword">final</span> @Nullable MediaType contentType, <span class="keyword">final</span> <span class="keyword">byte</span>[] content)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> create(contentType, content, <span class="number">0</span>, content.length);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Returns a new request body that transmits &#123;<span class="doctag">@code</span> content&#125;. */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RequestBody <span class="title">create</span><span class="params">(<span class="keyword">final</span> @Nullable MediaType contentType, <span class="keyword">final</span> <span class="keyword">byte</span>[] content,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">final</span> <span class="keyword">int</span> offset, <span class="keyword">final</span> <span class="keyword">int</span> byteCount)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (content == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"content == null"</span>);</span><br><span class="line">    Util.checkOffsetAndCount(content.length, offset, byteCount);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RequestBody() &#123;</span><br><span class="line">      <span class="meta">@Override</span> <span class="keyword">public</span> <span class="meta">@Nullable</span> <span class="function">MediaType <span class="title">contentType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> contentType;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">contentLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> byteCount;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeTo</span><span class="params">(BufferedSink sink)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        sink.write(content, offset, byteCount);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Returns a new request body that transmits the content of &#123;<span class="doctag">@code</span> file&#125;. */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RequestBody <span class="title">create</span><span class="params">(<span class="keyword">final</span> @Nullable MediaType contentType, <span class="keyword">final</span> File file)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"file == null"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RequestBody() &#123;</span><br><span class="line">      <span class="meta">@Override</span> <span class="keyword">public</span> <span class="meta">@Nullable</span> <span class="function">MediaType <span class="title">contentType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> contentType;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">contentLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> file.length();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeTo</span><span class="params">(BufferedSink sink)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Source source = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          source = Okio.source(file);</span><br><span class="line">          sink.writeAll(source);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          Util.closeQuietly(source);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MultipartBody继承自RequestBody，通过MultipartBody构建RequestBody可以发送更加复杂的数据，比如<code>multipart/form-data</code>表单数据，通过MultipartBody的内部类Builder可以对MultipartBody进行配置（建造者模式）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Builder有几个重要的方法</span></span><br><span class="line"><span class="comment">// setType：设置MultipartBody请求的Content-Type，如果是表单数据则为MultipartBody.FORM；</span></span><br><span class="line"><span class="comment">// addPart：因为HTTP请求包括Header和Body，因此通过内部类Part封装号Header和Body，</span></span><br><span class="line"><span class="comment">// 将Part保存到RequestBody的List&lt;Part&gt;中，可能是为了一次发送多个请求；</span></span><br><span class="line"><span class="comment">// addFormDataPart：通过Part构造表单请求；</span></span><br><span class="line"><span class="comment">// build：最后通过build方法创建MultipartBody实例，参数来源于前面三个方法</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ByteString boundary;</span><br><span class="line">    <span class="keyword">private</span> MediaType type = MIXED;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Part&gt; parts = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 初始化一个随机的boundary，暂时还不知道有什么用</span></span><br><span class="line">      <span class="keyword">this</span>(UUID.randomUUID().toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(String boundary)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.boundary = ByteString.encodeUtf8(boundary);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Set the MIME type. Expected values for &#123;<span class="doctag">@code</span> type&#125; are &#123;<span class="doctag">@link</span> #MIXED&#125; (the default), &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment">     * #ALTERNATIVE&#125;, &#123;<span class="doctag">@link</span> #DIGEST&#125;, &#123;<span class="doctag">@link</span> #PARALLEL&#125; and &#123;<span class="doctag">@link</span> #FORM&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">setType</span><span class="params">(MediaType type)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (type == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"type == null"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!type.type().equals(<span class="string">"multipart"</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"multipart != "</span> + type);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.type = type;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Add a part to the body. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">addPart</span><span class="params">(RequestBody body)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> addPart(Part.create(body));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Add a part to the body. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">addPart</span><span class="params">(@Nullable Headers headers, RequestBody body)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> addPart(Part.create(headers, body));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Add a form data part to the body. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">addFormDataPart</span><span class="params">(String name, String value)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> addPart(Part.createFormData(name, value));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Add a form data part to the body. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">addFormDataPart</span><span class="params">(String name, @Nullable String filename, RequestBody body)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> addPart(Part.createFormData(name, filename, body));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Add a part to the body. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">addPart</span><span class="params">(Part part)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (part == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"part == null"</span>);</span><br><span class="line">      parts.add(part);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Assemble the specified parts into a request body. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MultipartBody <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (parts.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Multipart body must have at least one part."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> MultipartBody(boundary, type, parts);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Part用于构造包含Header和RequestBody的实例，简单来说就是用Header封装好要发送请求的首部参数，</span></span><br><span class="line"><span class="comment">// 用RequestBody封装要发送请求的请求数据</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Part</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Part <span class="title">create</span><span class="params">(RequestBody body)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> create(<span class="keyword">null</span>, body);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Part <span class="title">create</span><span class="params">(@Nullable Headers headers, RequestBody body)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (body == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"body == null"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (headers != <span class="keyword">null</span> &amp;&amp; headers.get(<span class="string">"Content-Type"</span>) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unexpected header: Content-Type"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (headers != <span class="keyword">null</span> &amp;&amp; headers.get(<span class="string">"Content-Length"</span>) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unexpected header: Content-Length"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Part(headers, body);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Part <span class="title">createFormData</span><span class="params">(String name, String value)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> createFormData(name, <span class="keyword">null</span>, RequestBody.create(<span class="keyword">null</span>, value));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Part <span class="title">createFormData</span><span class="params">(String name, @Nullable String filename, RequestBody body)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"name == null"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      StringBuilder disposition = <span class="keyword">new</span> StringBuilder(<span class="string">"form-data; name="</span>);</span><br><span class="line">      appendQuotedString(disposition, name);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (filename != <span class="keyword">null</span>) &#123;</span><br><span class="line">        disposition.append(<span class="string">"; filename="</span>);</span><br><span class="line">        appendQuotedString(disposition, filename);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> create(Headers.of(<span class="string">"Content-Disposition"</span>, disposition.toString()), body);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="meta">@Nullable</span> Headers headers;</span><br><span class="line">    <span class="keyword">final</span> RequestBody body;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Part</span><span class="params">(@Nullable Headers headers, RequestBody body)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.headers = headers;</span><br><span class="line">      <span class="keyword">this</span>.body = body;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@Nullable</span> <span class="function">Headers <span class="title">headers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> headers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RequestBody <span class="title">body</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> body;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>RequestBody包含了请求首部参数以及请求数据，接下来需要分析Request，Request连接了请求的主机url和RequestBody</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Request默认构造的是GET请求</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.method = <span class="string">"GET"</span>;</span><br><span class="line">      <span class="keyword">this</span>.headers = <span class="keyword">new</span> Headers.Builder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过url方法设置请求的主机名，如果直接传入的是HttpUrl也可以，传入String也可以，</span></span><br><span class="line"><span class="comment">// 但是会进行格式验证，会把ws:开头和wss:开头的主机名转换为http:和https:</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">url</span><span class="params">(HttpUrl url)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (url == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"url == null"</span>);</span><br><span class="line">      <span class="keyword">this</span>.url = url;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets the URL target of this request.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if &#123;<span class="doctag">@code</span> url&#125; is not a valid HTTP or HTTPS URL. Avoid this</span></span><br><span class="line"><span class="comment">     * exception by calling &#123;<span class="doctag">@link</span> HttpUrl#parse&#125;; it returns null for invalid URLs.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">url</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (url == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"url == null"</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Silently replace web socket URLs with HTTP URLs.</span></span><br><span class="line">      <span class="keyword">if</span> (url.regionMatches(<span class="keyword">true</span>, <span class="number">0</span>, <span class="string">"ws:"</span>, <span class="number">0</span>, <span class="number">3</span>)) &#123;</span><br><span class="line">        url = <span class="string">"http:"</span> + url.substring(<span class="number">3</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url.regionMatches(<span class="keyword">true</span>, <span class="number">0</span>, <span class="string">"wss:"</span>, <span class="number">0</span>, <span class="number">4</span>)) &#123;</span><br><span class="line">        url = <span class="string">"https:"</span> + url.substring(<span class="number">4</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> url(HttpUrl.get(url));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// post以及其他方法都是通过传入字符POST或者其他方式调用method</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> method(<span class="string">"GET"</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">head</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> method(<span class="string">"HEAD"</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">post</span><span class="params">(RequestBody body)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> method(<span class="string">"POST"</span>, body);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">delete</span><span class="params">(@Nullable RequestBody body)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> method(<span class="string">"DELETE"</span>, body);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> delete(Util.EMPTY_REQUEST);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">put</span><span class="params">(RequestBody body)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> method(<span class="string">"PUT"</span>, body);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">patch</span><span class="params">(RequestBody body)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> method(<span class="string">"PATCH"</span>, body);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// method方法还是将Request的属性设为method传入的值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">method</span><span class="params">(String method, @Nullable RequestBody body)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (method == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"method == null"</span>);</span><br><span class="line">      <span class="keyword">if</span> (method.length() == <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"method.length() == 0"</span>);</span><br><span class="line">      <span class="keyword">if</span> (body != <span class="keyword">null</span> &amp;&amp; !HttpMethod.permitsRequestBody(method)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"method "</span> + method + <span class="string">" must not have a request body."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (body == <span class="keyword">null</span> &amp;&amp; HttpMethod.requiresRequestBody(method)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"method "</span> + method + <span class="string">" must have a request body."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.method = method;</span><br><span class="line">      <span class="keyword">this</span>.body = body;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line"><span class="comment">// build()方法返回Request对象，并且传入了上面设置的属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Request <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (url == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"url == null"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Request(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其实Request对象也没有什么具体的功能，也是类似RequestBody封装了HTTP请求的一些参数，包括url请求主机名，method请求的方法，</span></span><br><span class="line"><span class="comment">// headers这里也有headers，也就是说我们可以在RequestBody中加入请求首部参数，也可以在Request中加入请求参数，而且Request会覆盖</span></span><br><span class="line"><span class="comment">// RequestBody的参数，在两个地方都封装Header，我觉得应该是为了复用，有些时候Header对于一些请求来说都是相同的，区别只是Body不同</span></span><br><span class="line"><span class="comment">// 因此在Request中设置Header能减少冗余的代码</span></span><br><span class="line">  Request(Builder builder) &#123;</span><br><span class="line">    <span class="keyword">this</span>.url = builder.url;</span><br><span class="line">    <span class="keyword">this</span>.method = builder.method;</span><br><span class="line">    <span class="keyword">this</span>.headers = builder.headers.build();</span><br><span class="line">    <span class="keyword">this</span>.body = builder.body;</span><br><span class="line">    <span class="keyword">this</span>.tags = Util.immutableMap(builder.tags);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>以上的RequestBody和Request实际上并没有任何复杂的功能，都是对一个完整的HTTP请求参数的封装，利用了建造者模式，同时将请求数据与请求首部参数以及请求方法和主机名进行解耦，使得开发人员可以灵活的使用各个模块组建一个完整的Request，如何发送这个Request，并接收回调则是在Call中进行的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// OkHttpClient.java 之前说过OkHttpClient是Call的工厂类，通过newCall方法传入上面构造的Request实例，</span></span><br><span class="line"><span class="comment">// 得到一个Call实例，具体的实现是通过RealCall.newRealCall方法</span></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Call <span class="title">newCall</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> RealCall.newRealCall(<span class="keyword">this</span>, request, <span class="keyword">false</span> <span class="comment">/* for web socket */</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在看RealCall.newRealCall之前首先看一下Call</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据注释说明，我们直到Call是一个接口，Call接口的实现类能够完成具体的HTTP请求发送，且包含request/response对，</span></span><br><span class="line"><span class="comment">// 也就意味着可以通过Call的回调获取到服务器返回的数据，一个call不能被执行两次</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A call is a request that has been prepared for execution. A call can be canceled. As this object</span></span><br><span class="line"><span class="comment"> * represents a single request/response pair (stream), it cannot be executed twice.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Call</span> <span class="keyword">extends</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">  <span class="comment">/** Returns the original request that initiated this call. */</span></span><br><span class="line">  <span class="function">Request <span class="title">request</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// execute方法执行时会阻塞当前线程，直到处理完response</span></span><br><span class="line">  <span class="function">Response <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"><span class="comment">// enqueue方法会通过dispatcher安排request进入队列等待执行，执行完毕后通过Callback回调</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Callback responseCallback)</span></span>;</span><br><span class="line"><span class="comment">// 调用cancel方法可以取消request</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 判断call是否已经在执行，比如调用了execute或者enqueue方法</span></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">isExecuted</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 判断call是否被取消</span></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">isCanceled</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 返回整个call执行期间的耗时，包括DNS寻址、连接、写入request body、服务器处理、读取response body等过程</span></span><br><span class="line">  <span class="function">Timeout <span class="title">timeout</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 复制此call，利用clone得到的call可以继续执行</span></span><br><span class="line">  <span class="function">Call <span class="title">clone</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">interface</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="function">Call <span class="title">newCall</span><span class="params">(Request request)</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RealCall实现了Call的接口，所以上面用到的方法都是在RealCall中实现的，首先看RealCall.newRealCall</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">RealCall</span><span class="params">(OkHttpClient client, Request originalRequest, <span class="keyword">boolean</span> forWebSocket)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.client = client;</span><br><span class="line">    <span class="keyword">this</span>.originalRequest = originalRequest;</span><br><span class="line">    <span class="keyword">this</span>.forWebSocket = forWebSocket;</span><br><span class="line">    <span class="keyword">this</span>.retryAndFollowUpInterceptor = <span class="keyword">new</span> RetryAndFollowUpInterceptor(client, forWebSocket);</span><br><span class="line">    <span class="keyword">this</span>.timeout = <span class="keyword">new</span> AsyncTimeout() &#123;</span><br><span class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">timedOut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cancel();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.timeout.timeout(client.callTimeoutMillis(), MILLISECONDS);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// newRealCall方法也是仅仅只做了参数传递的工作，最主要的参数是client和originalRequest</span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> RealCall <span class="title">newRealCall</span><span class="params">(OkHttpClient client, Request originalRequest, <span class="keyword">boolean</span> forWebSocket)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Safely publish the Call instance to the EventListener.</span></span><br><span class="line">    RealCall call = <span class="keyword">new</span> RealCall(client, originalRequest, forWebSocket);</span><br><span class="line">    call.eventListener = client.eventListenerFactory().create(call);</span><br><span class="line">    <span class="keyword">return</span> call;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>当我们调用call.execute方法时</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Response <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  <span class="comment">// synchronized锁，确保同一个Call不会被执行两次</span></span><br><span class="line">  <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (executed) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Already Executed"</span>);</span><br><span class="line">    executed = <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// captureCallStackTrace跟踪call执行的堆栈</span></span><br><span class="line">  captureCallStackTrace();</span><br><span class="line">  <span class="comment">// timeout.enter开始记录timeout</span></span><br><span class="line">  timeout.enter();</span><br><span class="line">  <span class="comment">// 将Call Start事件传递出去，通过自定义eventListenerFactory可以对事件进行处理</span></span><br><span class="line">  eventListener.callStart(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//  通过dispatcher调用executed执行请求发送，实际上只是把call加到一个队列中，并没有执行发送请求</span></span><br><span class="line">    client.dispatcher().executed(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">// 通过getResponseWithInterceptorChain获取服务器返回的response，这里才是真正的call被发送出去</span></span><br><span class="line">    Response result = getResponseWithInterceptorChain();</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Canceled"</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e = timeoutExit(e);</span><br><span class="line">    eventListener.callFailed(<span class="keyword">this</span>, e);</span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    client.dispatcher().finished(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Dispatcher.java client.dispatcher().executed(this);</span></span><br><span class="line">  <span class="comment">/** Used by &#123;<span class="doctag">@code</span> Call#execute&#125; to signal it is in-flight. */</span></span><br><span class="line">  <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">executed</span><span class="params">(RealCall call)</span> </span>&#123;</span><br><span class="line">    runningSyncCalls.add(call);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Interceptor也是一个接口，实现Interceptor接口的类可以对Request进行拦截，也就是通过</span></span><br><span class="line"><span class="comment">// 各种Interceptor来实现HTTP请求，比如这里的BridgeInterceptor、CacheInterceptor、</span></span><br><span class="line"><span class="comment">// ConnectInterceptor等等</span></span><br><span class="line">  <span class="function">Response <span class="title">getResponseWithInterceptorChain</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// Build a full stack of interceptors.</span></span><br><span class="line">    <span class="comment">// 注意默认构造的client.interceptors()为空</span></span><br><span class="line">    List&lt;Interceptor&gt; interceptors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    interceptors.addAll(client.interceptors());</span><br><span class="line">    interceptors.add(retryAndFollowUpInterceptor);</span><br><span class="line">    interceptors.add(<span class="keyword">new</span> BridgeInterceptor(client.cookieJar()));</span><br><span class="line">    interceptors.add(<span class="keyword">new</span> CacheInterceptor(client.internalCache()));</span><br><span class="line">    interceptors.add(<span class="keyword">new</span> ConnectInterceptor(client));</span><br><span class="line">    <span class="keyword">if</span> (!forWebSocket) &#123;</span><br><span class="line">      interceptors.addAll(client.networkInterceptors());</span><br><span class="line">    &#125;</span><br><span class="line">    interceptors.add(<span class="keyword">new</span> CallServerInterceptor(forWebSocket));</span><br><span class="line"><span class="comment">// 这里调用的时候，注意index为0，而RealInterceptorChain调用proceed方法</span></span><br><span class="line">    Interceptor.Chain chain = <span class="keyword">new</span> RealInterceptorChain(interceptors, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">0</span>,</span><br><span class="line">        originalRequest, <span class="keyword">this</span>, eventListener, client.connectTimeoutMillis(),</span><br><span class="line">        client.readTimeoutMillis(), client.writeTimeoutMillis());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> chain.proceed(originalRequest);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RealInterceptorChain.java chain.proceed(originalRequest)的位置，这里的index为0</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Response <span class="title">proceed</span><span class="params">(Request request, StreamAllocation streamAllocation, HttpCodec httpCodec,</span></span></span><br><span class="line"><span class="function"><span class="params">      RealConnection connection)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= interceptors.size()) <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line"></span><br><span class="line">    calls++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we already have a stream, confirm that the incoming request will use it.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.httpCodec != <span class="keyword">null</span> &amp;&amp; !<span class="keyword">this</span>.connection.supportsUrl(request.url())) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"network interceptor "</span> + interceptors.get(index - <span class="number">1</span>)</span><br><span class="line">          + <span class="string">" must retain the same host and port"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we already have a stream, confirm that this is the only call to chain.proceed().</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.httpCodec != <span class="keyword">null</span> &amp;&amp; calls &gt; <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"network interceptor "</span> + interceptors.get(index - <span class="number">1</span>)</span><br><span class="line">          + <span class="string">" must call proceed() exactly once"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 注意这里，创建了next RealInterceptorChain，index为1，而interceptors.get(index)拿的就是上文对应的retryAndFollowUpInterceptor</span></span><br><span class="line">    <span class="comment">// Call the next interceptor in the chain.</span></span><br><span class="line">    RealInterceptorChain next = <span class="keyword">new</span> RealInterceptorChain(interceptors, streamAllocation, httpCodec,</span><br><span class="line">        connection, index + <span class="number">1</span>, request, call, eventListener, connectTimeout, readTimeout,</span><br><span class="line">        writeTimeout);</span><br><span class="line">    Interceptor interceptor = interceptors.get(index);</span><br><span class="line">    <span class="comment">// 即response时通过BridgeInterceptor的intercept方法得到的</span></span><br><span class="line">    Response response = interceptor.intercept(next);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Confirm that the next interceptor made its required call to chain.proceed().</span></span><br><span class="line">    <span class="keyword">if</span> (httpCodec != <span class="keyword">null</span> &amp;&amp; index + <span class="number">1</span> &lt; interceptors.size() &amp;&amp; next.calls != <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"network interceptor "</span> + interceptor</span><br><span class="line">          + <span class="string">" must call proceed() exactly once"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Confirm that the intercepted response isn't null.</span></span><br><span class="line">    <span class="keyword">if</span> (response == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"interceptor "</span> + interceptor + <span class="string">" returned null"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (response.body() == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">          <span class="string">"interceptor "</span> + interceptor + <span class="string">" returned a response with no body"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RetryAndFollowUpInterceptor.java RetryAndFollowUpInterceptor用于请求重连，通过connectionPool</span></span><br><span class="line"><span class="comment">// 构建StreamAllocation，StreamAllocation用于管理连接、数据流以及Calls</span></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Request request = chain.request();</span><br><span class="line">    RealInterceptorChain realChain = (RealInterceptorChain) chain;</span><br><span class="line">    Call call = realChain.call();</span><br><span class="line">    EventListener eventListener = realChain.eventListener();</span><br><span class="line"></span><br><span class="line">    StreamAllocation streamAllocation = <span class="keyword">new</span> StreamAllocation(client.connectionPool(),</span><br><span class="line">        createAddress(request.url()), call, eventListener, callStackTrace);</span><br><span class="line">    <span class="keyword">this</span>.streamAllocation = streamAllocation;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> followUpCount = <span class="number">0</span>;</span><br><span class="line">    Response priorResponse = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 通过while死循环发送request</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (canceled) &#123;</span><br><span class="line">        streamAllocation.release();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Canceled"</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      Response response;</span><br><span class="line">      <span class="keyword">boolean</span> releaseConnection = <span class="keyword">true</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 这里的realChain交接给BridgeInterceptor</span></span><br><span class="line">        response = realChain.proceed(request, streamAllocation, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        releaseConnection = <span class="keyword">false</span>;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (RouteException e) &#123;</span><br><span class="line">        <span class="comment">// The attempt to connect via a route failed. The request will not have been sent.</span></span><br><span class="line">        <span class="keyword">if</span> (!recover(e.getLastConnectException(), streamAllocation, <span class="keyword">false</span>, request)) &#123;</span><br><span class="line">          <span class="keyword">throw</span> e.getFirstConnectException();</span><br><span class="line">        &#125;</span><br><span class="line">        releaseConnection = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="comment">// An attempt to communicate with a server failed. The request may have been sent.</span></span><br><span class="line">        <span class="keyword">boolean</span> requestSendStarted = !(e <span class="keyword">instanceof</span> ConnectionShutdownException);</span><br><span class="line">        <span class="keyword">if</span> (!recover(e, streamAllocation, requestSendStarted, request)) <span class="keyword">throw</span> e;</span><br><span class="line">        releaseConnection = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// We're throwing an unchecked exception. Release any resources.</span></span><br><span class="line">        <span class="keyword">if</span> (releaseConnection) &#123;</span><br><span class="line">          streamAllocation.streamFailed(<span class="keyword">null</span>);</span><br><span class="line">          streamAllocation.release();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Attach the prior response if it exists. Such responses never have a body.</span></span><br><span class="line">      <span class="keyword">if</span> (priorResponse != <span class="keyword">null</span>) &#123;</span><br><span class="line">        response = response.newBuilder()</span><br><span class="line">            .priorResponse(priorResponse.newBuilder()</span><br><span class="line">                    .body(<span class="keyword">null</span>)</span><br><span class="line">                    .build())</span><br><span class="line">            .build();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 仅仅在发送请求后接收到response，并且没有后续的request时返回，返回值为response</span></span><br><span class="line">      Request followUp;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        followUp = followUpRequest(response, streamAllocation.route());</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        streamAllocation.release();</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (followUp == <span class="keyword">null</span>) &#123;</span><br><span class="line">        streamAllocation.release();</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      closeQuietly(response.body());</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (++followUpCount &gt; MAX_FOLLOW_UPS) &#123;</span><br><span class="line">        streamAllocation.release();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ProtocolException(<span class="string">"Too many follow-up requests: "</span> + followUpCount);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (followUp.body() <span class="keyword">instanceof</span> UnrepeatableRequestBody) &#123;</span><br><span class="line">        streamAllocation.release();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> HttpRetryException(<span class="string">"Cannot retry streamed HTTP body"</span>, response.code());</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!sameConnection(response, followUp.url())) &#123;</span><br><span class="line">        streamAllocation.release();</span><br><span class="line">        streamAllocation = <span class="keyword">new</span> StreamAllocation(client.connectionPool(),</span><br><span class="line">            createAddress(followUp.url()), call, eventListener, callStackTrace);</span><br><span class="line">        <span class="keyword">this</span>.streamAllocation = streamAllocation;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (streamAllocation.codec() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Closing the body of "</span> + response</span><br><span class="line">            + <span class="string">" didn't close its backing stream. Bad interceptor?"</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      request = followUp;</span><br><span class="line">      priorResponse = response;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BridgeInterceptor.java</span></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 通过chain得到request</span></span><br><span class="line">    Request userRequest = chain.request();</span><br><span class="line">    Request.Builder requestBuilder = userRequest.newBuilder();</span><br><span class="line">    <span class="comment">// 拿到body</span></span><br><span class="line">    RequestBody body = userRequest.body();</span><br><span class="line">    <span class="keyword">if</span> (body != <span class="keyword">null</span>) &#123;</span><br><span class="line">      MediaType contentType = body.contentType();</span><br><span class="line">      <span class="keyword">if</span> (contentType != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 重新构造header</span></span><br><span class="line">        requestBuilder.header(<span class="string">"Content-Type"</span>, contentType.toString());</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">long</span> contentLength = body.contentLength();</span><br><span class="line">      <span class="keyword">if</span> (contentLength != -<span class="number">1</span>) &#123;</span><br><span class="line">        requestBuilder.header(<span class="string">"Content-Length"</span>, Long.toString(contentLength));</span><br><span class="line">        requestBuilder.removeHeader(<span class="string">"Transfer-Encoding"</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        requestBuilder.header(<span class="string">"Transfer-Encoding"</span>, <span class="string">"chunked"</span>);</span><br><span class="line">        requestBuilder.removeHeader(<span class="string">"Content-Length"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (userRequest.header(<span class="string">"Host"</span>) == <span class="keyword">null</span>) &#123;</span><br><span class="line">      requestBuilder.header(<span class="string">"Host"</span>, hostHeader(userRequest.url(), <span class="keyword">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (userRequest.header(<span class="string">"Connection"</span>) == <span class="keyword">null</span>) &#123;</span><br><span class="line">      requestBuilder.header(<span class="string">"Connection"</span>, <span class="string">"Keep-Alive"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we add an "Accept-Encoding: gzip" header field we're responsible for also decompressing</span></span><br><span class="line">    <span class="comment">// the transfer stream.</span></span><br><span class="line">    <span class="keyword">boolean</span> transparentGzip = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (userRequest.header(<span class="string">"Accept-Encoding"</span>) == <span class="keyword">null</span> &amp;&amp; userRequest.header(<span class="string">"Range"</span>) == <span class="keyword">null</span>) &#123;</span><br><span class="line">      transparentGzip = <span class="keyword">true</span>;</span><br><span class="line">      requestBuilder.header(<span class="string">"Accept-Encoding"</span>, <span class="string">"gzip"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 构造带Cookies的header，默认Cookies为空</span></span><br><span class="line">    List&lt;Cookie&gt; cookies = cookieJar.loadForRequest(userRequest.url());</span><br><span class="line">    <span class="keyword">if</span> (!cookies.isEmpty()) &#123;</span><br><span class="line">      requestBuilder.header(<span class="string">"Cookie"</span>, cookieHeader(cookies));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (userRequest.header(<span class="string">"User-Agent"</span>) == <span class="keyword">null</span>) &#123;</span><br><span class="line">      requestBuilder.header(<span class="string">"User-Agent"</span>, Version.userAgent());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 注意这里的chain的index为1，所以再次调用chain.proceed会使index为2，即CacheInterceptor</span></span><br><span class="line">    Response networkResponse = chain.proceed(requestBuilder.build());</span><br><span class="line"></span><br><span class="line">    HttpHeaders.receiveHeaders(cookieJar, userRequest.url(), networkResponse.headers());</span><br><span class="line"></span><br><span class="line">    Response.Builder responseBuilder = networkResponse.newBuilder()</span><br><span class="line">        .request(userRequest);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (transparentGzip</span><br><span class="line">        &amp;&amp; <span class="string">"gzip"</span>.equalsIgnoreCase(networkResponse.header(<span class="string">"Content-Encoding"</span>))</span><br><span class="line">        &amp;&amp; HttpHeaders.hasBody(networkResponse)) &#123;</span><br><span class="line">      GzipSource responseBody = <span class="keyword">new</span> GzipSource(networkResponse.body().source());</span><br><span class="line">      Headers strippedHeaders = networkResponse.headers().newBuilder()</span><br><span class="line">          .removeAll(<span class="string">"Content-Encoding"</span>)</span><br><span class="line">          .removeAll(<span class="string">"Content-Length"</span>)</span><br><span class="line">          .build();</span><br><span class="line">      responseBuilder.headers(strippedHeaders);</span><br><span class="line">      String contentType = networkResponse.header(<span class="string">"Content-Type"</span>);</span><br><span class="line">      responseBuilder.body(<span class="keyword">new</span> RealResponseBody(contentType, -<span class="number">1L</span>, Okio.buffer(responseBody)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> responseBuilder.build();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CacheInterceptor.java CacheInterceptor用于从cache中取request以及向cache中写入response</span></span><br><span class="line"><span class="comment">// 如果cache中保存了相同request的response，那么可以实现断网也可以获取response</span></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Response cacheCandidate = cache != <span class="keyword">null</span></span><br><span class="line">        ? cache.get(chain.request())</span><br><span class="line">        : <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> now = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    CacheStrategy strategy = <span class="keyword">new</span> CacheStrategy.Factory(now, chain.request(), cacheCandidate).get();</span><br><span class="line">    Request networkRequest = strategy.networkRequest;</span><br><span class="line">    Response cacheResponse = strategy.cacheResponse;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cache != <span class="keyword">null</span>) &#123;</span><br><span class="line">      cache.trackResponse(strategy);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cacheCandidate != <span class="keyword">null</span> &amp;&amp; cacheResponse == <span class="keyword">null</span>) &#123;</span><br><span class="line">      closeQuietly(cacheCandidate.body()); <span class="comment">// The cache candidate wasn't applicable. Close it.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we're forbidden from using the network and the cache is insufficient, fail.</span></span><br><span class="line">    <span class="keyword">if</span> (networkRequest == <span class="keyword">null</span> &amp;&amp; cacheResponse == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Response.Builder()</span><br><span class="line">          .request(chain.request())</span><br><span class="line">          .protocol(Protocol.HTTP_1_1)</span><br><span class="line">          .code(<span class="number">504</span>)</span><br><span class="line">          .message(<span class="string">"Unsatisfiable Request (only-if-cached)"</span>)</span><br><span class="line">          .body(Util.EMPTY_RESPONSE)</span><br><span class="line">          .sentRequestAtMillis(-<span class="number">1L</span>)</span><br><span class="line">          .receivedResponseAtMillis(System.currentTimeMillis())</span><br><span class="line">          .build();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 没有网络则从cache中取对应的response</span></span><br><span class="line">    <span class="comment">// If we don't need the network, we're done.</span></span><br><span class="line">    <span class="keyword">if</span> (networkRequest == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> cacheResponse.newBuilder()</span><br><span class="line">          .cacheResponse(stripBody(cacheResponse))</span><br><span class="line">          .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Response networkResponse = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 注意这里同理chain交接给下一个ConnectInterceptor</span></span><br><span class="line">      networkResponse = chain.proceed(networkRequest);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="comment">// If we're crashing on I/O or otherwise, don't leak the cache body.</span></span><br><span class="line">      <span class="keyword">if</span> (networkResponse == <span class="keyword">null</span> &amp;&amp; cacheCandidate != <span class="keyword">null</span>) &#123;</span><br><span class="line">        closeQuietly(cacheCandidate.body());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we have a cache response too, then we're doing a conditional get.</span></span><br><span class="line">    <span class="keyword">if</span> (cacheResponse != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (networkResponse.code() == HTTP_NOT_MODIFIED) &#123;</span><br><span class="line">        Response response = cacheResponse.newBuilder()</span><br><span class="line">            .headers(combine(cacheResponse.headers(), networkResponse.headers()))</span><br><span class="line">            .sentRequestAtMillis(networkResponse.sentRequestAtMillis())</span><br><span class="line">            .receivedResponseAtMillis(networkResponse.receivedResponseAtMillis())</span><br><span class="line">            .cacheResponse(stripBody(cacheResponse))</span><br><span class="line">            .networkResponse(stripBody(networkResponse))</span><br><span class="line">            .build();</span><br><span class="line">        networkResponse.body().close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update the cache after combining headers but before stripping the</span></span><br><span class="line">        <span class="comment">// Content-Encoding header (as performed by initContentStream()).</span></span><br><span class="line">        cache.trackConditionalCacheHit();</span><br><span class="line">        cache.update(cacheResponse, response);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        closeQuietly(cacheResponse.body());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Response response = networkResponse.newBuilder()</span><br><span class="line">        .cacheResponse(stripBody(cacheResponse))</span><br><span class="line">        .networkResponse(stripBody(networkResponse))</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cache != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (HttpHeaders.hasBody(response) &amp;&amp; CacheStrategy.isCacheable(response, networkRequest)) &#123;</span><br><span class="line">        <span class="comment">// Offer this request to the cache.</span></span><br><span class="line">        CacheRequest cacheRequest = cache.put(response);</span><br><span class="line">        <span class="keyword">return</span> cacheWritingResponse(cacheRequest, response);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (HttpMethod.invalidatesCache(networkRequest.method())) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          cache.remove(networkRequest);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ignored) &#123;</span><br><span class="line">          <span class="comment">// The cache cannot be written.</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ConnectInterceptor.java StreamAllocation在RetryAndFollowUpInterceptor中被构造用于管理连接</span></span><br><span class="line"><span class="comment">// 因此ConnectInterceptor用于创建真实的HTTP连接RealConnection</span></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    RealInterceptorChain realChain = (RealInterceptorChain) chain;</span><br><span class="line">    Request request = realChain.request();</span><br><span class="line">    StreamAllocation streamAllocation = realChain.streamAllocation();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We need the network to satisfy this request. Possibly for validating a conditional GET.</span></span><br><span class="line">    <span class="keyword">boolean</span> doExtensiveHealthChecks = !request.method().equals(<span class="string">"GET"</span>);</span><br><span class="line">    HttpCodec httpCodec = streamAllocation.newStream(client, chain, doExtensiveHealthChecks);</span><br><span class="line">    RealConnection connection = streamAllocation.connection();</span><br><span class="line"><span class="comment">// 同理下一任是CallServerInterceptor，因为networkInterceptors为空</span></span><br><span class="line">    <span class="keyword">return</span> realChain.proceed(request, streamAllocation, httpCodec, connection);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CallServerInterceptor.java CallServerInterceptor是最后一任Interceptor，它的功能是发送网络Call到服务器</span></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    RealInterceptorChain realChain = (RealInterceptorChain) chain;</span><br><span class="line">    HttpCodec httpCodec = realChain.httpStream();</span><br><span class="line">    StreamAllocation streamAllocation = realChain.streamAllocation();</span><br><span class="line">    RealConnection connection = (RealConnection) realChain.connection();</span><br><span class="line">    Request request = realChain.request();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> sentRequestMillis = System.currentTimeMillis();</span><br><span class="line"><span class="comment">// 将HeadersStart和HeadersEnd通过eventListener传出去</span></span><br><span class="line">    realChain.eventListener().requestHeadersStart(realChain.call());</span><br><span class="line">    <span class="comment">// 发送请求的方式是通过httpCodec数据流，首先传出去request</span></span><br><span class="line">    httpCodec.writeRequestHeaders(request);</span><br><span class="line">    realChain.eventListener().requestHeadersEnd(realChain.call(), request);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后通过httpCodec读取response，其中涉及到request的首部是否包含Expect: 100-continue，不过问题不大</span></span><br><span class="line">    Response.Builder responseBuilder = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (HttpMethod.permitsRequestBody(request.method()) &amp;&amp; request.body() != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">// If there's a "Expect: 100-continue" header on the request, wait for a "HTTP/1.1 100</span></span><br><span class="line">      <span class="comment">// Continue" response before transmitting the request body. If we don't get that, return</span></span><br><span class="line">      <span class="comment">// what we did get (such as a 4xx response) without ever transmitting the request body.</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="string">"100-continue"</span>.equalsIgnoreCase(request.header(<span class="string">"Expect"</span>))) &#123;</span><br><span class="line">        <span class="comment">// 如果request的首部包含Expect: 100-continue参数，responseBuilder会被置为null</span></span><br><span class="line">        httpCodec.flushRequest();</span><br><span class="line">        realChain.eventListener().responseHeadersStart(realChain.call());</span><br><span class="line">        responseBuilder = httpCodec.readResponseHeaders(<span class="keyword">true</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (responseBuilder == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Write the request body if the "Expect: 100-continue" expectation was met.</span></span><br><span class="line">        realChain.eventListener().requestBodyStart(realChain.call());</span><br><span class="line">        <span class="keyword">long</span> contentLength = request.body().contentLength();</span><br><span class="line">        <span class="comment">// 通过httpCodec创建request数据流，可以通过CountingSink监控数据传输</span></span><br><span class="line">        CountingSink requestBodyOut =</span><br><span class="line">            <span class="keyword">new</span> CountingSink(httpCodec.createRequestBody(request, contentLength));</span><br><span class="line">        BufferedSink bufferedRequestBody = Okio.buffer(requestBodyOut);</span><br><span class="line"></span><br><span class="line">        request.body().writeTo(bufferedRequestBody);</span><br><span class="line">        bufferedRequestBody.close();</span><br><span class="line">        realChain.eventListener()</span><br><span class="line">            .requestBodyEnd(realChain.call(), requestBodyOut.successfulCount);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!connection.isMultiplexed()) &#123;</span><br><span class="line">        <span class="comment">// If the "Expect: 100-continue" expectation wasn't met, prevent the HTTP/1 connection</span></span><br><span class="line">        <span class="comment">// from being reused. Otherwise we're still obligated to transmit the request body to</span></span><br><span class="line">        <span class="comment">// leave the connection in a consistent state.</span></span><br><span class="line">        streamAllocation.noNewStreams();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    httpCodec.finishRequest();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (responseBuilder == <span class="keyword">null</span>) &#123;</span><br><span class="line">      realChain.eventListener().responseHeadersStart(realChain.call());</span><br><span class="line">      <span class="comment">// 通过httpCodec的readResponseHeaders读取response的header信息，此时responseBuilder不为空</span></span><br><span class="line">      responseBuilder = httpCodec.readResponseHeaders(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 通过responseBuilder构建完整的response</span></span><br><span class="line">    Response response = responseBuilder</span><br><span class="line">        .request(request)</span><br><span class="line">        .handshake(streamAllocation.connection().handshake())</span><br><span class="line">        .sentRequestAtMillis(sentRequestMillis)</span><br><span class="line">        .receivedResponseAtMillis(System.currentTimeMillis())</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> code = response.code();</span><br><span class="line">    <span class="keyword">if</span> (code == <span class="number">100</span>) &#123;</span><br><span class="line">      <span class="comment">// server sent a 100-continue even though we did not request one.</span></span><br><span class="line">      <span class="comment">// try again to read the actual response</span></span><br><span class="line">      responseBuilder = httpCodec.readResponseHeaders(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">      response = responseBuilder</span><br><span class="line">              .request(request)</span><br><span class="line">              .handshake(streamAllocation.connection().handshake())</span><br><span class="line">              .sentRequestAtMillis(sentRequestMillis)</span><br><span class="line">              .receivedResponseAtMillis(System.currentTimeMillis())</span><br><span class="line">              .build();</span><br><span class="line"></span><br><span class="line">      code = response.code();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    realChain.eventListener()</span><br><span class="line">            .responseHeadersEnd(realChain.call(), response);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (forWebSocket &amp;&amp; code == <span class="number">101</span>) &#123;</span><br><span class="line">      <span class="comment">// Connection is upgrading, but we need to ensure interceptors see a non-null response body.</span></span><br><span class="line">      response = response.newBuilder()</span><br><span class="line">          .body(Util.EMPTY_RESPONSE)</span><br><span class="line">          .build();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 通过httpCodec的openResponseBody创建读取response的body的数据流</span></span><br><span class="line">      response = response.newBuilder()</span><br><span class="line">          .body(httpCodec.openResponseBody(response))</span><br><span class="line">          .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"close"</span>.equalsIgnoreCase(response.request().header(<span class="string">"Connection"</span>))</span><br><span class="line">        || <span class="string">"close"</span>.equalsIgnoreCase(response.header(<span class="string">"Connection"</span>))) &#123;</span><br><span class="line">      streamAllocation.noNewStreams();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((code == <span class="number">204</span> || code == <span class="number">205</span>) &amp;&amp; response.body().contentLength() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ProtocolException(</span><br><span class="line">          <span class="string">"HTTP "</span> + code + <span class="string">" had non-zero Content-Length: "</span> + response.body().contentLength());</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 最后返回构建好的response</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>以上就是通过call.execute返回response的流程，这里可以发现并没有使用到Service或者多线程，因此在等待服务器响应的过程中会阻塞当前线程，因此Android中不宜直接使用execute方法。</p><blockquote><p>当我们调用call.enqueue方法时</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Callback responseCallback)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (executed) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Already Executed"</span>);</span><br><span class="line">    executed = <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  captureCallStackTrace();</span><br><span class="line">  eventListener.callStart(<span class="keyword">this</span>);</span><br><span class="line">  <span class="comment">// 通过dispatcher将responseCallback入队</span></span><br><span class="line">  client.dispatcher().enqueue(<span class="keyword">new</span> AsyncCall(responseCallback));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Dispatcher.java</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(AsyncCall call)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">      readyAsyncCalls.add(call);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用promoteAndExecute执行发送请求</span></span><br><span class="line">    promoteAndExecute();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Promotes eligible calls from &#123;<span class="doctag">@link</span> #readyAsyncCalls&#125; to &#123;<span class="doctag">@link</span> #runningAsyncCalls&#125; and runs</span></span><br><span class="line"><span class="comment">   * them on the executor service. Must not be called with synchronization because executing calls</span></span><br><span class="line"><span class="comment">   * can call into user code.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> true if the dispatcher is currently running calls.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">promoteAndExecute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">assert</span> (!Thread.holdsLock(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">    List&lt;AsyncCall&gt; executableCalls = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">boolean</span> isRunning;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">      <span class="comment">// 将readyAsyncCalls中的Call加入到executableCalls中</span></span><br><span class="line">      <span class="keyword">for</span> (Iterator&lt;AsyncCall&gt; i = readyAsyncCalls.iterator(); i.hasNext(); ) &#123;</span><br><span class="line">        AsyncCall asyncCall = i.next();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (runningAsyncCalls.size() &gt;= maxRequests) <span class="keyword">break</span>; <span class="comment">// Max capacity.</span></span><br><span class="line">        <span class="keyword">if</span> (runningCallsForHost(asyncCall) &gt;= maxRequestsPerHost) <span class="keyword">continue</span>; <span class="comment">// Host max capacity.</span></span><br><span class="line"></span><br><span class="line">        i.remove();</span><br><span class="line">        executableCalls.add(asyncCall);</span><br><span class="line">        runningAsyncCalls.add(asyncCall);</span><br><span class="line">      &#125;</span><br><span class="line">      isRunning = runningCallsCount() &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, size = executableCalls.size(); i &lt; size; i++) &#123;</span><br><span class="line">      AsyncCall asyncCall = executableCalls.get(i);</span><br><span class="line">      <span class="comment">// 通过遍历executableCalls，调用每一个Call的executeOn方法，其中使用到了初始化过程中引入的线程池executorService</span></span><br><span class="line">      asyncCall.executeOn(executorService());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> isRunning;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> ExecutorService <span class="title">executorService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (executorService == <span class="keyword">null</span>) &#123;</span><br><span class="line">      executorService = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE, <span class="number">60</span>, TimeUnit.SECONDS,</span><br><span class="line">          <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;(), Util.threadFactory(<span class="string">"OkHttp Dispatcher"</span>, <span class="keyword">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> executorService;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Attempt to enqueue this async call on &#123;<span class="doctag">@code</span> executorService&#125;. This will attempt to clean up</span></span><br><span class="line"><span class="comment">     * if the executor has been shut down by reporting the call as failed.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">executeOn</span><span class="params">(ExecutorService executorService)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">assert</span> (!Thread.holdsLock(client.dispatcher()));</span><br><span class="line">      <span class="keyword">boolean</span> success = <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 关键代码通过线程池executorService执行此Call，又因为AsyncCall继承自NamedRunnable，因此，调用</span></span><br><span class="line">        <span class="comment">// AsyncCall的run方法时，执行的是NamedRunnable的run</span></span><br><span class="line">        executorService.execute(<span class="keyword">this</span>);</span><br><span class="line">        success = <span class="keyword">true</span>;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (RejectedExecutionException e) &#123;</span><br><span class="line">        InterruptedIOException ioException = <span class="keyword">new</span> InterruptedIOException(<span class="string">"executor rejected"</span>);</span><br><span class="line">        ioException.initCause(e);</span><br><span class="line">        eventListener.callFailed(RealCall.<span class="keyword">this</span>, ioException);</span><br><span class="line">        responseCallback.onFailure(RealCall.<span class="keyword">this</span>, ioException);</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">          client.dispatcher().finished(<span class="keyword">this</span>); <span class="comment">// This call is no longer running!</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Runnable implementation which always sets its thread name.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">NamedRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">NamedRunnable</span><span class="params">(String format, Object... args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = Util.format(format, args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String oldName = Thread.currentThread().getName();</span><br><span class="line">    Thread.currentThread().setName(name);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 这里的execute由AsyncCall实现</span></span><br><span class="line">      execute();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      Thread.currentThread().setName(oldName);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> signalledCallback = <span class="keyword">false</span>;</span><br><span class="line">    timeout.enter();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 最终又回到了getResponseWithInterceptorChain方法，后面的不用多说</span></span><br><span class="line">      Response response = getResponseWithInterceptorChain();</span><br><span class="line">      <span class="keyword">if</span> (retryAndFollowUpInterceptor.isCanceled()) &#123;</span><br><span class="line">        signalledCallback = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// 与此同时我们通过responseCallback.onFailure将事件回调出去</span></span><br><span class="line">        responseCallback.onFailure(RealCall.<span class="keyword">this</span>, <span class="keyword">new</span> IOException(<span class="string">"Canceled"</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        signalledCallback = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// 同上</span></span><br><span class="line">        responseCallback.onResponse(RealCall.<span class="keyword">this</span>, response);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      e = timeoutExit(e);</span><br><span class="line">      <span class="keyword">if</span> (signalledCallback) &#123;</span><br><span class="line">        <span class="comment">// Do not signal the callback twice!</span></span><br><span class="line">        Platform.get().log(INFO, <span class="string">"Callback failure for "</span> + toLoggableString(), e);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        eventListener.callFailed(RealCall.<span class="keyword">this</span>, e);</span><br><span class="line">        responseCallback.onFailure(RealCall.<span class="keyword">this</span>, e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      client.dispatcher().finished(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>综上，OkHttp的源码中采用了非常多的有意思的设计模式，比如建造者模式，对于HTTP请求来说，我们需要一些公用的资源比如线程池、连接池等，将这些公共资源设置在OkHttpClient中，然后通过单例模式引用，节省了很多资源消耗；</p><p>对于RequestBody以及Request这种参数设置非常多的实体，通过建造者模式保存其参数；</p><p>在构建请求实体Call的时候采用了OkHttpClient工厂类，同时发送request的过程中利用了链式传递的方式，既增加了开发人员自定义的Interceptor，又可以利用原本定义好的Interceptor。</p><h2 id="3-retrofit"><a class="markdownIt-Anchor" href="#3-retrofit"></a> 3. Retrofit</h2><p>Retrofit也是一个网络请求框架，且Retrofit是基于OkHttp的，实际网络请求的功能由OkHttp来实现，但是Retrofit实现了额外的功能，比如利用Gson进行数据实体化、兼容RxJava等等，是一个比较流行的网络请求工具。</p><h3 id="31-retrofit使用"><a class="markdownIt-Anchor" href="#31-retrofit使用"></a> 3.1 Retrofit使用</h3><p>需要<code>implementation 'com.squareup.retrofit2:retrofit:2.6.0'</code></p><p>以请求和风天气数据为例，通过GET请求，加上location参数和key参数，服务器返回json数据，我们将json数据实体化，首先看一下返回的json格式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"HeWeather6"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"basic"</span>: &#123;</span><br><span class="line">                <span class="attr">"cid"</span>: <span class="string">"CN101010100"</span>,</span><br><span class="line">                <span class="attr">"location"</span>: <span class="string">"北京"</span>,</span><br><span class="line">                <span class="attr">"parent_city"</span>: <span class="string">"北京"</span>,</span><br><span class="line">                <span class="attr">"admin_area"</span>: <span class="string">"北京"</span>,</span><br><span class="line">                <span class="attr">"cnty"</span>: <span class="string">"中国"</span>,</span><br><span class="line">                <span class="attr">"lat"</span>: <span class="string">"39.90498734"</span>,</span><br><span class="line">                <span class="attr">"lon"</span>: <span class="string">"116.4052887"</span>,</span><br><span class="line">                <span class="attr">"tz"</span>: <span class="string">"+8.00"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"update"</span>: &#123;</span><br><span class="line">                <span class="attr">"loc"</span>: <span class="string">"2019-07-18 16:45"</span>,</span><br><span class="line">                <span class="attr">"utc"</span>: <span class="string">"2019-07-18 08:45"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"status"</span>: <span class="string">"ok"</span>,</span><br><span class="line">            <span class="attr">"now"</span>: &#123;</span><br><span class="line">                <span class="attr">"cloud"</span>: <span class="string">"10"</span>,</span><br><span class="line">                <span class="attr">"cond_code"</span>: <span class="string">"101"</span>,</span><br><span class="line">                <span class="attr">"cond_txt"</span>: <span class="string">"多云"</span>,</span><br><span class="line">                <span class="attr">"fl"</span>: <span class="string">"35"</span>,</span><br><span class="line">                <span class="attr">"hum"</span>: <span class="string">"54"</span>,</span><br><span class="line">                <span class="attr">"pcpn"</span>: <span class="string">"0.0"</span>,</span><br><span class="line">                <span class="attr">"pres"</span>: <span class="string">"1000"</span>,</span><br><span class="line">                <span class="attr">"tmp"</span>: <span class="string">"32"</span>,</span><br><span class="line">                <span class="attr">"vis"</span>: <span class="string">"6"</span>,</span><br><span class="line">                <span class="attr">"wind_deg"</span>: <span class="string">"279"</span>,</span><br><span class="line">                <span class="attr">"wind_dir"</span>: <span class="string">"西风"</span>,</span><br><span class="line">                <span class="attr">"wind_sc"</span>: <span class="string">"1"</span>,</span><br><span class="line">                <span class="attr">"wind_spd"</span>: <span class="string">"3"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>1.根据json数据构建我们的实体类WeatherEntity，这里使用的Android Studio的插件GsonFormat，可以直接根据json数据生成代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;HeWeather6Bean&gt; HeWeather6;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;HeWeather6Bean&gt; <span class="title">getHeWeather6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HeWeather6;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeWeather6</span><span class="params">(List&lt;HeWeather6Bean&gt; HeWeather6)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.HeWeather6 = HeWeather6;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 重写以下toString方法，便于后续观察数据传输是否正确</span></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HeWeather6.get(<span class="number">0</span>).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HeWeather6Bean</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * basic : &#123;"cid":"CN101010100","location":"北京","parent_city":"北京","admin_area":"北京","cnty":"中国","lat":"39.90498734","lon":"116.4052887","tz":"+8.00"&#125;</span></span><br><span class="line"><span class="comment">         * update : &#123;"loc":"2019-07-18 16:45","utc":"2019-07-18 08:45"&#125;</span></span><br><span class="line"><span class="comment">         * status : ok</span></span><br><span class="line"><span class="comment">         * now : &#123;"cloud":"10","cond_code":"101","cond_txt":"多云","fl":"35","hum":"54","pcpn":"0.0","pres":"1000","tmp":"32","vis":"6","wind_deg":"279","wind_dir":"西风","wind_sc":"1","wind_spd":"3"&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> BasicBean basic;</span><br><span class="line">        <span class="keyword">private</span> UpdateBean update;</span><br><span class="line">        <span class="keyword">private</span> String status;</span><br><span class="line">        <span class="keyword">private</span> NowBean now;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@NonNull</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> status + <span class="string">" \n "</span> + basic.toString() + <span class="string">" \n "</span> + update.toString() + <span class="string">" \n "</span> + now.toString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> BasicBean <span class="title">getBasic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> basic;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBasic</span><span class="params">(BasicBean basic)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.basic = basic;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> UpdateBean <span class="title">getUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> update;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpdate</span><span class="params">(UpdateBean update)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.update = update;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> status;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatus</span><span class="params">(String status)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.status = status;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> NowBean <span class="title">getNow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> now;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNow</span><span class="params">(NowBean now)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.now = now;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicBean</span> </span>&#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * cid : CN101010100</span></span><br><span class="line"><span class="comment">             * location : 北京</span></span><br><span class="line"><span class="comment">             * parent_city : 北京</span></span><br><span class="line"><span class="comment">             * admin_area : 北京</span></span><br><span class="line"><span class="comment">             * cnty : 中国</span></span><br><span class="line"><span class="comment">             * lat : 39.90498734</span></span><br><span class="line"><span class="comment">             * lon : 116.4052887</span></span><br><span class="line"><span class="comment">             * tz : +8.00</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> String cid;</span><br><span class="line">            <span class="keyword">private</span> String location;</span><br><span class="line">            <span class="keyword">private</span> String parent_city;</span><br><span class="line">            <span class="keyword">private</span> String admin_area;</span><br><span class="line">            <span class="keyword">private</span> String cnty;</span><br><span class="line">            <span class="keyword">private</span> String lat;</span><br><span class="line">            <span class="keyword">private</span> String lon;</span><br><span class="line">            <span class="keyword">private</span> String tz;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@NonNull</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"cid : "</span> + cid + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"location : "</span> + location + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"parent_city : "</span> + parent_city + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"admin_area : "</span> + admin_area + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"cnty : "</span> + cnty + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"lat : "</span> + lat + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"lon : "</span> + lon + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"tz : "</span> + tz + <span class="string">"\n"</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getCid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> cid;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCid</span><span class="params">(String cid)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.cid = cid;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getLocation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> location;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocation</span><span class="params">(String location)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.location = location;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getParent_city</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> parent_city;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParent_city</span><span class="params">(String parent_city)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.parent_city = parent_city;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getAdmin_area</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> admin_area;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAdmin_area</span><span class="params">(String admin_area)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.admin_area = admin_area;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getCnty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> cnty;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCnty</span><span class="params">(String cnty)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.cnty = cnty;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getLat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> lat;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLat</span><span class="params">(String lat)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.lat = lat;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getLon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> lon;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLon</span><span class="params">(String lon)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.lon = lon;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getTz</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> tz;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTz</span><span class="params">(String tz)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.tz = tz;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdateBean</span> </span>&#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * loc : 2019-07-18 16:45</span></span><br><span class="line"><span class="comment">             * utc : 2019-07-18 08:45</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> String loc;</span><br><span class="line">            <span class="keyword">private</span> String utc;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@NonNull</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"loc : "</span> + loc + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"utc : "</span> + utc + <span class="string">"\n"</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getLoc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> loc;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoc</span><span class="params">(String loc)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.loc = loc;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getUtc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> utc;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUtc</span><span class="params">(String utc)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.utc = utc;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NowBean</span> </span>&#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * cloud : 10</span></span><br><span class="line"><span class="comment">             * cond_code : 101</span></span><br><span class="line"><span class="comment">             * cond_txt : 多云</span></span><br><span class="line"><span class="comment">             * fl : 35</span></span><br><span class="line"><span class="comment">             * hum : 54</span></span><br><span class="line"><span class="comment">             * pcpn : 0.0</span></span><br><span class="line"><span class="comment">             * pres : 1000</span></span><br><span class="line"><span class="comment">             * tmp : 32</span></span><br><span class="line"><span class="comment">             * vis : 6</span></span><br><span class="line"><span class="comment">             * wind_deg : 279</span></span><br><span class="line"><span class="comment">             * wind_dir : 西风</span></span><br><span class="line"><span class="comment">             * wind_sc : 1</span></span><br><span class="line"><span class="comment">             * wind_spd : 3</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> String cloud;</span><br><span class="line">            <span class="keyword">private</span> String cond_code;</span><br><span class="line">            <span class="keyword">private</span> String cond_txt;</span><br><span class="line">            <span class="keyword">private</span> String fl;</span><br><span class="line">            <span class="keyword">private</span> String hum;</span><br><span class="line">            <span class="keyword">private</span> String pcpn;</span><br><span class="line">            <span class="keyword">private</span> String pres;</span><br><span class="line">            <span class="keyword">private</span> String tmp;</span><br><span class="line">            <span class="keyword">private</span> String vis;</span><br><span class="line">            <span class="keyword">private</span> String wind_deg;</span><br><span class="line">            <span class="keyword">private</span> String wind_dir;</span><br><span class="line">            <span class="keyword">private</span> String wind_sc;</span><br><span class="line">            <span class="keyword">private</span> String wind_spd;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@NonNull</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"cloud : "</span> + cloud + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"cond_code : "</span> + cond_code + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"cond_txt : "</span> + cond_txt + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"fl : "</span> + fl + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"hum : "</span> + hum + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"pcpn : "</span> + pcpn + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"pres : "</span> + pres + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"tmp : "</span> + tmp + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"vis : "</span> + vis + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"wind_deg : "</span> + wind_deg + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"wind_dir : "</span> + wind_dir + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"wind_sc : "</span> + wind_sc + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"wind_spd : "</span> + wind_spd + <span class="string">"\n"</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getCloud</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> cloud;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCloud</span><span class="params">(String cloud)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.cloud = cloud;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getCond_code</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> cond_code;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCond_code</span><span class="params">(String cond_code)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.cond_code = cond_code;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getCond_txt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> cond_txt;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCond_txt</span><span class="params">(String cond_txt)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.cond_txt = cond_txt;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getFl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> fl;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFl</span><span class="params">(String fl)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.fl = fl;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getHum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> hum;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHum</span><span class="params">(String hum)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.hum = hum;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getPcpn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> pcpn;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPcpn</span><span class="params">(String pcpn)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.pcpn = pcpn;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getPres</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> pres;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPres</span><span class="params">(String pres)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.pres = pres;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getTmp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> tmp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTmp</span><span class="params">(String tmp)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.tmp = tmp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getVis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> vis;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVis</span><span class="params">(String vis)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.vis = vis;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getWind_deg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> wind_deg;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWind_deg</span><span class="params">(String wind_deg)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.wind_deg = wind_deg;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getWind_dir</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> wind_dir;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWind_dir</span><span class="params">(String wind_dir)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.wind_dir = wind_dir;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getWind_sc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> wind_sc;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWind_sc</span><span class="params">(String wind_sc)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.wind_sc = wind_sc;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getWind_spd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> wind_spd;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWind_spd</span><span class="params">(String wind_spd)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.wind_spd = wind_spd;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2.构建请求Api，请求url格式为<code>https://free-api.heweather.net/s6/weather/now?location=beijing&amp;key=xxx</code>，因此将<code>https://free-api.heweather.net/s6/weather/</code>作为baseUrl（baseUrl必须以<code>/</code>结尾），<code>now?</code>作为请求url主体，后面的两个作为参数通过<code>@Query</code>加入</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Api</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 通过@Query("location")的方式可以自动将location=location连接到我们的请求url后面</span></span><br><span class="line">    <span class="meta">@GET</span>(<span class="string">"now?"</span>)</span><br><span class="line">    <span class="function">Call&lt;WeatherEntity&gt; <span class="title">getNowWeather</span><span class="params">(@Query(<span class="string">"location"</span>)</span> String location, @<span class="title">Query</span><span class="params">(<span class="string">"key"</span>)</span> String key)</span>;</span><br><span class="line">    <span class="comment">// 如果需要使用RxJava，需要修改返回类型为Observable</span></span><br><span class="line">    <span class="comment">// @GET("now?")</span></span><br><span class="line">    <span class="comment">// Observable&lt;WeatherEntity&gt; getNowWeather(@Query("location") String location, @Query("key") String key);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3.构建Retrofit实体，需要<code>implementation 'com.squareup.retrofit2:converter-gson:2.6.0'</code>，这里的版本号和Retrofit相同即可，如果需要RxJava2，则添加<code>implementation 'com.squareup.retrofit2:adapter-rxjava2:2.6.0'</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">        .baseUrl(URL) <span class="comment">// 设置网络请求的公共Url地址</span></span><br><span class="line">        .addConverterFactory(GsonConverterFactory.create()) <span class="comment">// 设置数据解析器Gson</span></span><br><span class="line"><span class="comment">//      .addCallAdapterFactory(RxJava2CallAdapterFactory.create())   // 如果需要使用RxJava2     </span></span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure><blockquote><p>4.构造接口实体</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Api api = retrofit.create(Api<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>5.构造Call，这里的Call是retrofit2的Call，与okHttp的Call还是不一样的，如果是使用RxJava2，则为Observable</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">retrofit2.Call&lt;WeatherEntity&gt; call = api.getNowWeather(<span class="string">"beijing"</span>, KEY);</span><br><span class="line"><span class="comment">// Observable&lt;WeatherEntity&gt; observable = api.getNowWeather("beijing", KEY);</span></span><br></pre></td></tr></table></figure><blockquote><p>6.调用call.enqueue发送请求</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">call.enqueue(<span class="keyword">new</span> retrofit2.Callback&lt;WeatherEntity&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(retrofit2.Call&lt;WeatherEntity&gt; call, retrofit2.Response&lt;WeatherEntity&gt; response)</span> </span>&#123;</span><br><span class="line">        WeatherEntity entity = response.body();</span><br><span class="line">        textView.setText(entity.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(retrofit2.Call&lt;WeatherEntity&gt; call, Throwable t)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 如果是RxJava则按照设计在io线程请求数据，在mainThread主线程显示结果</span></span><br><span class="line"><span class="comment">// observable.subscribeOn(Schedulers.io())</span></span><br><span class="line"><span class="comment">//         .observeOn(AndroidSchedulers.mainThread())</span></span><br><span class="line"><span class="comment">//         .subscribe(new Consumer&lt;WeatherEntity&gt;() &#123;</span></span><br><span class="line"><span class="comment">//             @Override</span></span><br><span class="line"><span class="comment">//             public void accept(WeatherEntity weatherEntity) throws Exception &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//         &#125;, new Consumer&lt;Throwable&gt;() &#123;</span></span><br><span class="line"><span class="comment">//             @Override</span></span><br><span class="line"><span class="comment">//             public void accept(Throwable throwable) throws Exception &#123;</span></span><br><span class="line">                </span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//         &#125;);</span></span><br></pre></td></tr></table></figure><h3 id="32-retrofit源码分析"><a class="markdownIt-Anchor" href="#32-retrofit源码分析"></a> 3.2 Retrofit源码分析</h3><p>Retrofit也采用了建造者模式，通过<code>new Retrofit.Builder()</code>初始化Retrofit对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Retrofit.java 这里初始化Retrofit对象的时候需要参数Platform，看来是和平台相关</span></span><br><span class="line"><span class="comment">// 我们直到OkHttp是Java和Android相同都可以使用的，但是OkHttp没有做平台判断，</span></span><br><span class="line"><span class="comment">// Retrofit需要平台判断应该是与后面一些功能相关</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>(Platform.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Platform.java</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Platform PLATFORM = findPlatform();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">static</span> Platform <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> PLATFORM;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 通过findPlatform获取平台信息</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Platform <span class="title">findPlatform</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 判断的方式简单粗暴，直接通过Class.forName找系统的类，通过抛出异常终止，妙啊妙啊</span></span><br><span class="line">      Class.forName(<span class="string">"android.os.Build"</span>);</span><br><span class="line">      <span class="keyword">if</span> (Build.VERSION.SDK_INT != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 这里只看Android类</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Android();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException ignored) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 同理对Java平台</span></span><br><span class="line">      Class.forName(<span class="string">"java.util.Optional"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Java8();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException ignored) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Platform();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Android继承自Platform</span></span><br><span class="line">  <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Android</span> <span class="keyword">extends</span> <span class="title">Platform</span> </span>&#123;</span><br><span class="line">    <span class="meta">@IgnoreJRERequirement</span> <span class="comment">// Guarded by API check.</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isDefaultMethod</span><span class="params">(Method method)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (Build.VERSION.SDK_INT &lt; <span class="number">24</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> method.isDefault();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// defaultCallbackExecutor返回了MainThreadExecutor，Executor是一个接口，</span></span><br><span class="line">    <span class="comment">// 实现此接口的类需要完成execute方法，通过execute方法可以运行Runnable对象</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Executor <span class="title">defaultCallbackExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> MainThreadExecutor();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 两个关键的类CallAdapter和Converter，CallAdapter用于转换Call的类型，以RxJava2CallAdapterFactory为例，</span></span><br><span class="line">    <span class="comment">// 如果在构造Retrofit对象时加上了addCallAdapterFactory(RxJava2CallAdapterFactory.create())，</span></span><br><span class="line">    <span class="comment">// 则需要对Api类中的方法返回值类型进行修改，改为RxJava支持的Observable类型，然后就可以通过RxJava的方式发送请求；</span></span><br><span class="line">    <span class="comment">// Converter用于对Response的Body进行格式转换，以GsonConverterFactory为例，可以将Response的Body中的json数据实体化，</span></span><br><span class="line">    <span class="comment">// 直接转换为我们定义的对象。</span></span><br><span class="line">    <span class="meta">@Override</span> List&lt;? extends CallAdapter.Factory&gt; defaultCallAdapterFactories(</span><br><span class="line">        <span class="meta">@Nullable</span> Executor callbackExecutor) &#123;</span><br><span class="line">      <span class="keyword">if</span> (callbackExecutor == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line">      <span class="comment">// 根据BuildSDKVersion决定用DefaultCallAdapterFactory还是CompletableFutureCallAdapterFactory</span></span><br><span class="line">      <span class="comment">// 暂时用不到，稍后再分析</span></span><br><span class="line">      DefaultCallAdapterFactory executorFactory = <span class="keyword">new</span> DefaultCallAdapterFactory(callbackExecutor);</span><br><span class="line">      <span class="keyword">return</span> Build.VERSION.SDK_INT &gt;= <span class="number">24</span></span><br><span class="line">        ? asList(CompletableFutureCallAdapterFactory.INSTANCE, executorFactory)</span><br><span class="line">        : singletonList(executorFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">int</span> <span class="title">defaultCallAdapterFactoriesSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> Build.VERSION.SDK_INT &gt;= <span class="number">24</span> ? <span class="number">2</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> List&lt;? extends Converter.Factory&gt; defaultConverterFactories() &#123;</span><br><span class="line">      <span class="comment">// 同CallAdapter</span></span><br><span class="line">      <span class="keyword">return</span> Build.VERSION.SDK_INT &gt;= <span class="number">24</span></span><br><span class="line">          ? singletonList(OptionalConverterFactory.INSTANCE)</span><br><span class="line">          : Collections.&lt;Converter.Factory&gt;emptyList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">int</span> <span class="title">defaultConverterFactoriesSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> Build.VERSION.SDK_INT &gt;= <span class="number">24</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// MainThreadExecutor实现了Executor接口，通过主线程的Handler运行Runnable对象</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MainThreadExecutor</span> <span class="keyword">implements</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">final</span> Handler handler = <span class="keyword">new</span> Handler(Looper.getMainLooper());</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">        handler.post(r);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Retrofit.java Retrofit初始化仅保存了平台信息</span></span><br><span class="line">    Builder(Platform platform) &#123;</span><br><span class="line">      <span class="keyword">this</span>.platform = platform;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后是baseUrl方法</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Set the API base URL.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #baseUrl(HttpUrl)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">baseUrl</span><span class="params">(String baseUrl)</span> </span>&#123;</span><br><span class="line">      checkNotNull(baseUrl, <span class="string">"baseUrl == null"</span>);</span><br><span class="line">      <span class="keyword">return</span> baseUrl(HttpUrl.get(baseUrl));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 对baseUrl的格式进行判断，必须以 / 结尾，否则抛出异常</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">baseUrl</span><span class="params">(HttpUrl baseUrl)</span> </span>&#123;</span><br><span class="line">      checkNotNull(baseUrl, <span class="string">"baseUrl == null"</span>);</span><br><span class="line">      List&lt;String&gt; pathSegments = baseUrl.pathSegments();</span><br><span class="line">      <span class="keyword">if</span> (!<span class="string">""</span>.equals(pathSegments.get(pathSegments.size() - <span class="number">1</span>))) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"baseUrl must end in /: "</span> + baseUrl);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.baseUrl = baseUrl;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接下来是addConverterFactory方法，看起没有什么复杂的功能，只是将Converter.Factory的实现加入了list中，</span></span><br><span class="line"><span class="comment">// 我们稍后再看GsonConverterFactory的源码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Converter.Factory&gt; converterFactories = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Add converter factory for serialization and deserialization of objects. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">addConverterFactory</span><span class="params">(Converter.Factory factory)</span> </span>&#123;</span><br><span class="line">      converterFactories.add(checkNotNull(factory, <span class="string">"factory == null"</span>));</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后是build方法</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create the &#123;<span class="doctag">@link</span> Retrofit&#125; instance using the configured values.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Note: If neither &#123;<span class="doctag">@link</span> #client&#125; nor &#123;<span class="doctag">@link</span> #callFactory&#125; is called a default &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment">     * OkHttpClient&#125; will be created and used.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Retrofit <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (baseUrl == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Base URL required."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 注意这里初始化了一个OkHttpClient对象</span></span><br><span class="line">      okhttp3.Call.Factory callFactory = <span class="keyword">this</span>.callFactory;</span><br><span class="line">      <span class="keyword">if</span> (callFactory == <span class="keyword">null</span>) &#123;</span><br><span class="line">        callFactory = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      Executor callbackExecutor = <span class="keyword">this</span>.callbackExecutor;</span><br><span class="line">      <span class="keyword">if</span> (callbackExecutor == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 我们知道默认情况下，在Android平台，这个callbackExecutor是主线程的Executor</span></span><br><span class="line">        callbackExecutor = platform.defaultCallbackExecutor();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Make a defensive copy of the adapters and add the default Call adapter.</span></span><br><span class="line">      <span class="comment">// callAdapterFactories包括通过Retrofit初始化调用addCallAdapterFactory加入的CallAdapter.Factory，</span></span><br><span class="line">      <span class="comment">// 还包括Android平台默认的platform.defaultCallAdapterFactories</span></span><br><span class="line">      List&lt;CallAdapter.Factory&gt; callAdapterFactories = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="keyword">this</span>.callAdapterFactories);</span><br><span class="line">      callAdapterFactories.addAll(platform.defaultCallAdapterFactories(callbackExecutor));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Make a defensive copy of the converters.</span></span><br><span class="line">      <span class="comment">// converterFactories同理，但是多一个BuiltInConverters，暂时不去管不同的Converter的具体实现</span></span><br><span class="line">      List&lt;Converter.Factory&gt; converterFactories = <span class="keyword">new</span> ArrayList&lt;&gt;(</span><br><span class="line">          <span class="number">1</span> + <span class="keyword">this</span>.converterFactories.size() + platform.defaultConverterFactoriesSize());</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Add the built-in converter factory first. This prevents overriding its behavior but also</span></span><br><span class="line">      <span class="comment">// ensures correct behavior when using converters that consume all types.</span></span><br><span class="line">      converterFactories.add(<span class="keyword">new</span> BuiltInConverters());</span><br><span class="line">      converterFactories.addAll(<span class="keyword">this</span>.converterFactories);</span><br><span class="line">      converterFactories.addAll(platform.defaultConverterFactories());</span><br><span class="line">      <span class="comment">// 最后完成了Retrofit对象的初始化，引入了几个参数，包括OkHttpClient对象，baseUrl，CallAdapter，</span></span><br><span class="line">      <span class="comment">// Converter以及Executor，validateEagerly默认为false</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Retrofit(callFactory, baseUrl, unmodifiableList(converterFactories),</span><br><span class="line">          unmodifiableList(callAdapterFactories), callbackExecutor, validateEagerly);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>接下来是<code>Api api = retrofit.create(Api.class);</code>，Retrofit通过调用create方法将接口类实例化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>) <span class="comment">// Single-interface proxy creation guarded by parameter safety.</span></span><br><span class="line">  <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">create</span><span class="params">(<span class="keyword">final</span> Class&lt;T&gt; service)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// validateServiceInterface主要判断service是否为接口且没有继承自其他接口</span></span><br><span class="line">    Utils.validateServiceInterface(service);</span><br><span class="line">    <span class="comment">// validateEagerly为false</span></span><br><span class="line">    <span class="keyword">if</span> (validateEagerly) &#123;</span><br><span class="line">      eagerlyValidateMethods(service);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过代理的方式反射接口，将其实例化</span></span><br><span class="line">    <span class="keyword">return</span> (T) Proxy.newProxyInstance(service.getClassLoader(), <span class="keyword">new</span> Class&lt;?&gt;[] &#123; service &#125;,</span><br><span class="line">        <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">          <span class="comment">// 这里不同的平台有不同的方式</span></span><br><span class="line">          <span class="keyword">private</span> <span class="keyword">final</span> Platform platform = Platform.get();</span><br><span class="line">          <span class="keyword">private</span> <span class="keyword">final</span> Object[] emptyArgs = <span class="keyword">new</span> Object[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">          <span class="meta">@Override</span> <span class="keyword">public</span> <span class="meta">@Nullable</span> <span class="function">Object <span class="title">invoke</span><span class="params">(Object proxy, Method method,</span></span></span><br><span class="line"><span class="function"><span class="params">              @Nullable Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">            <span class="comment">// If the method is a method from Object then defer to normal invocation.</span></span><br><span class="line">            <span class="comment">// 这里的invoke，Object方法都走这里，比如equals、toString、hashCode什么的</span></span><br><span class="line">            <span class="keyword">if</span> (method.getDeclaringClass() == Object<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> method.invoke(<span class="keyword">this</span>, args);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果是Java Web项目则通过platform.invokeDefaultMethod</span></span><br><span class="line">            <span class="keyword">if</span> (platform.isDefaultMethod(method)) &#123;</span><br><span class="line">              <span class="keyword">return</span> platform.invokeDefaultMethod(method, service, proxy, args);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果是Android则通过loadServiceMethod</span></span><br><span class="line">            <span class="keyword">return</span> loadServiceMethod(method).invoke(args != <span class="keyword">null</span> ? args : emptyArgs);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">eagerlyValidateMethods</span><span class="params">(Class&lt;?&gt; service)</span> </span>&#123;</span><br><span class="line">    Platform platform = Platform.get();</span><br><span class="line">    <span class="keyword">for</span> (Method method : service.getDeclaredMethods()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!platform.isDefaultMethod(method) &amp;&amp; !Modifier.isStatic(method.getModifiers())) &#123;</span><br><span class="line">        loadServiceMethod(method);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ServiceMethod&lt;?&gt; loadServiceMethod(Method method) &#123;</span><br><span class="line">    ServiceMethod&lt;?&gt; result = serviceMethodCache.get(method);</span><br><span class="line">    <span class="keyword">if</span> (result != <span class="keyword">null</span>) <span class="keyword">return</span> result;</span><br><span class="line">    <span class="comment">// 默认result为空，通过单例模式取result，简而言之就是得到接口里面定义的方法</span></span><br><span class="line">    <span class="comment">// 并且在方法被调用的时候将参数传入，从而得到结果</span></span><br><span class="line">    <span class="keyword">synchronized</span> (serviceMethodCache) &#123;</span><br><span class="line">      result = serviceMethodCache.get(method);</span><br><span class="line">      <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// </span></span><br><span class="line">        result = ServiceMethod.parseAnnotations(<span class="keyword">this</span>, method);</span><br><span class="line">        serviceMethodCache.put(method, result);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ServiceMethod.java</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceMethod</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// parseAnnotations还是通过RequestFactory解析接口的方法，因为我们定义的方法是包含注解的，所以必定需要通过</span></span><br><span class="line">  <span class="comment">// 解析注解的值来控制方法的参数</span></span><br><span class="line">  <span class="keyword">static</span> &lt;T&gt; <span class="function">ServiceMethod&lt;T&gt; <span class="title">parseAnnotations</span><span class="params">(Retrofit retrofit, Method method)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// RequestFactory看名字就知道应该和构建HTTP请求相关，应该是将retrofit定义的baseUrl等信息以及接口定义的方法，</span></span><br><span class="line">    <span class="comment">// 包括注解里的信息整合</span></span><br><span class="line">    RequestFactory requestFactory = RequestFactory.parseAnnotations(retrofit, method);</span><br><span class="line"></span><br><span class="line">    Type returnType = method.getGenericReturnType();</span><br><span class="line">    <span class="keyword">if</span> (Utils.hasUnresolvableType(returnType)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> methodError(method,</span><br><span class="line">          <span class="string">"Method return type must not include a type variable or wildcard: %s"</span>, returnType);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (returnType == <span class="keyword">void</span><span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">throw</span> methodError(method, <span class="string">"Service methods cannot return void."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// HttpServiceMethod继承自ServiceMethod，实现invoke方法，即最终我们调用接口中的方式时将参数传入</span></span><br><span class="line">    <span class="keyword">return</span> HttpServiceMethod.parseAnnotations(retrofit, method, requestFactory);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">abstract</span> <span class="meta">@Nullable</span> <span class="function">T <span class="title">invoke</span><span class="params">(Object[] args)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// RequestFactory.java</span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> RequestFactory <span class="title">parseAnnotations</span><span class="params">(Retrofit retrofit, Method method)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Builder(retrofit, method).build();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// build方法构建的实例</span></span><br><span class="line">    <span class="function">RequestFactory <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (Annotation annotation : methodAnnotations) &#123;</span><br><span class="line">        <span class="comment">// 在parseMethodAnnotation中处理接口方法的注解，这里仅保存了请求方法以及</span></span><br><span class="line">        <span class="comment">// 方法注解中的value</span></span><br><span class="line">        parseMethodAnnotation(annotation);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (httpMethod == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> methodError(method, <span class="string">"HTTP method annotation is required (e.g., @GET, @POST, etc.)."</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!hasBody) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isMultipart) &#123;</span><br><span class="line">          <span class="keyword">throw</span> methodError(method,</span><br><span class="line">              <span class="string">"Multipart can only be specified on HTTP methods with request body (e.g., @POST)."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isFormEncoded) &#123;</span><br><span class="line">          <span class="keyword">throw</span> methodError(method, <span class="string">"FormUrlEncoded can only be specified on HTTP methods with "</span></span><br><span class="line">              + <span class="string">"request body (e.g., @POST)."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// parameterAnnotationsArray是通过Method传过来的，简单来说就是方法的参数注解，</span></span><br><span class="line">      <span class="comment">// 即我们使用的@Query("location")和@Query("key")</span></span><br><span class="line">      <span class="keyword">int</span> parameterCount = parameterAnnotationsArray.length;</span><br><span class="line">      parameterHandlers = <span class="keyword">new</span> ParameterHandler&lt;?&gt;[parameterCount];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>, lastParameter = parameterCount - <span class="number">1</span>; p &lt; parameterCount; p++) &#123;</span><br><span class="line">        <span class="comment">// 通过parseParameter方法处理参数注解，并保存在parameterHandlers中</span></span><br><span class="line">        parameterHandlers[p] =</span><br><span class="line">            parseParameter(p, parameterTypes[p], parameterAnnotationsArray[p], p == lastParameter);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (relativeUrl == <span class="keyword">null</span> &amp;&amp; !gotUrl) &#123;</span><br><span class="line">        <span class="keyword">throw</span> methodError(method, <span class="string">"Missing either @%s URL or @Url parameter."</span>, httpMethod);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!isFormEncoded &amp;&amp; !isMultipart &amp;&amp; !hasBody &amp;&amp; gotBody) &#123;</span><br><span class="line">        <span class="keyword">throw</span> methodError(method, <span class="string">"Non-body HTTP method cannot contain @Body."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (isFormEncoded &amp;&amp; !gotField) &#123;</span><br><span class="line">        <span class="keyword">throw</span> methodError(method, <span class="string">"Form-encoded method must contain at least one @Field."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (isMultipart &amp;&amp; !gotPart) &#123;</span><br><span class="line">        <span class="keyword">throw</span> methodError(method, <span class="string">"Multipart method must contain at least one @Part."</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> RequestFactory(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// parseMethodAnnotation处理的是方法注解即 @GET("now?") ，now?作为value</span></span><br><span class="line">    <span class="comment">// 根据不同的注解类型，构造不同的请求方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseMethodAnnotation</span><span class="params">(Annotation annotation)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (annotation <span class="keyword">instanceof</span> DELETE) &#123;</span><br><span class="line">        parseHttpMethodAndPath(<span class="string">"DELETE"</span>, ((DELETE) annotation).value(), <span class="keyword">false</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (annotation <span class="keyword">instanceof</span> GET) &#123;</span><br><span class="line">        parseHttpMethodAndPath(<span class="string">"GET"</span>, ((GET) annotation).value(), <span class="keyword">false</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (annotation <span class="keyword">instanceof</span> HEAD) &#123;</span><br><span class="line">        parseHttpMethodAndPath(<span class="string">"HEAD"</span>, ((HEAD) annotation).value(), <span class="keyword">false</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (annotation <span class="keyword">instanceof</span> PATCH) &#123;</span><br><span class="line">        parseHttpMethodAndPath(<span class="string">"PATCH"</span>, ((PATCH) annotation).value(), <span class="keyword">true</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (annotation <span class="keyword">instanceof</span> POST) &#123;</span><br><span class="line">        parseHttpMethodAndPath(<span class="string">"POST"</span>, ((POST) annotation).value(), <span class="keyword">true</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (annotation <span class="keyword">instanceof</span> PUT) &#123;</span><br><span class="line">        parseHttpMethodAndPath(<span class="string">"PUT"</span>, ((PUT) annotation).value(), <span class="keyword">true</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (annotation <span class="keyword">instanceof</span> OPTIONS) &#123;</span><br><span class="line">        parseHttpMethodAndPath(<span class="string">"OPTIONS"</span>, ((OPTIONS) annotation).value(), <span class="keyword">false</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (annotation <span class="keyword">instanceof</span> HTTP) &#123;</span><br><span class="line">        HTTP http = (HTTP) annotation;</span><br><span class="line">        parseHttpMethodAndPath(http.method(), http.path(), http.hasBody());</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (annotation <span class="keyword">instanceof</span> retrofit2.http.Headers) &#123;</span><br><span class="line">        String[] headersToParse = ((retrofit2.http.Headers) annotation).value();</span><br><span class="line">        <span class="keyword">if</span> (headersToParse.length == <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> methodError(method, <span class="string">"@Headers annotation is empty."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        headers = parseHeaders(headersToParse);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (annotation <span class="keyword">instanceof</span> Multipart) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isFormEncoded) &#123;</span><br><span class="line">          <span class="keyword">throw</span> methodError(method, <span class="string">"Only one encoding annotation is allowed."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        isMultipart = <span class="keyword">true</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (annotation <span class="keyword">instanceof</span> FormUrlEncoded) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isMultipart) &#123;</span><br><span class="line">          <span class="keyword">throw</span> methodError(method, <span class="string">"Only one encoding annotation is allowed."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        isFormEncoded = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseHttpMethodAndPath</span><span class="params">(String httpMethod, String value, <span class="keyword">boolean</span> hasBody)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.httpMethod != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> methodError(method, <span class="string">"Only one HTTP method is allowed. Found: %s and %s."</span>,</span><br><span class="line">            <span class="keyword">this</span>.httpMethod, httpMethod);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 保存了请求方法</span></span><br><span class="line">      <span class="keyword">this</span>.httpMethod = httpMethod;</span><br><span class="line">      <span class="keyword">this</span>.hasBody = hasBody;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (value.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Get the relative URL path and existing query string, if present.</span></span><br><span class="line">      <span class="comment">// 这里的判断是确保@GET("now?location=&#123;location&#125;&amp;key=&#123;key&#125;")其中的location=&#123;location&#125;&amp;key=&#123;key&#125;不会出现，</span></span><br><span class="line">      <span class="comment">// 因为需要通过@Query注解构建，所以这里不允许使用</span></span><br><span class="line">      <span class="keyword">int</span> question = value.indexOf(<span class="string">'?'</span>);</span><br><span class="line">      <span class="keyword">if</span> (question != -<span class="number">1</span> &amp;&amp; question &lt; value.length() - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// Ensure the query string does not have any named parameters.</span></span><br><span class="line">        String queryParams = value.substring(question + <span class="number">1</span>);</span><br><span class="line">        Matcher queryParamMatcher = PARAM_URL_REGEX.matcher(queryParams);</span><br><span class="line">        <span class="keyword">if</span> (queryParamMatcher.find()) &#123;</span><br><span class="line">          <span class="keyword">throw</span> methodError(method, <span class="string">"URL query string \"%s\" must not have replace block. "</span></span><br><span class="line">              + <span class="string">"For dynamic query parameters use @Query."</span>, queryParams);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.relativeUrl = value;</span><br><span class="line">      <span class="keyword">this</span>.relativeUrlParamNames = parsePathParameters(value);</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line"><span class="comment">// parseParameter方法，对于同一个参数似乎可以使用多个参数注解Annotation[] annotations</span></span><br><span class="line">    <span class="keyword">private</span> <span class="meta">@Nullable</span> ParameterHandler&lt;?&gt; parseParameter(</span><br><span class="line">        <span class="keyword">int</span> p, Type parameterType, <span class="meta">@Nullable</span> Annotation[] annotations, <span class="keyword">boolean</span> allowContinuation) &#123;</span><br><span class="line">      ParameterHandler&lt;?&gt; result = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">if</span> (annotations != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Annotation annotation : annotations) &#123;</span><br><span class="line">          <span class="comment">// 调用parseParameterAnnotation对参数注解进行处理，其中还包括传入的参数类型parameterType</span></span><br><span class="line">          ParameterHandler&lt;?&gt; annotationAction =</span><br><span class="line">              parseParameterAnnotation(p, parameterType, annotations, annotation);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (annotationAction == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> parameterError(method, p,</span><br><span class="line">                <span class="string">"Multiple Retrofit annotations found, only one allowed."</span>);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          result = annotationAction;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (allowContinuation) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (Utils.getRawType(parameterType) == Continuation<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">              isKotlinSuspendFunction = <span class="keyword">true</span>;</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">catch</span> (NoClassDefFoundError ignored) &#123;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> parameterError(method, p, <span class="string">"No Retrofit annotation found."</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// parseParameterAnnotation方法，这里判断参数注解的类型，我们只看@Query</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">private</span> ParameterHandler&lt;?&gt; parseParameterAnnotation(</span><br><span class="line">        <span class="keyword">int</span> p, Type type, Annotation[] annotations, Annotation annotation) &#123;</span><br><span class="line">      <span class="keyword">if</span> (annotation <span class="keyword">instanceof</span> Url) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (annotation <span class="keyword">instanceof</span> Path) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (annotation <span class="keyword">instanceof</span> Query) &#123;</span><br><span class="line">        validateResolvableType(p, type);</span><br><span class="line">        Query query = (Query) annotation;</span><br><span class="line">        String name = query.value();</span><br><span class="line">        <span class="keyword">boolean</span> encoded = query.encoded();</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; rawParameterType = Utils.getRawType(type);</span><br><span class="line">        gotQuery = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// 判断参数类型是否为可迭代类或者Array类，目前我们的参数是String，所以直接到最后一个条件</span></span><br><span class="line">        <span class="keyword">if</span> (Iterable<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">rawParameterType</span>)) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (!(type <span class="keyword">instanceof</span> ParameterizedType)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> parameterError(method, p, rawParameterType.getSimpleName()</span><br><span class="line">                + <span class="string">" must include generic type (e.g., "</span></span><br><span class="line">                + rawParameterType.getSimpleName()</span><br><span class="line">                + <span class="string">"&lt;String&gt;)"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          ParameterizedType parameterizedType = (ParameterizedType) type;</span><br><span class="line">          Type iterableType = Utils.getParameterUpperBound(<span class="number">0</span>, parameterizedType);</span><br><span class="line">          Converter&lt;?, String&gt; converter =</span><br><span class="line">              retrofit.stringConverter(iterableType, annotations);</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> ParameterHandler.Query&lt;&gt;(name, converter, encoded).iterable();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rawParameterType.isArray()) &#123;</span><br><span class="line">          Class&lt;?&gt; arrayComponentType = boxIfPrimitive(rawParameterType.getComponentType());</span><br><span class="line">          Converter&lt;?, String&gt; converter =</span><br><span class="line">              retrofit.stringConverter(arrayComponentType, annotations);</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> ParameterHandler.Query&lt;&gt;(name, converter, encoded).array();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 这里调用了retrofit.stringConverter方法，将参数类型和注解进行处理，</span></span><br><span class="line">          <span class="comment">// 这里ParameterHandler.Query&lt;&gt;保存了参数注解的value、Converter以及参数注解的编码方式</span></span><br><span class="line">          Converter&lt;?, String&gt; converter =</span><br><span class="line">              retrofit.stringConverter(type, annotations);</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> ParameterHandler.Query&lt;&gt;(name, converter, encoded);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125; </span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// Not a Retrofit annotation.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Retrofit.java stringConverter通过遍历converterFactories，调用它们的stringConverter方法，</span></span><br><span class="line"><span class="comment">// 看谁能够处理并返回一个Converter&lt;T, String&gt;，如果都没有则调用BuiltInConverters，</span></span><br><span class="line"><span class="comment">// 而Converter是用于构造HTTP请求</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns a &#123;<span class="doctag">@link</span> Converter&#125; for &#123;<span class="doctag">@code</span> type&#125; to &#123;<span class="doctag">@link</span> String&#125; from the available</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@linkplain</span> #converterFactories() factories&#125;.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> &lt;T&gt; <span class="function">Converter&lt;T, String&gt; <span class="title">stringConverter</span><span class="params">(Type type, Annotation[] annotations)</span> </span>&#123;</span><br><span class="line">    checkNotNull(type, <span class="string">"type == null"</span>);</span><br><span class="line">    checkNotNull(annotations, <span class="string">"annotations == null"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, count = converterFactories.size(); i &lt; count; i++) &#123;</span><br><span class="line">      Converter&lt;?, String&gt; converter =</span><br><span class="line">          converterFactories.get(i).stringConverter(type, annotations, <span class="keyword">this</span>);</span><br><span class="line">      <span class="keyword">if</span> (converter != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//noinspection unchecked</span></span><br><span class="line">        <span class="keyword">return</span> (Converter&lt;T, String&gt;) converter;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Nothing matched. Resort to default converter which just calls toString().</span></span><br><span class="line">    <span class="comment">//noinspection unchecked</span></span><br><span class="line">    <span class="keyword">return</span> (Converter&lt;T, String&gt;) BuiltInConverters.ToStringConverter.INSTANCE;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>以上的代码完成了RequestFactory的构建，也就是说，这个RequestFactory包含了HTTP请求的部分信息，比如请求方法、请求url的参数、参数类型以及参数的位置，通过<code>HttpServiceMethod.parseAnnotations(retrofit, method, requestFactory);</code>对请求进行适配，包括通过Converter对返回的Response body数据处理以及通过CallAdapter修改Call类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HttpServiceMethod.java HttpServiceMethod继承自ServiceMethod</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Inspects the annotations on an interface method to construct a reusable service method that</span></span><br><span class="line"><span class="comment">   * speaks HTTP. This requires potentially-expensive reflection so it is best to build each service</span></span><br><span class="line"><span class="comment">   * method only once and reuse it.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">static</span> &lt;ResponseT, ReturnT&gt; <span class="function">HttpServiceMethod&lt;ResponseT, ReturnT&gt; <span class="title">parseAnnotations</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      Retrofit retrofit, Method method, RequestFactory requestFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> isKotlinSuspendFunction = requestFactory.isKotlinSuspendFunction;</span><br><span class="line">    <span class="keyword">boolean</span> continuationWantsResponse = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> continuationBodyNullable = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    Annotation[] annotations = method.getAnnotations();</span><br><span class="line">    Type adapterType;</span><br><span class="line">    <span class="keyword">if</span> (isKotlinSuspendFunction) &#123;</span><br><span class="line">      Type[] parameterTypes = method.getGenericParameterTypes();</span><br><span class="line">      Type responseType = Utils.getParameterLowerBound(<span class="number">0</span>,</span><br><span class="line">          (ParameterizedType) parameterTypes[parameterTypes.length - <span class="number">1</span>]);</span><br><span class="line">      <span class="keyword">if</span> (getRawType(responseType) == Response<span class="class">.<span class="keyword">class</span> &amp;&amp; <span class="title">responseType</span> <span class="title">instanceof</span> <span class="title">ParameterizedType</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Unwrap the actual body type from Response&lt;T&gt;.</span></span><br><span class="line">        responseType = Utils.getParameterUpperBound(<span class="number">0</span>, (ParameterizedType) responseType);</span><br><span class="line">        continuationWantsResponse = <span class="keyword">true</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// TODO figure out if type is nullable or not</span></span><br><span class="line">        <span class="comment">// Metadata metadata = method.getDeclaringClass().getAnnotation(Metadata.class)</span></span><br><span class="line">        <span class="comment">// Find the entry for method</span></span><br><span class="line">        <span class="comment">// Determine if return type is nullable or not</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      adapterType = <span class="keyword">new</span> Utils.ParameterizedTypeImpl(<span class="keyword">null</span>, Call<span class="class">.<span class="keyword">class</span>, <span class="title">responseType</span>)</span>;</span><br><span class="line">      annotations = SkipCallbackExecutorImpl.ensurePresent(annotations);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      adapterType = method.getGenericReturnType();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    CallAdapter&lt;ResponseT, ReturnT&gt; callAdapter =</span><br><span class="line">        createCallAdapter(retrofit, method, adapterType, annotations);</span><br><span class="line">    Type responseType = callAdapter.responseType();</span><br><span class="line">    <span class="keyword">if</span> (responseType == okhttp3.Response<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">throw</span> methodError(method, <span class="string">"'"</span></span><br><span class="line">          + getRawType(responseType).getName()</span><br><span class="line">          + <span class="string">"' is not a valid response body type. Did you mean ResponseBody?"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (responseType == Response<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">throw</span> methodError(method, <span class="string">"Response must include generic type (e.g., Response&lt;String&gt;)"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// TODO support Unit for Kotlin?</span></span><br><span class="line">    <span class="keyword">if</span> (requestFactory.httpMethod.equals(<span class="string">"HEAD"</span>) &amp;&amp; !Void<span class="class">.<span class="keyword">class</span>.<span class="title">equals</span>(<span class="title">responseType</span>)) </span>&#123;</span><br><span class="line">      <span class="keyword">throw</span> methodError(method, <span class="string">"HEAD method must use Void as response type."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Converter&lt;ResponseBody, ResponseT&gt; responseConverter =</span><br><span class="line">        createResponseConverter(retrofit, method, responseType);</span><br><span class="line"></span><br><span class="line">    okhttp3.Call.Factory callFactory = retrofit.callFactory;</span><br><span class="line">    <span class="comment">// isKotlinSuspendFunction和continuationWantsResponse默认为false，所以返回的是SuspendForBody</span></span><br><span class="line">    <span class="keyword">if</span> (!isKotlinSuspendFunction) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> CallAdapted&lt;&gt;(requestFactory, callFactory, responseConverter, callAdapter);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (continuationWantsResponse) &#123;</span><br><span class="line">      <span class="comment">//noinspection unchecked Kotlin compiler guarantees ReturnT to be Object.</span></span><br><span class="line">      <span class="keyword">return</span> (HttpServiceMethod&lt;ResponseT, ReturnT&gt;) <span class="keyword">new</span> SuspendForResponse&lt;&gt;(requestFactory,</span><br><span class="line">          callFactory, responseConverter, (CallAdapter&lt;ResponseT, Call&lt;ResponseT&gt;&gt;) callAdapter);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//noinspection unchecked Kotlin compiler guarantees ReturnT to be Object.</span></span><br><span class="line">      <span class="keyword">return</span> (HttpServiceMethod&lt;ResponseT, ReturnT&gt;) <span class="keyword">new</span> SuspendForBody&lt;&gt;(requestFactory,</span><br><span class="line">          callFactory, responseConverter, (CallAdapter&lt;ResponseT, Call&lt;ResponseT&gt;&gt;) callAdapter,</span><br><span class="line">          continuationBodyNullable);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Retrofit的create方法调用了loadServiceMethod(method).invoke(args != null ? args : emptyArgs);</span></span><br><span class="line"><span class="comment">// 此处的invoke即HttpServiceMethod的invoke方法，这里创建了OkHttpCall，</span></span><br><span class="line"><span class="comment">// 此处的adapt即SuspendForBody的adapt方法，而SuspendForBody的adapt方法调用了callAdapter的adapt方法，</span></span><br><span class="line"><span class="comment">// 最终回到了我们在Retrofit初始化时使用的DefaultCallAdapterFactory的adapt方法，如果我们使用其他callAdapter，</span></span><br><span class="line"><span class="comment">// 比如RxJava2CallAdapterFactory，那么返回值就是RxJava2CallAdapterFactory的adapt方法的返回值</span></span><br><span class="line">  <span class="meta">@Override</span> <span class="keyword">final</span> <span class="meta">@Nullable</span> <span class="function">ReturnT <span class="title">invoke</span><span class="params">(Object[] args)</span> </span>&#123;</span><br><span class="line">    Call&lt;ResponseT&gt; call = <span class="keyword">new</span> OkHttpCall&lt;&gt;(requestFactory, args, callFactory, responseConverter);</span><br><span class="line">    <span class="keyword">return</span> adapt(call, args);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DefaultCallAdapterFactory.java 返回了一个Call ExecutorCallbackCall</span></span><br><span class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Call&lt;Object&gt; <span class="title">adapt</span><span class="params">(Call&lt;Object&gt; call)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> executor == <span class="keyword">null</span></span><br><span class="line">            ? call</span><br><span class="line">            : <span class="keyword">new</span> ExecutorCallbackCall&lt;&gt;(executor, call);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecutorCallbackCall</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Call</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Executor callbackExecutor;</span><br><span class="line">    <span class="keyword">final</span> Call&lt;T&gt; delegate;</span><br><span class="line"></span><br><span class="line">    ExecutorCallbackCall(Executor callbackExecutor, Call&lt;T&gt; delegate) &#123;</span><br><span class="line">      <span class="keyword">this</span>.callbackExecutor = callbackExecutor;</span><br><span class="line">      <span class="keyword">this</span>.delegate = delegate;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// ExecutorCallbackCall是通过callbackExecutor执行Runnable，还记得在Platform类中的Android内部类的默认Executor吗，</span></span><br><span class="line"><span class="comment">// MainThreadExecutor，所以后续调用call.enqueue时都是在这里处理的，而且delegate为OkHttpCall，OkHttpCall执行enqueue</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(<span class="keyword">final</span> Callback&lt;T&gt; callback)</span> </span>&#123;</span><br><span class="line">      checkNotNull(callback, <span class="string">"callback == null"</span>);</span><br><span class="line"></span><br><span class="line">      delegate.enqueue(<span class="keyword">new</span> Callback&lt;T&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call&lt;T&gt; call, <span class="keyword">final</span> Response&lt;T&gt; response)</span> </span>&#123;</span><br><span class="line">          callbackExecutor.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">              <span class="keyword">if</span> (delegate.isCanceled()) &#123;</span><br><span class="line">                <span class="comment">// Emulate OkHttp's behavior of throwing/delivering an IOException on cancellation.</span></span><br><span class="line">                callback.onFailure(ExecutorCallbackCall.<span class="keyword">this</span>, <span class="keyword">new</span> IOException(<span class="string">"Canceled"</span>));</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                callback.onResponse(ExecutorCallbackCall.<span class="keyword">this</span>, response);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call&lt;T&gt; call, <span class="keyword">final</span> Throwable t)</span> </span>&#123;</span><br><span class="line">          callbackExecutor.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">              callback.onFailure(ExecutorCallbackCall.<span class="keyword">this</span>, t);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isExecuted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> delegate.isExecuted();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Response&lt;T&gt; <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> delegate.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      delegate.cancel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCanceled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> delegate.isCanceled();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"CloneDoesntCallSuperClone"</span>) <span class="comment">// Performing deep clone.</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Call&lt;T&gt; <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ExecutorCallbackCall&lt;&gt;(callbackExecutor, delegate.clone());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Request <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> delegate.request();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>通过上述代码，<code>Api api = retrofit.create(Api.class);</code>主要还是通过代理反射创建了Api接口的实例，后续直接调用<code>api.getNowWeather(&quot;beijing&quot;, KEY);</code>就可以构造一个Call对象；在retrofit.create的过程中需要通过ServiceMethod以及初始化的Retrofit对象对Method的注解进行解析，转换为HttpServiceMethod对象进行请求适配，包括处理response body数据以及修改Call类型等等，然后构建OkHttpCall，返回ExecutorCallbackCall，所以后续OkHttpCall的enqueue方法可以进行回调。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// OkHttpCall.java 继承自Call，这里执行的代码非常类似OkHttp的RealCall类</span></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(<span class="keyword">final</span> Callback&lt;T&gt; callback)</span> </span>&#123;</span><br><span class="line">    checkNotNull(callback, <span class="string">"callback == null"</span>);</span><br><span class="line"></span><br><span class="line">    okhttp3.Call call;</span><br><span class="line">    Throwable failure;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (executed) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Already executed."</span>);</span><br><span class="line">      executed = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">      call = rawCall;</span><br><span class="line">      failure = creationFailure;</span><br><span class="line">      <span class="keyword">if</span> (call == <span class="keyword">null</span> &amp;&amp; failure == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 我们需要把this，也就是OkHttpCall转换为OkHttpClient接受的Call，所以需要OkHttp的callFactory</span></span><br><span class="line">          call = rawCall = createRawCall();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">          throwIfFatal(t);</span><br><span class="line">          failure = creationFailure = t;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (failure != <span class="keyword">null</span>) &#123;</span><br><span class="line">      callback.onFailure(<span class="keyword">this</span>, failure);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (canceled) &#123;</span><br><span class="line">      call.cancel();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 这里就直接使用了OkHttp的enqueue方法，然后再onResponse中处理rawResponse，</span></span><br><span class="line"><span class="comment">// 通过parseResponse将返回的response body转为我们定义的数据，比如json-&gt;WeatherEntity</span></span><br><span class="line"><span class="comment">// 所以回调函数的结果包括Response&lt;WeatherEntity&gt;</span></span><br><span class="line">    call.enqueue(<span class="keyword">new</span> okhttp3.Callback() &#123;</span><br><span class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(okhttp3.Call call, okhttp3.Response rawResponse)</span> </span>&#123;</span><br><span class="line">        Response&lt;T&gt; response;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          response = parseResponse(rawResponse);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">          throwIfFatal(e);</span><br><span class="line">          callFailure(e);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 回调函数传出去</span></span><br><span class="line">          callback.onResponse(OkHttpCall.<span class="keyword">this</span>, response);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">          throwIfFatal(t);</span><br><span class="line">          t.printStackTrace(); <span class="comment">// TODO this is not great</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(okhttp3.Call call, IOException e)</span> </span>&#123;</span><br><span class="line">        callFailure(e);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">callFailure</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          callback.onFailure(OkHttpCall.<span class="keyword">this</span>, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">          throwIfFatal(t);</span><br><span class="line">          t.printStackTrace(); <span class="comment">// TODO this is not great</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将Call转换为OkHttp的Call，requestFactory.create(args)会构造RequestBuilder，</span></span><br><span class="line"><span class="comment">// RequestBuilder就是将我们之前保存在各种对象中的参数拿出来组建出一个Http请求，</span></span><br><span class="line"><span class="comment">// callFactory就是OkHttpClient对象</span></span><br><span class="line">  <span class="keyword">private</span> okhttp3.<span class="function">Call <span class="title">createRawCall</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    okhttp3.Call call = callFactory.newCall(requestFactory.create(args));</span><br><span class="line">    <span class="keyword">if</span> (call == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Call.Factory returned null."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> call;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function">Response&lt;T&gt; <span class="title">parseResponse</span><span class="params">(okhttp3.Response rawResponse)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    ResponseBody rawBody = rawResponse.body();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remove the body's source (the only stateful object) so we can pass the response along.</span></span><br><span class="line">    rawResponse = rawResponse.newBuilder()</span><br><span class="line">        .body(<span class="keyword">new</span> NoContentResponseBody(rawBody.contentType(), rawBody.contentLength()))</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> code = rawResponse.code();</span><br><span class="line">    <span class="keyword">if</span> (code &lt; <span class="number">200</span> || code &gt;= <span class="number">300</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// Buffer the entire body to avoid future I/O.</span></span><br><span class="line">        ResponseBody bufferedBody = Utils.buffer(rawBody);</span><br><span class="line">        <span class="keyword">return</span> Response.error(bufferedBody, rawResponse);</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        rawBody.close();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (code == <span class="number">204</span> || code == <span class="number">205</span>) &#123;</span><br><span class="line">      rawBody.close();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> Response.success(<span class="keyword">null</span>, rawResponse);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 一般来说数据请求正确，返回code为200，因此走这条路，注意responseConverter.convert，也就是我们使用的</span></span><br><span class="line"><span class="comment">// 再Retrofit初始化的converterFactories，包括我们加入的GsonConverterFactory，最终Response的body被转换为</span></span><br><span class="line"><span class="comment">// WeatherEntity</span></span><br><span class="line">    ExceptionCatchingResponseBody catchingBody = <span class="keyword">new</span> ExceptionCatchingResponseBody(rawBody);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      T body = responseConverter.convert(catchingBody);</span><br><span class="line">      <span class="keyword">return</span> Response.success(body, rawResponse);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">      <span class="comment">// If the underlying source threw an exception, propagate that rather than indicating it was</span></span><br><span class="line">      <span class="comment">// a runtime exception.</span></span><br><span class="line">      catchingBody.throwIfCaught();</span><br><span class="line">      <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// --------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// GsonConverterFactory.java 提供GsonResponseBodyConverter给Retrofit对Response进行数据转换</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">GsonConverterFactory</span> <span class="keyword">extends</span> <span class="title">Converter</span>.<span class="title">Factory</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Create an instance using a default &#123;<span class="doctag">@link</span> Gson&#125; instance for conversion. Encoding to JSON and</span></span><br><span class="line"><span class="comment">   * decoding from JSON (when no charset is specified by a header) will use UTF-8.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GsonConverterFactory <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> create(<span class="keyword">new</span> Gson());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Create an instance using &#123;<span class="doctag">@code</span> gson&#125; for conversion. Encoding to JSON and</span></span><br><span class="line"><span class="comment">   * decoding from JSON (when no charset is specified by a header) will use UTF-8.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@SuppressWarnings</span>(<span class="string">"ConstantConditions"</span>) <span class="comment">// Guarding public API nullability.</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GsonConverterFactory <span class="title">create</span><span class="params">(Gson gson)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (gson == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"gson == null"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> GsonConverterFactory(gson);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Gson gson;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">GsonConverterFactory</span><span class="params">(Gson gson)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.gson = gson;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// responseBodyConverter被调用的位置是HttpServiceMethod的createResponseConverter</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Converter&lt;ResponseBody, ?&gt; responseBodyConverter(Type type, Annotation[] annotations,</span><br><span class="line">      Retrofit retrofit) &#123;</span><br><span class="line">    TypeAdapter&lt;?&gt; adapter = gson.getAdapter(TypeToken.get(type));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> GsonResponseBodyConverter&lt;&gt;(gson, adapter);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// requestBodyConverter被调用的位置在RequestFactory的parseParameterAnnotation</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Converter&lt;?, RequestBody&gt; requestBodyConverter(Type type,</span><br><span class="line">      Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) &#123;</span><br><span class="line">    TypeAdapter&lt;?&gt; adapter = gson.getAdapter(TypeToken.get(type));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> GsonRequestBodyConverter&lt;&gt;(gson, adapter);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GsonResponseBodyConverter.java </span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">GsonResponseBodyConverter</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">ResponseBody</span>, <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Gson gson;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> TypeAdapter&lt;T&gt; adapter;</span><br><span class="line"></span><br><span class="line">  GsonResponseBodyConverter(Gson gson, TypeAdapter&lt;T&gt; adapter) &#123;</span><br><span class="line">    <span class="keyword">this</span>.gson = gson;</span><br><span class="line">    <span class="keyword">this</span>.adapter = adapter;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// convert方法被执行的位置，也就是说通过TypeAdapter读取json数据并转换为java对象，这个具体实现需要分析Gson的源码</span></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> T <span class="title">convert</span><span class="params">(ResponseBody value)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    JsonReader jsonReader = gson.newJsonReader(value.charStream());</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      T result = adapter.read(jsonReader);</span><br><span class="line">      <span class="keyword">if</span> (jsonReader.peek() != JsonToken.END_DOCUMENT) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> JsonIOException(<span class="string">"JSON document was not fully consumed."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      value.close();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了GsonConverterFactory，还可以分析一下RxJava2CallAdapterFactory，我们知道HttpServiceMethod的invoke返回的对象即为我们调用<code>api.getNowWeather(&quot;beijing&quot;, KEY);</code>得到的对象，而这个对象是通过callAdapter调用adapt方法返回的，默认情况下是DefaultCallAdapterFactory，如果我们在Retrofit初始化时通过addCallAdapterFactory增加了其他的CallAdapterFactory比如RxJava2CallAdapterFactory，那么会通过RxJava2CallAdapterFactory调用RxJava2CallAdapter的adapt方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RxJava2CallAdapterFactory.java RxJava2CallAdapterFactory的get方法必定返回RxJava2CallAdapter对象</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RxJava2CallAdapterFactory <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RxJava2CallAdapterFactory(<span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">RxJava2CallAdapterFactory</span><span class="params">(@Nullable Scheduler scheduler, <span class="keyword">boolean</span> isAsync)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.scheduler = scheduler;</span><br><span class="line">    <span class="keyword">this</span>.isAsync = isAsync;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RxJava2CallAdapter.java 所以具体的adapt方法由RxJava2CallAdapter实现</span></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Object <span class="title">adapt</span><span class="params">(Call&lt;R&gt; call)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 主要请求的完成过程在CallEnqueueObservable中，异步的</span></span><br><span class="line">    Observable&lt;Response&lt;R&gt;&gt; responseObservable = isAsync</span><br><span class="line">        ? <span class="keyword">new</span> CallEnqueueObservable&lt;&gt;(call)</span><br><span class="line">        : <span class="keyword">new</span> CallExecuteObservable&lt;&gt;(call);</span><br><span class="line"></span><br><span class="line">    Observable&lt;?&gt; observable;</span><br><span class="line">    <span class="comment">// ResultObservable和BodyObservable都是继承自Observable，用于返回结果</span></span><br><span class="line">    <span class="keyword">if</span> (isResult) &#123;</span><br><span class="line">      observable = <span class="keyword">new</span> ResultObservable&lt;&gt;(responseObservable);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isBody) &#123;</span><br><span class="line">      observable = <span class="keyword">new</span> BodyObservable&lt;&gt;(responseObservable);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      observable = responseObservable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (scheduler != <span class="keyword">null</span>) &#123;</span><br><span class="line">      observable = observable.subscribeOn(scheduler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isFlowable) &#123;</span><br><span class="line">      <span class="keyword">return</span> observable.toFlowable(BackpressureStrategy.LATEST);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isSingle) &#123;</span><br><span class="line">      <span class="keyword">return</span> observable.singleOrError();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isMaybe) &#123;</span><br><span class="line">      <span class="keyword">return</span> observable.singleElement();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isCompletable) &#123;</span><br><span class="line">      <span class="keyword">return</span> observable.ignoreElements();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> RxJavaPlugins.onAssembly(observable);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CallEnqueueObservable.java 当我们得到的observable执行subscribe方法时</span></span><br><span class="line"><span class="comment">// 实际调用了subscribeActual方法，对应上面的CallEnqueueObservable</span></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">subscribeActual</span><span class="params">(Observer&lt;? <span class="keyword">super</span> Response&lt;T&gt;&gt; observer)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Since Call is a one-shot type, clone it for each new observer.</span></span><br><span class="line">    Call&lt;T&gt; call = originalCall.clone();</span><br><span class="line">    CallCallback&lt;T&gt; callback = <span class="keyword">new</span> CallCallback&lt;&gt;(call, observer);</span><br><span class="line">    observer.onSubscribe(callback);</span><br><span class="line">    <span class="keyword">if</span> (!callback.isDisposed()) &#123;</span><br><span class="line">      <span class="comment">// 这个call是在HttpServiceMethod中构建的OkHttpCall，OkHttpCall调用enqueue不必多说了吧</span></span><br><span class="line">      call.enqueue(callback);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>综上所述，Retrofit是一个比较灵活的网络请求框架，从设计上就是为了便于增加其他组件而设计的，首先是Api接口的设计，为了更加方便控制请求参数，通过接口加注解设计请求的url，而同时我们又不必实现此接口，通过代理反射的方式对接口实体化，相当于解耦了请求url与Retrofit实例；</p><p>其次是CallAdapter的设计，我们可以灵活的设计自己的CallAdapter用于同步或异步请求，因为在HttpServiceMethod被调用的时候是通过获取Retrofit初始化时设置的CallAdapter来实现返回，所以只需要自定义CallAdapter，我们就可以按照自己的需求处理请求的过程并拿到返回值；</p><p>然后是与Gson的联动，在拿到返回Response的时候，对json数据进行转换，并且将实体通过回调传出来，都是为了灵活使用而设计的；</p><p>最后是Retrofit与OkHttp的结合，Retrofit本质上还是调用OkHttp的请求，但是通过上述方式增加其灵活性，而且由于OkHttpCall的连接，我们一方面可以直接使用OkHttpClient，另一方面返回的Response可以直接处理，其中又包括非常多的泛型，这种设计思路真是妙啊妙啊。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.tutorialsteacher.com/https&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HTTPS Tutorials&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://www.ruanyifeng.com/blog/2016/08/http.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HTTP 协议入门&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://square.github.io/retrofit/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Retrofit&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://square.github.io/okhttp/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;OkHttp&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://juejin.im/post/5a31db566fb9a045257820b2#heading-2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;OkHttp使用详解&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.baeldung.com/retrofit&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Introduction to Retrofit&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://juejin.im/post/5c9cb008e51d455ec63f7aa6&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android Retrofit 2.5.0使用基础详解&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://juejin.im/post/5d1f2462f265da1bbc6ff5e8#heading-13&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Retrofit使用拦截器添加Cookie&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/simple_factory.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Factory Pattern&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Http，超文本传输协议，Https，更加安全的超文本传输协议，目前大量用于客户端与服务端之间的信息交流，属于应用层协议，下面有传输层TCP协议、网络层IP协议以及数据链路层为其提供保障。以登录功能为例，每一次输入账户密码后点击登录按钮就做了一次对服务器的Http请求（POST），我们收到的结果比如账号密码错误或者登录成功等信息就是服务器对Http请求的回复。Http与Https的区别在于后者采用了SSL（Secure Socket Layer安全套接层），简而言之就是对传输的数据进行了加密。具体细节可以在&lt;a href=&quot;https://www.tutorialsteacher.com/https&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HTTPS Tutorials&lt;/a&gt;或者其他资料中找到。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://zhoutao822.coding.me/categories/Android/"/>
    
    
      <category term="Android" scheme="http://zhoutao822.coding.me/tags/Android/"/>
    
      <category term="Http" scheme="http://zhoutao822.coding.me/tags/Http/"/>
    
      <category term="Https" scheme="http://zhoutao822.coding.me/tags/Https/"/>
    
      <category term="Retrofit" scheme="http://zhoutao822.coding.me/tags/Retrofit/"/>
    
      <category term="OkHttp" scheme="http://zhoutao822.coding.me/tags/OkHttp/"/>
    
      <category term="工厂模式" scheme="http://zhoutao822.coding.me/tags/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Android框架-Dagger2</title>
    <link href="http://zhoutao822.coding.me/archives/51b2fcf0.html"/>
    <id>http://zhoutao822.coding.me/archives/51b2fcf0.html</id>
    <published>2019-07-02T12:26:19.000Z</published>
    <updated>2020-01-17T15:07:46.310Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><blockquote><p><a href="https://www.jianshu.com/p/2ec39d8b7e98" target="_blank" rel="noopener">Android开发之dagger.android–Activity</a><br /><a href="https://dagger.dev/" target="_blank" rel="noopener">Dagger</a><br /><a href="https://www.jianshu.com/p/24af4c102f62?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation" target="_blank" rel="noopener">Dagger2 最清晰的使用教程</a><br /><a href="https://blog.mindorks.com/the-new-dagger-2-android-injector-cbe7d55afa6a" target="_blank" rel="noopener">The New Dagger2</a><br /><a href="https://www.jianshu.com/p/2ac2f39cb25f" target="_blank" rel="noopener">Dagger 2 完全解析</a></p></blockquote><p>Dagger2框架是一个依赖注入框架，它既可以用于Java Web项目也可以用于Android项目，依赖注入是什么意思呢</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dependent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Dependency dependency;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 属性注入 </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dependent</span><span class="params">(Dependency dependency)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dependency = dependency;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// public Dependent()&#123;</span></span><br><span class="line">    <span class="comment">//     this.dependency = new Dependency();</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法注入</span></span><br><span class="line">    <span class="comment">// public void setDependency(Dependency dependency)&#123;</span></span><br><span class="line">    <span class="comment">//     this.dependency = dependency;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看名字知含义，在上面的代码中Dependent类的构造始终需要Dependency类，那么我们就称Dependency为依赖，将其引入Dependent中的过程称为注入，上述代码在构造函数中引入，当然也可以通过set方法注入，无论是哪种方式都会面临一个问题就是当我们后续如果需要修改Dependency的构造函数时，需要在所有包含<code>new Dependency()</code>的代码中进行修改，显然这是非常痛苦的事情，而且不符合依赖倒置原则，本文所涉及到的是通过注解的方式进行依赖注入可以解决这种问题。</p><a id="more"></a><h2 id="1-dagger2框架入门"><a class="markdownIt-Anchor" href="#1-dagger2框架入门"></a> 1. Dagger2框架入门</h2><p>Dagger2框架最终的概念是注解，注解有什么用呢，我觉得是一种标记，这是由于Dagger2框架最终是通过根据不同的注解自动生成代码来实现的依赖注入，因此不同的注解表示通过不同的逻辑生成代码以实现其功能。</p><p>从最简单最基础的注解开始，一步一步深入，了解其生成的源码的作用。</p><h3 id="11-inject和component"><a class="markdownIt-Anchor" href="#11-inject和component"></a> 1.1 @Inject和@Component</h3><p>比如我们需要一个Utils类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Utils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Utils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"This is Utils"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在MainActivity中使用showMessage方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = MainActivity<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Utils utils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里需要new一个对象出来才能调用showMessage方法</span></span><br><span class="line">        utils = <span class="keyword">new</span> Utils();</span><br><span class="line">        Log.i(TAG, utils.showMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要在其他Activity中继续使用Utils的showMessage方法，那么就需要重复在每一个Activity中new一个Utils对象，这时候产品经理来了跟你说在使用Utils的时候还需要使用ToastUtils，而且需要修改Utils的构造函数，将ToastUtils传进去</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToastUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ToastUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"This is ToastUtils"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Utils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ToastUtils toastUtils;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Utils</span><span class="params">(ToastUtils toastUtils)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.toastUtils = toastUtils;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> toastUtils.showMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，你是不是要疯了，需要在所有调用<code>new Utils()</code>的位置进行修改，也就意味着每一次修改构造函数都需要全部重新修改一次。</p><p>通过dagger2框架是如何实现依赖注入的呢？</p><ul><li>首先是在依赖的构造函数上加上<code>@Inject</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Utils</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Utils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"This is Utils"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>然后新建一个接口<code>MainActivityComponent</code>，要加上<code>@Component</code>，声明<code>inject</code>方法，参数为依赖被注入的类，这个接口向dagger2框架表明了需要注入的目标，即依赖者dependent</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MainActivityComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity activity)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>最后在MainActivity中使用，直接在依赖上增加注解<code>@Inject</code>，在onCreate方法中调用<code>DaggerMainActivityComponent.create().inject(this);</code>，然后utils就被实例化了，可以直接使用，这里并没有看见new对象的操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = MainActivity<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Utils utils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="comment">// 在调用DaggerMainActivityComponent.create().inject(this)方法前先build一下，</span></span><br><span class="line">        <span class="comment">// 会自动生成一些代码，其中包括DaggerMainActivityComponent类，否则无法使用</span></span><br><span class="line">        DaggerMainActivityComponent.create().inject(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        Log.i(TAG, utils.showMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来看一下生成代码实现了哪些功能吧，主要包括三个类<code>DaggerMainActivityComponent.java</code>、<code>MainActivity_MembersInjector.java</code>、<code>Utils_Factory.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DaggerMainActivityComponent.java</span></span><br><span class="line"><span class="comment">// DaggerMainActivityComponent是根据MainActivityComponent生成的，按照执行顺序分析</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DaggerMainActivityComponent</span> <span class="keyword">implements</span> <span class="title">MainActivityComponent</span> </span>&#123;</span><br><span class="line"><span class="comment">// 3. DaggerMainActivityComponent构造函数    </span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">DaggerMainActivityComponent</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Builder();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 1. create方法返回Builder().build()方法返回的对象</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MainActivityComponent <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Builder().build();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 调用inject方法</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity activity)</span> </span>&#123;</span><br><span class="line">    injectMainActivity(activity);&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. inject方法实际执行的方法injectMainActivity</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> MainActivity <span class="title">injectMainActivity</span><span class="params">(MainActivity instance)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 6. 调用MainActivity_MembersInjector.injectUtils(instance, new Utils())，这里出现了new出来的实例</span></span><br><span class="line">    <span class="comment">// 接下来看MainActivity_MembersInjector类做了些什么</span></span><br><span class="line">    MainActivity_MembersInjector.injectUtils(instance, <span class="keyword">new</span> Utils());</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 2. Builder().build()返回的对象是DaggerMainActivityComponent</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MainActivityComponent <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> DaggerMainActivityComponent();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MainActivity_MembersInjector.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity_MembersInjector</span> <span class="keyword">implements</span> <span class="title">MembersInjector</span>&lt;<span class="title">MainActivity</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Provider&lt;Utils&gt; utilsProvider;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MainActivity_MembersInjector</span><span class="params">(Provider&lt;Utils&gt; utilsProvider)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.utilsProvider = utilsProvider;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MembersInjector&lt;MainActivity&gt; <span class="title">create</span><span class="params">(Provider&lt;Utils&gt; utilsProvider)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MainActivity_MembersInjector(utilsProvider);&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">injectMembers</span><span class="params">(MainActivity instance)</span> </span>&#123;</span><br><span class="line">    injectUtils(instance, utilsProvider.get());</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 7. 接上面的执行，这就很明显了instance.utils = utils 等价于 MainActivity.utils = new Utils()</span></span><br><span class="line"><span class="comment">// 也就是说到这里，其实依赖注入的功能就完成了，其他的代码并没有用到，但是不代表是无用的</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">injectUtils</span><span class="params">(MainActivity instance, Utils utils)</span> </span>&#123;</span><br><span class="line">    instance.utils = utils;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照增加ToastUtils的方式进行依赖注入是怎样的呢，需要修改如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToastUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ToastUtils被Utils依赖，所以需要在构造函数上加上@Inject</span></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ToastUtils</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"This is ToastUtils"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Utils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ToastUtils toastUtils;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Utils的含参构造函数上加上@Inject</span></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Utils</span><span class="params">(ToastUtils toastUtils)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.toastUtils = toastUtils;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> toastUtils.showMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MainActivityComponent.java</code>和<code>MainActivity.java</code>不用修改任何代码，那不就意味着我们解决了前面注入产生的修改代码的问题吗，因为没有new对象的代码；而且ToastUtils在Utils中也不是通过new对象产生的，而是层层注解注入的。</p><p>此时再次看一下生成的代码文件：</p><p><code>DaggerMainActivityComponent.java</code></p><p><code>MainActivity_MembersInjector.java</code></p><p><code>Utils_Factory.java</code></p><p><code>ToastUtils_Factory.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DaggerMainActivityComponent</span> <span class="keyword">implements</span> <span class="title">MainActivityComponent</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">DaggerMainActivityComponent</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Builder();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MainActivityComponent <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Builder().build();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// getUtils()即返回了我们需要的带参Utils对象</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> Utils <span class="title">getUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Utils(<span class="keyword">new</span> ToastUtils());&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity activity)</span> </span>&#123;</span><br><span class="line">    injectMainActivity(activity);&#125;</span><br><span class="line"><span class="comment">// 这次直接看核心代码，MainActivity_MembersInjector.injectUtils(instance, getUtils())</span></span><br><span class="line"><span class="comment">// MainActivity_MembersInjector.injectUtils方法也很熟悉了，效果同上文</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> MainActivity <span class="title">injectMainActivity</span><span class="params">(MainActivity instance)</span> </span>&#123;</span><br><span class="line">    MainActivity_MembersInjector.injectUtils(instance, getUtils());</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MainActivityComponent <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> DaggerMainActivityComponent();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据上文的分析，我们知道了我们需要的对象的实例其实是在生成的代码<code>DaggerMainActivityComponent.java</code>中new出来的，但是这个过程并不需要我们干预而是自动生成的，所以解决了部分依赖注入产生的问题。</p><p>结合源码分析可知</p><blockquote><p>1.<code>@Inject</code>标注在构造器上的含义包括：</p></blockquote><ul><li>告诉Dagger2可以使用这个构造器构建对象。如ToastUtils类</li><li>注入构造器所需要的参数的依赖。 如Utils类，构造上的ToastUtils会被注入。</li></ul><p>构造器注入的局限：如果有多个构造器，我们只能标注其中一个，无法标注多个。</p><blockquote><p>2.<code>@Component</code>一般有两种方式定义方法</p></blockquote><ul><li><code>void inject(目标类 obj);</code>Dagger2会从目标类开始查找<code>@Inject</code>注解，自动生成依赖注入的代码，调用inject可完成依赖的注入。</li><li><code>Object getObj();</code> 如：<code>Utils getUtils();</code><br />Dagger2会到Utils类中找被<code>@Inject</code>注解标注的构造器，自动生成提供Utils依赖的代码，这种方式一般为其他Component提供依赖。（一个Component可以依赖另一个Component，后面会说）</li></ul><p>Components所依赖的所有module里不能有重复的@Provides方法（重载，或者同返回类型的），这里还包括后面讲到的依赖的其他的Component也不能有重复的，因为Dagger无法判断你究竟想要那个作为依赖（也就是依赖迷失）</p><p>使用接口定义，并且<code>@Component</code>注解。命名方式推荐为：目标类名+Component，在编译后Dagger2就会为我们生成DaggerXXXComponent这个类，它是我们定义的xxxComponent的实现，在目标类中使用它就可以实现依赖注入了。</p><h3 id="12-module和provides"><a class="markdownIt-Anchor" href="#12-module和provides"></a> 1.2 @Module和@Provides</h3><p>使用<code>@Inject</code>标记构造器提供依赖是有局限性的，比如说我们需要注入的对象是第三方库提供的，我们无法在第三方库的构造器上加上<code>@Inject</code>注解。<br />或者，我们使用依赖倒置的时候，因为需要注入的对象是抽象的，<code>@Inject</code>也无法使用，因为抽象的类并不能实例化，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">showMessage</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBUtils</span> <span class="keyword">extends</span> <span class="title">AbstractUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DBUtils() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"This is DBUtils"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiUtils</span> <span class="keyword">extends</span> <span class="title">AbstractUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    ApiUtils() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"This is ApiUtils"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AbstractUtils abstractUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DataUtils</span><span class="params">(AbstractUtils abstractUtils)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.abstractUtils = abstractUtils;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> abstractUtils.showMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MainActivityComponent.java</code>不变，如果在MainActivity中引入DataUtils会报错，此时需要修改代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBUtils</span> <span class="keyword">extends</span> <span class="title">AbstractUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"This is DBUtils"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiUtils</span> <span class="keyword">extends</span> <span class="title">AbstractUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"This is ApiUtils"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要新建一个Module类，用于提供需要的实例，这里返回的是DBUtils对象，@Provodes标记在方法上，表示可以通过这个方法获取依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractUtilsModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function">AbstractUtils <span class="title">provideDataUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DBUtils();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改Component代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(modules = AbstractUtilsModule<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">MainActivityComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity activity)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后在MainActivity中引入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = MainActivity<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DataUtils dataUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        DaggerMainActivityComponent.create().inject(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// 很显然，这里引入的是DBUtils对象</span></span><br><span class="line">        Log.i(TAG, dataUtils.show());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过修改<code>AbstractUtilsModule</code>中<code>provideDataUtils</code>方法返回的对象，我们可以控制抽象类的具体子类是DBUtils还是ApiUtils，而主体代码不需要改动。</p><p>生成代码分析包括：</p><p><code>DaggerMainActivityComponent.java</code></p><p><code>AbstractUtilsModule_ProvideDataUtilsFactory.java</code></p><p><code>MainActivity_MembersInjector.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DaggerMainActivityComponent</span> <span class="keyword">implements</span> <span class="title">MainActivityComponent</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> AbstractUtilsModule AbstractUtilsModule;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">DaggerMainActivityComponent</span><span class="params">(AbstractUtilsModule abstractUtilsModuleParam)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.AbstractUtilsModule = abstractUtilsModuleParam;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Builder();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MainActivityComponent <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Builder().build();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 2. getDataUtils()返回的是</span></span><br><span class="line"><span class="comment">// new DataUtils(AbstractUtilsModule_ProvideDataUtilsFactory.provideDataUtils(AbstractUtilsModule))</span></span><br><span class="line"><span class="comment">// 构造函数的参数为AbstractUtilsModule_ProvideDataUtilsFactory.provideDataUtils(AbstractUtilsModule)</span></span><br><span class="line"><span class="comment">// 接下来看这个方法provideDataUtils的返回值</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> DataUtils <span class="title">getDataUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DataUtils(AbstractUtilsModule_ProvideDataUtilsFactory.provideDataUtils(AbstractUtilsModule));&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity activity)</span> </span>&#123;</span><br><span class="line">    injectMainActivity(activity);&#125;</span><br><span class="line"><span class="comment">// 1. 直接看核心代码，MainActivity_MembersInjector.injectDataUtils(instance, getDataUtils())</span></span><br><span class="line"><span class="comment">// 根据getDataUtils方法的返回值可知，其返回的是DataUtils实例</span></span><br><span class="line"><span class="comment">// MainActivity_MembersInjector.injectDataUtils方法也是很熟悉，同上</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> MainActivity <span class="title">injectMainActivity</span><span class="params">(MainActivity instance)</span> </span>&#123;</span><br><span class="line">    MainActivity_MembersInjector.injectDataUtils(instance, getDataUtils());</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AbstractUtilsModule AbstractUtilsModule;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">AbstractUtilsModule</span><span class="params">(AbstractUtilsModule AbstractUtilsModule)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.AbstractUtilsModule = Preconditions.checkNotNull(AbstractUtilsModule);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MainActivityComponent <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (AbstractUtilsModule == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.AbstractUtilsModule = <span class="keyword">new</span> AbstractUtilsModule();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> DaggerMainActivityComponent(AbstractUtilsModule);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractUtilsModule_ProvideDataUtilsFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span>&lt;<span class="title">AbstractUtils</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> AbstractUtilsModule <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">AbstractUtilsModule_ProvideDataUtilsFactory</span><span class="params">(AbstractUtilsModule <span class="keyword">module</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.<span class="keyword">module</span> = <span class="keyword">module</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> AbstractUtils <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> provideDataUtils(<span class="keyword">module</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AbstractUtilsModule_ProvideDataUtilsFactory <span class="title">create</span><span class="params">(AbstractUtilsModule <span class="keyword">module</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AbstractUtilsModule_ProvideDataUtilsFactory(<span class="keyword">module</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 3. 上述代码直接调用的是下面这个方法，返回的是AbstractUtilsModule.provideDataUtils()</span></span><br><span class="line"><span class="comment">// AbstractUtilsModule根据我们定义的时候可知，provideDataUtils返回的是new DBUtils()对象</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AbstractUtils <span class="title">provideDataUtils</span><span class="params">(AbstractUtilsModule instance)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Preconditions.checkNotNull(instance.provideDataUtils(), <span class="string">"Cannot return null from a non-@Nullable @Provides method"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@Module</code>的含义是 通知Component，可以从我这里获取到构造好的对象；</p><p><code>@Provide</code>通常是在标记了<code>@Module</code>的类中用于标记返回实例的方法，根据我们的使用以及代码分析来看，实例的注入是根据类型自动判断的，也就是说，从MainActivity到Module的实例传递过程中，同一Module中同一类型的provide方法只能存在一个，否则就会报错，比如我们如果在AbstractUtilsModule中再加入一个provideDataUtils2方法，同样返回类型为AbstractUtils，那么MainActivity中的dataUtils就会遇到<code>依赖迷失</code>的问题，这两个方法返回一样，那该用哪一个，于是报错，此时可以通过<code>限定符</code>，也就是下文介绍的<code>@Qualifier</code>和<code>@Named</code>来区分。</p><h3 id="13-qualifier和named"><a class="markdownIt-Anchor" href="#13-qualifier和named"></a> 1.3 @Qualifier和@Named</h3><p>直接上代码，首先是AbstractUtilsModule，通过添加<code>@Named</code>并指定一个字符来区别不同的实例，这里两个provide方法分别返回之前的两个AbstractUtils的子类DBUtils和ApiUtils。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractUtilsModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@Named</span>(<span class="string">"DBUtils"</span>)</span><br><span class="line">    <span class="function">AbstractUtils <span class="title">provideDBUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DBUtils();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@Named</span>(<span class="string">"ApiUtils"</span>)</span><br><span class="line">    <span class="function">AbstractUtils <span class="title">provideApiUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiUtils();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时，需要修改DataUtils类，因为AbstractUtilsModule表示我们可以提供两种AbstractUtils，你到底要哪个的实例，此时需要在DataUtils构造函数的参数中加上<code>@Named</code>注解，与上面对应，表示我需要哪一种AbstractUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AbstractUtils abstractUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DataUtils</span><span class="params">(@Named(<span class="string">"ApiUtils"</span>)</span> AbstractUtils abstractUtils) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.abstractUtils = abstractUtils;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> abstractUtils.showMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他代码不用修改，此时MainActivity中<code>dataUtils.show()</code>自然用的是ApiUtils。</p><p><code>@Qualifier</code>的作用与<code>@Named</code>的作用差不多，但是不需要自定义字符串，使用<code>@Qualifier</code>时不是直接用，而是通过<code>@Qualifier</code>自定义限定符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Qualifier</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> DBDataUtils &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Qualifier</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ApiDataUtils &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>RetentionPolicy.RUNTIME</code>代表注解会保存在.class文件，虚拟机会在运行时保留，具体有什么区别，暂时还不清楚。</p><p>需要修改的地方有两处，一是AbstractUtilsModule，二是DataUtils，都是将<code>@Named</code>注解修改为自定义的限定符注解，此时Log结果变为DBUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractUtilsModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@DBDataUtils</span></span><br><span class="line">    <span class="function">AbstractUtils <span class="title">provideDBUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DBUtils();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@ApiDataUtils</span></span><br><span class="line">    <span class="function">AbstractUtils <span class="title">provideApiUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiUtils();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AbstractUtils abstractUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DataUtils</span><span class="params">(@DBDataUtils AbstractUtils abstractUtils)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.abstractUtils = abstractUtils;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> abstractUtils.showMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中我们对DataUtils的构造方法进行Inject注解，这样的操作不是很合适，因为需要尽量少对实体类进行额外的修改，所以我们同样可以通过Module的方式provide一个DataUtils的对象，并在Module中对DataUtils的构造进行约束</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删掉Inject注解和限定符注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AbstractUtils abstractUtils;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DataUtils</span><span class="params">(AbstractUtils abstractUtils)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.abstractUtils = abstractUtils;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> abstractUtils.showMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建一个DataUtilsModule用于提供DataUtils对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataUtilsModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function">DataUtils <span class="title">provideDataUtils</span><span class="params">(@ApiDataUtils AbstractUtils abstractUtils)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataUtils(abstractUtils);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改MainActivityComponent的modules参数，增加DataUtilsModule.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(modules = &#123;AbstractUtilsModule<span class="class">.<span class="keyword">class</span>, <span class="title">DataUtilsModule</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">MainActivityComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity activity)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后编译运行，log结果是ApiUtils，根据上述代码的运行，我们能够总结出一些运行的规则：</p><ol><li>首先当我们在MainActivity中调用inject方法时，其实是通过MainActivityComponent询问，可以去哪里找到我们需要的实例；</li><li>MainActivityComponent定义了<code>modules = {AbstractUtilsModule.class, DataUtilsModule.class}</code>，告诉系统去这两个类中找；</li><li>AbstractUtilsModule告诉系统我这里只能提供限定类型的AbstractUtils，DataUtilsModule告诉系统我这里可以提供DataUtils，这各类型恰好与MainActivity需要的实例类型相同，于是系统到DataUtilsModule的provide方法去找；</li><li>此时系统发现DataUtilsModule的provide方法是带参数AbstractUtils的，而且还有限定符，那么同样需要能够提供AbstractUtils的Module，这不是恰好与第3步的AbstractUtilsModule相同吗，那么就按照参数限定符找到AbstractUtilsModule的对应provide方法，结果发现它可以直接返回new ApiUtils()对象，正合我心，且不需要继续走下去，那么实例化完成。</li></ol><p>在寻找实例的路线中需要用到的Module都必须加在Component中的modules参数中，否则这条路线走不通（DataUtilsModule -&gt; AbstractUtilsModule），存在的问题是你需要知道所有路线上的Module并且将其加入到Component中，显然对于多级依赖产生的多个Module这是不合适的。</p><h3 id="14-component的dependence和subcomponent"><a class="markdownIt-Anchor" href="#14-component的dependence和subcomponent"></a> 1.4 @Component的dependence和@SubComponent</h3><p>Component除了可以提供inject方法以外还可以像Module一样提供实例，这样便于解决多级依赖导致的Module增加问题。</p><p>首先创建提供ApiUtils和DBUtils实例的Component，其<code>modules = AbstractUtilsModule.class</code>，表明最终方法获取实例还是从Module拿到的，我Component只是交接一下，向外提供接口getDBUtils和getApiUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同理这里的两个方法也需要限定符注解，表明需要从AbstractUtilsModule拿哪种实例，一般命名get+XXXEntity</span></span><br><span class="line"><span class="meta">@Component</span>(modules = AbstractUtilsModule<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">AbstractUtilsComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DBDataUtils</span></span><br><span class="line">    <span class="function">AbstractUtils <span class="title">getDBUtils</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiDataUtils</span></span><br><span class="line">    <span class="function">AbstractUtils <span class="title">getApiUtils</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们的MainActivity是需要DataUtils的实例，那么我们也需要提供DataUtils的Component</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// modules = DataUtilsModule.class表明实例来源于DataUtilsModule</span></span><br><span class="line"><span class="comment">// dependencies = AbstractUtilsComponent.class表明我们可能需要AbstractUtilsComponent提供的实例</span></span><br><span class="line"><span class="comment">// 逻辑上也是对应的DataUtilsModule返回实例需要限定AbstractUtils，AbstractUtilsComponent恰好可以提供</span></span><br><span class="line"><span class="comment">// 根据1.3的最后部分我们知道这里的dependencies = AbstractUtilsComponent.class可以替换为AbstractUtilsModule，</span></span><br><span class="line"><span class="comment">// 但是这样会失去依赖的层层分离的特点</span></span><br><span class="line"><span class="meta">@Component</span>(modules = DataUtilsModule<span class="class">.<span class="keyword">class</span>, <span class="title">dependencies</span> </span>= AbstractUtilsComponent<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">DataUtilsComponent</span> </span>&#123;</span><br><span class="line">    <span class="function">DataUtils <span class="title">getDataUtils</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其次需要修改MainActivityComponent的参数，这里可以发现不再使用modules参数而是dependencies</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dependencies = DataUtilsComponent.class表明可能需要DataUtilsComponent提供的实例，</span></span><br><span class="line"><span class="comment">// 通过上面定义的getDataUtils方法得到</span></span><br><span class="line"><span class="meta">@Component</span>(dependencies = DataUtilsComponent<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">MainActivityComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity activity)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后需要修改MainActivity调用inject的流程，其他代码不变</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = MainActivity<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DataUtils dataUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="comment">// 可以发现调用流程变复杂了，而且恰好在Component加入了dependencies的位置</span></span><br><span class="line">        <span class="comment">// 需要调用dataUtilsComponent或者abstractUtilsComponent来进行初始化，</span></span><br><span class="line">        <span class="comment">// 有人会说了，这不是把流程变复杂了吗，之前都不需要额外的参数，现在需要将生成的Component带入</span></span><br><span class="line">        <span class="comment">// 到初始化的过程，非也非也，此处可以使用DaggerDataUtilsComponent，那当然可以使用继承自DataUtilsComponent</span></span><br><span class="line">        <span class="comment">// 的其他Component，也就是说我们增加了注入的依赖范围，变为可以动态修改的了，注入过程更加灵活</span></span><br><span class="line">        DaggerMainActivityComponent</span><br><span class="line">                .builder()</span><br><span class="line">                .dataUtilsComponent(DaggerDataUtilsComponent</span><br><span class="line">                        .builder()</span><br><span class="line">                        .abstractUtilsComponent(DaggerAbstractUtilsComponent.create())</span><br><span class="line">                        .build())</span><br><span class="line">                .build()</span><br><span class="line">                .inject(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 很显然，这里引入的是ApiUtils对象</span></span><br><span class="line">        Log.i(TAG, dataUtils.show());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面展示一下为什么说注入的方式变得灵活了，产品经理突然告诉你需要新增一个Utils叫做ExtraUtils，在MainActivity中需要使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtraUtils</span> <span class="keyword">extends</span> <span class="title">AbstractUtils</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"This is ExtraUtils"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在不修改上述的大部分代码的条件下，如何将ExtraUtils注入，首先新建一个ExtraDataUtilsModule用于提供通过ExtraUtils构造的DataUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里没有用带参的构造方法，也没有用抽象类，直接实例化，便于演示</span></span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtraDataUtilsModule</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function">DataUtils <span class="title">provideDataUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataUtils(<span class="keyword">new</span> ExtraUtils());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后新建一个ExtraDataUtilsComponent用于提供DataUtils实例，是不是和DataUtilsComponent功能很像，没错，这里可以用继承，并且由于MainActivityComponent的<code>dependencies = DataUtilsComponent.class</code>不变，我用继承来实现即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里的modules = ExtraDataUtilsModule.class变成了我们自己新定义的Module，它是直接返回new DataUtils(new ExtraUtils())，</span></span><br><span class="line"><span class="comment">// 所以实际上后面的dependencies = AbstractUtilsComponent.class不需要，但是这里保留是为了减少修改MainActivity的代码，当然也可以去掉</span></span><br><span class="line"><span class="meta">@Component</span>(modules = ExtraDataUtilsModule<span class="class">.<span class="keyword">class</span>, <span class="title">dependencies</span> </span>= AbstractUtilsComponent<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">ExtraDataUtilsComponent</span> <span class="keyword">extends</span> <span class="title">DataUtilsComponent</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后修改MainActivity中的inject流程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = MainActivity<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DataUtils dataUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="comment">// 注意这里是DaggerExtraDataUtilsComponent，即新创建的Component</span></span><br><span class="line">        <span class="comment">// 而且abstractUtilsComponent是可以去掉的，同理ExtraDataUtilsComponent的dependencies也需要去掉</span></span><br><span class="line">        DaggerMainActivityComponent</span><br><span class="line">                .builder()</span><br><span class="line">                .dataUtilsComponent(DaggerExtraDataUtilsComponent</span><br><span class="line">                        .builder()</span><br><span class="line">                        .abstractUtilsComponent(DaggerAbstractUtilsComponent.create())</span><br><span class="line">                        .build())</span><br><span class="line">                .build()</span><br><span class="line">                .inject(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 很显然，这里引入的是ExtraUtils对象</span></span><br><span class="line">        Log.i(TAG, dataUtils.show());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这样的方式进行额外的依赖注入，就可以避免大部分代码的重构，而仅仅是增加代码，且注入的方式变得灵活</p><p>从源码中也可以看到dependencies的作用，以MainActivityComponent为代表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DaggerMainActivityComponent</span> <span class="keyword">implements</span> <span class="title">MainActivityComponent</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> DataUtilsComponent dataUtilsComponent;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">DaggerMainActivityComponent</span><span class="params">(DataUtilsComponent dataUtilsComponentParam)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.dataUtilsComponent = dataUtilsComponentParam;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Builder();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity activity)</span> </span>&#123;</span><br><span class="line">    injectMainActivity(activity);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们可以调用DataUtilsComponent的getDataUtils()方法了</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> MainActivity <span class="title">injectMainActivity</span><span class="params">(MainActivity instance)</span> </span>&#123;</span><br><span class="line">    MainActivity_MembersInjector.injectDataUtils(</span><br><span class="line">        instance,</span><br><span class="line">        Preconditions.checkNotNull(</span><br><span class="line">            dataUtilsComponent.getDataUtils(),</span><br><span class="line">            <span class="string">"Cannot return null from a non-@Nullable component method"</span>));</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> DataUtilsComponent dataUtilsComponent;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 此处为区别，初始化的过程中增加了dataUtilsComponent方法，用于引入DataUtilsComponent</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">dataUtilsComponent</span><span class="params">(DataUtilsComponent dataUtilsComponent)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.dataUtilsComponent = Preconditions.checkNotNull(dataUtilsComponent);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MainActivityComponent <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      Preconditions.checkBuilderRequirement(dataUtilsComponent, DataUtilsComponent<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> DaggerMainActivityComponent(dataUtilsComponent);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是<code>@Component</code>的部分使用，包括dependencies参数的意义，与之相似的有<code>@Subcomponent</code>注解，让我们回到加入ExtraUtils之前的场景，用<code>@Subcomponent</code>实现Componet的的层层依赖。</p><p>首先修改AbstractUtilsComponent，增加它的上一级Component的plus方法，参数为上一级Component的Module</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(modules = AbstractUtilsModule<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">AbstractUtilsComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @DBDataUtils</span></span><br><span class="line"><span class="comment">//    AbstractUtils getDBUtils();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    @ApiDataUtils</span></span><br><span class="line"><span class="comment">//    AbstractUtils getApiUtils();</span></span><br><span class="line"></span><br><span class="line">    <span class="function">DataUtilsComponent <span class="title">plus</span><span class="params">(DataUtilsModule dataUtilsModule)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后修改DataUtilsComponent，同理，但是修改注解为<code>@Subcomponent</code>，且删除了dependencies参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Subcomponent</span>(modules = DataUtilsModule<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">DataUtilsComponent</span> </span>&#123;</span><br><span class="line">    <span class="comment">//    DataUtils getDataUtils();</span></span><br><span class="line">    <span class="function">MainActivityComponent <span class="title">plus</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其次是MainActivityComponent，同理，修改注解为<code>@Subcomponent</code>，且删除了dependencies参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Subcomponent</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MainActivityComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity activity)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后修改MainActivity</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = MainActivity<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DataUtils dataUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="comment">// 此处的注入调用的流程发生了很大的变化</span></span><br><span class="line">        <span class="comment">// 之前是从MainActivityComponent -&gt; DataUtilsComponent -&gt; AbstractUtilsComponent</span></span><br><span class="line">        <span class="comment">// 现在是AbstractUtilsComponent -&gt; DataUtilsComponent -&gt; MainActivityComponent</span></span><br><span class="line">        <span class="comment">// 并且传入的参数变成了Module，这里也增加了注入的灵活性</span></span><br><span class="line">        DaggerAbstractUtilsComponent</span><br><span class="line">                .create()</span><br><span class="line">                .plus(<span class="keyword">new</span> DataUtilsModule())</span><br><span class="line">                .plus()</span><br><span class="line">                .inject(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 很显然，这里引入的是ApiUtils对象</span></span><br><span class="line">        Log.i(TAG, dataUtils.show());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从生成的代码不难发现，这次只有一个Component生成文件<code>DaggerAbstractUtilsComponent.java</code>，我们看看为什么会这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 还是按照执行顺序分析</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DaggerAbstractUtilsComponent</span> <span class="keyword">implements</span> <span class="title">AbstractUtilsComponent</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> AbstractUtilsModule abstractUtilsModule;</span><br><span class="line"><span class="comment">// 3. 构造函数初始化完成</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">DaggerAbstractUtilsComponent</span><span class="params">(AbstractUtilsModule abstractUtilsModuleParam)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.abstractUtilsModule = abstractUtilsModuleParam;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Builder();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 1. 返回Builder().build()</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AbstractUtilsComponent <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Builder().build();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 4. 执行plus(new DataUtilsModule())方法，返回DataUtilsComponentImpl(dataUtilsModule)</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> DataUtilsComponent <span class="title">plus</span><span class="params">(DataUtilsModule dataUtilsModule)</span> </span>&#123;</span><br><span class="line">    Preconditions.checkNotNull(dataUtilsModule);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DataUtilsComponentImpl(dataUtilsModule);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AbstractUtilsModule abstractUtilsModule;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">abstractUtilsModule</span><span class="params">(AbstractUtilsModule abstractUtilsModule)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.abstractUtilsModule = Preconditions.checkNotNull(abstractUtilsModule);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 2. 初始化了abstractUtilsModule为AbstractUtilsModule，这肯定是AbstractUtilsComponent指定了modules参数</span></span><br><span class="line"><span class="comment">// 导致，然后返回DaggerAbstractUtilsComponent的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AbstractUtilsComponent <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (abstractUtilsModule == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.abstractUtilsModule = <span class="keyword">new</span> AbstractUtilsModule();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> DaggerAbstractUtilsComponent(abstractUtilsModule);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DataUtilsComponentImpl</span> <span class="keyword">implements</span> <span class="title">DataUtilsComponent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DataUtilsModule dataUtilsModule;</span><br><span class="line"><span class="comment">// 5. 初始化DataUtilsComponentImpl</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DataUtilsComponentImpl</span><span class="params">(DataUtilsModule dataUtilsModuleParam)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.dataUtilsModule = dataUtilsModuleParam;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 10. DataUtilsModule_ProvideDataUtilsFactory.provideDataUtils，接下来看DataUtilsModule_ProvideDataUtilsFactory</span></span><br><span class="line"><span class="comment">// 和AbstractUtilsModule_ProvideApiUtilsFactory</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> DataUtils <span class="title">getDataUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> DataUtilsModule_ProvideDataUtilsFactory.provideDataUtils(</span><br><span class="line">          dataUtilsModule,</span><br><span class="line">          AbstractUtilsModule_ProvideApiUtilsFactory.provideApiUtils(</span><br><span class="line">              DaggerAbstractUtilsComponent.<span class="keyword">this</span>.abstractUtilsModule));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 6. 调用plus()方法，返回的是MainActivityComponentImpl</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MainActivityComponent <span class="title">plus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> MainActivityComponentImpl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivityComponentImpl</span> <span class="keyword">implements</span> <span class="title">MainActivityComponent</span> </span>&#123;</span><br><span class="line"><span class="comment">// 7. MainActivityComponentImpl()构造</span></span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="title">MainActivityComponentImpl</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 8. 调用inject方法</span></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity activity)</span> </span>&#123;</span><br><span class="line">        injectMainActivity(activity);</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">// 9. 最终调用的位置injectDataUtils，这个很熟悉了，instance.dataUtils = DataUtilsComponentImpl.this.getDataUtils()</span></span><br><span class="line"><span class="comment">// getDataUtils返回值是什么呢，看10</span></span><br><span class="line">      <span class="function"><span class="keyword">private</span> MainActivity <span class="title">injectMainActivity</span><span class="params">(MainActivity instance)</span> </span>&#123;</span><br><span class="line">        MainActivity_MembersInjector.injectDataUtils(</span><br><span class="line">            instance, DataUtilsComponentImpl.<span class="keyword">this</span>.getDataUtils());</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DataUtilsModule_ProvideDataUtilsFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span>&lt;<span class="title">DataUtils</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> DataUtilsModule <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Provider&lt;AbstractUtils&gt; abstractUtilsProvider;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">DataUtilsModule_ProvideDataUtilsFactory</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      DataUtilsModule <span class="keyword">module</span>, Provider&lt;AbstractUtils&gt; abstractUtilsProvider)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.<span class="keyword">module</span> = <span class="keyword">module</span>;</span><br><span class="line">    <span class="keyword">this</span>.abstractUtilsProvider = abstractUtilsProvider;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> DataUtils <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> provideDataUtils(<span class="keyword">module</span>, abstractUtilsProvider.get());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataUtilsModule_ProvideDataUtilsFactory <span class="title">create</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      DataUtilsModule <span class="keyword">module</span>, Provider&lt;AbstractUtils&gt; abstractUtilsProvider)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DataUtilsModule_ProvideDataUtilsFactory(<span class="keyword">module</span>, abstractUtilsProvider);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 11-1. 接上文10，instance.provideDataUtils即我们定义的DataUtilsModule.provideDataUtils，返回DataUtils实例</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataUtils <span class="title">provideDataUtils</span><span class="params">(DataUtilsModule instance, AbstractUtils abstractUtils)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Preconditions.checkNotNull(</span><br><span class="line">        instance.provideDataUtils(abstractUtils),</span><br><span class="line">        <span class="string">"Cannot return null from a non-@Nullable @Provides method"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractUtilsModule_ProvideApiUtilsFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span>&lt;<span class="title">AbstractUtils</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> AbstractUtilsModule <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">AbstractUtilsModule_ProvideApiUtilsFactory</span><span class="params">(AbstractUtilsModule <span class="keyword">module</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.<span class="keyword">module</span> = <span class="keyword">module</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> AbstractUtils <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> provideApiUtils(<span class="keyword">module</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AbstractUtilsModule_ProvideApiUtilsFactory <span class="title">create</span><span class="params">(AbstractUtilsModule <span class="keyword">module</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AbstractUtilsModule_ProvideApiUtilsFactory(<span class="keyword">module</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 11-2. 接上文10，instance.provideApiUtils即我们定义的AbstractUtilsModule.provideApiUtils，返回ApiUtils实例</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AbstractUtils <span class="title">provideApiUtils</span><span class="params">(AbstractUtilsModule instance)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Preconditions.checkNotNull(</span><br><span class="line">        instance.provideApiUtils(), <span class="string">"Cannot return null from a non-@Nullable @Provides method"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析两种调用方式的逻辑可以知道：</p><ol><li>dependencies方式从最上级的Component一级一级往下调用，获取需要的实例；Subcomponent方式最下级的Component通过一步一步构造出上级Component来调用，在每一步的plus方法中中加入Module提供需要的实例；</li><li>dependencies方式适用于需要在某个类中注入非常多的其他实例，通过dependencies参数加深；Subcomponent方式适用于将某一个实例提供给其他实例注入，比如将Application context给其他例如ToastUtils、SharedpreferencesUtils使用，Application context作为Component，其他作为Subcomponent；</li><li>Component dependencies 能单独使用，而Subcomponent必须由Component调用方法获取；</li><li>Component dependencies 可以很清楚的得知他依赖哪个Component， 而Subcomponent不知道它自己的谁的孩子。</li></ol><p><strong>Component dependencies和Subcomponent使用上的总结</strong></p><p>Component Dependencies：</p><ol><li>你想保留独立的想个组件（DataUtils可以单独使用注入，DBUtils也可以）</li><li>要明确的显示该组件所使用的其他依赖</li></ol><p>Subcomponent：</p><ol><li>两个组件之间的关系紧密</li><li>你只关心Component，而Subcomponent只是作为Component的拓展，可以通过Component.xxx调用。</li></ol><h3 id="15-scope和singleton"><a class="markdownIt-Anchor" href="#15-scope和singleton"></a> 1.5 @Scope和@Singleton</h3><p><code>@Scope</code>是用来管理依赖的生命周期的。它和<code>@Qualifier</code>一样是用来自定义注解的，而<code>@Singleton</code>则是<code>@Scope</code>的默认实现。</p><p>在没有引入<code>@Scope</code>时，我们在MainActivity中初始化另一个DataUtils会是什么情况，这两个DataUtils会是相同的吗</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = MainActivity<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"><span class="comment">// 这里直接inject第二个dataUtils2</span></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DataUtils dataUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DataUtils dataUtils2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        TextView textView = findViewById(R.id.text);</span><br><span class="line"></span><br><span class="line">        DaggerMainActivityComponent</span><br><span class="line">                .builder()</span><br><span class="line">                .dataUtilsComponent(DaggerDataUtilsComponent</span><br><span class="line">                        .builder()</span><br><span class="line">                        .abstractUtilsComponent(DaggerAbstractUtilsComponent.create())</span><br><span class="line">                        .build())</span><br><span class="line">                .build()</span><br><span class="line">                .inject(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 然后在Log中打印这两个DataUtils对象，结果是这两个对象是不同的，相当于重新new一个</span></span><br><span class="line">        Log.i(TAG, dataUtils.toString() + dataUtils2.toString());</span><br><span class="line"></span><br><span class="line">        textView.setText(dataUtils.show());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般而言，我们希望这种工具类Utils是单例模式，比如读写数据库的时候，如果不是单例，那么可能存在“读后写”等问题导致数据不同步，那么单例模式，特别是全局单例就显得非常好用了。</p><p>怎样在dagger框架中使用单例，很显然，必定是通过注解来实现<code>@Singleton</code>，在上面的代码中，我们需要的单例是DataUtils，那么从DataUtils的注入过程开始，首先是DataUtilsModule</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在provide方法上加上@Singleton</span></span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataUtilsModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="function">DataUtils <span class="title">provideDataUtils</span><span class="params">(@ApiDataUtils AbstractUtils abstractUtils)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataUtils(abstractUtils);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以及需要使用此module的Component也需要加上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="meta">@Component</span>(modules = DataUtilsModule<span class="class">.<span class="keyword">class</span>, <span class="title">dependencies</span> </span>= AbstractUtilsComponent<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">DataUtilsComponent</span> </span>&#123;</span><br><span class="line">    <span class="function">DataUtils <span class="title">getDataUtils</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dagger2还有一项规定，如果一个Component被加上了<code>@Scope</code>注解，类似<code>@Singleton</code>，那么依赖这个Component的Component也需要加上<code>@Scope</code>注解，比如这里的MainActivityComponent，但是如果直接在MainActivityComponent上加上<code>@Singleton</code>会报错<code>error: This @Singleton component cannot depend on scoped components: @Singleton com.example.daggerdemo.di.component.DataUtilsComponent</code>，即单例不能依赖于单例，这是因为单例只能由自己产生，如果DataUtils在其他地方被注入了，那么MainActivityComponent将无法再进行注入，因为其依赖DataUtils是单例模式，显然这不是很符合面向对象的设计原则，因为我们可能并不知道MainActivityComponent会依赖哪些单例，所以MainActivityComponent的<code>@Scope</code>可以使用自定义的注解，自定义<code>@Scope</code>与<code>@Singleton</code>有说明区别呢，<code>@Singleton</code>相当于告诉系统，这个对象或者这个方法必定是全局单例，你看着办；而自定义<code>@Scope</code>相当于告诉系统在这个注解标注过的地方，我提供的对象是唯一的。</p><p>因此代码如下，自定义ActivityScope表明我们需要在Activity生命周期内实现单例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scope</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ActivityScope &#123;&#125;</span><br></pre></td></tr></table></figure><p>MainActivityComponent注解加上<code>@ActivityScope</code>，其他地方的<code>@Singleton</code>不变</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ActivityScope</span></span><br><span class="line"><span class="meta">@Component</span>(dependencies = DataUtilsComponent<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">MainActivityComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity activity)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后运行代码可以发现MainActivity中的两个DataUtils对象是相同的，也就是在MainActivity中是单例的，但是它是不是全局单例呢，我们在创建一个SecondActivity，同样注入DataUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = MainActivity<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DataUtils dataUtils3;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_second);</span><br><span class="line">        TextView textView = findViewById(R.id.text);</span><br><span class="line"></span><br><span class="line">        DaggerSecondActivityComponent</span><br><span class="line">                .builder()</span><br><span class="line">                .dataUtilsComponent(DaggerDataUtilsComponent</span><br><span class="line">                        .builder()</span><br><span class="line">                        .abstractUtilsComponent(DaggerAbstractUtilsComponent.create())</span><br><span class="line">                        .build())</span><br><span class="line">                .build()</span><br><span class="line">                .inject(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// 此时dataUtils3与dataUtils并不相同，也就说dataUtils仅在MainActivity中是单例</span></span><br><span class="line">        Log.i(TAG, dataUtils3.toString());</span><br><span class="line"></span><br><span class="line">        textView.setText(dataUtils3.show());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同理需要一个SecondActivityComponent</span></span><br><span class="line"><span class="meta">@ActivityScope</span></span><br><span class="line"><span class="meta">@Component</span>(dependencies = DataUtilsComponent<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">SecondActivityComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(SecondActivity activity)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@Scope</code>是需要成对存在的，在Module的Provide方法中使用了<code>@Scope</code>，那么对应的Component中也必须使用<code>@Scope</code>注解，当两边的<code>@Scope</code>名字一样时（比如同为<code>@Singleton</code>）, 那么该Provide方法提供的依赖将会在Component中保持“局部单例”。<br />而在Component中标注<code>@Scope</code>，provide方法没有标注，那么这个<code>@Scope</code>就不会起作用，而Component上的<code>@Scope</code>的作用也只是为了能顺利通过编译，就像我刚刚定义的ActivityScope一样。</p><p><code>@Singleton</code>也是一个自定义<code>@Scope</code>，它的作用就像上面说的一样。但由于它是Dagger2中默认定义的，所以它比我们自定义Scope对了一个功能，就是编译检测，防止我们不规范的使用Scope注解，仅此而已。</p><p>如何使用Dagger2实现单例呢：</p><ol><li>依赖在Component中是单例的（供该依赖的provide方法和对应的Component类使用同一个Scope注解。）</li><li>对应的Component在App中只初始化一次，每次注入依赖都使用这个Component对象。（在Application中创建该Component）</li></ol><p>最直接的就是在自定义Application中将Component先初始化了，在通过这个Component去注入我们需要的对象，由于Component是单例的，因此通过它注入的对象也就是单例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"><span class="comment">// 注意我们之前定义的DataUtilsComponent有@Singleton注解，DataUtilsModule的provide方法有@Singleton注解</span></span><br><span class="line"><span class="comment">// 因此在Application中初始化的是DataUtilsComponent，这里简单使用DaggerDataUtilsComponent构造，当然也可以通过dagger注入</span></span><br><span class="line">    <span class="keyword">private</span> DataUtilsComponent dataUtilsComponent;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        dataUtilsComponent = DaggerDataUtilsComponent</span><br><span class="line">                .builder()</span><br><span class="line">                .abstractUtilsComponent(DaggerAbstractUtilsComponent.create())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataUtilsComponent <span class="title">getDataUtilsComponent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataUtilsComponent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后修改MainActivity和SecondActivity中inject的流程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MainActivity.java，dataUtilsComponent的参数是Application中初始化的</span></span><br><span class="line">        DaggerMainActivityComponent</span><br><span class="line">                .builder()</span><br><span class="line">                .dataUtilsComponent(((MyApp) getApplication()).getDataUtilsComponent())</span><br><span class="line">                .build()</span><br><span class="line">                .inject(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">// SecondActivity.java</span></span><br><span class="line">        DaggerSecondActivityComponent</span><br><span class="line">                .builder()</span><br><span class="line">                .dataUtilsComponent(((MyApp) getApplication()).getDataUtilsComponent())</span><br><span class="line">                .build()</span><br><span class="line">                .inject(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><p>然后我们看到在MainActivity和SecondActivity中的三个DataUtils都是相同的了。</p><p><code>@Scope</code>是用来给开发者管理依赖的生命周期的，它可以让某个依赖在Component中保持 “局部单例”（唯一），如果将Component保存在Application中复用，则可以让该依赖在app中保持单例。 我们可以通过自定义不同的Scope注解来标记这个依赖的生命周期，所以命名是需要慎重考虑的。</p><ul><li><code>@Singleton</code>告诉我们这个依赖是单例的</li><li><code>@ActivityScope</code>告诉我们这个依赖的生命周期和Activity相同</li><li><code>@FragmentScope</code>告诉我们这个依赖的生命周期和Fragment相同</li><li><code>@xxxxScope</code> ……</li></ul><p>以上就是如何使用自定义<code>@Scope</code>实现单例的过程，那么如果在Application中使用注入会是什么情况呢，我们将DataUtilsComponent注入到MyApp中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 虽然这样的注入过程不是很合适，但是基本流程与在Activity中相同，首先是Module，提供对象实例</span></span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataUtilsComponentModule</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function">DataUtilsComponent <span class="title">provideDataUtilsComponent</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DaggerDataUtilsComponent</span><br><span class="line">                .builder()</span><br><span class="line">                .abstractUtilsComponent(DaggerAbstractUtilsComponent.create())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后是Component，提供注入的方法以及被注入的位置</span></span><br><span class="line"><span class="meta">@Component</span>(modules = DataUtilsComponentModule<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">ApplicationComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MyApp myApp)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DataUtilsComponent dataUtilsComponent;</span><br><span class="line"><span class="comment">// 最后是在Application的onCreate方法中注入</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        DaggerApplicationComponent</span><br><span class="line">                .create()</span><br><span class="line">                .inject(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataUtilsComponent <span class="title">getDataUtilsComponent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataUtilsComponent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="16-mapkey和lazy"><a class="markdownIt-Anchor" href="#16-mapkey和lazy"></a> 1.6 @MapKey和@Lazy</h3><p><code>@MapKey</code>用于定义一些依赖集合（比如Map和Set），它的使用很简单，可以看代码注释</p><p>首先需要定义key注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UtilsMapKey作为后续使用的注解，String代表这个注解的接受的类型为String</span></span><br><span class="line"><span class="comment">// unwrapValue如果为true，则此注解可接受的key类型有基本类型包装类、String、classes</span></span><br><span class="line"><span class="comment">// unwrapValue如果为false，则此注解可接受的key类型为其本身，这个例子可以在源码注释中找到</span></span><br><span class="line"><span class="meta">@MapKey</span>(unwrapValue = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> UtilsMapKey &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是提供Map的value数据的module</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UtilsMapModule</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 这里首先是Provides注解，然后是IntoMap注解，最后是前面定义的MapKey注解，同时传入了Map的key值为thisiskey</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@IntoMap</span></span><br><span class="line">    <span class="meta">@UtilsMapKey</span>(<span class="string">"thisiskey"</span>)</span><br><span class="line">    <span class="function">Integer <span class="title">provideUtilsMapValue</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="comment">// 返回值即为value，虽然返回值为value，但实际上注入时传入的是整个Map&lt;String, Integer&gt;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">11</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其次是MainActivityComponent加上我们定义的module</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ActivityScope</span></span><br><span class="line"><span class="meta">@Component</span>(dependencies = DataUtilsComponent<span class="class">.<span class="keyword">class</span>, <span class="title">modules</span> </span>= UtilsMapModule<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">MainActivityComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity activity)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后直接在MainActivity中使用即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = MainActivity<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DataUtils dataUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DataUtils dataUtils2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Map&lt;String, Integer&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        TextView textView = findViewById(R.id.text);</span><br><span class="line"></span><br><span class="line">        DaggerMainActivityComponent</span><br><span class="line">                .builder()</span><br><span class="line">                .dataUtilsComponent(((MyApp) getApplication()).getDataUtilsComponent())</span><br><span class="line">                .build()</span><br><span class="line">                .inject(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 很显然，这里引入的是ApiUtils对象</span></span><br><span class="line">        Log.i(TAG, dataUtils.toString() + dataUtils2.toString());</span><br><span class="line">        Log.i(TAG, String.valueOf(dataUtils.equals(dataUtils2)));</span><br><span class="line">        <span class="comment">// 这里TextView中显示的就是 &#123;thisiskey=11&#125;</span></span><br><span class="line">        textView.setText(map.toString());</span><br><span class="line">        textView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                startActivity(<span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, SecondActivity<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@Lazy</code>，这个并不是作为注解使用的，而是作为wrapper类型使用，比如下面这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Inject</span></span><br><span class="line">Lazy&lt;DataUtils&gt; dataUtils;</span><br></pre></td></tr></table></figure><p>使用Lazy修饰的类型不会在注入的时候初始化，只能通过get方法获取实例，下面的Log日志显示了未初始化的dataUtils是什么类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = MainActivity<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Lazy&lt;DataUtils&gt; dataUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        DaggerMainActivityComponent</span><br><span class="line">                .builder()</span><br><span class="line">                .dataUtilsComponent(((MyApp) getApplication()).getDataUtilsComponent())</span><br><span class="line">                .build()</span><br><span class="line">                .inject(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// dataUtils是dagger.internal.DoubleCheck@3050053</span></span><br><span class="line">        Log.i(TAG, dataUtils.toString());</span><br><span class="line"></span><br><span class="line">        DataUtils utils = dataUtils.get();</span><br><span class="line">        <span class="comment">// utils是com.example.daggerdemo.di.model.DataUtils@26c9d90</span></span><br><span class="line">        Log.i(TAG, utils.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="17-binds和multibinds"><a class="markdownIt-Anchor" href="#17-binds和multibinds"></a> 1.7 @Binds和@Multibinds</h3><p><code>@Binds</code>注解与<code>@Provides</code>有异曲同工之妙，其修饰的方法都是为了提供实例，但是具体使用起来又有区别，<code>@Binds</code>只能在抽象类Module中使用，并且修饰抽象方法，为了使用<code>@Binds</code>注解，我们首先构造一个抽象类DBUtilsModule用于提供DBUtils，LocalDBUtils继承自DBUtils，我们希望不直接用到LocalDBUtils的构造方法而去生成它。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先这是一个Module，而且是抽象的，其次provideLocalDBUtils方法也是抽象的，用@Binds修饰，方法的参数即返回的实例</span></span><br><span class="line"><span class="comment">// 为了对比，加上了一个普通的Provides修饰的方法</span></span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">DBUtilsModule</span> </span>&#123;</span><br><span class="line">  <span class="comment">// provideLocalDBUtils看似返回的是DBUtils，但实际返回的是LocalDBUtils的实例</span></span><br><span class="line">    <span class="meta">@Binds</span></span><br><span class="line">    <span class="meta">@LocalDBDataUtils</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> DBUtils <span class="title">provideLocalDBUtils</span><span class="params">(LocalDBUtils localDBUtils)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> DBUtils <span class="title">provideDBUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DBUtils();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为使用provideLocalDBUtils方法，所以需要通过inject的方法提供LocalDBUtils实例，这里使用最简单的构造函数注入，</span></span><br><span class="line"><span class="comment">// 当然也可以使用Module提供LocalDBUtils实例，这里仅作演示</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalDBUtils</span> <span class="keyword">extends</span> <span class="title">DBUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LocalDBUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"This is LocalDBDataUtils"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 增加一个限定符注解，为了区分provideDBUtils和provideLocalDBUtils</span></span><br><span class="line"><span class="meta">@Qualifier</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> LocalDBDataUtils &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同理需要定义一个Component来提供实例方法，也可以不用这个Component，具体区别稍后再点明</span></span><br><span class="line"><span class="meta">@Component</span>(modules = DBUtilsModule<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">DBUtilsComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LocalDBDataUtils</span></span><br><span class="line">    <span class="function">DBUtils <span class="title">getLocalDBUtils</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">DBUtils <span class="title">getDBUtils</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果加了上面的DBUtilsComponent，则ActivityComponent需要用dependencies</span></span><br><span class="line"><span class="meta">@Component</span>(dependencies = DBUtilsComponent<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">SecondActivityComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(SecondActivity secondActivity)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果不加上面的DBUtilsComponent，则ActivityComponent需要用modules</span></span><br><span class="line"><span class="meta">@Component</span>(modules = DBUtilsModule<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">SecondActivityComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(SecondActivity secondActivity)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后再SecondActivity中使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取实例可以通过限定符注解的方法获取指定的实例</span></span><br><span class="line">    <span class="comment">// 比如这里@LocalDBDataUtils表明需要provideLocalDBUtils方法返回的实例</span></span><br><span class="line">    <span class="comment">// 如果这里不加@LocalDBDataUtils，则代表provideDBUtils返回的实例</span></span><br><span class="line">    <span class="meta">@LocalDBDataUtils</span></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DBUtils dbUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_second);</span><br><span class="line">        <span class="comment">// 如果加了上面的DBUtilsComponent</span></span><br><span class="line">        DaggerSecondActivityComponent</span><br><span class="line">                .builder()</span><br><span class="line">                .dBUtilsComponent(DaggerDBUtilsComponent.create())</span><br><span class="line">                .build()</span><br><span class="line">                .inject(<span class="keyword">this</span>);        </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果不加上面的DBUtilsComponent</span></span><br><span class="line">        DaggerSecondActivityComponent</span><br><span class="line">                .create()</span><br><span class="line">                .inject(<span class="keyword">this</span>);</span><br><span class="line">        Log.i(<span class="string">"MainActivity2"</span>, dbUtils.showMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>@Binds</code>修饰抽象方法会有什么区别呢，我们在加了上面的DBUtilsComponent的情况下看一下源码DaggerDBUtilsComponent</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DaggerDBUtilsComponent</span> <span class="keyword">implements</span> <span class="title">DBUtilsComponent</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">DaggerDBUtilsComponent</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Builder();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DBUtilsComponent <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Builder().build();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// Binds修饰抽象方法会导致实例在DaggerDBUtilsComponent直接构造生成</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> DBUtils <span class="title">getLocalDBUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LocalDBUtils();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 普通的Provides修饰是通过DBUtilsModule_ProvideDBUtilsFactory工厂类生成</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> DBUtils <span class="title">getDBUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> DBUtilsModule_ProvideDBUtilsFactory.provideDBUtils();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DBUtilsComponent <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> DaggerDBUtilsComponent();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简而言之，<code>@Binds</code>注解的作用还是修饰提供实例的方法，但是其修饰的方法的参数即返回的实例，我们不需要显示地调用需要地实例地构造函数，因为在生成地代码中为我们完成了这些工作，与此同时，它地效率可能会高一些，因为是直接在Component中生成的。</p><p><code>@BindsInstance</code>比较适合与<code>@Component.Builder</code>方法一起说明，直接看代码，我们这里需要注入Application的Context，虽然显得很奇怪</p><p>首先是AppComponent，最后需要用这个调用inject方法注入到Application中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单例模式，以及modules参数不解释</span></span><br><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="meta">@Component</span>(modules = AppModule<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">AppComponent</span> </span>&#123;</span><br><span class="line"><span class="comment">// 这里出现了@Component.Builder注解，它的作用是提供自定义的方式构造此Component，根据注释要求</span></span><br><span class="line"><span class="comment">// 1. 必须有一个返回此Component的build方法 AppComponent build();</span></span><br><span class="line"><span class="comment">// 2. 可以有抽象方法作为setter方法</span></span><br><span class="line"><span class="comment">// 3. setter方法必须有一个参数，并且返回void、builder、builder的父类</span></span><br><span class="line"><span class="comment">// 4. 必须有一个setter方法用于设置dependencies（如果有的话）</span></span><br><span class="line"><span class="comment">// 5. 必须有setter方法用于设置modules里面有非抽象方法的非抽象module</span></span><br><span class="line"><span class="comment">// 6. 可以有setter方法初始化modules</span></span><br><span class="line"><span class="comment">// 7. 可以有@BindsInstance修饰的方法将绑定的实例传递给此Component</span></span><br><span class="line"><span class="comment">// 8. 可以有非抽象方法，但是如果与builder生成相关则会被忽略</span></span><br><span class="line"><span class="comment">// 注释说的并不是很清楚，需要自行测试其功能，此处仅演示</span></span><br><span class="line">    <span class="meta">@Component</span>.Builder</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里两个方法setApplication和setDBName暴露出去，在调用inject方法时初始化</span></span><br><span class="line">        <span class="comment">// 且这两个方法的参数application和name会被传入到AppModule的provide方法的参数中</span></span><br><span class="line">        <span class="comment">// 即我们实现了在外部对Component进行初始化参数设置的功能</span></span><br><span class="line">        <span class="meta">@BindsInstance</span></span><br><span class="line">        <span class="function">Builder <span class="title">setApplication</span><span class="params">(Application application)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@BindsInstance</span></span><br><span class="line">        <span class="function">Builder <span class="title">setDBName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function">AppComponent <span class="title">build</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MyApp app)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来是AppModule，提供两个方法用于提供实例，注入的对象分别是Context和Integer（Context是上下文，后续会介绍；Integer是演示，没有意义）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里传入的两个参数application和name来自于AppComponent的Builder方法中的setApplication和setDBName</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="function">Context <span class="title">provideContext</span><span class="params">(Application application)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> application;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="function">Integer <span class="title">provideDBName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后在自定义的Application中注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Context context;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Integer dbName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        <span class="comment">// 传入的参数包括this和hello.db</span></span><br><span class="line">        <span class="comment">// 这样就把传入的参数通过Component转换并注入到MyApp中了</span></span><br><span class="line">        <span class="comment">// 虽然这种方式没有意义，但是后续有用，这里仅演示BindsInstance的功能</span></span><br><span class="line">        DaggerAppComponent</span><br><span class="line">                .builder()</span><br><span class="line">                .setApplication(<span class="keyword">this</span>)</span><br><span class="line">                .setDBName(<span class="string">"hello.db"</span>)</span><br><span class="line">                .build()</span><br><span class="line">                .inject(<span class="keyword">this</span>);</span><br><span class="line">        Log.i(<span class="string">"MyApp"</span>, context.toString());</span><br><span class="line">        Log.i(<span class="string">"MyApp"</span>, dbName.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@MultiBinds</code>顾名思义，肯定与注入多个对象相关，假如我们需要在Module里提供了很多相同类型的 对象，如果我们不使用<code>@Qualifer</code>，就会导致同一类型重复绑定的错误。但是如果我们确实需要在一个Module里包含这些对象的创建，又不想创建N多的<code>@Qualifer</code>，我们就可以使用<code>@MultiBind</code>机制来达到我们的目的。</p><p>MultiBind机制允许我们为这些对象创建一个集合，这个集合必须是Set或者Map，这样在Component中，我们就可以暴露这个集合，通过集合来获取不同的对象。这个集合的创建有三种方法</p><p>1.使用<code>@IntoSet</code>或者<code>@IntoMap</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 还记得上面提到的@MapKey注解吗</span></span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UtilsMapModule</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 这里首先是Provides注解，然后是IntoMap注解，最后是前面定义的MapKey注解，同时传入了Map的key值为thisiskey</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@IntoMap</span></span><br><span class="line">    <span class="meta">@UtilsMapKey</span>(<span class="string">"thisiskey1"</span>)</span><br><span class="line">    <span class="function">Integer <span class="title">provideUtilsMapValue1</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="comment">// 返回值即为value，虽然返回值为value，但实际上注入时传入的是整个Map</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">11</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 下面加的代码没有测试过，仅演示</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@IntoMap</span></span><br><span class="line">    <span class="meta">@UtilsMapKey</span>(<span class="string">"thisiskey2"</span>)</span><br><span class="line">    <span class="function">Integer <span class="title">provideUtilsMapValue2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">12</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@IntoSet</span></span><br><span class="line">    <span class="function">Integer <span class="title">provideUtilsSetValue1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">111</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@IntoSet</span></span><br><span class="line">    <span class="function">Integer <span class="title">provideUtilsSetValue2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">222</span>;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.直接提供Set或者Map类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UtilsMapModule</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function">Set&lt;String&gt; <span class="title">provideUtilsSet</span><span class="params">()</span></span>&#123;</span><br><span class="line">      Set&lt;String&gt; utils = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">      utils.add(<span class="string">"utils1"</span>);</span><br><span class="line">      utils.add(<span class="string">"utils2"</span>);</span><br><span class="line">      <span class="keyword">return</span> utils;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function">Map&lt;String, Integer&gt; <span class="title">provideUtilsMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">      Map&lt;String, Integer&gt; utils = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">      utils.put(<span class="string">"utils-key1"</span>, <span class="number">111</span>);</span><br><span class="line">      utils.put(<span class="string">"utils-key2"</span>, <span class="number">222</span>);</span><br><span class="line">      <span class="keyword">return</span> utils;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.使用<code>@MultiBinds</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">UtilsBindModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Multibinds</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> Set&lt;String&gt; <span class="title">utilsSet</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Multibinds</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> Map&lt;String, Integer&gt; <span class="title">utilsMap</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MultiBinds只能用于标注抽象方法，它仅仅是告诉Component我有这么一种提供类型，让我们Component可以在Component中暴露Set或者Map类型的接口，但是不能包含具体的元素。Multibinds注解是可以和第一种集合定义混用的。</p><p>如果将UtilsBindModule单独加在某个Component的modules参数时，它并不能提供实例，而是提供一个空的实例，如果将它和另一个可以提供具体实例的Module一起加在某个Component的modules参数时，会自动获取非空实例，此时UtilsBindModule没有作用。</p><h2 id="2-daggerandroid进阶"><a class="markdownIt-Anchor" href="#2-daggerandroid进阶"></a> 2. dagger.android进阶</h2><p>dagger框架可以用于Java Web项目同时也可以用于Android项目，但是在Android项目中，最重要最常用的几个组件比如Activity，如果需要进行依赖注入，那会是一个什么样的情形呢。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XXXActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    XXXEntity entity;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        DaggerXXXActivityComponent.create().inject(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="keyword">module</span> = XXXEntityModule<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">XXXActivityComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(XXXActivity activity)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XXXEntityModule</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function">XXXEntity <span class="title">provideXXXEntity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> XXXEntity();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以最简单的单个对象XXXEntity注入，我们需要在每一个Activity中加上<code>DaggerXXXActivityComponent.create().inject(this);</code>，每一个XXXActivityComponent又需要指定其module，这样就会产生很多重复的代码，且会引起结构混乱；</p><p>有人可能会说，那直接用一个ActivityComponent不行吗，把所有的Activity需要的XXXEntity的module都加进去，那就会产生一个module参数非常长的ActivityComponent，显然这也是不合理的；</p><p>还有人说，将那些需要相同XXXEntity的Activity使用相同的XXXActivityComponent，不就可以减少很多代码了，显然，项目的复杂度决定了这样的操作依然会产生很多重复代码。</p><p>所以我们的目的是在Activity中使用inject方法时不需要知道是哪个XXXActivityComponent，也就是说用一个通用方法<code>AndroidInjection.inject(this)</code>替换<code>DaggerXXXActivityComponent.create().inject(this)</code>，这样就可以在BaseActivity中加入这个方法，那么继承自BaseActivity的Activity就不需要再重复写了。</p><p>与此同时，如果XXXActivityComponent也能简化或者集成，那就非常完美了，最终我们需要的是自定义XXXEntityModule，用于提供不同Activity需要的注入对象。</p><p>那么首先需要回顾一下<code>DaggerXXXActivityComponent.create().inject(this)</code>，详情请往上翻，本质上相当于调用<code>this.XXXEntity = new XXXEntity()</code>，但是初始化过程Avtivity并不需要知道，都是通过dagger生成的代码执行的结果。</p><h3 id="21-injecting-activity-objects"><a class="markdownIt-Anchor" href="#21-injecting-activity-objects"></a> 2.1 Injecting Activity objects</h3><p>官网给出了在Activity中进行依赖注入的步骤，首先过一遍流程，然后再根据代码分析原理：</p><blockquote><p>1.实现一个Component在自定义Application中注入</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AppComponent.java</span></span><br><span class="line"><span class="comment">// 这里的module参数必须添加AndroidInjectionModule.class，后面的MainActivityModule.class和AppModule.class有其他作用</span></span><br><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="meta">@Component</span>(modules = &#123;AndroidInjectionModule<span class="class">.<span class="keyword">class</span>, <span class="title">MainActivityModule</span>.<span class="title">class</span>, <span class="title">AppModule</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">AppComponent</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里inject的参数是自定义MyApplication，也说明了这个需要在MyApplication中调用</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MyApplication application)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2.实现一个Subcomponent与需要注入的Activity关联</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MainActivitySubComponent.java</span></span><br><span class="line"><span class="comment">// 这里接口继承自AndroidInjector&lt;YourActivity&gt;，</span></span><br><span class="line"><span class="comment">// 同时需要一个Subcomponent.Factory工厂类继承自AndroidInjector.Factory&lt;YourActivity&gt;</span></span><br><span class="line"><span class="comment">// 现在你可能一脸懵逼，这是啥，为什么要这么写，但是没关系，后面肯定会用到</span></span><br><span class="line"><span class="meta">@Subcomponent</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MainActivitySubComponent</span> <span class="keyword">extends</span> <span class="title">AndroidInjector</span>&lt;<span class="title">MainActivity</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Subcomponent</span>.Factory</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Factory</span> <span class="keyword">extends</span> <span class="title">AndroidInjector</span>.<span class="title">Factory</span>&lt;<span class="title">MainActivity</span>&gt; </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3.实现module为你的XXXActivity提供其需要的对象，这一步还有优化的可能，后面介绍</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MainActivityModule.java</span></span><br><span class="line"><span class="comment">// 这里的subcomponents需要上一步定义的MainActivitySubComponent.class，而且这是一个抽象类</span></span><br><span class="line"><span class="meta">@Module</span>(subcomponents = MainActivitySubComponent<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">abstract</span> <span class="title">class</span> <span class="title">MainActivityModule</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 还记得上面提到的@Binds注解吗，这里表示MainActivityModule可以提供MainActivitySubComponent.Factory对象</span></span><br><span class="line">    <span class="comment">// 前提是key为MainActivity.class</span></span><br><span class="line">    <span class="meta">@Binds</span></span><br><span class="line">    <span class="meta">@IntoMap</span></span><br><span class="line">    <span class="meta">@ClassKey</span>(MainActivity<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">abstract</span> <span class="title">AndroidInjector</span>.<span class="title">Factory</span>&lt;?&gt;</span></span><br><span class="line"><span class="class">    <span class="title">bindMainActivityAndroidInjectorFactory</span>(<span class="title">MainActivitySubComponent</span>.<span class="title">Factory</span> <span class="title">factory</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 然后需要一个提供对象的provide方法，这个Entity也就是最终我们需要在MainActivity中用到的对象</span></span><br><span class="line">    <span class="comment">// Singleton注解会导致局部单例而不是全局单例，因为只能在MainActivity中使用</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Entity <span class="title">provideEntity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Entity();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>4.自定义Application实现HasAndroidInjector接口，并且进行注入</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyApplication.java</span></span><br><span class="line"><span class="comment">// extends Application implements HasActivityInjector</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> <span class="keyword">implements</span> <span class="title">HasActivityInjector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 需要DispatchingAndroidInjector对象，并且在activityInjector()方法中返回</span></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DispatchingAndroidInjector&lt;Activity&gt; dispatchingActivityInjector;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        <span class="comment">// 使用第一步定义的Component进行注入</span></span><br><span class="line">        DaggerAppComponent.create()</span><br><span class="line">                .inject(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AndroidInjector&lt;Activity&gt; <span class="title">activityInjector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dispatchingActivityInjector;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>5.最终在Activity中的onCreate方法中调用<code>AndroidInjection.inject(this)</code>，在super.onCreate()之前</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MainActivity.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 首先是Entity对象，它是在MainActivityModule中引入的</span></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Entity entity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其次是String对象，它是在AppModule中引入的</span></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    String info;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        AndroidInjection.inject(<span class="keyword">this</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        </span><br><span class="line">        TextView textView = findViewById(R.id.text);</span><br><span class="line">        <span class="comment">// 这里就可以直接使用entity的方法showMessage()，以及info对象的值</span></span><br><span class="line">        String text = entity.showMessage() + <span class="string">" - "</span> + info;</span><br><span class="line">        textView.setText(text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Entity.java</span></span><br><span class="line"><span class="comment">// MainActivity中需要的对象，仅作演示</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Entity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg = <span class="string">"Dagger inject"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Entity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AppModule.java</span></span><br><span class="line"><span class="comment">// AppModule用于提供全局需要的对象，比如Context，或者一些全局设置比如SharedPreferences、数据库名称等等</span></span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里增加了一个String字符，仅作演示</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="function">String <span class="title">provideGlobalInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"This is global info"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="22-injecting-activity-objects源码分析"><a class="markdownIt-Anchor" href="#22-injecting-activity-objects源码分析"></a> 2.2 Injecting Activity objects源码分析</h3><p>需要分析源码才能知道问什么上面我们需要定义各种Factory接口以及为什么要在Application中进行注入</p><p>那么首先从Activity中开始，这是使用dagger依赖注入的终点，MainActivity中仅有一处与dagger相关<code>AndroidInjection.inject(this);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AndroidInjection.java</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Injects &#123;<span class="doctag">@code</span> activity&#125; if an associated &#123;<span class="doctag">@link</span> AndroidInjector&#125; implementation can be found,</span></span><br><span class="line"><span class="comment">   * otherwise throws an &#123;<span class="doctag">@link</span> IllegalArgumentException&#125;.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> RuntimeException if the &#123;<span class="doctag">@link</span> Application&#125; doesn't implement &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment">   *     HasActivityInjector&#125;.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">    checkNotNull(activity, <span class="string">"activity"</span>);</span><br><span class="line">    Application application = activity.getApplication();</span><br><span class="line">    <span class="comment">// 这里对application进行了判断，如果没有实现HasActivityInjector，那么会报错</span></span><br><span class="line">    <span class="comment">// 这也是为什么我们自定义的Application需要实现HasActivityInjector接口</span></span><br><span class="line">    <span class="keyword">if</span> (!(application <span class="keyword">instanceof</span> HasActivityInjector)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">          String.format(</span><br><span class="line">              <span class="string">"%s does not implement %s"</span>,</span><br><span class="line">              application.getClass().getCanonicalName(),</span><br><span class="line">              HasActivityInjector<span class="class">.<span class="keyword">class</span>.<span class="title">getCanonicalName</span>()))</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 这里调用了application的activityInjector()方法，得到了一个AndroidInjector&lt;Activity&gt;对象</span></span><br><span class="line">    AndroidInjector&lt;Activity&gt; activityInjector =</span><br><span class="line">        ((HasActivityInjector) application).activityInjector();</span><br><span class="line">    checkNotNull(activityInjector, <span class="string">"%s.activityInjector() returned null"</span>, application.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 然后通过AndroidInjector&lt;Activity&gt;对象，调用其inject方法对当前的activity进行注入</span></span><br><span class="line">    activityInjector.inject(activity);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>与MainActivity中的<code>AndroidInjection.inject(this);</code>相关联的是自定义的MyApplication，且调用了它的<code>activityInjector()</code>方法，这也是为什么我们需要在自定义Application中实现<code>activityInjector()</code>方法，且返回了一个DispatchingAndroidInjector<Activity>对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyApplication.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> <span class="keyword">implements</span> <span class="title">HasActivityInjector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据上文的分析，我们知道了在MainActivity中调用的inject方法其实是调用了dispatchingActivityInjector的inject方法</span></span><br><span class="line">    <span class="comment">// 而这个DispatchingAndroidInjector&lt;Activity&gt;对象竟然也是通过注入的方式获取的，它的来源DaggerAppComponent.create().inject(this);</span></span><br><span class="line">    <span class="comment">// 因此我们需要到AppComponent中找到DispatchingAndroidInjector&lt;Activity&gt;是怎么来的</span></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DispatchingAndroidInjector&lt;Activity&gt; dispatchingActivityInjector;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line"></span><br><span class="line">        DaggerAppComponent.create().inject(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AndroidInjector&lt;Activity&gt; <span class="title">activityInjector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dispatchingActivityInjector;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在分析AppComponent先看看<code>DaggerAppComponent.create().inject(this);</code>做了些什么工作，这里代码都比较多，关联了很多其他类，<br />这里可以按照记号按顺序分析<code>DaggerAppComponent.create().inject(this)</code>的调用过程，显然这里有建造者模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DaggerAppComponent</span> <span class="keyword">implements</span> <span class="title">AppComponent</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Provider&lt;MainActivitySubComponent.Factory&gt; mainActivitySubComponentFactoryProvider;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Provider&lt;Entity&gt; provideEntityProvider;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Provider&lt;String&gt; provideGlobalInfoProvider;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. Builder().build()返回了DaggerAppComponent对象</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">DaggerAppComponent</span><span class="params">(AppModule appModuleParam)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    initialize(appModuleParam);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Builder();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 调用静态方法create，返回了Builder().build()</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AppComponent <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Builder().build();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 11. getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf方法返回的是SingletonMap，key是MainActivity.class</span></span><br><span class="line"><span class="comment">// value是mainActivitySubComponentFactoryProvider，简而言之还是一个map，然后需要看10中DispatchingAndroidInjector_Factory</span></span><br><span class="line"><span class="comment">// 的实例是如何构造的</span></span><br><span class="line">  <span class="keyword">private</span> Map&lt;Class&lt;?&gt;, Provider&lt;AndroidInjector.Factory&lt;?&gt;&gt;&gt;</span><br><span class="line">      getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf() &#123;</span><br><span class="line">    <span class="keyword">return</span> Collections.&lt;Class&lt;?&gt;, Provider&lt;AndroidInjector.Factory&lt;?&gt;&gt;&gt;singletonMap(</span><br><span class="line">        MainActivity<span class="class">.<span class="keyword">class</span>, (<span class="title">Provider</span>) <span class="title">mainActivitySubComponentFactoryProvider</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 10. getDispatchingAndroidInjectorOfActivity返回的是DispatchingAndroidInjector_Factory的实例</span></span><br><span class="line"><span class="comment">// 带入了参数getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf()以及一个emptyMap，对的就是空map，仅包含了key和value的类型</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> DispatchingAndroidInjector&lt;Activity&gt; <span class="title">getDispatchingAndroidInjectorOfActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> DispatchingAndroidInjector_Factory.newInstance(</span><br><span class="line">        getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),</span><br><span class="line">        Collections.&lt;String, Provider&lt;AndroidInjector.Factory&lt;?&gt;&gt;&gt;emptyMap());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. DaggerAppComponent构造方法里执行了initialize方法，这个initialize对DaggerAppComponent类里面的私有变量进行了初始化</span></span><br><span class="line">  <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(<span class="keyword">final</span> AppModule appModuleParam)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 4.1 首先是mainActivitySubComponentFactoryProvider，返回了一个Provider对象，</span></span><br><span class="line">    <span class="comment">// 根据注释可以知道Provider用于提供一个已经构造好的用于注入的对象实例，如果调用这个Provider的get方法，</span></span><br><span class="line">    <span class="comment">// 我们就可以得到MainActivitySubComponentFactory对象</span></span><br><span class="line">    <span class="keyword">this</span>.mainActivitySubComponentFactoryProvider =</span><br><span class="line">        <span class="keyword">new</span> Provider&lt;MainActivitySubComponent.Factory&gt;() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="keyword">public</span> MainActivitySubComponent.<span class="function">Factory <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MainActivitySubComponentFactory();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    <span class="comment">// 4.2 provideEntityProvider被赋值为MainActivityModule_ProvideEntityFactory.create()</span></span><br><span class="line">    <span class="comment">// 使用DoubleCheck是因为Entity在provide方法中标注了Singleton，</span></span><br><span class="line">    <span class="comment">// MainActivityModule_ProvideEntityFactory的作用将在下面继续介绍</span></span><br><span class="line">    <span class="keyword">this</span>.provideEntityProvider =</span><br><span class="line">        DoubleCheck.provider(MainActivityModule_ProvideEntityFactory.create());</span><br><span class="line">    <span class="comment">// 4.3 provideGlobalInfoProvider同理，但是AppModule_ProvideGlobalInfoFactory.create(appModuleParam)</span></span><br><span class="line">    <span class="comment">// 多了一个参数，AppModule_ProvideGlobalInfoFactory的作用将在下面继续介绍</span></span><br><span class="line">    <span class="keyword">this</span>.provideGlobalInfoProvider =</span><br><span class="line">        DoubleCheck.provider(AppModule_ProvideGlobalInfoFactory.create(appModuleParam));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 8. DaggerAppComponent.create().inject(this)的最后一步，实际调用injectMyApplication</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(MyApplication application)</span> </span>&#123;</span><br><span class="line">    injectMyApplication(application);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 9. 两个关键，MyApplication_MembersInjector类以及本地的getDispatchingAndroidInjectorOfActivity()方法</span></span><br><span class="line"><span class="comment">// MyApplication_MembersInjector类后续再介绍，但是本质上injectDispatchingActivityInjector方法等价于</span></span><br><span class="line"><span class="comment">// instance.DispatchingActivityInjector = getDispatchingAndroidInjectorOfActivity()</span></span><br><span class="line"><span class="comment">// 先看getDispatchingAndroidInjectorOfActivity()方法</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> MyApplication <span class="title">injectMyApplication</span><span class="params">(MyApplication instance)</span> </span>&#123;</span><br><span class="line">    MyApplication_MembersInjector.injectDispatchingActivityInjector(</span><br><span class="line">        instance, getDispatchingAndroidInjectorOfActivity());</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AppModule appModule;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">appModule</span><span class="params">(AppModule appModule)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.appModule = Preconditions.checkNotNull(appModule);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Builder().build() new了一个AppModule对象，然后返回了DaggerAppComponent(appModule)的对象，</span></span><br><span class="line"><span class="comment">// 还记得AppModule类的功能吗，提供全局对象，其中有一个String provideGlobalInfo()方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AppComponent <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (appModule == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.appModule = <span class="keyword">new</span> AppModule();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> DaggerAppComponent(appModule);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. MainActivitySubComponentFactory类实现了MainActivitySubComponent.Factory接口的create方法，</span></span><br><span class="line"><span class="comment">// 最终还是返回了MainActivitySubComponentImpl对象</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivitySubComponentFactory</span> <span class="keyword">implements</span> <span class="title">MainActivitySubComponent</span>.<span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MainActivitySubComponent <span class="title">create</span><span class="params">(MainActivity arg0)</span> </span>&#123;</span><br><span class="line">      Preconditions.checkNotNull(arg0);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> MainActivitySubComponentImpl(arg0);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. MainActivitySubComponentImpl对象实现了MainActivitySubComponent接口的inject方法，</span></span><br><span class="line"><span class="comment">// 这是由于MainActivitySubComponent继承自AndroidInjector&lt;MainActivity&gt;</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivitySubComponentImpl</span> <span class="keyword">implements</span> <span class="title">MainActivitySubComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MainActivitySubComponentImpl</span><span class="params">(MainActivity arg0)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity arg0)</span> </span>&#123;</span><br><span class="line">      injectMainActivity(arg0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. 最终调用inject方法时，我们看到了inject(MainActivity arg0)参数为MainActivity，</span></span><br><span class="line"><span class="comment">// 想必此时你应该猜到了在MainActivity中的一句话AndroidInjection.inject(this)竟然能在异国他乡被实现</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> MainActivity <span class="title">injectMainActivity</span><span class="params">(MainActivity instance)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 这里的两个方法injectEntity和injectInfo分别对应了我们在MainActivity中注入的两个对象，instance是MainActivity，</span></span><br><span class="line">      <span class="comment">// provideEntityProvider.get()和provideGlobalInfoProvider.get()方法对应上面initialize方法初始化的私有变量，</span></span><br><span class="line">      <span class="comment">// 看这个方法的样子就知道这是对MainActivity进行注入的实际方法，MainActivity_MembersInjector的作用将在下面继续介绍</span></span><br><span class="line">      MainActivity_MembersInjector.injectEntity(</span><br><span class="line">          instance, DaggerAppComponent.<span class="keyword">this</span>.provideEntityProvider.get());</span><br><span class="line">      MainActivity_MembersInjector.injectInfo(</span><br><span class="line">          instance, DaggerAppComponent.<span class="keyword">this</span>.provideGlobalInfoProvider.get());</span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MainActivityModule_ProvideEntityFactory.java</span></span><br><span class="line"><span class="comment">// 接上文4.2</span></span><br><span class="line"><span class="comment">// Factory&lt;Entity&gt;继承自Provider，Provider之前提到过用于提供构造好的实例，通过get方法返回</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivityModule_ProvideEntityFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span>&lt;<span class="title">Entity</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MainActivityModule_ProvideEntityFactory INSTANCE =</span><br><span class="line">      <span class="keyword">new</span> MainActivityModule_ProvideEntityFactory();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Entity <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> provideEntity();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 4.2-1 首先是create方法返回实例，这是饿汉式单例模式，在类初始化时，已经自行实例化</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MainActivityModule_ProvideEntityFactory <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> INSTANCE;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 接上文7-1，provideEntity方法返回的是MainActivityModule.provideEntity()，而MainActivityModule</span></span><br><span class="line"><span class="comment">// 是我们定义的，MainActivityModule.provideEntity()返回new Entity()，所以我们最终得到了new出来的对象</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Entity <span class="title">provideEntity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Preconditions.checkNotNull(</span><br><span class="line">        MainActivityModule.provideEntity(),</span><br><span class="line">        <span class="string">"Cannot return null from a non-@Nullable @Provides method"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AppModule_ProvideGlobalInfoFactory.java</span></span><br><span class="line"><span class="comment">// 接上文4.3</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule_ProvideGlobalInfoFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> AppModule <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">AppModule_ProvideGlobalInfoFactory</span><span class="params">(AppModule <span class="keyword">module</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.<span class="keyword">module</span> = <span class="keyword">module</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> provideGlobalInfo(<span class="keyword">module</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 4.3-1 首先也是create方法，观察一下与MainActivityModule_ProvideEntityFactory的create方法的不同之处</span></span><br><span class="line"><span class="comment">// 这里通过构造方法返回了实例，而不是单例模式，要知道AppModule和MainActivityModule中都是加入了Singleton注解</span></span><br><span class="line"><span class="comment">// todo 这可能是因为需要传入参数create(AppModule module)的原因，而且AppModule是一个类而MainActivityModule</span></span><br><span class="line"><span class="comment">// 是一个抽象类</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AppModule_ProvideGlobalInfoFactory <span class="title">create</span><span class="params">(AppModule <span class="keyword">module</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AppModule_ProvideGlobalInfoFactory(<span class="keyword">module</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 接上文7-1，provideGlobalInfo返回的就是我们在AppModule定义的String "This is global info"</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">provideGlobalInfo</span><span class="params">(AppModule instance)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Preconditions.checkNotNull(</span><br><span class="line">        instance.provideGlobalInfo(), <span class="string">"Cannot return null from a non-@Nullable @Provides method"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DispatchingAndroidInjector_Factory.java</span></span><br><span class="line"><span class="comment">// 接上文10，我们传入的参数是两个map，一个为空，另一个与MainActivity相关</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatchingAndroidInjector_Factory</span>&lt;<span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Factory</span>&lt;<span class="title">DispatchingAndroidInjector</span>&lt;<span class="title">T</span>&gt;&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Provider&lt;Map&lt;Class&lt;?&gt;, Provider&lt;AndroidInjector.Factory&lt;?&gt;&gt;&gt;&gt;</span><br><span class="line">      injectorFactoriesWithClassKeysProvider;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Provider&lt;Map&lt;String, Provider&lt;AndroidInjector.Factory&lt;?&gt;&gt;&gt;&gt;</span><br><span class="line">      injectorFactoriesWithStringKeysProvider;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">DispatchingAndroidInjector_Factory</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      Provider&lt;Map&lt;Class&lt;?&gt;, Provider&lt;AndroidInjector.Factory&lt;?&gt;&gt;&gt;&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">          injectorFactoriesWithClassKeysProvider,</span></span></span><br><span class="line"><span class="function"><span class="params">      Provider&lt;Map&lt;String, Provider&lt;AndroidInjector.Factory&lt;?&gt;&gt;&gt;&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">          injectorFactoriesWithStringKeysProvider)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.injectorFactoriesWithClassKeysProvider = injectorFactoriesWithClassKeysProvider;</span><br><span class="line">    <span class="keyword">this</span>.injectorFactoriesWithStringKeysProvider = injectorFactoriesWithStringKeysProvider;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> DispatchingAndroidInjector&lt;T&gt; <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DispatchingAndroidInjector&lt;T&gt;(</span><br><span class="line">        injectorFactoriesWithClassKeysProvider.get(),</span><br><span class="line">        injectorFactoriesWithStringKeysProvider.get());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">DispatchingAndroidInjector_Factory&lt;T&gt; <span class="title">create</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      Provider&lt;Map&lt;Class&lt;?&gt;, Provider&lt;AndroidInjector.Factory&lt;?&gt;&gt;&gt;&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">          injectorFactoriesWithClassKeysProvider,</span></span></span><br><span class="line"><span class="function"><span class="params">      Provider&lt;Map&lt;String, Provider&lt;AndroidInjector.Factory&lt;?&gt;&gt;&gt;&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">          injectorFactoriesWithStringKeysProvider)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DispatchingAndroidInjector_Factory&lt;T&gt;(</span><br><span class="line">        injectorFactoriesWithClassKeysProvider, injectorFactoriesWithStringKeysProvider);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 10-1 newInstance返回的是DispatchingAndroidInjector，先简单说明一下这个类的作用</span></span><br><span class="line"><span class="comment">// DispatchingAndroidInjector类是一个完成对Activity或Fragment进行依赖注入的类，因为传入的参数包括</span></span><br><span class="line"><span class="comment">// injectorFactoriesWithClassKeys，这个Map根据前面的分析可知它的key就是Activity.class或者Fragment.class</span></span><br><span class="line"><span class="comment">// 即依赖注入的位置，它的value是一个Provider，这个Provider提供inject方法，专门用于将依赖实例注入到</span></span><br><span class="line"><span class="comment">// key对应的Activity或Fragment中</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">DispatchingAndroidInjector&lt;T&gt; <span class="title">newInstance</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      Map&lt;Class&lt;?&gt;, Provider&lt;AndroidInjector.Factory&lt;?&gt;&gt;&gt; injectorFactoriesWithClassKeys,</span></span></span><br><span class="line"><span class="function"><span class="params">      Map&lt;String, Provider&lt;AndroidInjector.Factory&lt;?&gt;&gt;&gt; injectorFactoriesWithStringKeys)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DispatchingAndroidInjector&lt;T&gt;(</span><br><span class="line">        injectorFactoriesWithClassKeys, injectorFactoriesWithStringKeys);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>详细分析DispatchingAndroidInjector类的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注释已经说的很清楚了，DispatchingAndroidInjector类是一个完成对Activity或Fragment进行依赖注入的类</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Performs members-injection on instances of core Android types (e.g. &#123;<span class="doctag">@link</span> Activity&#125;, &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * Fragment&#125;) that are constructed by the Android framework and not by Dagger. This class relies on</span></span><br><span class="line"><span class="comment"> * an injected mapping from each concrete class to an &#123;<span class="doctag">@link</span> AndroidInjector.Factory&#125; for an &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * AndroidInjector&#125; of that class. Each concrete class must have its own entry in the map, even if</span></span><br><span class="line"><span class="comment"> * it extends another class which is already present in the map. Calls &#123;<span class="doctag">@link</span> Object#getClass()&#125; on</span></span><br><span class="line"><span class="comment"> * the instance in order to find the appropriate &#123;<span class="doctag">@link</span> AndroidInjector.Factory&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; the core Android type to be injected</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Beta</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatchingAndroidInjector</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">AndroidInjector</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NO_SUPERTYPES_BOUND_FORMAT =</span><br><span class="line">      <span class="string">"No injector factory bound for Class&lt;%s&gt;"</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SUPERTYPES_BOUND_FORMAT =</span><br><span class="line">      <span class="string">"No injector factory bound for Class&lt;%1$s&gt;. Injector factories were bound for supertypes "</span></span><br><span class="line">          + <span class="string">"of %1$s: %2$s. Did you mean to bind an injector factory for the subtype?"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Provider&lt;AndroidInjector.Factory&lt;?&gt;&gt;&gt; injectorFactories;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接上文10-1，这里就是初始化的位置，调用了merge方法</span></span><br><span class="line">  <span class="meta">@Inject</span></span><br><span class="line">  DispatchingAndroidInjector(</span><br><span class="line">      Map&lt;Class&lt;?&gt;, Provider&lt;AndroidInjector.Factory&lt;?&gt;&gt;&gt; injectorFactoriesWithClassKeys,</span><br><span class="line">      Map&lt;String, Provider&lt;AndroidInjector.Factory&lt;?&gt;&gt;&gt; injectorFactoriesWithStringKeys) &#123;</span><br><span class="line">    <span class="keyword">this</span>.injectorFactories = merge(injectorFactoriesWithClassKeys, injectorFactoriesWithStringKeys);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// merge方法注释也说明了，就是将classKeyedMap的key从Class改为Class.getName的形式</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Merges the two maps into one by transforming the values of the &#123;<span class="doctag">@code</span> classKeyedMap&#125; with</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@link</span> Class#getName()&#125;.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * &lt;p&gt;An SPI plugin verifies the logical uniqueness of the keysets of these two maps so we're</span></span><br><span class="line"><span class="comment">   * assured there's no overlap.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * &lt;p&gt;Ideally we could achieve this with a generic &#123;<span class="doctag">@code</span> <span class="doctag">@Provides</span>&#125; method, but we'd need to have</span></span><br><span class="line"><span class="comment">   * &lt;i&gt;N&lt;/i&gt; modules that each extend one base module.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> &lt;C, V&gt; Map&lt;String, Provider&lt;AndroidInjector.Factory&lt;?&gt;&gt;&gt; merge(</span><br><span class="line">      Map&lt;Class&lt;? extends C&gt;, V&gt; classKeyedMap, Map&lt;String, V&gt; stringKeyedMap) &#123;</span><br><span class="line">    <span class="keyword">if</span> (classKeyedMap.isEmpty()) &#123;</span><br><span class="line">      <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"unchecked"</span>, <span class="string">"rawtypes"</span>&#125;)</span><br><span class="line">      Map&lt;String, Provider&lt;AndroidInjector.Factory&lt;?&gt;&gt;&gt; safeCast = (Map) stringKeyedMap;</span><br><span class="line">      <span class="keyword">return</span> safeCast;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, V&gt; merged =</span><br><span class="line">        newLinkedHashMapWithExpectedSize(classKeyedMap.size() + stringKeyedMap.size());</span><br><span class="line">    merged.putAll(stringKeyedMap);</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;Class&lt;? extends C&gt;, V&gt; entry : classKeyedMap.entrySet()) &#123;</span><br><span class="line">      <span class="comment">// put的位置，key是entry.getKey().getName()即Class.getName()，value为entry.getValue()</span></span><br><span class="line">      <span class="comment">// 即与classKeyedMap的value相同</span></span><br><span class="line">      merged.put(entry.getKey().getName(), entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"unchecked"</span>, <span class="string">"rawtypes"</span>&#125;)</span><br><span class="line">    Map&lt;String, Provider&lt;AndroidInjector.Factory&lt;?&gt;&gt;&gt; safeCast = (Map) merged;</span><br><span class="line">    <span class="keyword">return</span> Collections.unmodifiableMap(safeCast);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// maybeInject方法即最终调用的位置，instance可以是Activity或者Fragment，如果对应我们之前的代码</span></span><br><span class="line"><span class="comment">// 此处应该是instance为MainActivity</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Attempts to perform members-injection on &#123;<span class="doctag">@code</span> instance&#125;, returning &#123;<span class="doctag">@code</span> true&#125; if</span></span><br><span class="line"><span class="comment">   * successful, &#123;<span class="doctag">@code</span> false&#125; otherwise.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> InvalidInjectorBindingException if the injector factory bound for a class does not</span></span><br><span class="line"><span class="comment">   *     inject instances of that class</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@CanIgnoreReturnValue</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">maybeInject</span><span class="params">(T instance)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// injectorFactories为merge方法初始化得到的map，通过get(instance.getClass().getName())</span></span><br><span class="line">    <span class="comment">// 得到Provider，那么对应我们的代码，这个factoryProvider是DaggerAppComponent.java中的mainActivitySubComponentFactoryProvider，</span></span><br><span class="line">    <span class="comment">// 如果调用mainActivitySubComponentFactoryProvider.inject(instance)即完成依赖注入</span></span><br><span class="line">    Provider&lt;AndroidInjector.Factory&lt;?&gt;&gt; factoryProvider =</span><br><span class="line">        injectorFactories.get(instance.getClass().getName());</span><br><span class="line">    <span class="keyword">if</span> (factoryProvider == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// factory = factoryProvider.get()，这里获取到了mainActivitySubComponentFactoryProvider</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    AndroidInjector.Factory&lt;T&gt; factory = (AndroidInjector.Factory&lt;T&gt;) factoryProvider.get();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// injector = factory.create(instance)，即返回了DaggerAppComponent.java中的MainActivitySubComponentImpl实例</span></span><br><span class="line">      AndroidInjector&lt;T&gt; injector =</span><br><span class="line">          checkNotNull(</span><br><span class="line">              factory.create(instance), <span class="string">"%s.create(I) should not return null."</span>, factory.getClass());</span><br><span class="line">      <span class="comment">// injector.inject(instance)，熟悉的味道，这里就是调用MainActivitySubComponentImpl.inject方法的最终位置</span></span><br><span class="line">      <span class="comment">// 在这里完成了实际的依赖注入，前提是需要调用DispatchingAndroidInjector的inject方法(此处预留伏笔)</span></span><br><span class="line">      injector.inject(instance);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassCastException e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> InvalidInjectorBindingException(</span><br><span class="line">          String.format(</span><br><span class="line">              <span class="string">"%s does not implement AndroidInjector.Factory&lt;%s&gt;"</span>,</span><br><span class="line">              factory.getClass().getCanonicalName(), instance.getClass().getCanonicalName()),</span><br><span class="line">          e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 倘若我们需要调用DispatchingAndroidInjector.inject方法，那么就执行了对instance的注入</span></span><br><span class="line"><span class="comment">// 实际调用的是maybeInject方法</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Performs members-injection on &#123;<span class="doctag">@code</span> instance&#125;.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> InvalidInjectorBindingException if the injector factory bound for a class does not</span></span><br><span class="line"><span class="comment">   *     inject instances of that class</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> IllegalArgumentException if no &#123;<span class="doctag">@link</span> AndroidInjector.Factory&#125; is bound for &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment">   *     instance&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(T instance)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> wasInjected = maybeInject(instance);</span><br><span class="line">    <span class="keyword">if</span> (!wasInjected) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(errorMessageSuggestions(instance));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Exception thrown if an incorrect binding is made for a &#123;<span class="doctag">@link</span> AndroidInjector.Factory&#125;. If you</span></span><br><span class="line"><span class="comment">   * see this exception, make sure the value in your &#123;<span class="doctag">@code</span> <span class="doctag">@ActivityKey</span>(YourActivity.class)&#125; or</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@code</span> <span class="doctag">@FragmentKey</span>(YourFragment.class)&#125; matches the type argument of the injector factory.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Beta</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">InvalidInjectorBindingException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">    InvalidInjectorBindingException(String message, ClassCastException cause) &#123;</span><br><span class="line">      <span class="keyword">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Returns an error message with the class names that are supertypes of &#123;<span class="doctag">@code</span> instance&#125;. */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> String <span class="title">errorMessageSuggestions</span><span class="params">(T instance)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; suggestions = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Class&lt;?&gt; clazz = instance.getClass(); clazz != <span class="keyword">null</span>; clazz = clazz.getSuperclass()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (injectorFactories.containsKey(clazz.getCanonicalName())) &#123;</span><br><span class="line">        suggestions.add(clazz.getCanonicalName());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> suggestions.isEmpty()</span><br><span class="line">        ? String.format(NO_SUPERTYPES_BOUND_FORMAT, instance.getClass().getCanonicalName())</span><br><span class="line">        : String.format(</span><br><span class="line">            SUPERTYPES_BOUND_FORMAT, instance.getClass().getCanonicalName(), suggestions);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接上文9</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication_MembersInjector</span> <span class="keyword">implements</span> <span class="title">MembersInjector</span>&lt;<span class="title">MyApplication</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Provider&lt;DispatchingAndroidInjector&lt;Activity&gt;&gt; dispatchingActivityInjectorProvider;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyApplication_MembersInjector</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      Provider&lt;DispatchingAndroidInjector&lt;Activity&gt;&gt; dispatchingActivityInjectorProvider)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.dispatchingActivityInjectorProvider = dispatchingActivityInjectorProvider;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MembersInjector&lt;MyApplication&gt; <span class="title">create</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      Provider&lt;DispatchingAndroidInjector&lt;Activity&gt;&gt; dispatchingActivityInjectorProvider)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyApplication_MembersInjector(dispatchingActivityInjectorProvider);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">injectMembers</span><span class="params">(MyApplication instance)</span> </span>&#123;</span><br><span class="line">    injectDispatchingActivityInjector(instance, dispatchingActivityInjectorProvider.get());</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 9-1 调用injectDispatchingActivityInjector将DispatchingAndroidInjector注入到MyApplication中</span></span><br><span class="line"><span class="comment">// 然后需要找到DispatchingAndroidInjector的inject方法是在哪里在什么时候被执行的，还记得最初的起点吗</span></span><br><span class="line"><span class="comment">// MainActivity中的AndroidInjection.inject(this)，没错，我们回来了</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">injectDispatchingActivityInjector</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      MyApplication instance, DispatchingAndroidInjector&lt;Activity&gt; dispatchingActivityInjector)</span> </span>&#123;</span><br><span class="line">    instance.dispatchingActivityInjector = dispatchingActivityInjector;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AndroidInjection.java</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">    checkNotNull(activity, <span class="string">"activity"</span>);</span><br><span class="line">    Application application = activity.getApplication();</span><br><span class="line">    <span class="keyword">if</span> (!(application <span class="keyword">instanceof</span> HasActivityInjector)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">          String.format(</span><br><span class="line">              <span class="string">"%s does not implement %s"</span>,</span><br><span class="line">              application.getClass().getCanonicalName(),</span><br><span class="line">              HasActivityInjector<span class="class">.<span class="keyword">class</span>.<span class="title">getCanonicalName</span>()))</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AndroidInjector&lt;Activity&gt; activityInjector =</span><br><span class="line">        ((HasActivityInjector) application).activityInjector();</span><br><span class="line">    checkNotNull(activityInjector, <span class="string">"%s.activityInjector() returned null"</span>, application.getClass());</span><br><span class="line"><span class="comment">// 之前我们一直没有明白为什么有AndroidInjector类，为什么要调用activityInjector.inject(activity)方法</span></span><br><span class="line"><span class="comment">// 以及为什么需要HasActivityInjector接口,现在一切都清楚了</span></span><br><span class="line"><span class="comment">// activityInjector即DispatchingAndroidInjector_Factory.newInstance方法返回的DispatchingAndroidInjector实例</span></span><br><span class="line"><span class="comment">// 调用DispatchingAndroidInjector.inject会将DispatchingAndroidInjector_Factory.newInstance传入的Map的value中的</span></span><br><span class="line"><span class="comment">// 实例注入到activity中</span></span><br><span class="line">    activityInjector.inject(activity);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>上述代码过程比较长，下面重新整理一下inject的流程：</p><ol><li>将<code>DispatchingAndroidInjector&lt;Activity&gt;</code>注入到Application中，注入的时候会将AppComponent中的各个module所能提供的实例用Provider初始化，与此同时也会根据带有subcomponent和抽象方法的module生成MainActivitySubComponent.Factory的Provider，为注入到指定Activity提供接口；</li><li>在MainActivity中执行<code>AndroidInjection.inject(this);</code>即可获取<code>@Inject</code>修饰的实例，这是由于<code>AndroidInjection.inject(this);</code>实际上调用的是Application中的<code>DispatchingAndroidInjector&lt;Activity&gt;.inject</code>方法，<code>DispatchingAndroidInjector&lt;Activity&gt;</code>可以获取到在DaggerAppComponent初始化的实例的Provider以及对应MainActivity的MainActivitySubComponent.Factory的Provider，这个MainActivitySubComponent.Factory可以提供将实例注入到MainActivity中的inject方法，所以<code>DispatchingAndroidInjector&lt;Activity&gt;.inject</code>方法实际上是执行MainActivitySubComponent.Factory提供的inject方法，也就完成了注入。</li></ol><p>至此，与依赖注入相关的自动生成的代码已经分析完毕了，整个注入的流程也明白了，但是还遗留了几个问题：</p><ol><li>为什么要在自定义Application进行注入，以及为什么要实现接口HasActivityInjector？</li><li>AppComponent的module为什么必须包含AndroidInjectionModule.class？</li><li>MainActivitySubComponent为什么要继承AndroidInjector<MainActivity>，为什么要定义Factory继承AndroidInjector.Factory<MainActivity>？</li><li>MainActivityModule的subcomponents为什么是MainActivitySubComponent.class，以及为什么要定义抽象方法bindMainActivityAndroidInjectorFactory？</li></ol><blockquote><p>1.为什么要在自定义Application进行注入，以及为什么要实现接口HasActivityInjector？</p></blockquote><p>仔细看AndroidInjection.inject(this)的源码不难知道，activityInjector是来自于application的，为什么要依靠application，<br />因为当我们获取activityInjector时需要一个全局的类，其他Activity或者Fragment也能访问到，而且必须先于Activity或者Fragment被实例化，<br />在整个应用启动过程中只有application符合。</p><p>为什么需要实现HasActivityInjector，这是因为application目前只负责Activity的注入，需要DispatchingAndroidInjector<Activity>实例，<br />而activityInjector方法可以返回这个实例，<code>DaggerAppComponent.create().inject(this);</code>会将DispatchingAndroidInjector实例注入到application中。</p><blockquote><p>2.AppComponent的module为什么必须包含AndroidInjectionModule.class？</p></blockquote><p>首先看看AndroidInjectionModule的内容，抽象类加上<code>@Multibinds</code>标注的抽象方法，但是看classKeyedInjectorFactories和stringKeyedInjectorFactories两个名字就知道了，在上面的代码DispatchingAndroidInjector.java中出现过。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Contains bindings to ensure the usability of &#123;<span class="doctag">@code</span> dagger.android&#125; framework classes. This</span></span><br><span class="line"><span class="comment"> * module should be installed in the component that is used to inject the &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * android.app.Application&#125; class.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Beta</span></span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AndroidInjectionModule</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Multibinds</span></span><br><span class="line">  <span class="keyword">abstract</span> Map&lt;Class&lt;?&gt;, AndroidInjector.Factory&lt;?&gt;&gt; classKeyedInjectorFactories();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Multibinds</span></span><br><span class="line">  <span class="keyword">abstract</span> Map&lt;String, AndroidInjector.Factory&lt;?&gt;&gt; stringKeyedInjectorFactories();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">AndroidInjectionModule</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MultiBinds只能用于标注抽象方法，它仅仅是告诉Component我有这么一种提供类型，让我们Component可以在Component中暴露Set或者Map类型的接口，但是不能包含具体的元素。</p><p>再看DispatchingAndroidInjector的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Inject</span></span><br><span class="line">DispatchingAndroidInjector(</span><br><span class="line">    Map&lt;Class&lt;?&gt;, Provider&lt;AndroidInjector.Factory&lt;?&gt;&gt;&gt; injectorFactoriesWithClassKeys,</span><br><span class="line">    Map&lt;String, Provider&lt;AndroidInjector.Factory&lt;?&gt;&gt;&gt; injectorFactoriesWithStringKeys) &#123;</span><br><span class="line">  <span class="keyword">this</span>.injectorFactories = merge(injectorFactoriesWithClassKeys, injectorFactoriesWithStringKeys);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DispatchingAndroidInjector的构造方法也是通过Inject方式，所以它的参数也必须由Component中的Module来提供，而且其参数是后续初始化过程确定的，所以需要用抽象类来实现，通过抽象类占位保证编译成功。</p><blockquote><p>3.MainActivitySubComponent为什么要继承AndroidInjector<MainActivity>，为什么要定义Factory继承AndroidInjector.Factory<MainActivity>？</p></blockquote><p>我们需要在DaggerAppComponent提供能将实例注入到指定Activity的Provider—比如mainActivitySubComponentFactoryProvider，这个Provider需要能够提供Factory实现create方法，create方法能够返回MainActivitySubComponentImpl实现inject方法，这两个方法都是与MainActivity关联的，所以需要自定义MainActivitySubComponent，其继承的接口AndroidInjector<MainActivity>包括create方法，而且内部接口AndroidInjector.Factory<MainActivity>包括inject方法。</p><blockquote><p>4.MainActivityModule的subcomponents为什么是MainActivitySubComponent.class，以及为什么要定义抽象方法bindMainActivityAndroidInjectorFactory？</p></blockquote><p>抽象方法bindMainActivityAndroidInjectorFactory被<code>@Binds</code>修饰，提供的是这个方法的参数实例；<br />AppComponent依赖MainActivityModule，作为父Component；MainActivitySubComponent作为子Component，用<code>@Subcomponent</code>标注；在父Component依赖的MainActivityModule的subcomponents参数加上MainActivitySubComponent，然后就可以在父ComponentAppComponent中请求SubComponent.Factory。此时SubComponent编译时不会生成 DaggerXXComponent，需要通过 父Component 的获取 SubComponent.Factory 方法获取 SubComponent 实例。</p><p>以上过程中，如果要增加SecondActivity，那么同样需要增加SecondActivityModule和SecondActivitySubComponent，并且加在AppComponent的modules参数中，显然AppComponent的参数会很多，解决方法是</p><p><strong>如果您的subcomponent 及其构建器没有第2步中提到的其他方法或超类型，您可以使用@ContributesAndroidInjector为您生成它们。我们就不需要步骤2和3，取而代之的是添加一个抽象模块方法，该方法返回您的activity，使用@ContributesAndroidInjector对其进行注解，并指定要安装到子组件中的模块。 如果子组件需要scopes，则也可以用@scopes注解到该方法。</strong></p><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ActivityScope</span></span><br><span class="line"><span class="meta">@ContributesAndroidInjector</span>(modules = &#123; <span class="comment">/* modules to install into the subcomponent */</span> &#125;)</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> YourActivity <span class="title">contributeYourActivityInjector</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>1.首先将Activity依赖的module都集中在一个module中ActivityBuilder</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ContributesAndroidInjector</span>(modules = &#123;</span><br><span class="line">            MainActivityModule<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">    <span class="title">abstract</span> <span class="title">MainActivity</span> <span class="title">bindMainActivity</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ContributesAndroidInjector</span>(modules = &#123;</span><br><span class="line">            SecondActivityModule<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">    <span class="title">abstract</span> <span class="title">SecondActivity</span> <span class="title">bindSecondActivity</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2.修改AppComponent的modules参数，删掉之前对应Activity的module，增加ActivityBuilder，增加内部接口实现将Application context传出</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="meta">@Component</span>(modules = &#123;AndroidInjectionModule<span class="class">.<span class="keyword">class</span>, <span class="title">ActivityBuilder</span>.<span class="title">class</span>, <span class="title">AppModule</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">AppComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span>.Builder</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@BindsInstance</span></span><br><span class="line">        <span class="function">Builder <span class="title">application</span><span class="params">(Application application)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function">AppComponent <span class="title">build</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MyApplication application)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3.修改MainActivityModule，非抽象类，删掉抽象方法，删掉subcomponents参数，同理对SecondActivityModule；修改AppModule，增加Context的provide方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivityModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function">Entity <span class="title">provideEntity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Entity();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondActivityModule</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function">Integer <span class="title">provideInteger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="function">String <span class="title">provideGlobalInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"This is global info"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="function">Context <span class="title">provideContext</span><span class="params">(Application application)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> application;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>4.在Activity中注入，Application不变</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Entity entity;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    String info;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Context context;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        AndroidInjection.inject(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        String text = entity.showMessage() + <span class="string">" - "</span> + info;</span><br><span class="line">        Log.i(<span class="string">"aaaa"</span>, text);</span><br><span class="line">        Log.i(<span class="string">"aaaa"</span>, context.toString());</span><br><span class="line">        startActivity(<span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, SecondActivity<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    String info;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Integer num;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Context context;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        AndroidInjection.inject(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_second);</span><br><span class="line">        Log.i(<span class="string">"aaaa"</span>, info + num);</span><br><span class="line">        Log.i(<span class="string">"aaaa"</span>, context.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> <span class="keyword">implements</span> <span class="title">HasActivityInjector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DispatchingAndroidInjector&lt;Activity&gt; dispatchingActivityInjector;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        DaggerAppComponent</span><br><span class="line">                .builder()</span><br><span class="line">                .application(<span class="keyword">this</span>)</span><br><span class="line">                .build()</span><br><span class="line">                .inject(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AndroidInjector&lt;Activity&gt; <span class="title">activityInjector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dispatchingActivityInjector;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就可以通过依赖注入的方式将全局Context注入到所有的Activity中，看log也可以发现两个context是相同的。</p><h3 id="23-injecting-fragment-objects"><a class="markdownIt-Anchor" href="#23-injecting-fragment-objects"></a> 2.3 Injecting Fragment objects</h3><p>为Fragment注入对象，需要在Fragment的onAttach()方法中执行<code>AndroidSupportInjection.inject(this);</code></p><p>提供Fragment实例的Component可以是其他Fragment的Component的Subcomponent，也可以是Activity的Component的Subcomponent，同样也可以是Application的Component的Subcomponent，具体情况具体分析，看你的Fragment生命周期要求。比如这里我们在SecondActivity中增加一个Fragment，Fragment显示的内容是Entity的列表</p><p>以基于Activity为例，首先需要对宿主Activity进行处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">HasSupportFragmentInjector</span> </span>&#123;</span><br><span class="line"><span class="comment">// 以基于SecondActivity的方式对从SecondActivity启动的Fragment进行注入，则需要实现HasSupportFragmentInjector接口</span></span><br><span class="line"><span class="comment">// 这个接口的方法非常类似Application中的，功能基本相同，不过此处说明生命周期与SecondActivity相同，如果SecondActivity不存在</span></span><br><span class="line"><span class="comment">// 那么EntityFragment也无法注入</span></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DispatchingAndroidInjector&lt;Fragment&gt; fragmentDispatchingAndroidInjector;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    String info;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Integer num;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        AndroidInjection.inject(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_second);</span><br><span class="line">        Log.i(<span class="string">"aaaa"</span>, info + num);</span><br><span class="line">        <span class="comment">// 加载EntityFragment</span></span><br><span class="line">        getSupportFragmentManager()</span><br><span class="line">                .beginTransaction()</span><br><span class="line">                .disallowAddToBackStack()</span><br><span class="line">                .add(R.id.container, EntityFragment.newInstance(), EntityFragment.TAG)</span><br><span class="line">                .commit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AndroidInjector&lt;Fragment&gt; <span class="title">supportFragmentInjector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fragmentDispatchingAndroidInjector;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是定义的EntityFragment</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EntityFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = EntityFragment<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"><span class="comment">// 仔细思考Fragment+RecyclerView需要注入哪些对象，很显然常见的是LinearLayoutManager和RecyclerView.Adapter</span></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    LinearLayoutManager mLayoutManager;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    EntityListAdapter mEntityListAdapter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RecyclerView recyclerView;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> EntityFragment <span class="title">newInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Bundle args = <span class="keyword">new</span> Bundle();</span><br><span class="line">        EntityFragment fragment = <span class="keyword">new</span> EntityFragment();</span><br><span class="line">        fragment.setArguments(args);</span><br><span class="line">        <span class="keyword">return</span> fragment;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 在onAttach中注入</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttach</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        AndroidSupportInjection.inject(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">super</span>.onAttach(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        View view = inflater.inflate(R.layout.fragment_item_list, container, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Entity&gt; data = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            data.add(<span class="keyword">new</span> Entity());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 这里就可以直接用</span></span><br><span class="line">        mEntityListAdapter.addItems(data);</span><br><span class="line">        recyclerView = view.findViewById(R.id.list);</span><br><span class="line">        recyclerView.setLayoutManager(mLayoutManager);</span><br><span class="line">        recyclerView.setAdapter(mEntityListAdapter);</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与EntityFragment相关的注入的对象有LinearLayoutManager和EntityListAdapter，因此需要module提供这两者的实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// EntityFragment依赖EntityFragmentModule提供的实例</span></span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EntityFragmentModule</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function">LinearLayoutManager <span class="title">provideLinearLayoutManager</span><span class="params">(EntityFragment fragment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LinearLayoutManager(fragment.getActivity());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function">EntityListAdapter <span class="title">provideEntityListAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EntityListAdapter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据2.2最后一部分的内容做一个优化，将module绑定到另一个集成module中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">EntityFragmentProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ContributesAndroidInjector</span>(modules = EntityFragmentModule<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">abstract</span> <span class="title">EntityFragment</span> <span class="title">provideEntityFragmentFactory</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改ActivityBuilder，将EntityFragmentProvider加入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ContributesAndroidInjector</span>(modules = &#123;</span><br><span class="line">            MainActivityModule<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">    <span class="title">abstract</span> <span class="title">MainActivity</span> <span class="title">bindMainActivity</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ContributesAndroidInjector</span>(modules = &#123;</span><br><span class="line">            SecondActivityModule<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">EntityFragmentProvider</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class">    <span class="title">abstract</span> <span class="title">SecondActivity</span> <span class="title">bindSecondActivity</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后看一下EntityListAdapter的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EntityListAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">EntityListAdapter</span>.<span class="title">MyViewHolder</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Entity&gt; data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EntityListAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addItems</span><span class="params">(List&lt;Entity&gt; list)</span> </span>&#123;</span><br><span class="line">        data.addAll(list);</span><br><span class="line">        notifyDataSetChanged();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyViewHolder <span class="title">onCreateViewHolder</span><span class="params">(@NonNull ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.fragment_item, parent, <span class="keyword">false</span>);</span><br><span class="line">        MyViewHolder viewHolder = <span class="keyword">new</span> MyViewHolder(view);</span><br><span class="line">        <span class="keyword">return</span> viewHolder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(@NonNull MyViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        Entity entity = data.get(position);</span><br><span class="line">        holder.number.setText(String.valueOf(position));</span><br><span class="line">        holder.content.setText(entity.showMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line">        TextView number;</span><br><span class="line">        TextView content;</span><br><span class="line"></span><br><span class="line">        MyViewHolder(<span class="meta">@NonNull</span> View itemView) &#123;</span><br><span class="line">            <span class="keyword">super</span>(itemView);</span><br><span class="line">            number = itemView.findViewById(R.id.item_number);</span><br><span class="line">            content = itemView.findViewById(R.id.content);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/2ec39d8b7e98&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android开发之dagger.android–Activity&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://dagger.dev/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Dagger&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.jianshu.com/p/24af4c102f62?utm_campaign=maleskine&amp;amp;utm_content=note&amp;amp;utm_medium=seo_notes&amp;amp;utm_source=recommendation&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Dagger2 最清晰的使用教程&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://blog.mindorks.com/the-new-dagger-2-android-injector-cbe7d55afa6a&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;The New Dagger2&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.jianshu.com/p/2ac2f39cb25f&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Dagger 2 完全解析&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Dagger2框架是一个依赖注入框架，它既可以用于Java Web项目也可以用于Android项目，依赖注入是什么意思呢&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Dependent&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Dependency dependency;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 属性注入 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Dependent&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Dependency dependency)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.dependency = dependency;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// public Dependent()&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//     this.dependency = new Dependency();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 方法注入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// public void setDependency(Dependency dependency)&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//     this.dependency = dependency;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看名字知含义，在上面的代码中Dependent类的构造始终需要Dependency类，那么我们就称Dependency为依赖，将其引入Dependent中的过程称为注入，上述代码在构造函数中引入，当然也可以通过set方法注入，无论是哪种方式都会面临一个问题就是当我们后续如果需要修改Dependency的构造函数时，需要在所有包含&lt;code&gt;new Dependency()&lt;/code&gt;的代码中进行修改，显然这是非常痛苦的事情，而且不符合依赖倒置原则，本文所涉及到的是通过注解的方式进行依赖注入可以解决这种问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://zhoutao822.coding.me/categories/Android/"/>
    
    
      <category term="Android" scheme="http://zhoutao822.coding.me/tags/Android/"/>
    
      <category term="Dagger2" scheme="http://zhoutao822.coding.me/tags/Dagger2/"/>
    
      <category term="DI" scheme="http://zhoutao822.coding.me/tags/DI/"/>
    
      <category term="依赖注入" scheme="http://zhoutao822.coding.me/tags/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Material组件-Menu</title>
    <link href="http://zhoutao822.coding.me/archives/e182bde6.html"/>
    <id>http://zhoutao822.coding.me/archives/e182bde6.html</id>
    <published>2019-06-24T12:09:54.000Z</published>
    <updated>2020-01-19T03:36:22.904Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><blockquote><p><a href="https://developer.android.com/guide/topics/ui/menus" target="_blank" rel="noopener">菜单</a><br /><a href="https://developer.android.com/reference/android/view/Menu" target="_blank" rel="noopener">Menu api</a><br /><a href="https://www.jianshu.com/p/e99b5e8bd67b" target="_blank" rel="noopener">图解 Android 事件分发机制</a><br /><a href="https://blog.csdn.net/carson_ho/article/details/54136311" target="_blank" rel="noopener">Android事件分发机制 详解攻略</a><br /><a href="https://juejin.im/entry/596329686fb9a06bc903b6fd" target="_blank" rel="noopener">Activity、View、Window的理解一篇文章就够了</a><br /><a href="https://www.jianshu.com/p/2aeb2d10a831" target="_blank" rel="noopener">ViewPager 与 HorizontalScrollView 滑动冲突问题</a></p></blockquote><p>Menu，不同于Button、TextView之类的控件，它不需要在布局文件中指定位置，它是用于提供给用户额外的操作选择，因此不必局限于某一个固定位置，它可以搭配任何控件。</p><p>常见的Menu可以分为三种：</p><ol><li>ToolBar上的选项菜单，这是固定的设计，配合ToolBar实现很简单；</li><li>上下文菜单ContextMenu，与某一个控件关联，可以实现在点击（长按）的位置出现菜单选项的效果；</li><li>弹出菜单PopupMenu，动态生成，作为一个点击事件触发，出现的位置与被点击的控件位置绑定（上方或下方），与上下文菜单不同。</li></ol><!--  --><p><img src="http://114.116.9.65:7777/images/2020/01/19/1.jpg" alt="1.jpg" /></p><a id="more"></a><h2 id="1-菜单选项数据来源"><a class="markdownIt-Anchor" href="#1-菜单选项数据来源"></a> 1. 菜单选项数据来源</h2><p>如上图所示，展开的就是菜单Menu，菜单中包含一个一个的MenuItem，前面已经说了Menu不同于Button之类的控件，它的使用也是非常不同，最重要的部分其实是如何定义这些MenuItem，推荐的做法是使用<code>xml</code>资源文件定义MenuItem的文字内容以及Icon等等，然后在activity或fragment中处理点击事件；当然还有动态添加的方式可以使用。</p><h3 id="11-使用xml定义菜单"><a class="markdownIt-Anchor" href="#11-使用xml定义菜单"></a> 1.1 使用xml定义菜单</h3><p>这里先不必考虑如何使用Menu，只是定义菜单选项，需要在<code>res/menu/</code>目录下建一个<code>xml</code>文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- menu_main.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/action_add_a_contact"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_add_black_24dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"Add a Contact"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:showAsAction</span>=<span class="string">"always"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/action_create_a_contact_group"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_create_black_24dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"Create a Contact Group"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:showAsAction</span>=<span class="string">"never"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/action_add_a_app"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"Add a App"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:showAsAction</span>=<span class="string">"always"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/submenu"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"Submenu"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">menu</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/action_create_a_channel"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_create_new_folder_black_24dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:title</span>=<span class="string">"Create a Channel"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">app:showAsAction</span>=<span class="string">"never"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/action_join_a_channel"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_adjust_black_24dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:title</span>=<span class="string">"Join a Channel"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">app:showAsAction</span>=<span class="string">"never"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的布局文件产生的效果如下图所示</p><!--  --><p><img src="http://114.116.9.65:7777/images/2020/01/19/2.jpg" alt="2.jpg" /></p><p>有几个特点：</p><ol><li>如果Item设置了Icon，那么如果出现在ToolBar上就是Icon，如果没有设置Icon，则显示大写文字；</li><li>Icon在折叠的Menu中不显示，但是在二级菜单中可以显示；</li><li>Item的顺序会被showAsAction参数影响。</li></ol><h3 id="12-在activity中使用menu"><a class="markdownIt-Anchor" href="#12-在activity中使用menu"></a> 1.2 在Activity中使用Menu</h3><p>只需要在activity中重写<code>onCreateOptionsMenu()</code>方法即可，将上面定义的xml资源文件加载，前提是有ToolBar</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreateOptionsMenu(menu);</span><br><span class="line">    getMenuInflater().inflate(R.menu.menu_main, menu);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击事件处理，只需要在activity中重写<code>onOptionsItemSelected()</code>方法即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (item.getItemId()) &#123;</span><br><span class="line">        <span class="keyword">case</span> R.id.action_add_a_contact:</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"action_add_a_contact"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">case</span> R.id.action_create_a_channel:</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"action_create_a_channel"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">case</span> R.id.action_create_a_contact_group:</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"action_create_a_contact_group"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">case</span> R.id.action_add_a_app:</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"action_add_a_app"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">case</span> R.id.action_join_a_channel:</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"action_join_a_channel"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要在运行时修改MenuItem的状态，可以重写<code>onPrepareOptionsMenu()</code>方法（每点击一次都会执行一次），比如可以在这里进行状态判断以禁用某些选项</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先需要一个flag控制</span></span><br><span class="line"><span class="keyword">private</span> Boolean flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其次在需要动态修改Menu状态的位置修改flag值，然后调用invalidateOptionsMenu()，</span></span><br><span class="line"><span class="comment">// 这个方法会调用onPrepareOptionsMenu()方法，从而实现Menu的状态变化</span></span><br><span class="line">button.setOnClickListener(v -&gt; &#123;</span><br><span class="line">    flag = <span class="keyword">true</span>;</span><br><span class="line">    invalidateOptionsMenu();  <span class="comment">//  Android 3.0 及更高版本中必须调用invalidateOptionsMenu</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onPrepareOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        menu.findItem(R.id.action_create_a_contact_group).setVisible(<span class="keyword">false</span>);</span><br><span class="line">        menu.findItem(R.id.action_join_a_channel).setVisible(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onPrepareOptionsMenu(menu);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-修改默认的toolbar-menu图标以及点击背景色"><a class="markdownIt-Anchor" href="#13-修改默认的toolbar-menu图标以及点击背景色"></a> 1.3 修改默认的ToolBar Menu图标以及点击背景色</h3><p>默认为三个点，可以在<code>styles.xml</code>中进行修改</p><p>比如ToolBar在布局文件中如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">androidx.appcompat.widget.Toolbar</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/my_toolbar"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:elevation</span>=<span class="string">"4dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:theme</span>=<span class="string">"@style/ToolbarBase"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:popupTheme</span>=<span class="string">"@style/OverflowMenu"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.appcompat.widget.Toolbar</span>&gt;</span></span><br></pre></td></tr></table></figure><p>两个参数</p><ul><li>theme：为整个ToolBar的主题，actionOverflowButtonStyle可以修改默认图标</li><li>popupTheme：为弹出的Menu的主题，colorControlHighlight可以修改点击背景色</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"ToolbarBase"</span> <span class="attr">parent</span>=<span class="string">"ThemeOverlay.AppCompat.ActionBar"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"actionOverflowButtonStyle"</span>&gt;</span>@style/OverflowButtonStyle<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--&lt;item name="actionOverflowMenuStyle"&gt;@style/OverflowMenu&lt;/item&gt;--&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"OverflowButtonStyle"</span> <span class="attr">parent</span>=<span class="string">"@android:style/Widget.ActionButton.Overflow"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:src"</span>&gt;</span>@drawable/ic_add_circle_outline_black_24dp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"overlapAnchor"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"OverflowMenu"</span> <span class="attr">parent</span>=<span class="string">"ThemeOverlay.AppCompat.Light"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--遮挡属性--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"overlapAnchor"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--MenuItem选中背景颜色--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorControlHighlight"</span>&gt;</span>@color/holo_blue_light<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-上下文菜单"><a class="markdownIt-Anchor" href="#2-上下文菜单"></a> 2. 上下文菜单</h2><p>ContextMenu可以用在非常多的控件上，这里仅简单使用Button和RecyclerView，通常来说，触发ContextMenu的方式是长按，因此与该控件的OnLongClick事件冲突，<br />如果在onLongClick()方法中返回<strong>true</strong>，则代表点击事件被消耗，不再继续传递，那么ContextMenu不会触发；反之返回<strong>false</strong>，则ContextMenu被触发。由此可知，onLongClick()的优先级在ContextMenu之上，具体会在<strong>Android事件传递中分析</strong>。</p><p>ContextMenu可以在一个Activity中有多个，甚至可以在RecyclerView中使用，但是仅需要重写两个方法即可判断ContextMenu的来源。</p><!--  --><p><img src="http://114.116.9.65:7777/images/2020/01/19/3.jpg" alt="3.jpg" /></p><p>如上图所示，<code>Upload</code>后面跟的是该控件的<code>ItemId</code>，三个Menu各不相同，所以显然我们可以根据控件的不同生成不同的ContextMenu，点击事件同理。</p><p>使用ContextMenu的三个步骤：</p><blockquote><p>1.注册，更确切的说法是关联，即指定需要生成ContextMenu的控件，一句话解决</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">registerForContextMenu(recyclerView); <span class="comment">// 对RecyclerView也是一样，但是这里我用的是自定义RecyclerView，稍后解释</span></span><br><span class="line">registerForContextMenu(button); <span class="comment">// 直接在onCreate中注册即可，有几个控件就注册几次</span></span><br><span class="line">registerForContextMenu(button1);</span><br></pre></td></tr></table></figure><blockquote><p>2.重写onCreateContextMenu方法，生成Menu</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreateContextMenu</span><span class="params">(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreateContextMenu(menu, v, menuInfo);</span><br><span class="line">    <span class="comment">// 这里实现了根据Id不同生成不同的Menu</span></span><br><span class="line">    <span class="keyword">switch</span> (v.getId()) &#123;</span><br><span class="line">        <span class="keyword">case</span> R.id.first_button:</span><br><span class="line">            addMenu(menu, v);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> R.id.second_button:</span><br><span class="line">            addMenu(menu, v);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> R.id.recycler_view:</span><br><span class="line">            addMenu(menu, v);</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addMenu</span><span class="params">(ContextMenu menu, View v)</span> </span>&#123;</span><br><span class="line">    menu.setHeaderTitle(<span class="string">"Context Menu"</span>);</span><br><span class="line">    menu.add(<span class="number">0</span>, v.getId(), <span class="number">0</span>, <span class="string">"Upload"</span> + v.getId());</span><br><span class="line">    menu.add(<span class="number">0</span>, v.getId(), <span class="number">0</span>, <span class="string">"Search"</span>);</span><br><span class="line">    menu.add(<span class="number">1</span>, v.getId(), <span class="number">0</span>, <span class="string">"Share"</span>);</span><br><span class="line">    menu.add(<span class="number">1</span>, v.getId(), <span class="number">0</span>, <span class="string">"Bookmark"</span>);</span><br><span class="line">    <span class="comment">// 同时可以通过groupId来禁用某些选项，这是额外的功能</span></span><br><span class="line">    menu.setGroupEnabled(<span class="number">1</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3.重写onContextItemSelected方法，点击事件响应</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onContextItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里需要注意，因为RecyclerView需要传入Item的Position属性，所以需要自定义RecyclerView</span></span><br><span class="line">    RecyclerViewWithContextMenu.RecyclerViewContextInfo info = (RecyclerViewWithContextMenu.RecyclerViewContextInfo) item.getMenuInfo();</span><br><span class="line">    Log.d(TAG, <span class="string">"onCreateContextMenu position = "</span> + (info != <span class="keyword">null</span> ? info.getPosition() : <span class="string">"-1"</span>));</span><br><span class="line">    <span class="comment">// 通过判断点击的Item是否存在getMenuInfo获得的值，可以判断点击事件的来源，RecyclerView还是Button</span></span><br><span class="line">    <span class="keyword">if</span> (info != <span class="keyword">null</span> &amp;&amp; info.getPosition() != -<span class="number">1</span>) &#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"Selected Item: "</span> + item.getTitle() + <span class="string">" data: "</span> + data.get(info.getPosition()), Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"Selected Item: "</span> + item.getTitle(), Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol start="4"><li><strong>自定义的RecyclerViewWithContextMenu</strong></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecyclerViewWithContextMenu</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = RecyclerViewWithContextMenu<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RecyclerViewContextInfo mContextInfo = <span class="keyword">new</span> RecyclerViewContextInfo();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RecyclerViewWithContextMenu</span><span class="params">(@NonNull Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RecyclerViewWithContextMenu</span><span class="params">(@NonNull Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RecyclerViewWithContextMenu</span><span class="params">(@NonNull Context context, @Nullable AttributeSet attrs, <span class="keyword">int</span> defStyle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关键方法，重写showContextMenuForChild，将position属性传出去</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">showContextMenuForChild</span><span class="params">(View originalView)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> longPressPosition = getChildAdapterPosition(originalView);</span><br><span class="line">        <span class="keyword">if</span> (longPressPosition &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            mContextInfo.mPosition = longPressPosition;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.showContextMenuForChild(originalView);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> ContextMenu.<span class="function">ContextMenuInfo <span class="title">getContextMenuInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mContextInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过自定义的ContextMenuInfo保存position的值，并提供调用的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RecyclerViewContextInfo</span> <span class="keyword">implements</span> <span class="title">ContextMenu</span>.<span class="title">ContextMenuInfo</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> mPosition = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPosition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> mPosition;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-弹出菜单"><a class="markdownIt-Anchor" href="#3-弹出菜单"></a> 3. 弹出菜单</h2><p>PopupMenu是使用上最简单的，它的效果与ContextMenu类似但不完全相同，主要是位置是相对固定的，但是PopupMenu可以动态调用，与整体的布局无关</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">PopupMenu</span>.<span class="title">OnMenuItemClickListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = MainActivity<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="comment">// PopupMenu通过onClick事件创建</span></span><br><span class="line">        findViewById(R.id.pop_button).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                showPopupMenu(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showPopupMenu</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// new一个对象，同样可以使用xml加载选项</span></span><br><span class="line">        PopupMenu popup = <span class="keyword">new</span> PopupMenu(<span class="keyword">this</span>, v);</span><br><span class="line">        popup.inflate(R.menu.menu_main);</span><br><span class="line">        popup.show();</span><br><span class="line">        <span class="comment">// 这里需要继承PopupMenu.OnMenuItemClickListener接口</span></span><br><span class="line">        popup.setOnMenuItemClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onMenuItemClick</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 点击事件响应</span></span><br><span class="line">        <span class="keyword">switch</span> (item.getItemId()) &#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.action_add_a_contact:</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">"action_add_a_contact"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.action_create_a_channel:</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">"action_create_a_channel"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.action_create_a_contact_group:</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">"action_create_a_contact_group"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.action_add_a_app:</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">"action_add_a_app"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.action_join_a_channel:</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">"action_join_a_channel"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-android事件分发机制"><a class="markdownIt-Anchor" href="#4-android事件分发机制"></a> 4. Android事件分发机制</h2><p>之所以会想到Android事件分发机制，主要是在ContextMenu的使用上发现长按事件的处理以及冲突，从而对长按事件优先级有一点思考，结合一些参考的文章，写一下自己的理解。</p><p>在使用ContextMenu中会产生以下几个问题，根据这些问题，可以尝试在源码里找结果。</p><ul><li>为什么ContextMenu只需要注册就可以使用，而不是new一个对象出来，类似于PopupMenu？</li></ul><p>首先看与ContextMenu相关的几个方法：</p><p><code>registerForContextMenu</code></p><p><code>onCreateContextMenu</code></p><p><code>onContextItemSelected</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Activity.java registerForContextMenu这个方法仅仅是对view进行了注册listener</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Registers a context menu to be shown for the given view (multiple views</span></span><br><span class="line"><span class="comment">     * can show the context menu). This method will set the</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> OnCreateContextMenuListener&#125; on the view to this activity, so</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #onCreateContextMenu(ContextMenu, View, ContextMenuInfo)&#125; will be</span></span><br><span class="line"><span class="comment">     * called when it is time to show the context menu.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #unregisterForContextMenu(View)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> view The view that should show a context menu.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerForContextMenu</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        view.setOnCreateContextMenuListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// View.java 注册的过程中通过setLongClickable强制让此控件可以被long click，同时传递listener</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Register a callback to be invoked when the context menu for this view is</span></span><br><span class="line"><span class="comment">     * being built. If this view is not long clickable, it becomes long clickable.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> l The callback that will run</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnCreateContextMenuListener</span><span class="params">(OnCreateContextMenuListener l)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isLongClickable()) &#123;</span><br><span class="line">            setLongClickable(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        getListenerInfo().mOnCreateContextMenuListener = l;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * Listener used to build the context menu.</span></span><br><span class="line"><span class="comment">        * This field should be made private, so it is hidden from the SDK.</span></span><br><span class="line"><span class="comment">        * &#123;<span class="doctag">@hide</span>&#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="keyword">protected</span> OnCreateContextMenuListener mOnCreateContextMenuListener;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这个listener的作用就是通过li.mOnCreateContextMenuListener.onCreateContextMenu(menu, this, menuInfo)</span></span><br><span class="line">    <span class="comment">// 将menu和menuInfo传出去，也就是说，我们在调用super.onCreateContextMenu(menu, v, menuInfo)后即可得到menu的实例，</span></span><br><span class="line">    <span class="comment">// 然后对menu实例进行处理，比如menu.add增加选项、menu.setGroupEnabled设置可点击的选项等等，</span></span><br><span class="line">    <span class="comment">// 此处暂不讨论createContextMenu是在哪里调用的，因为涉及到PhoneWindow和DecorView。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Show the context menu for this view. It is not safe to hold on to the</span></span><br><span class="line"><span class="comment">     * menu after returning from this method.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * You should normally not overload this method. Overload</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #onCreateContextMenu(ContextMenu)&#125; or define an</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> OnCreateContextMenuListener&#125; to add items to the context menu.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> menu The context menu to populate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createContextMenu</span><span class="params">(ContextMenu menu)</span> </span>&#123;</span><br><span class="line">        ContextMenuInfo menuInfo = getContextMenuInfo();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Sets the current menu info so all items added to menu will have</span></span><br><span class="line">        <span class="comment">// my extra info set.</span></span><br><span class="line">        ((MenuBuilder)menu).setCurrentMenuInfo(menuInfo);</span><br><span class="line"></span><br><span class="line">        onCreateContextMenu(menu);</span><br><span class="line">        ListenerInfo li = mListenerInfo;</span><br><span class="line">        <span class="keyword">if</span> (li != <span class="keyword">null</span> &amp;&amp; li.mOnCreateContextMenuListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">            li.mOnCreateContextMenuListener.onCreateContextMenu(menu, <span class="keyword">this</span>, menuInfo);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Clear the extra information so subsequent items that aren't mine don't</span></span><br><span class="line">        <span class="comment">// have my extra info.</span></span><br><span class="line">        ((MenuBuilder)menu).setCurrentMenuInfo(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mParent != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mParent.createContextMenu(menu);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line"><span class="comment">// --------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Activity.java Item点击事件响应，除了ContextMenu，可以发现普通的ToolBar上的Menu的点击（onOptionsItemSelected）</span></span><br><span class="line"><span class="comment">// 也是在这里响应的。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Default implementation of</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> android.view.Window.Callback#onMenuItemSelected&#125;</span></span><br><span class="line"><span class="comment">     * for activities.  This calls through to the new</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #onOptionsItemSelected&#125; method for the</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> android.view.Window#FEATURE_OPTIONS_PANEL&#125;</span></span><br><span class="line"><span class="comment">     * panel, so that subclasses of</span></span><br><span class="line"><span class="comment">     * Activity don't need to deal with feature codes.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onMenuItemSelected</span><span class="params">(<span class="keyword">int</span> featureId, MenuItem item)</span> </span>&#123;</span><br><span class="line">        CharSequence titleCondensed = item.getTitleCondensed();</span><br><span class="line">        <span class="comment">// 通过featureId参数判断是来自ToolBar的Menu还是ContextMenu，显然这个参数来自于onMenuItemSelected方法被调用的地方</span></span><br><span class="line">        <span class="comment">// 可以在ToolbarWidgetWrapper.java和PhoneWindow.java中找到</span></span><br><span class="line">        <span class="keyword">switch</span> (featureId) &#123;</span><br><span class="line">            <span class="keyword">case</span> Window.FEATURE_OPTIONS_PANEL:</span><br><span class="line">                <span class="comment">// Put event logging here so it gets called even if subclass</span></span><br><span class="line">                <span class="comment">// doesn't call through to superclass's implmeentation of each</span></span><br><span class="line">                <span class="comment">// of these methods below</span></span><br><span class="line">                <span class="keyword">if</span>(titleCondensed != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    EventLog.writeEvent(<span class="number">50000</span>, <span class="number">0</span>, titleCondensed.toString());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 在这里可以看到如果onOptionsItemSelected返回false，点击事件会继续传递下去，所以我们在重写onOptionsItemSelected</span></span><br><span class="line">                <span class="comment">// 方法时会在执行对应选项的点击事件后返回true以消耗点击事件</span></span><br><span class="line">                <span class="keyword">if</span> (onOptionsItemSelected(item)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (mFragments.dispatchOptionsItemSelected(item)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (item.getItemId() == android.R.id.home &amp;&amp; mActionBar != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                        (mActionBar.getDisplayOptions() &amp; ActionBar.DISPLAY_HOME_AS_UP) != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (mParent == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> onNavigateUp();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> mParent.onNavigateUpFromChild(<span class="keyword">this</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> Window.FEATURE_CONTEXT_MENU:</span><br><span class="line">                <span class="keyword">if</span>(titleCondensed != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    EventLog.writeEvent(<span class="number">50000</span>, <span class="number">1</span>, titleCondensed.toString());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 同上</span></span><br><span class="line">                <span class="keyword">if</span> (onContextItemSelected(item)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> mFragments.dispatchContextItemSelected(item);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>综上所述，ContextMenu其实是一个比较深层次的控件，它的创建过程被更复杂的PhoneWindow以及DecorView等控制，对开发者来说，Menu是一个直接使用就行的控件，底层不希望开发者对Menu进行指定布局选项之外的操作，因此我们不需要new一个对象出来。至于它是如何在PhoneWindow以及DecorView中创建的，我可能在接下来的博客中写一下自己的理解。</p><ul><li>ContextMenu的触发与该控件的onLongClick方法的冲突是如何产生的？</li></ul><p>在上面ContextMenu的使用过程中，会发现ContextMenu默认是长按触发，而且源码里也说明了，控件会被强制赋予长按属性，那么如果同时设置该控件的onLongClick方法会产生怎样的效果，代码很简单，这里有一个疑问了，为什么要返回true？如果返回false会怎样？为什么onClick方法不用返回值？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">button.setOnLongClickListener(<span class="keyword">new</span> View.OnLongClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onLongClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"button long click"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>结果也是很明显的，测试一下就知道这里返回true，那么button的ContextMenu无法触发，Toast会正常产生；返回false，那么button的Toast会产生，而且ContextMenu也会产生，onLongClick方法在onCreateContextMenu方法之前执行。</p><p>由此产生了另一个问题，onLongClick方法是如何产生的，解决了这个问题，那么所有的问题都将迎刃而解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// View.java 最直接的调用onLongClick方法的位置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Calls this view's OnLongClickListener, if it is defined. Invokes the</span></span><br><span class="line"><span class="comment">     * context menu if the OnLongClickListener did not consume the event,</span></span><br><span class="line"><span class="comment">     * optionally anchoring it to an (x,y) coordinate.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x x coordinate of the anchoring touch event, or &#123;<span class="doctag">@link</span> Float#NaN&#125;</span></span><br><span class="line"><span class="comment">     *          to disable anchoring</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> y y coordinate of the anchoring touch event, or &#123;<span class="doctag">@link</span> Float#NaN&#125;</span></span><br><span class="line"><span class="comment">     *          to disable anchoring</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if one of the above receivers consumed the event,</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> false&#125; otherwise</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">performLongClickInternal</span><span class="params">(<span class="keyword">float</span> x, <span class="keyword">float</span> y)</span> </span>&#123;</span><br><span class="line">        sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_LONG_CLICKED);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> handled = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">final</span> ListenerInfo li = mListenerInfo;</span><br><span class="line">        <span class="keyword">if</span> (li != <span class="keyword">null</span> &amp;&amp; li.mOnLongClickListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// listener调用onLongClick方法的位置，返回值为handled</span></span><br><span class="line">            handled = li.mOnLongClickListener.onLongClick(View.<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果handled为true，则不会执行下面整个方法showContextMenu，看名字也知道这是ContextMenu显示的方法了，</span></span><br><span class="line">        <span class="comment">// 所以如果onLongClick返回true，则不会显示ContextMenu；反之同理。所以上面关于执行先后顺序的疑问解决了</span></span><br><span class="line">        <span class="keyword">if</span> (!handled) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> isAnchored = !Float.isNaN(x) &amp;&amp; !Float.isNaN(y);</span><br><span class="line">            handled = isAnchored ? showContextMenu(x, y) : showContextMenu();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((mViewFlags &amp; TOOLTIP) == TOOLTIP) &#123;</span><br><span class="line">            <span class="comment">// 如果handled为true，则不会执行下面整个方法showLongClickTooltip，这个Tooltip是另一个控件，</span></span><br><span class="line">            <span class="comment">// 其触发也是与长按事件相关，暂且不表</span></span><br><span class="line">            <span class="keyword">if</span> (!handled) &#123;</span><br><span class="line">                handled = showLongClickTooltip((<span class="keyword">int</span>) x, (<span class="keyword">int</span>) y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (handled) &#123;</span><br><span class="line">            performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 最后还是返回handled的值</span></span><br><span class="line">        <span class="keyword">return</span> handled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 再看看onClick方法的调用，很明显单击事件没有其他控件与其冲突，所以它的返回值为空</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Call this view's OnClickListener, if it is defined.  Performs all normal</span></span><br><span class="line"><span class="comment">     * actions associated with clicking: reporting accessibility event, playing</span></span><br><span class="line"><span class="comment">     * a sound, etc.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> True there was an assigned OnClickListener that was called, false</span></span><br><span class="line"><span class="comment">     *         otherwise is returned.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> other methods on View should not call this method directly, but performClickInternal()</span></span><br><span class="line">    <span class="comment">// instead, to guarantee that the autofill manager is notified when necessary (as subclasses</span></span><br><span class="line">    <span class="comment">// could extend this method without calling super.performClick()).</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">performClick</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// We still need to call this method to handle the cases where performClick() was called</span></span><br><span class="line">        <span class="comment">// externally, instead of through performClickInternal()</span></span><br><span class="line">        notifyAutofillManagerOnClick();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> result;</span><br><span class="line">        <span class="keyword">final</span> ListenerInfo li = mListenerInfo;</span><br><span class="line">        <span class="keyword">if</span> (li != <span class="keyword">null</span> &amp;&amp; li.mOnClickListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">            playSoundEffect(SoundEffectConstants.CLICK);</span><br><span class="line">            <span class="comment">// 无返回值，没有冲突，result直接设置为true即可</span></span><br><span class="line">            li.mOnClickListener.onClick(<span class="keyword">this</span>);</span><br><span class="line">            result = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);</span><br><span class="line"></span><br><span class="line">        notifyEnterOrExitForAutoFillIfNeeded(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 然后就是点击事件与长按事件是如何产生的，这里牵涉到onTouchEvent方法，这里把无关代码略过，仅保留重要代码</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Implement this method to handle touch screen motion events.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * If this method is used to detect click actions, it is recommended that</span></span><br><span class="line"><span class="comment">     * the actions be performed by implementing and calling</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #performClick()&#125;. This will ensure consistent system behavior,</span></span><br><span class="line"><span class="comment">     * including:</span></span><br><span class="line"><span class="comment">     * &lt;ul&gt;</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;obeying click sound preferences</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;dispatching OnClickListener calls</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;handling &#123;<span class="doctag">@link</span> AccessibilityNodeInfo#ACTION_CLICK ACTION_CLICK&#125; when</span></span><br><span class="line"><span class="comment">     * accessibility features are enabled</span></span><br><span class="line"><span class="comment">     * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event The motion event.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> True if the event was handled, false otherwise.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ... </span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (clickable || (viewFlags &amp; TOOLTIP) == TOOLTIP) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">                <span class="comment">// MotionEvent分为四种ACTION_UP、ACTION_DOWN、ACTION_CANCEL、ACTION_MOVE</span></span><br><span class="line">                <span class="comment">// 分别对应手指在屏幕的状态：抬起、按下、（例外，暂且不解释）、滑动</span></span><br><span class="line">                <span class="comment">// 通过对这些MotionEvent的监听可以实现各种点击效果，比如多连击、定时点击等等效果，</span></span><br><span class="line">                <span class="comment">// 也可以控制事件的冲突，我们仅需要在自定义控件中重写onTouchEvent方法即可。</span></span><br><span class="line">                <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                    <span class="comment">// ...</span></span><br><span class="line">                    <span class="comment">// 为什么要在抬起的时候触发点击事件performClick，因为长按与点击是有冲突的，</span></span><br><span class="line">                    <span class="comment">// 长按会在ACTION_DOWN里触发，这是由时间控制的，因此ACTION_UP中与长按事件其实关系就不大了</span></span><br><span class="line">                    <span class="comment">// 所以在这里处理点击事件是一个较为合理的设计</span></span><br><span class="line">                    <span class="keyword">if</span> ((mPrivateFlags &amp; PFLAG_PRESSED) != <span class="number">0</span> || prepressed) &#123;</span><br><span class="line">                        <span class="comment">// take focus if we don't have it already and we should in</span></span><br><span class="line">                        <span class="comment">// touch mode.</span></span><br><span class="line">                        <span class="keyword">boolean</span> focusTaken = <span class="keyword">false</span>;</span><br><span class="line">                        <span class="keyword">if</span> (isFocusable() &amp;&amp; isFocusableInTouchMode() &amp;&amp; !isFocused()) &#123;</span><br><span class="line">                            focusTaken = requestFocus();</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (prepressed) &#123;</span><br><span class="line">                            <span class="comment">// The button is being released before we actually</span></span><br><span class="line">                            <span class="comment">// showed it as pressed.  Make it show the pressed</span></span><br><span class="line">                            <span class="comment">// state now (before scheduling the click) to ensure</span></span><br><span class="line">                            <span class="comment">// the user sees it.</span></span><br><span class="line">                            setPressed(<span class="keyword">true</span>, x, y);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (!mHasPerformedLongPress &amp;&amp; !mIgnoreNextUpEvent) &#123;</span><br><span class="line">                            <span class="comment">// This is a tap, so remove the longpress check</span></span><br><span class="line">                            removeLongPressCallback();</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// Only perform take click actions if we were in the pressed state</span></span><br><span class="line">                            <span class="keyword">if</span> (!focusTaken) &#123;</span><br><span class="line">                                <span class="comment">// Use a Runnable and post this rather than calling</span></span><br><span class="line">                                <span class="comment">// performClick directly. This lets other visual state</span></span><br><span class="line">                                <span class="comment">// of the view update before click actions start.</span></span><br><span class="line">                                <span class="keyword">if</span> (mPerformClick == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                    <span class="comment">// 点击事件的关键，这里的PerformClick是一个Runnable，为什么要用Runnable，之后再解释</span></span><br><span class="line">                                    mPerformClick = <span class="keyword">new</span> PerformClick();</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="comment">// 通过handler调用performClick方法，点击事件就完成了</span></span><br><span class="line">                                <span class="keyword">if</span> (!post(mPerformClick)) &#123;</span><br><span class="line">                                    performClickInternal();</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// ...</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    mIgnoreNextUpEvent = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                    <span class="keyword">if</span> (event.getSource() == InputDevice.SOURCE_TOUCHSCREEN) &#123;</span><br><span class="line">                        mPrivateFlags3 |= PFLAG3_FINGER_DOWN;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// mHasPerformedLongPress用于解决长按与点击的事件冲突，具体可以看源码</span></span><br><span class="line">                    mHasPerformedLongPress = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// clickable表示该控件是否可以点击（包括点击、长按等）</span></span><br><span class="line">                    <span class="keyword">if</span> (!clickable) &#123;</span><br><span class="line">                        <span class="comment">// 如果控件不可点击，那么会判断是否需要显示Tooltip或者什么都不干，然后break，</span></span><br><span class="line">                        <span class="comment">// 具体可以看checkForLongClick方法</span></span><br><span class="line">                        checkForLongClick(<span class="number">0</span>, x, y);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// performButtonActionOnTouchDown与外设有关，暂时不用考虑</span></span><br><span class="line">                    <span class="keyword">if</span> (performButtonActionOnTouchDown(event)) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Walk up the hierarchy to determine if we're inside a scrolling container.</span></span><br><span class="line">                    <span class="keyword">boolean</span> isInScrollingContainer = isInScrollingContainer();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// For views inside a scrolling container, delay the pressed feedback for</span></span><br><span class="line">                    <span class="comment">// a short period in case this is a scroll.</span></span><br><span class="line">                    <span class="comment">// 该控件在一个可以滑动的container内，则会增加一个反应延时，但是最终都是调用checkForLongClick</span></span><br><span class="line">                    <span class="keyword">if</span> (isInScrollingContainer) &#123;</span><br><span class="line">                        mPrivateFlags |= PFLAG_PREPRESSED;</span><br><span class="line">                        <span class="keyword">if</span> (mPendingCheckForTap == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            mPendingCheckForTap = <span class="keyword">new</span> CheckForTap();</span><br><span class="line">                        &#125;</span><br><span class="line">                        mPendingCheckForTap.x = event.getX();</span><br><span class="line">                        mPendingCheckForTap.y = event.getY();</span><br><span class="line">                        postDelayed(mPendingCheckForTap, ViewConfiguration.getTapTimeout());</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// Not inside a scrolling container, so show the feedback right away</span></span><br><span class="line">                        setPressed(<span class="keyword">true</span>, x, y);</span><br><span class="line">                        <span class="comment">// checkForLongClick也是一个Runnable，最终调用还是performLongClickInternal</span></span><br><span class="line">                        checkForLongClick(<span class="number">0</span>, x, y);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// ACTION_CANCEL状态比较难触发，举个例子，在MIUI中开启“传送门”功能，就可以触发</span></span><br><span class="line">                <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</span><br><span class="line">                    <span class="keyword">if</span> (clickable) &#123;</span><br><span class="line">                        setPressed(<span class="keyword">false</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    removeTapCallback();</span><br><span class="line">                    removeLongPressCallback();</span><br><span class="line">                    mInContextButtonPress = <span class="keyword">false</span>;</span><br><span class="line">                    mHasPerformedLongPress = <span class="keyword">false</span>;</span><br><span class="line">                    mIgnoreNextUpEvent = <span class="keyword">false</span>;</span><br><span class="line">                    mPrivateFlags3 &amp;= ~PFLAG3_FINGER_DOWN;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// ACTION_MOVE状态下removeTapCallback方法和removeLongPressCallback可以取消点击事件，</span></span><br><span class="line">                <span class="comment">// 这也就是为什么我们在按住某个按钮然后滑动出去就可以避免触发点击事件</span></span><br><span class="line">                <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                    <span class="keyword">if</span> (clickable) &#123;</span><br><span class="line">                        drawableHotspotChanged(x, y);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Be lenient about moving outside of buttons</span></span><br><span class="line">                    <span class="keyword">if</span> (!pointInView(x, y, mTouchSlop)) &#123;</span><br><span class="line">                        <span class="comment">// Outside button</span></span><br><span class="line">                        <span class="comment">// Remove any future long press/tap checks</span></span><br><span class="line">                        removeTapCallback();</span><br><span class="line">                        removeLongPressCallback();</span><br><span class="line">                        <span class="keyword">if</span> ((mPrivateFlags &amp; PFLAG_PRESSED) != <span class="number">0</span>) &#123;</span><br><span class="line">                            setPressed(<span class="keyword">false</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        mPrivateFlags3 &amp;= ~PFLAG3_FINGER_DOWN;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>根据上述源码，我们知道了ContextMenu与长按事件冲突的原因，点击事件与长按事件是如何产生的，但是随之而来有了新的问题。</p><ul><li>为什么要使用Runnable来调用以及如果父容器有点击事件的同时子控件也有点击事件，那么事件传递的过程以及中间冲突是如何解决的？</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// View.java 从源码中可以看到，这是一个专门用于UI线程的Handler，通过这个Handler发送的Runnable都会在UI线程中运行</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Causes the Runnable to be added to the message queue.</span></span><br><span class="line"><span class="comment">     * The runnable will be run on the user interface thread.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> action The Runnable that will be executed.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Returns true if the Runnable was successfully placed in to the</span></span><br><span class="line"><span class="comment">     *         message queue.  Returns false on failure, usually because the</span></span><br><span class="line"><span class="comment">     *         looper processing the message queue is exiting.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #postDelayed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #removeCallbacks</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">post</span><span class="params">(Runnable action)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> AttachInfo attachInfo = mAttachInfo;</span><br><span class="line">        <span class="keyword">if</span> (attachInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> attachInfo.mHandler.post(action);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Postpone the runnable until we know on which thread it needs to run.</span></span><br><span class="line">        <span class="comment">// Assume that the runnable will be successfully placed after attach.</span></span><br><span class="line">        getRunQueue().post(action);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>结合上面的部分注释，说明一个原理，所有的点击事件以及屏幕绘制都要在UI线程中处理，这是为了方便点击触发时重绘UI</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Use a Runnable and post this rather than calling</span></span><br><span class="line"><span class="comment">// performClick directly. This lets other visual state</span></span><br><span class="line"><span class="comment">// of the view update before click actions start.</span></span><br></pre></td></tr></table></figure><p>从上面的源码部分我们知道了点击或者长按事件是通过onTouchEvent触发的，那么再看看onTouchEvent是在哪里调用的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// View.java onTouchEvent是在dispatchTouchEvent方法中被调用，看注释就知道这个方法它是要将MotionEvent传递给target view</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Pass the touch screen motion event down to the target view, or this</span></span><br><span class="line"><span class="comment">     * view if it is the target.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event The motion event to be dispatched.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> True if the event was handled by the view, false otherwise.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// If the event should be handled by accessibility focus first.</span></span><br><span class="line">        <span class="keyword">if</span> (event.isTargetAccessibilityFocus()) &#123;</span><br><span class="line">            <span class="comment">// We don't have focus or no virtual descendant has it, do not handle the event.</span></span><br><span class="line">            <span class="keyword">if</span> (!isAccessibilityFocusedViewOrHost()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// We have focus and got the event, then use normal event dispatch.</span></span><br><span class="line">            event.setTargetAccessibilityFocus(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// result表示这个MotionEvent是否会被消耗</span></span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mInputEventConsistencyVerifier != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mInputEventConsistencyVerifier.onTouchEvent(event, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> actionMasked = event.getActionMasked();</span><br><span class="line">        <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">            <span class="comment">// Defensive cleanup for new gesture</span></span><br><span class="line">            stopNestedScroll();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (onFilterTouchEventForSecurity(event)) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((mViewFlags &amp; ENABLED_MASK) == ENABLED &amp;&amp; handleScrollBarDragging(event)) &#123;</span><br><span class="line">                result = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//noinspection SimplifiableIfStatement</span></span><br><span class="line">            ListenerInfo li = mListenerInfo;</span><br><span class="line">            <span class="comment">// 如果调用了onTouch方法，那么当前result被置为true，则后面onTouchEvent不会执行，那么事件在onTouch中处理</span></span><br><span class="line">            <span class="keyword">if</span> (li != <span class="keyword">null</span> &amp;&amp; li.mOnTouchListener != <span class="keyword">null</span></span><br><span class="line">                    &amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED</span><br><span class="line">                    &amp;&amp; li.mOnTouchListener.onTouch(<span class="keyword">this</span>, event)) &#123;</span><br><span class="line">                result = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// onTouchEvent调用的位置</span></span><br><span class="line">            <span class="keyword">if</span> (!result &amp;&amp; onTouchEvent(event)) &#123;</span><br><span class="line">                result = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!result &amp;&amp; mInputEventConsistencyVerifier != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mInputEventConsistencyVerifier.onUnhandledEvent(event, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Clean up after nested scrolls if this is the end of a gesture;</span></span><br><span class="line">        <span class="comment">// also cancel it if we tried an ACTION_DOWN but we didn't want the rest</span></span><br><span class="line">        <span class="comment">// of the gesture.</span></span><br><span class="line">        <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_UP ||</span><br><span class="line">                actionMasked == MotionEvent.ACTION_CANCEL ||</span><br><span class="line">                (actionMasked == MotionEvent.ACTION_DOWN &amp;&amp; !result)) &#123;</span><br><span class="line">            stopNestedScroll();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>再往上看，View的dispatchTouchEvent是在哪里调用的，可以往上追溯到ViewGroup的dispatchTransformedTouchEvent方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ViewGroup.java ViewGroup继承自View，但是可以把它当做一个容器，比如LinearLayout就是继承自ViewGroup，</span></span><br><span class="line"><span class="comment">// ViewGroup的dispatchTransformedTouchEvent将MotionEvent传给指定的子view，如果子view为空，那么这个ViewGroup</span></span><br><span class="line"><span class="comment">// 自己就处理MotionEvent，而我们知道ViewGroup继承自View，所以可以调用super.dispatchTouchEvent(event)</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Transforms a motion event into the coordinate space of a particular child view,</span></span><br><span class="line"><span class="comment">     * filters out irrelevant pointer ids, and overrides its action if necessary.</span></span><br><span class="line"><span class="comment">     * If child is null, assumes the MotionEvent will be sent to this ViewGroup instead.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">dispatchTransformedTouchEvent</span><span class="params">(MotionEvent event, <span class="keyword">boolean</span> cancel,</span></span></span><br><span class="line"><span class="function"><span class="params">            View child, <span class="keyword">int</span> desiredPointerIdBits)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// handled标志事件是否被消耗</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> handled;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Canceling motions is a special case.  We don't need to perform any transformations</span></span><br><span class="line">        <span class="comment">// or filtering.  The important part is the action, not the contents.</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> oldAction = event.getAction();</span><br><span class="line">        <span class="comment">// ACTION_CANCEL也要传递出去</span></span><br><span class="line">        <span class="keyword">if</span> (cancel || oldAction == MotionEvent.ACTION_CANCEL) &#123;</span><br><span class="line">            event.setAction(MotionEvent.ACTION_CANCEL);</span><br><span class="line">            <span class="comment">// 通过判断传入的child值决定在子view中处理事件还是在当前ViewGroup中处理</span></span><br><span class="line">            <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</span><br><span class="line">                handled = <span class="keyword">super</span>.dispatchTouchEvent(event);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                handled = child.dispatchTouchEvent(event);</span><br><span class="line">            &#125;</span><br><span class="line">            event.setAction(oldAction);</span><br><span class="line">            <span class="keyword">return</span> handled;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Calculate the number of pointers to deliver.</span></span><br><span class="line">        <span class="comment">// 这里出现了一个新的概念pointers，这是由于许多设备支持多点触控，那么同一时间可以传递多个事件，我们把这些事件成为pointers</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> oldPointerIdBits = event.getPointerIdBits();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> newPointerIdBits = oldPointerIdBits &amp; desiredPointerIdBits;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If for some reason we ended up in an inconsistent state where it looks like we</span></span><br><span class="line">        <span class="comment">// might produce a motion event with no pointers in it, then drop the event.</span></span><br><span class="line">        <span class="keyword">if</span> (newPointerIdBits == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If the number of pointers is the same and we don't need to perform any fancy</span></span><br><span class="line">        <span class="comment">// irreversible transformations, then we can reuse the motion event for this</span></span><br><span class="line">        <span class="comment">// dispatch as long as we are careful to revert any changes we make.</span></span><br><span class="line">        <span class="comment">// Otherwise we need to make a copy.</span></span><br><span class="line">        <span class="keyword">final</span> MotionEvent transformedEvent;</span><br><span class="line">        <span class="comment">// 当事件传递过程中pointers数量保持不变时，我们可以以一个相对安全的方式将事件传递下去</span></span><br><span class="line">        <span class="keyword">if</span> (newPointerIdBits == oldPointerIdBits) &#123;</span><br><span class="line">            <span class="keyword">if</span> (child == <span class="keyword">null</span> || child.hasIdentityMatrix()) &#123;</span><br><span class="line">                <span class="comment">// 判断方式同上</span></span><br><span class="line">                <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    handled = <span class="keyword">super</span>.dispatchTouchEvent(event);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 同时可以将一些偏移量参数传入event中，这也是为什么ContextMenu可以获取到点击事件的位置的原因</span></span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">float</span> offsetX = mScrollX - child.mLeft;</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">float</span> offsetY = mScrollY - child.mTop;</span><br><span class="line">                    event.offsetLocation(offsetX, offsetY);</span><br><span class="line"></span><br><span class="line">                    handled = child.dispatchTouchEvent(event);</span><br><span class="line"></span><br><span class="line">                    event.offsetLocation(-offsetX, -offsetY);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> handled;</span><br><span class="line">            &#125;</span><br><span class="line">            transformedEvent = MotionEvent.obtain(event);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// split方法主要是根据pointers数量变化决定event的类型，具体代码可以在MotionEvent.java中找到</span></span><br><span class="line">            transformedEvent = event.split(newPointerIdBits);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Perform any necessary transformations and dispatch.</span></span><br><span class="line">        <span class="comment">// 同理需要将transformedEvent传出去</span></span><br><span class="line">        <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</span><br><span class="line">            handled = <span class="keyword">super</span>.dispatchTouchEvent(transformedEvent);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">float</span> offsetX = mScrollX - child.mLeft;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">float</span> offsetY = mScrollY - child.mTop;</span><br><span class="line">            transformedEvent.offsetLocation(offsetX, offsetY);</span><br><span class="line">            <span class="keyword">if</span> (! child.hasIdentityMatrix()) &#123;</span><br><span class="line">                transformedEvent.transform(child.getInverseMatrix());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            handled = child.dispatchTouchEvent(transformedEvent);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Done.</span></span><br><span class="line">        transformedEvent.recycle();</span><br><span class="line">        <span class="keyword">return</span> handled;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>再看一下dispatchTransformedTouchEvent被调用的位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ViewGroup.java 这是ViewGroup的dispatchTouchEvent方法，很明显了，应该功能类似View的dispatchTouchEvent</span></span><br><span class="line"><span class="comment">// 都是对MotionEvent进行传递，这里代码很长，仅仅保留最重要的部分</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">boolean</span> handled = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (onFilterTouchEventForSecurity(ev)) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> action = ev.getAction();</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> actionMasked = action &amp; MotionEvent.ACTION_MASK;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Handle an initial down.</span></span><br><span class="line">            <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">                <span class="comment">// Throw away all previous state when starting a new touch gesture.</span></span><br><span class="line">                <span class="comment">// The framework may have dropped the up or cancel event for the previous gesture</span></span><br><span class="line">                <span class="comment">// due to an app switch, ANR, or some other state change.</span></span><br><span class="line">                cancelAndClearTouchTargets(ev);</span><br><span class="line">                resetTouchState();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Check for interception.</span></span><br><span class="line">            <span class="comment">// 这里多了一个参数intercepted，很重要，用于截断事件的传递</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> intercepted;</span><br><span class="line">            <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN</span><br><span class="line">                    || mFirstTouchTarget != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">boolean</span> disallowIntercept = (mGroupFlags &amp; FLAG_DISALLOW_INTERCEPT) != <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (!disallowIntercept) &#123;</span><br><span class="line">                    <span class="comment">// intercepted的值通过onInterceptTouchEvent方法得到，重写此方法可以截断事件的传递</span></span><br><span class="line">                    intercepted = onInterceptTouchEvent(ev);</span><br><span class="line">                    ev.setAction(action); <span class="comment">// restore action in case it was changed</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    intercepted = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// There are no touch targets and this action is not an initial down</span></span><br><span class="line">                <span class="comment">// so this view group continues to intercept touches.</span></span><br><span class="line">                intercepted = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果intercepted为true，则事件不会被传递下去，如果为false，则会将事件传递下去</span></span><br><span class="line">            <span class="keyword">if</span> (!canceled &amp;&amp; !intercepted) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// If the event is targeting accessibility focus we give it to the</span></span><br><span class="line">                <span class="comment">// view that has accessibility focus and if it does not handle it</span></span><br><span class="line">                <span class="comment">// we clear the flag and dispatch the event to all children as usual.</span></span><br><span class="line">                <span class="comment">// We are looking up the accessibility focused host to avoid keeping</span></span><br><span class="line">                <span class="comment">// state since these events are very rare.</span></span><br><span class="line">                <span class="comment">// 循环遍历ViewGroup的所有子view，将事件传递下去</span></span><br><span class="line">                View childWithAccessibilityFocus = ev.isTargetAccessibilityFocus()</span><br><span class="line">                        ? findChildWithAccessibilityFocus() : <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN</span><br><span class="line">                        || (split &amp;&amp; actionMasked == MotionEvent.ACTION_POINTER_DOWN)</span><br><span class="line">                        || actionMasked == MotionEvent.ACTION_HOVER_MOVE) &#123;</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> actionIndex = ev.getActionIndex(); <span class="comment">// always 0 for down</span></span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> idBitsToAssign = split ? <span class="number">1</span> &lt;&lt; ev.getPointerId(actionIndex)</span><br><span class="line">                            : TouchTarget.ALL_POINTER_IDS;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Clean up earlier touch targets for this pointer id in case they</span></span><br><span class="line">                    <span class="comment">// have become out of sync.</span></span><br><span class="line">                    removePointersFromTouchTargets(idBitsToAssign);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> childrenCount = mChildrenCount;</span><br><span class="line">                    <span class="keyword">if</span> (newTouchTarget == <span class="keyword">null</span> &amp;&amp; childrenCount != <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">final</span> <span class="keyword">float</span> x = ev.getX(actionIndex);</span><br><span class="line">                        <span class="keyword">final</span> <span class="keyword">float</span> y = ev.getY(actionIndex);</span><br><span class="line">                        <span class="comment">// Find a child that can receive the event.</span></span><br><span class="line">                        <span class="comment">// Scan children from front to back.</span></span><br><span class="line">                        <span class="keyword">final</span> ArrayList&lt;View&gt; preorderedList = buildTouchDispatchChildList();</span><br><span class="line">                        <span class="keyword">final</span> <span class="keyword">boolean</span> customOrder = preorderedList == <span class="keyword">null</span></span><br><span class="line">                                &amp;&amp; isChildrenDrawingOrderEnabled();</span><br><span class="line">                        <span class="keyword">final</span> View[] children = mChildren;</span><br><span class="line">                        <span class="comment">// 循环开始的位置</span></span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> i = childrenCount - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                            <span class="keyword">final</span> <span class="keyword">int</span> childIndex = getAndVerifyPreorderedIndex(</span><br><span class="line">                                    childrenCount, i, customOrder);</span><br><span class="line">                            <span class="keyword">final</span> View child = getAndVerifyPreorderedView(</span><br><span class="line">                                    preorderedList, children, childIndex);</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// If there is a view that has accessibility focus we want it</span></span><br><span class="line">                            <span class="comment">// to get the event first and if not handled we will perform a</span></span><br><span class="line">                            <span class="comment">// normal dispatch. We may do a double iteration but this is</span></span><br><span class="line">                            <span class="comment">// safer given the timeframe.</span></span><br><span class="line">                            <span class="keyword">if</span> (childWithAccessibilityFocus != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (childWithAccessibilityFocus != child) &#123;</span><br><span class="line">                                    <span class="keyword">continue</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                childWithAccessibilityFocus = <span class="keyword">null</span>;</span><br><span class="line">                                i = childrenCount - <span class="number">1</span>;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> (!canViewReceivePointerEvents(child)</span><br><span class="line">                                    || !isTransformedTouchPointInView(x, y, child, <span class="keyword">null</span>)) &#123;</span><br><span class="line">                                ev.setTargetAccessibilityFocus(<span class="keyword">false</span>);</span><br><span class="line">                                <span class="keyword">continue</span>;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            newTouchTarget = getTouchTarget(child);</span><br><span class="line">                            <span class="keyword">if</span> (newTouchTarget != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                <span class="comment">// Child is already receiving touch within its bounds.</span></span><br><span class="line">                                <span class="comment">// Give it the new pointer in addition to the ones it is handling.</span></span><br><span class="line">                                newTouchTarget.pointerIdBits |= idBitsToAssign;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            resetCancelNextUpFlag(child);</span><br><span class="line">                            <span class="comment">// 调用dispatchTransformedTouchEvent的位置</span></span><br><span class="line">                            <span class="keyword">if</span> (dispatchTransformedTouchEvent(ev, <span class="keyword">false</span>, child, idBitsToAssign)) &#123;</span><br><span class="line">                                <span class="comment">// Child wants to receive touch within its bounds.</span></span><br><span class="line">                                mLastTouchDownTime = ev.getDownTime();</span><br><span class="line">                                <span class="keyword">if</span> (preorderedList != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                    <span class="comment">// childIndex points into presorted list, find original index</span></span><br><span class="line">                                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; childrenCount; j++) &#123;</span><br><span class="line">                                        <span class="keyword">if</span> (children[childIndex] == mChildren[j]) &#123;</span><br><span class="line">                                            mLastTouchDownIndex = j;</span><br><span class="line">                                            <span class="keyword">break</span>;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                    mLastTouchDownIndex = childIndex;</span><br><span class="line">                                &#125;</span><br><span class="line">                                mLastTouchDownX = ev.getX();</span><br><span class="line">                                mLastTouchDownY = ev.getY();</span><br><span class="line">                                newTouchTarget = addTouchTarget(child, idBitsToAssign);</span><br><span class="line">                                alreadyDispatchedToNewTouchTarget = <span class="keyword">true</span>;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// The accessibility focus didn't handle the event, so clear</span></span><br><span class="line">                            <span class="comment">// the flag and do a normal dispatch to all children.</span></span><br><span class="line">                            ev.setTargetAccessibilityFocus(<span class="keyword">false</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (preorderedList != <span class="keyword">null</span>) preorderedList.clear();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (newTouchTarget == <span class="keyword">null</span> &amp;&amp; mFirstTouchTarget != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// Did not find a child to receive the event.</span></span><br><span class="line">                        <span class="comment">// Assign the pointer to the least recently added target.</span></span><br><span class="line">                        newTouchTarget = mFirstTouchTarget;</span><br><span class="line">                        <span class="keyword">while</span> (newTouchTarget.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            newTouchTarget = newTouchTarget.next;</span><br><span class="line">                        &#125;</span><br><span class="line">                        newTouchTarget.pointerIdBits |= idBitsToAssign;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果intercepted为true，则在这里调用dispatchTransformedTouchEvent</span></span><br><span class="line">            <span class="comment">// 调用dispatchTransformedTouchEvent即调用本身的onTouchEvent方法</span></span><br><span class="line">            <span class="comment">// 只看核心代码就可以知道事件传递的规则</span></span><br><span class="line">            <span class="comment">// Dispatch to touch targets.</span></span><br><span class="line">            <span class="keyword">if</span> (mFirstTouchTarget == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// No touch targets so treat this as an ordinary view.</span></span><br><span class="line">                handled = dispatchTransformedTouchEvent(ev, canceled, <span class="keyword">null</span>,</span><br><span class="line">                        TouchTarget.ALL_POINTER_IDS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Dispatch to touch targets, excluding the new touch target if we already</span></span><br><span class="line">                <span class="comment">// dispatched to it.  Cancel touch targets if necessary.</span></span><br><span class="line">                TouchTarget predecessor = <span class="keyword">null</span>;</span><br><span class="line">                TouchTarget target = mFirstTouchTarget;</span><br><span class="line">                <span class="keyword">while</span> (target != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">final</span> TouchTarget next = target.next;</span><br><span class="line">                    <span class="keyword">if</span> (alreadyDispatchedToNewTouchTarget &amp;&amp; target == newTouchTarget) &#123;</span><br><span class="line">                        handled = <span class="keyword">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">final</span> <span class="keyword">boolean</span> cancelChild = resetCancelNextUpFlag(target.child)</span><br><span class="line">                                || intercepted;</span><br><span class="line">                        <span class="keyword">if</span> (dispatchTransformedTouchEvent(ev, cancelChild,</span><br><span class="line">                                target.child, target.pointerIdBits)) &#123;</span><br><span class="line">                            handled = <span class="keyword">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (cancelChild) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (predecessor == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                mFirstTouchTarget = next;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                predecessor.next = next;</span><br><span class="line">                            &#125;</span><br><span class="line">                            target.recycle();</span><br><span class="line">                            target = next;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    predecessor = target;</span><br><span class="line">                    target = next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Update list of touch targets for pointer up or cancel, if needed.</span></span><br><span class="line">            <span class="keyword">if</span> (canceled</span><br><span class="line">                    || actionMasked == MotionEvent.ACTION_UP</span><br><span class="line">                    || actionMasked == MotionEvent.ACTION_HOVER_MOVE) &#123;</span><br><span class="line">                resetTouchState();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (split &amp;&amp; actionMasked == MotionEvent.ACTION_POINTER_UP) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> actionIndex = ev.getActionIndex();</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> idBitsToRemove = <span class="number">1</span> &lt;&lt; ev.getPointerId(actionIndex);</span><br><span class="line">                removePointersFromTouchTargets(idBitsToRemove);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!handled &amp;&amp; mInputEventConsistencyVerifier != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mInputEventConsistencyVerifier.onUnhandledEvent(ev, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> handled;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>继续往上看，我们就能发现ViewGroup的dispatchTouchEvent方法由DecorView的superDispatchTouchEvent调用，而DecorView又是由PhoneWindow或者Window的superDispatchTouchEvent调用，PhoneWindow的superDispatchTouchEvent方法又是由activity的dispatchTouchEvent方法调用，具体代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Activity.java</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Called to process touch screen events.  You can override this to</span></span><br><span class="line"><span class="comment">     * intercept all touch screen events before they are dispatched to the</span></span><br><span class="line"><span class="comment">     * window.  Be sure to call this implementation for touch screen events</span></span><br><span class="line"><span class="comment">     * that should be handled normally.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ev The touch screen event.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean Return true if this event was consumed.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ev.getAction() == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">            onUserInteraction();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 核心代码getWindow().superDispatchTouchEvent(ev)</span></span><br><span class="line">        <span class="keyword">if</span> (getWindow().superDispatchTouchEvent(ev)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> onTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// -----------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Window.java</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Used by custom windows, such as Dialog, to pass the touch screen event</span></span><br><span class="line"><span class="comment">     * further down the view hierarchy. Application developers should</span></span><br><span class="line"><span class="comment">     * not need to implement or call this.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// 抽象方法，具体由PhoneWindow实现</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">superDispatchTouchEvent</span><span class="params">(MotionEvent event)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// -----------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// DecorView.java</span></span><br><span class="line">    <span class="comment">// PhoneWindow的superDispatchTouchEvent方法交由DecorView实现，DecorView继承自ViewGroup，最终调用的还是ViewGroup的dispatchTouchEvent方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">superDispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(event);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>结合前半部分自底向上和后半部分自顶向下的分析，我们知道了dispatchTouchEvent传递事件的流程：</p><p>从activity -&gt; PhoneWindow/DecorView -&gt; ViewGroup(如果布局中有的话) -&gt; View</p><ul><li>dispatchTouchEvent是一种层层递归式的调用，只有在递归到View中被执行时才会返回，一般来说返回true代表事件被消耗了，而事件的处理在OnTouchEvent中；</li><li>ViewGroup中有onInterceptTouchEvent方法可以中断事件的传递，重写此方法让它返回true，那么事件不会传递到子view中，onInterceptTouchEvent默认返回false；</li><li>在OnTouchEvent中返回true，则父容器不会执行OnTouchEvent方法，在OnTouchEvent中返回false，则父容器会执行OnTouchEvent方法，且后续的所有事件都会在父容器中处理，不再向下传递。</li></ul><p><strong>举两个例子说明如何通过onInterceptTouchEvent方法中断事件的传递</strong></p><p>第一个例子，一个LinearLayout中包含一个Button，LinearLayout和Button都设置onClick方法，很显然当我们点击Button时Button的onClick方法执行，当我们点击LinearLayout时LinearLayout的onClick方法执行；如果设置了log打印diapatchTouchEvent方法的执行顺序，那么可以发现：</p><p>点击Button： activity dispatchTouchEvent -&gt; linearlayout dispatchTouchEvent -&gt; button dispatchTouchEvent</p><p>点击LinearLayout： activity dispatchTouchEvent -&gt; linearlayout dispatchTouchEvent</p><p>如果我们希望LinearLayout拦截传给Button的事件，那么就需要用到onInterceptTouchEvent方法</p><p>直接在自定义LinearLayout中重写onInterceptTouchEvent方法，让它返回true，则该LinearLayout下的所有子view都无法接收到事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二个例子，禁止ViewPager左右滑动，首先需要明白一个问题，为什么ViewPager可以使页面左右滑动，如果ViewPager中的Fragment中也包含一个控件CustomTextView，那么滑动会产生冲突吗？</p><p>首先看一下log日志，这是在自定义的CustomViewPager和CustomTextView中与TouchEvent相关的代码执行顺序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CustomViewPager:    dispatchTouchEvent    - ACTION_DOWN</span><br><span class="line">CustomViewPager:    onInterceptTouchEvent - ACTION_DOWN</span><br><span class="line">CustomTextView:     dispatchTouchEvent    - ACTION_DOWN</span><br><span class="line">CustomTextView:     onTouchEvent          - ACTION_DOWN</span><br><span class="line">CustomViewPager:    onTouchEvent          - ACTION_DOWN</span><br><span class="line">CustomViewPager:    dispatchTouchEvent    - ACTION_MOVE</span><br><span class="line">CustomViewPager:    onTouchEvent          - ACTION_MOVE</span><br><span class="line">CustomViewPager:    dispatchTouchEvent    - ACTION_UP</span><br><span class="line">CustomViewPager:    onTouchEvent          - ACTION_UP</span><br></pre></td></tr></table></figure><p>下面是两个自定义的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomViewPager</span> <span class="keyword">extends</span> <span class="title">ViewPager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"aaaa-CustomViewPager"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> enabled;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomViewPager</span><span class="params">(@NonNull Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        <span class="keyword">this</span>.enabled = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomViewPager</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        <span class="keyword">this</span>.enabled = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"dispatchTouchEvent - "</span> + <span class="string">" - "</span> + ev.toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.enabled) &#123;</span><br><span class="line">            Log.i(TAG, <span class="string">"onTouchEvent - "</span> + <span class="string">" - "</span> + event.toString());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 根据后面的分析可知，对于ACTION_DOWN事件来说，super.onInterceptTouchEvent(event)默认返回false</span></span><br><span class="line"><span class="comment">// 这段代码看似都是返回false，对结果没有影响，但是实际上将onInterceptTouchEvent的调用从ViewGroup转到ViewPager中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.enabled) &#123;</span><br><span class="line">            Log.i(TAG, <span class="string">"onInterceptTouchEvent - "</span> + <span class="string">" - "</span> + event.toString());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onInterceptTouchEvent(event);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPagingEnabled</span><span class="params">(<span class="keyword">boolean</span> enabled)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.enabled = enabled;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomTextView</span> <span class="keyword">extends</span> <span class="title">AppCompatTextView</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"aaaa-CustomTextView"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomTextView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomTextView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomTextView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"dispatchTouchEvent - "</span> + <span class="string">" - "</span> + event.toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"onTouchEvent - "</span> + <span class="string">" - "</span> + event.toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于ACTION_DOWN事件来说，事件传递流程为：</p><ol><li>CustomViewPager的dispatchTouchEvent（应该是来自于PhoneWindow/DecorView），调用<code>super.dispatchTouchEvent(ev)</code>，即ViewGroup的dispatchTouchEvent方法；</li><li>在上面ViewGroup的源码中我们知道，ViewGroup的dispatchTouchEvent方法中调用了onInterceptTouchEvent方法<code>intercepted = onInterceptTouchEvent(ev);</code>，由于我们在CustomViewPager中重写了onInterceptTouchEvent方法，所以会回到CustomViewPager的onInterceptTouchEvent方法；</li><li>默认情况下this.enabled为true，所以我们开始调用<code>super.onInterceptTouchEvent(event)</code>，此时super是ViewPager的onInterceptTouchEvent方法；</li><li>再看ViewPager的源码，对于ACTION_DOWN事件来说，onInterceptTouchEvent返回false，所以CustomViewPager的onInterceptTouchEvent方法直接返回false，又回到ViewGroup的dispatchTouchEvent方法中；</li><li>当<code>intercepted = onInterceptTouchEvent(ev);</code>中intercepted为false时，会执行子view的dispatchTouchEvent方法，子view即CustomTextView的dispatchTouchEvent方法；</li><li>CustomTextView的dispatchTouchEvent方法默认调用<code>super.dispatchTouchEvent(event)</code>，即View的dispatchTouchEvent方法，而从View的源码中可知其调用onTouchEvent方法，而我们的CustomTextView重写了onTouchEvent方法，但是此方法又返回到TextView的onTouchEvent方法中，最终还是回到View的onTouchEvent方法，对于ACTION_DOWN事件来说，最终CustomTextView的onTouchEvent方法返回false，则CustomTextView的super以及CustomTextView的dispatchTouchEvent方法返回false，对应5中，如果子view的dispatchTouchEvent方法返回false，则第5步中ViewGroup会执行<code>super.dispatchTouchEvent(event)</code>，即ViewGroup的父类View的dispatchTouchEvent方法，此处的View不再是子view，而是作为CustomViewPager，因为CustomViewPager重写了onTouchEvent方法，所以View的dispatchTouchEvent方法中调用的onTouchEvent方法为CustomViewPager的onTouchEvent方法，而CustomViewPager的onTouchEvent方法调用<code>super.onTouchEvent(event)</code>，即ViewPager的onTouchEvent方法；</li><li>ViewPager的onTouchEvent方法即最终实现滑动效果的地方，根据代码可知，只有在没有adapter或者滑动到最边缘的页面才会返回false，其他情况返回true；</li><li>ViewPager的onTouchEvent方法返回true即处理了ACTION_DOWN事件，那么依次CustomViewPager的onTouchEvent方法返回true，CustomViewPager的dispatchTouchEvent方法返回true，至此ACTION_DOWN事件的处理结束了。</li></ol><p>对于ACTION_MOVE和ACTION_UP事件来说（这两个事件分发流程基本相同），事件传递流程为：</p><ol><li>CustomViewPager的dispatchTouchEvent（应该是来自于PhoneWindow/DecorView），调用<code>super.dispatchTouchEvent(ev)</code>，即ViewGroup的dispatchTouchEvent方法；</li><li>ViewGroup的dispatchTouchEvent方法中intercepted为true，拦截了ACTION_MOVE事件，由自身处理，即调用CustomViewPager的onTouchEvent方法；</li><li>CustomViewPager的onTouchEvent方法调用<code>super.onTouchEvent(event)</code>，即ViewPager的onTouchEvent方法，在这里实现滑动的效果，根据代码可知，只有在没有adapter或者滑动到最边缘的页面才会返回false，其他情况返回true；</li><li>然后依次CustomViewPager的onTouchEvent返回true，CustomViewPager的dispatchTouchEvent方法返回true。</li></ol><p>简而言之，事件分发就是一系列的dispatchTouchEvent、onInterceptTouchEvent和onTouchEvent方法的相互调用，首先需要明确地就是最终实现滑动效果、点击效果的都是各个控件的onTouchEvent方法，dispatchTouchEvent仅用作事件分发的开始，而onInterceptTouchEvent方法用于终止事件向子控件传递。</p><p>以上面的代码为例可以得到一些结论：</p><ol><li>ViewPager的onInterceptTouchEvent一般对ACTION_DOWN事件返回false，即不会对ACTION_DOWN进行拦截，那么ACTION_DOWN必定传到子view中；</li><li>如果ViewPager的子view无法在onTouchEvent中进行处理，比如这里的CustomTextView，对于ACTION_DOWN事件，CustomTextView的onTouchEvent返回false（为什么无法处理ACTION_DOWN，从源码中可知是由于CustomTextView的clickable为false，所以返回false），所以CustomTextView的dispatchTouchEvent方法返回false，相当于告诉父view不要再传给我ACTION_DOWN了，我没法处理；</li><li>如果ViewPager的子view的dispatchTouchEvent方法返回false，那么ViewPager就会调用自己的onTouchEvent来处理，ViewPager的onTouchEvent可以处理ACTION_DOWN事件，并记录了点击的位置，然后返回true，从而ViewPager的dispatchTouchEvent方法返回true，ACTION_DOWN事件结束；</li><li>紧接着ACTION_DOWN事件的必定是ACTION_MOVE或ACTION_UP，以ACTION_MOVE为例，同样是从ViewPager的dispatchTouchEvent方法开始，此时没有调用onInterceptTouchEvent方法，而是直接执行onTouchEvent方法，即根据ACTION_MOVE事件带的参数实现滑动效果，然后返回true；</li><li>紧接着ACTION_MOVE的必然是ACTION_UP，流程同4；</li><li>当ViewGroup的onTouchEvent方法可以处理ACTION_DOWN事件时，即onTouchEvent方法返回true，则此ViewGroup的onInterceptTouchEvent方法不再执行（对的，就算不执行也可以拦截事件），同时后续事件被拦截，经由此ViewGroup的onTouchEvent处理。</li></ol><p>综上所述，如果ViewPager的子view无法处理ACTION_DOWN事件，那么ViewPager自己就会处理ACTION_DOWN事件，并在后续事件传递过程中拦截（不是通过onInterceptTouchEvent方法），后续的ACTION_MOVE或ACTION_UP由ViewPager进行处理，在ViewPager的onTouchEvent中实现了滑动的效果。</p><p>如果我们在ViewPager中加上HorizontalScrollView，并加上几个CustomTextView，会产生怎样的效果呢</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">us.zoom.videomeetings.viewpagerdemo.custom.CustomHorizontalScrollView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">us.zoom.videomeetings.viewpagerdemo.custom.CustomLinearLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">us.zoom.videomeetings.viewpagerdemo.custom.CustomTextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/custom_tv"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_margin</span>=<span class="string">"40dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:padding</span>=<span class="string">"40dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"Fragment"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">"30sp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">us.zoom.videomeetings.viewpagerdemo.custom.CustomTextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/custom_tv2"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_margin</span>=<span class="string">"40dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:padding</span>=<span class="string">"40dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"Fragment"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">"30sp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">us.zoom.videomeetings.viewpagerdemo.custom.CustomLinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">us.zoom.videomeetings.viewpagerdemo.custom.CustomHorizontalScrollView</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CustomHorizontalScrollView和CustomLinearLayout都是直接继承，仅重写dispatchTouchEvent、onTouchEvent、onInterceptTouchEvent方法，加上log，这里就不加代码了，基本同上。</p><!--  --><p><img src="http://114.116.9.65:7777/images/2020/01/19/viewpager.gif" alt="viewpager.gif" /></p><p>在上述的演示效果中可以发现，如果滑动的位置是TextView，则ViewPager的左右滑动似乎被卡住了，但是偶尔可以切换，而且就算滑动到第二个TextView的边缘也不能切换fragment；如果滑动的位置是下方空白区域则ViewPager可以正常滑动。</p><p>根据log以及上文的分析可知，ViewPager左右滑动被卡住的原因是：</p><ol><li>ACTION_DOWN事件向下层层传递到CustomTextView，结果发现CustomTextView的onTouchEvent无法处理返回了false，然后向上层层传递直到CustomHorizontalScrollView发现自己可以处理ACTION_DOWN事件，于是其onTouchEvent返回了true，则CustomHorizontalScrollView的dispatchTouchEvent方法返回true，从而CustomViewPager的onTouchEvent无法执行；</li><li>紧接着ACTION_MOVE事件向下层层传递到CustomHorizontalScrollView，发现CustomHorizontalScrollView之前处理了ACTION_DOWN，那么后续所有事件都被CustomHorizontalScrollView拦截，通过其onTouchEvent处理，并返回true，则CustomHorizontalScrollView的dispatchTouchEvent方法返回true，从而CustomViewPager的onTouchEvent无法执行；</li><li>ACTION_UP事件同2。</li></ol><p>经过上面的分析知道了其实是CustomHorizontalScrollView能够处理所有事件，从而导致CustomViewPager无法执行onTouchEvent，因此ViewPager无法左右滑动。</p><p>因此我们可以简单完成几个对滑动控制的需求</p><h3 id="41-禁用viewpager的滑动子view可以滑动"><a class="markdownIt-Anchor" href="#41-禁用viewpager的滑动子view可以滑动"></a> 4.1 禁用ViewPager的滑动，子view可以滑动</h3><p>这个需求是为了解决上面提到的ViewPager偶尔可以滑动的问题，很显然这里可能是事件传递过程中触发了某种条件导致事件最终由ViewPager的onTouchEvent方法处理，我们要防止这种情况发生。解决的方法是CustomViewPager的onTouchEvent返回false（确保CustomViewPager不会处理滑动事件），同时可以在CustomViewPager的onInterceptTouchEvent返回false（可选，但是可以保证CustomViewPager不对事件进行拦截）。</p><h3 id="42-viewpager仅在子view滑动到左右边界时可以滑动"><a class="markdownIt-Anchor" href="#42-viewpager仅在子view滑动到左右边界时可以滑动"></a> 4.2 ViewPager仅在子view滑动到左右边界时可以滑动</h3><p>直接看代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomHorizontalScrollView</span> <span class="keyword">extends</span> <span class="title">HorizontalScrollView</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = CustomHorizontalScrollView<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomHorizontalScrollView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomHorizontalScrollView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomHorizontalScrollView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomHorizontalScrollView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr, <span class="keyword">int</span> defStyleRes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr, defStyleRes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可以在此处理冲突</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ev</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 还没滑到右边，请求父控件不要拦截我的事件，事件自己处理 true ；已经滑到右边，则事件交由父控件处理 false。</span></span><br><span class="line">        <span class="comment">// getParent().requestDisallowInterceptTouchEvent(!isScrollToRight());</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 也可以在此处理冲突</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ev</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (ev.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// 处理的逻辑是在ACTION_MOVE事件上，如果滑动到最左或最右边则调用</span></span><br><span class="line">            <span class="comment">// getParent().requestDisallowInterceptTouchEvent(false)</span></span><br><span class="line">            <span class="comment">// 那么HorizontalScrollView的父view会拦截掉ACTION_MOVE事件，</span></span><br><span class="line">            <span class="comment">// 即ViewPager拦截ACTION_MOVE事件，由他的onTouchEvent处理</span></span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                <span class="keyword">if</span> (isScrollToLeft() || isScrollToRight()) &#123;</span><br><span class="line">                    Log.e(TAG, <span class="string">"滑到"</span> + (isScrollToLeft() ? <span class="string">"左边"</span> : <span class="string">"右边"</span>));</span><br><span class="line">                    <span class="comment">// 把事件交给父控件处理，例如：viewpager滑动</span></span><br><span class="line">                    getParent().requestDisallowInterceptTouchEvent(<span class="keyword">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</span><br><span class="line">                <span class="comment">// 请求父控件可以拦截事件</span></span><br><span class="line">                getParent().requestDisallowInterceptTouchEvent(<span class="keyword">false</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onInterceptTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否已经滑到了最右边</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isScrollToRight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// getScrollX得到View的最左边的位置，若HorizontalScrollView滑到最右边，则为负值；</span></span><br><span class="line">        <span class="comment">// getScrollX() + getWidth()为最右边的位置</span></span><br><span class="line">        <span class="comment">// getChildAt(getChildCount() - 1).getRight()恰好得到子view的最右边的位置</span></span><br><span class="line">        <span class="keyword">return</span> getChildAt(getChildCount() - <span class="number">1</span>).getRight() == getScrollX() + getWidth();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否已经滑到了最左边</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isScrollToLeft</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getScrollX() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>滑动冲突的解决方式有两种</strong>：</p><blockquote><p>1.外部拦截法：触摸事件都先经过父容器的拦截处理，如果父容器需要此事件就拦截，不需要就不拦截（此方法符合view事件分发机制），这样就可以解决滑动冲突问题。需要重写onInterceptTouchEvent方法，伪代码如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> intercept = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">switch</span> (ev.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">              <span class="comment">// 不能拦截，否则无法传递事件给子元素</span></span><br><span class="line">                intercept = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">             <span class="comment">// 针对不同的滑动冲突，只需要修改这个条件即可，其它均不需做修改并且也不能修改</span></span><br><span class="line">                <span class="keyword">if</span> (滑动事件交由父容器处理)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 拦截事件</span></span><br><span class="line">                    intercept = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 不拦截事件</span></span><br><span class="line">                    intercept = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</span><br><span class="line">                <span class="comment">// 不拦截，否则子元素可能无法接收到这两个事件</span></span><br><span class="line">                intercept = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> intercept;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>2.内部拦截法：父容器不拦截任何事件，所有的事件都传递给子元素，如果子元素需要此事件就直接消耗掉，否则就交由父容器进行处理，这种方法和android中的事件分发机制不一致，需要配合<code>requestDisallowInterceptTouchEvent</code>方法才能正常工作，使用越来较外部拦截法稍显复杂。我们可以修改<code>dispatchTouchEvent</code>方法或者onTouchEvent方法来达到目的。伪代码如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (ev.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                getParent().requestDisallowInterceptTouchEvent(<span class="keyword">true</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">            <span class="comment">// 针对不同的滑动冲突，只需要修改这个条件即可，其它均不需做修改并且也不能修改</span></span><br><span class="line">                <span class="keyword">if</span> (父容器需要此类触摸事件)</span><br><span class="line">                &#123;</span><br><span class="line">                    getParent().requestDisallowInterceptTouchEvent(<span class="keyword">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(ev);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.android.com/guide/topics/ui/menus&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;菜单&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://developer.android.com/reference/android/view/Menu&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Menu api&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.jianshu.com/p/e99b5e8bd67b&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;图解 Android 事件分发机制&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://blog.csdn.net/carson_ho/article/details/54136311&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android事件分发机制 详解攻略&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://juejin.im/entry/596329686fb9a06bc903b6fd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Activity、View、Window的理解一篇文章就够了&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.jianshu.com/p/2aeb2d10a831&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ViewPager 与 HorizontalScrollView 滑动冲突问题&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Menu，不同于Button、TextView之类的控件，它不需要在布局文件中指定位置，它是用于提供给用户额外的操作选择，因此不必局限于某一个固定位置，它可以搭配任何控件。&lt;/p&gt;
&lt;p&gt;常见的Menu可以分为三种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ToolBar上的选项菜单，这是固定的设计，配合ToolBar实现很简单；&lt;/li&gt;
&lt;li&gt;上下文菜单ContextMenu，与某一个控件关联，可以实现在点击（长按）的位置出现菜单选项的效果；&lt;/li&gt;
&lt;li&gt;弹出菜单PopupMenu，动态生成，作为一个点击事件触发，出现的位置与被点击的控件位置绑定（上方或下方），与上下文菜单不同。&lt;/li&gt;
&lt;/ol&gt;
&lt;!--  --&gt;
&lt;p&gt;&lt;img src=&quot;http://114.116.9.65:7777/images/2020/01/19/1.jpg&quot; alt=&quot;1.jpg&quot; /&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://zhoutao822.coding.me/categories/Android/"/>
    
    
      <category term="Android" scheme="http://zhoutao822.coding.me/tags/Android/"/>
    
      <category term="Material" scheme="http://zhoutao822.coding.me/tags/Material/"/>
    
      <category term="ViewPager" scheme="http://zhoutao822.coding.me/tags/ViewPager/"/>
    
      <category term="RecyclerView" scheme="http://zhoutao822.coding.me/tags/RecyclerView/"/>
    
      <category term="ToolBar" scheme="http://zhoutao822.coding.me/tags/ToolBar/"/>
    
      <category term="ContextMenu" scheme="http://zhoutao822.coding.me/tags/ContextMenu/"/>
    
      <category term="PopupMenu" scheme="http://zhoutao822.coding.me/tags/PopupMenu/"/>
    
      <category term="onClick" scheme="http://zhoutao822.coding.me/tags/onClick/"/>
    
      <category term="onLongClick" scheme="http://zhoutao822.coding.me/tags/onLongClick/"/>
    
      <category term="onTouchEvent" scheme="http://zhoutao822.coding.me/tags/onTouchEvent/"/>
    
      <category term="Android事件分发机制" scheme="http://zhoutao822.coding.me/tags/Android%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Python风格规范</title>
    <link href="http://zhoutao822.coding.me/archives/10dab2b.html"/>
    <id>http://zhoutao822.coding.me/archives/10dab2b.html</id>
    <published>2019-06-14T14:04:50.000Z</published>
    <updated>2020-01-17T15:07:46.299Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><blockquote><p><a href="https://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/" target="_blank" rel="noopener">Google Python风格规范</a></p></blockquote><h2 id="分号"><a class="markdownIt-Anchor" href="#分号"></a> 分号</h2><p>不要在行尾加分号, 也不要用分号将两条命令放在同一行.</p><h2 id="行长度"><a class="markdownIt-Anchor" href="#行长度"></a> 行长度</h2><p>每行不超过80个字符</p><p>例外:</p><ol><li>长的导入模块语句</li><li>注释里的URL</li></ol><p>不要使用反斜杠连接行.</p><p>Python会将 <code>圆括号, 中括号和花括号中的行隐式的连接起来</code> , 你可以利用这个特点. 如果需要, 你可以在表达式外围增加一对额外的圆括号.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Yes: foo_bar(self, width, height, color=<span class="string">'black'</span>, design=<span class="literal">None</span>, x=<span class="string">'foo'</span>,</span><br><span class="line">             emphasis=<span class="literal">None</span>, highlight=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (width == <span class="number">0</span> <span class="keyword">and</span> height == <span class="number">0</span> <span class="keyword">and</span></span><br><span class="line">         color == <span class="string">'red'</span> <span class="keyword">and</span> emphasis == <span class="string">'strong'</span>):</span><br></pre></td></tr></table></figure><p>如果一个文本字符串在一行放不下, 可以使用圆括号来实现隐式行连接:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = (<span class="string">'This will build a very long long '</span></span><br><span class="line">     <span class="string">'long long long long long long string'</span>)</span><br></pre></td></tr></table></figure><p>在注释中，如果必要，将长的URL放在一行上。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Yes:  <span class="comment"># See details at</span></span><br><span class="line">      <span class="comment"># http://www.example.com/us/developer/documentation/api/content/v2.0/csv_file_name_extension_full_specification.html</span></span><br><span class="line">No:  <span class="comment"># See details at</span></span><br><span class="line">     <span class="comment"># http://www.example.com/us/developer/documentation/api/content/\</span></span><br><span class="line">     <span class="comment"># v2.0/csv_file_name_extension_full_specification.html</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="括号"><a class="markdownIt-Anchor" href="#括号"></a> 括号</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Yes: <span class="keyword">if</span> foo:</span><br><span class="line">         bar()</span><br><span class="line">     <span class="keyword">while</span> x:</span><br><span class="line">         x = bar()</span><br><span class="line">     <span class="keyword">if</span> x <span class="keyword">and</span> y:</span><br><span class="line">         bar()</span><br><span class="line">     <span class="keyword">if</span> <span class="keyword">not</span> x:</span><br><span class="line">         bar()</span><br><span class="line">     <span class="keyword">return</span> foo</span><br><span class="line">     <span class="keyword">for</span> (x, y) <span class="keyword">in</span> dict.items(): ...</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">No:  <span class="keyword">if</span> (x):</span><br><span class="line">         bar()</span><br><span class="line">     <span class="keyword">if</span> <span class="keyword">not</span>(x):</span><br><span class="line">         bar()</span><br><span class="line">     <span class="keyword">return</span> (foo)</span><br></pre></td></tr></table></figure><h2 id="缩进"><a class="markdownIt-Anchor" href="#缩进"></a> 缩进</h2><p>用4个空格来缩进代码</p><p>绝对不要用tab, 也不要tab和空格混用. 对于行连接的情况, 你应该要么垂直对齐换行的元素, 或者使用4空格的悬挂式缩进(这时第一行不应该有参数):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Yes:   <span class="comment"># 与起始变量对齐</span></span><br><span class="line">       foo = long_function_name(var_one, var_two,</span><br><span class="line">                                var_three, var_four)</span><br><span class="line"></span><br><span class="line">       <span class="comment"># 字典中与起始值对齐</span></span><br><span class="line">       foo = &#123;</span><br><span class="line">           long_dictionary_key: value1 +</span><br><span class="line">                                value2,</span><br><span class="line">           ...</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment"># 4 个空格缩进，第一行不需要</span></span><br><span class="line">       foo = long_function_name(</span><br><span class="line">           var_one, var_two, var_three,</span><br><span class="line">           var_four)</span><br><span class="line"></span><br><span class="line">       <span class="comment"># 字典中 4 个空格缩进</span></span><br><span class="line">       foo = &#123;</span><br><span class="line">           long_dictionary_key:</span><br><span class="line">               long_dictionary_value,</span><br><span class="line">           ...</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">No:    <span class="comment"># 第一行有空格是禁止的</span></span><br><span class="line">      foo = long_function_name(var_one, var_two,</span><br><span class="line">          var_three, var_four)</span><br><span class="line"></span><br><span class="line">      <span class="comment"># 2 个空格是禁止的</span></span><br><span class="line">      foo = long_function_name(</span><br><span class="line">        var_one, var_two, var_three,</span><br><span class="line">        var_four)</span><br><span class="line"></span><br><span class="line">      <span class="comment"># 字典中没有处理缩进</span></span><br><span class="line">      foo = &#123;</span><br><span class="line">          long_dictionary_key:</span><br><span class="line">              long_dictionary_value,</span><br><span class="line">              ...</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h2 id="空行"><a class="markdownIt-Anchor" href="#空行"></a> 空行</h2><p>顶级定义之间空两行, 方法定义之间空一行</p><p>顶级定义之间空两行, 比如函数或者类定义. 方法定义, 类定义与第一个方法之间, 都应该空一行. 函数或方法中, 某些地方要是你觉得合适, 就空一行.</p><h2 id="空格"><a class="markdownIt-Anchor" href="#空格"></a> 空格</h2><p>按照标准的排版规范来使用标点两边的空格</p><p>括号内不要有空格.</p><p>按照标准的排版规范来使用标点两边的空格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yes: spam(ham[<span class="number">1</span>], &#123;eggs: <span class="number">2</span>&#125;, [])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No:  spam( ham[ <span class="number">1</span> ], &#123; eggs: <span class="number">2</span> &#125;, [ ] )</span><br></pre></td></tr></table></figure><p>不要在逗号, 分号, 冒号前面加空格, 但应该在它们后面加(除了在行尾).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Yes: <span class="keyword">if</span> x == <span class="number">4</span>:</span><br><span class="line">         <span class="keyword">print</span> x, y</span><br><span class="line">     x, y = y, x</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">No:  <span class="keyword">if</span> x == <span class="number">4</span> :</span><br><span class="line">         <span class="keyword">print</span> x , y</span><br><span class="line">     x , y = y , x</span><br></pre></td></tr></table></figure><p>参数列表, 索引或切片的左括号前不应加空格.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Yes: spam(<span class="number">1</span>)</span><br><span class="line">no: spam (<span class="number">1</span>)</span><br><span class="line">Yes: dict[<span class="string">'key'</span>] = list[index]</span><br><span class="line">No:  dict [<span class="string">'key'</span>] = list [index]</span><br></pre></td></tr></table></figure><p>在二元操作符两边都加上一个空格, 比如赋值(<code>=</code>), 比较(<code>==</code>, <code>&lt;</code>, <code>&gt;</code>, <code>!=</code>, <code>&lt;&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>in</code>, <code>not in</code>, <code>is</code>, <code>is not</code>), 布尔(<code>and</code>, <code>or</code>, <code>not</code>). 至于算术操作符两边的空格该如何使用, 需要你自己好好判断. 不过两侧务必要保持一致.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Yes: x == <span class="number">1</span></span><br><span class="line">No:  x&lt;<span class="number">1</span></span><br></pre></td></tr></table></figure><p>当<code>=</code>用于指示关键字参数或默认参数值时, 不要在其两侧使用空格.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Yes: <span class="function"><span class="keyword">def</span> <span class="title">complex</span><span class="params">(real, imag=<span class="number">0.0</span>)</span>:</span> <span class="keyword">return</span> magic(r=real, i=imag)</span><br><span class="line">No:  <span class="function"><span class="keyword">def</span> <span class="title">complex</span><span class="params">(real, imag = <span class="number">0.0</span>)</span>:</span> <span class="keyword">return</span> magic(r = real, i = imag)</span><br></pre></td></tr></table></figure><p>不要用空格来垂直对齐多行间的标记, 因为这会成为维护的负担(适用于<code>:</code>, <code>#</code>, <code>=</code>等):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Yes:</span><br><span class="line">     foo = <span class="number">1000</span>  <span class="comment"># 注释</span></span><br><span class="line">     long_name = <span class="number">2</span>  <span class="comment"># 注释不需要对齐</span></span><br><span class="line"></span><br><span class="line">     dictionary = &#123;</span><br><span class="line">         <span class="string">"foo"</span>: <span class="number">1</span>,</span><br><span class="line">         <span class="string">"long_name"</span>: <span class="number">2</span>,</span><br><span class="line">         &#125;</span><br><span class="line">No:</span><br><span class="line">     foo       = <span class="number">1000</span>  <span class="comment"># 注释</span></span><br><span class="line">     long_name = <span class="number">2</span>     <span class="comment"># 注释不需要对齐</span></span><br><span class="line"></span><br><span class="line">     dictionary = &#123;</span><br><span class="line">         <span class="string">"foo"</span>      : <span class="number">1</span>,</span><br><span class="line">         <span class="string">"long_name"</span>: <span class="number">2</span>,</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure><h2 id="hashbang"><a class="markdownIt-Anchor" href="#hashbang"></a> Hashbang</h2><p>大部分.py文件不必以#!作为文件的开始. 根据 <code>PEP-394</code> , 程序的main文件应该以 <code>#!/usr/bin/python2</code>或者 <code>#!/usr/bin/python3</code>开始.</p><h2 id="注释"><a class="markdownIt-Anchor" href="#注释"></a> 注释</h2><p>确保对模块, 函数, 方法和行内注释使用正确的风格</p><p><strong>文档字符串</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Python有一种独一无二的的注释方式: 使用文档字符串. 文档字符串是包, 模块, 类或函数里的第一个语句. 这些字符串可以通过对象的__doc__成员被自动提取, 并且被pydoc所用. (你可以在你的模块上运行pydoc试一把, 看看它长什么样). 我们对文档字符串的惯例是使用三重双引号&quot;&quot;&quot;( PEP-257 ). 一个文档字符串应该这样组织: 首先是一行以句号, 问号或惊叹号结尾的概述(或者该文档字符串单纯只有一行). 接着是一个空行. 接着是文档字符串剩下的部分, 它应该与文档字符串的第一行的第一个引号对齐. 下面有更多文档字符串的格式化规范.</span><br></pre></td></tr></table></figure><p><strong>模块</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">每个文件应该包含一个许可样板. 根据项目使用的许可(例如, Apache 2.0, BSD, LGPL, GPL), 选择合适的样板.</span><br></pre></td></tr></table></figure><p><strong>函数和方法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">下文所指的函数,包括函数, 方法, 以及生成器.</span><br><span class="line"></span><br><span class="line">一个函数必须要有文档字符串, 除非它满足以下条件:</span><br><span class="line"></span><br><span class="line">1. 外部不可见</span><br><span class="line">2. 非常短小</span><br><span class="line">3. 简单明了</span><br><span class="line">文档字符串应该包含函数做什么, 以及输入和输出的详细描述. 通常, 不应该描述&quot;怎么做&quot;, 除非是一些复杂的算法. 文档字符串应该提供足够的信息, 当别人编写代码调用该函数时, 他不需要看一行代码, 只要看文档字符串就可以了. 对于复杂的代码, 在代码旁边加注释会比使用文档字符串更有意义.</span><br><span class="line"></span><br><span class="line">关于函数的几个方面应该在特定的小节中进行描述记录， 这几个方面如下文所述. 每节应该以一个标题行开始. 标题行以冒号结尾. 除标题行外, 节的其他内容应被缩进2个空格.</span><br><span class="line"></span><br><span class="line">Args:</span><br><span class="line">列出每个参数的名字, 并在名字后使用一个冒号和一个空格, 分隔对该参数的描述.如果描述太长超过了单行80字符,使用2或者4个空格的悬挂缩进(与文件其他部分保持一致). 描述应该包括所需的类型和含义. 如果一个函数接受*foo(可变长度参数列表)或者**bar (任意关键字参数), 应该详细列出*foo和**bar.</span><br><span class="line"></span><br><span class="line">Returns: (或者 Yields: 用于生成器)</span><br><span class="line">描述返回值的类型和语义. 如果函数返回None, 这一部分可以省略.</span><br><span class="line"></span><br><span class="line">Raises:</span><br><span class="line">列出与接口有关的所有异常.</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetch_bigtable_rows</span><span class="params">(big_table, keys, other_silly_variable=None)</span>:</span></span><br><span class="line">    <span class="string">"""Fetches rows from a Bigtable.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Retrieves rows pertaining to the given keys from the Table instance</span></span><br><span class="line"><span class="string">    represented by big_table.  Silly things may happen if</span></span><br><span class="line"><span class="string">    other_silly_variable is not None.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        big_table: An open Bigtable Table instance.</span></span><br><span class="line"><span class="string">        keys: A sequence of strings representing the key of each table row</span></span><br><span class="line"><span class="string">            to fetch.</span></span><br><span class="line"><span class="string">        other_silly_variable: Another optional variable, that has a much</span></span><br><span class="line"><span class="string">            longer name than the other args, and which does nothing.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        A dict mapping keys to the corresponding table row data</span></span><br><span class="line"><span class="string">        fetched. Each row is represented as a tuple of strings. For</span></span><br><span class="line"><span class="string">        example:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &#123;'Serak': ('Rigel VII', 'Preparer'),</span></span><br><span class="line"><span class="string">         'Zim': ('Irk', 'Invader'),</span></span><br><span class="line"><span class="string">         'Lrrr': ('Omicron Persei 8', 'Emperor')&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        If a key from the keys argument is missing from the dictionary,</span></span><br><span class="line"><span class="string">        then that row was not found in the table.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Raises:</span></span><br><span class="line"><span class="string">        IOError: An error occurred accessing the bigtable.Table object.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><strong>类</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类应该在其定义下有一个用于描述该类的文档字符串. 如果你的类有公共属性(Attributes), 那么文档中应该有一个属性(Attributes)段. 并且应该遵守和函数参数相同的格式.</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""Summary of class here.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Longer class information....</span></span><br><span class="line"><span class="string">    Longer class information....</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Attributes:</span></span><br><span class="line"><span class="string">        likes_spam: A boolean indicating if we like SPAM or not.</span></span><br><span class="line"><span class="string">        eggs: An integer count of the eggs we have laid.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, likes_spam=False)</span>:</span></span><br><span class="line">        <span class="string">"""Inits SampleClass with blah."""</span></span><br><span class="line">        self.likes_spam = likes_spam</span><br><span class="line">        self.eggs = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">public_method</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Performs operation blah."""</span></span><br></pre></td></tr></table></figure><p><strong>块注释和行注释</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最需要写注释的是代码中那些技巧性的部分. 如果你在下次 代码审查 的时候必须解释一下, 那么你应该现在就给它写注释. 对于复杂的操作, 应该在其操作开始前写上若干行注释. 对于不是一目了然的代码, 应在其行尾添加注释.</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># We use a weighted dictionary search to find out where i is in</span></span><br><span class="line"><span class="comment"># the array.  We extrapolate position based on the largest num</span></span><br><span class="line"><span class="comment"># in the array and the array size and then do binary search to</span></span><br><span class="line"><span class="comment"># get the exact number.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> i &amp; (i<span class="number">-1</span>) == <span class="number">0</span>:        <span class="comment"># true iff i is a power of 2</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">为了提高可读性, 注释应该至少离开代码2个空格.</span><br><span class="line"></span><br><span class="line">另一方面, 绝不要描述代码. 假设阅读代码的人比你更懂Python, 他只是不知道你的代码要做什么.</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># BAD COMMENT: Now go through the b array and make sure whenever i occurs</span></span><br><span class="line"><span class="comment"># the next element is i+1</span></span><br></pre></td></tr></table></figure><h2 id="类"><a class="markdownIt-Anchor" href="#类"></a> 类</h2><p>如果一个类不继承自其它类, 就显式的从object继承. 嵌套类也一样.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Yes: <span class="class"><span class="keyword">class</span> <span class="title">SampleClass</span><span class="params">(object)</span>:</span></span><br><span class="line">         <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">         <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span><span class="params">(object)</span>:</span></span><br><span class="line">             <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">ChildClass</span><span class="params">(ParentClass)</span>:</span></span><br><span class="line">         <span class="string">"""Explicitly inherits from another class already."""</span></span><br><span class="line">No: <span class="class"><span class="keyword">class</span> <span class="title">SampleClass</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span>:</span></span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>继承自 <code>object</code> 是为了使属性(<code>properties</code>)正常工作, 并且这样可以保护你的代码, 使其不受Python 3000的一个特殊的潜在不兼容性影响. 这样做也定义了一些特殊的方法, 这些方法实现了对象的默认语义, 包括 <code>__new__</code>, <code>__init__</code>, <code>__delattr__</code>, <code>__getattribute__</code>, <code>__setattr__</code>, <code>__hash__</code>, <code>__repr__</code>, and <code>__str__</code> .</p><h2 id="字符串"><a class="markdownIt-Anchor" href="#字符串"></a> 字符串</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Yes: x = a + b</span><br><span class="line">     x = <span class="string">'%s, %s!'</span> % (imperative, expletive)</span><br><span class="line">     x = <span class="string">'&#123;&#125;, &#123;&#125;!'</span>.format(imperative, expletive)</span><br><span class="line">     x = <span class="string">'name: %s; score: %d'</span> % (name, n)</span><br><span class="line">     x = <span class="string">'name: &#123;&#125;; score: &#123;&#125;'</span>.format(name, n)</span><br><span class="line">No: x = <span class="string">'%s%s'</span> % (a, b)  <span class="comment"># use + in this case</span></span><br><span class="line">    x = <span class="string">'&#123;&#125;&#123;&#125;'</span>.format(a, b)  <span class="comment"># use + in this case</span></span><br><span class="line">    x = imperative + <span class="string">', '</span> + expletive + <span class="string">'!'</span></span><br><span class="line">    x = <span class="string">'name: '</span> + name + <span class="string">'; score: '</span> + str(n)</span><br></pre></td></tr></table></figure><p>避免在循环中用+和+=操作符来累加字符串. 由于字符串是不可变的, 这样做会创建不必要的临时对象, 并且导致二次方而不是线性的运行时间. 作为替代方案, 你可以将每个子串加入列表, 然后在循环结束后用 .join 连接列表. (也可以将每个子串写入一个 cStringIO.StringIO 缓存中.)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Yes: items = [<span class="string">'&lt;table&gt;'</span>]</span><br><span class="line">     <span class="keyword">for</span> last_name, first_name <span class="keyword">in</span> employee_list:</span><br><span class="line">         items.append(<span class="string">'&lt;tr&gt;&lt;td&gt;%s, %s&lt;/td&gt;&lt;/tr&gt;'</span> % (last_name, first_name))</span><br><span class="line">     items.append(<span class="string">'&lt;/table&gt;'</span>)</span><br><span class="line">     employee_table = <span class="string">''</span>.join(items)</span><br><span class="line">No: employee_table = <span class="string">'&lt;table&gt;'</span></span><br><span class="line">    <span class="keyword">for</span> last_name, first_name <span class="keyword">in</span> employee_list:</span><br><span class="line">        employee_table += <span class="string">'&lt;tr&gt;&lt;td&gt;%s, %s&lt;/td&gt;&lt;/tr&gt;'</span> % (last_name, first_name)</span><br><span class="line">    employee_table += <span class="string">'&lt;/table&gt;'</span></span><br></pre></td></tr></table></figure><p>在同一个文件中, 保持使用字符串引号的一致性. 使用单引号’或者双引号&quot;之一用以引用字符串, 并在同一文件中沿用. 在字符串内可以使用另外一种引号, 以避免在字符串中使用. PyLint已经加入了这一检查.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Yes:</span><br><span class="line">     Python(<span class="string">'Why are you hiding your eyes?'</span>)</span><br><span class="line">     Gollum(<span class="string">"I'm scared of lint errors."</span>)</span><br><span class="line">     Narrator(<span class="string">'"Good!" thought a happy Python reviewer.'</span>)</span><br><span class="line">No:</span><br><span class="line">     Python(<span class="string">"Why are you hiding your eyes?"</span>)</span><br><span class="line">     Gollum(<span class="string">'The lint. It burns. It burns us.'</span>)</span><br><span class="line">     Gollum(<span class="string">"Always the great lint. Watching. Watching."</span>)</span><br></pre></td></tr></table></figure><p>为多行字符串使用三重双引号&quot;&quot;“而非三重单引号’’’. 当且仅当项目中使用单引号’来引用字符串时, 才可能会使用三重’’'为非文档字符串的多行字符串来标识引用. 文档字符串必须使用三重双引号”&quot;&quot;. 不过要注意, 通常用隐式行连接更清晰, 因为多行字符串与程序其他部分的缩进方式不一致.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Yes:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"This is much nicer.\n"</span></span><br><span class="line">           <span class="string">"Do it this way.\n"</span>)</span><br><span class="line">No:</span><br><span class="line">      <span class="keyword">print</span> <span class="string">"""This is pretty ugly.</span></span><br><span class="line"><span class="string">  Don't do this.</span></span><br><span class="line"><span class="string">  """</span></span><br></pre></td></tr></table></figure><h2 id="文件和sockets"><a class="markdownIt-Anchor" href="#文件和sockets"></a> 文件和sockets</h2><p>在文件和sockets结束时, 显式的关闭它.</p><p>除文件外, sockets或其他类似文件的对象在没有必要的情况下打开, 会有许多副作用, 例如:</p><ol><li>它们可能会消耗有限的系统资源, 如文件描述符. 如果这些资源在使用后没有及时归还系统, 那么用于处理这些对象的代码会将资源消耗殆尽.</li><li>持有文件将会阻止对于文件的其他诸如移动、删除之类的操作.</li><li>仅仅是从逻辑上关闭文件和sockets, 那么它们仍然可能会被其共享的程序在无意中进行读或者写操作. 只有当它们真正被关闭后, 对于它们尝试进行读或者写操作将会跑出异常, 并使得问题快速显现出来.</li><li></li></ol><p>而且, 幻想当文件对象析构时, 文件和sockets会自动关闭, 试图将文件对象的生命周期和文件的状态绑定在一起的想法, 都是不现实的. 因为有如下原因:</p><ol><li>没有任何方法可以确保运行环境会真正的执行文件的析构. 不同的Python实现采用不同的内存管理技术, 比如延时垃圾处理机制. 延时垃圾处理机制可能会导致对象生命周期被任意无限制的延长.</li><li>对于文件意外的引用,会导致对于文件的持有时间超出预期(比如对于异常的跟踪, 包含有全局变量等).</li><li></li></ol><p>推荐使用 <code>with</code>语句 以管理文件:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"hello.txt"</span>) <span class="keyword">as</span> hello_file:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> hello_file:</span><br><span class="line">        <span class="keyword">print</span> line</span><br></pre></td></tr></table></figure><p>对于不支持使用<code>with</code>语句的类似文件的对象,使用 <code>contextlib.closing()</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> contextlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> contextlib.closing(urllib.urlopen(<span class="string">"http://www.python.org/"</span>)) <span class="keyword">as</span> front_page:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> front_page:</span><br><span class="line">        <span class="keyword">print</span> line</span><br></pre></td></tr></table></figure><h2 id="todo注释"><a class="markdownIt-Anchor" href="#todo注释"></a> TODO注释</h2><p>为临时代码使用TODO注释, 它是一种短期解决方案. 不算完美, 但够好了.</p><p>TODO注释应该在所有开头处包含&quot;TODO&quot;字符串, 紧跟着是用括号括起来的你的名字, email地址或其它标识符. 然后是一个可选的冒号. 接着必须有一行注释, 解释要做什么. 主要目的是为了有一个统一的TODO格式, 这样添加注释的人就可以搜索到(并可以按需提供更多细节). 写了TODO注释并不保证写的人会亲自解决问题. 当你写了一个TODO, 请注上你的名字.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TODO(kl@gmail.com): Use a "*" here for string repetition.</span></span><br><span class="line"><span class="comment"># TODO(Zeke) Change this to use relations.</span></span><br></pre></td></tr></table></figure><p>如果你的TODO是&quot;将来做某事&quot;的形式, 那么请确保你包含了一个指定的日期(“2009年11月解决”)或者一个特定的事件(“等到所有的客户都可以处理XML请求就移除这些代码”).</p><h2 id="导入格式"><a class="markdownIt-Anchor" href="#导入格式"></a> 导入格式</h2><p>每个导入应该独占一行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Yes: <span class="keyword">import</span> os</span><br><span class="line">     <span class="keyword">import</span> sys</span><br><span class="line">No:  <span class="keyword">import</span> os, sys</span><br></pre></td></tr></table></figure><p>导入总应该放在文件顶部, 位于模块注释和文档字符串之后, 模块全局变量和常量之前. 导入应该按照从最通用到最不通用的顺序分组:</p><ol><li>标准库导入</li><li>第三方库导入</li><li>应用程序指定导入</li></ol><p>每种分组中, 应该根据每个模块的完整包路径按字典序排序, 忽略大小写.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> foo</span><br><span class="line"><span class="keyword">from</span> foo <span class="keyword">import</span> bar</span><br><span class="line"><span class="keyword">from</span> foo.bar <span class="keyword">import</span> baz</span><br><span class="line"><span class="keyword">from</span> foo.bar <span class="keyword">import</span> Quux</span><br><span class="line"><span class="keyword">from</span> Foob <span class="keyword">import</span> ar</span><br></pre></td></tr></table></figure><h2 id="语句"><a class="markdownIt-Anchor" href="#语句"></a> 语句</h2><p>通常每个语句应该独占一行</p><p>不过, 如果测试结果与测试语句在一行放得下, 你也可以将它们放在同一行. 如果是<code>if</code>语句, 只有在没有<code>else</code>时才能这样做. 特别地, 绝不要对 <code>try/except</code> 这样做, 因为<code>try</code>和<code>except</code>不能放在同一行.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Yes:</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> foo: bar(foo)</span><br><span class="line">No:</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> foo: bar(foo)</span><br><span class="line">  <span class="keyword">else</span>:   baz(foo)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span>:               bar(foo)</span><br><span class="line">  <span class="keyword">except</span> ValueError: baz(foo)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">      bar(foo)</span><br><span class="line">  <span class="keyword">except</span> ValueError: baz(foo)</span><br></pre></td></tr></table></figure><h2 id="访问控制"><a class="markdownIt-Anchor" href="#访问控制"></a> 访问控制</h2><p>在Python中, 对于琐碎又不太重要的访问函数, 你应该直接使用公有变量来取代它们, 这样可以避免额外的函数调用开销. 当添加更多功能时, 你可以用属性(<code>property</code>)来保持语法的一致性.</p><p>(译者注: 重视封装的面向对象程序员看到这个可能会很反感, 因为他们一直被教育: 所有成员变量都必须是私有的! 其实, 那真的是有点麻烦啊. 试着去接受Pythonic哲学吧)</p><p>另一方面, 如果访问更复杂, 或者变量的访问开销很显著, 那么你应该使用像 <code>get_foo()</code> 和 <code>set_foo()</code> 这样的函数调用. 如果之前的代码行为允许通过属性(<code>property</code>)访问 , 那么就不要将新的访问函数与属性绑定. 这样, 任何试图通过老方法访问变量的代码就没法运行, 使用者也就会意识到复杂性发生了变化.</p><h2 id="命名"><a class="markdownIt-Anchor" href="#命名"></a> 命名</h2><p><strong>应该避免的名称</strong></p><ol><li>单字符名称, 除了计数器和迭代器.</li><li>包/模块名中的连字符(-)</li><li>双下划线开头并结尾的名称(Python保留, 例如<code>__init__</code>)</li></ol><p><strong>命名约定</strong></p><ol><li>所谓&quot;内部(<code>Internal</code>)&quot;表示仅模块内可用, 或者, 在类内是保护或私有的.</li><li>用单下划线(_)开头表示模块变量或函数是<code>protected</code>的(使用<code>import * from</code>时不会包含).</li><li>用双下划线(__)开头的实例变量或方法表示类内私有.</li><li>将相关的类和顶级函数放在同一个模块里. 不像Java, 没必要限制一个类一个模块.</li><li>对类名使用大写字母开头的单词(如CapWords, 即Pascal风格), 但是模块名应该用小写加下划线的方式(如lower_with_under.py). 尽管已经有很多现存的模块使用类似于CapWords.py这样的命名, 但现在已经不鼓励这样做, 因为如果模块名碰巧和类名一致, 这会让人困扰.</li></ol><h2 id="main"><a class="markdownIt-Anchor" href="#main"></a> Main</h2><p>即使是一个打算被用作脚本的文件, 也应该是可导入的. 并且简单的导入不应该导致这个脚本的主功能(main functionality)被执行, 这是一种副作用. 主功能应该放在一个<code>main()</code>函数中.</p><p>在Python中, pydoc以及单元测试要求模块必须是可导入的. 你的代码应该在执行主程序前总是检查 <code>if __name__ == '__main__'</code> , 这样当模块被导入时主程序就不会被执行.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">      ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>所有的顶级代码在模块导入时都会被执行. 要小心不要去调用函数, 创建对象, 或者执行那些不应该在使用pydoc时执行的操作.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Google Python风格规范&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;分号&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#分号&quot;&gt;&lt;/a&gt; 分号&lt;/h2&gt;
&lt;p&gt;不要在行尾加分号, 也不要用分号将两条命令放在同一行.&lt;/p&gt;
&lt;h2 id=&quot;行长度&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#行长度&quot;&gt;&lt;/a&gt; 行长度&lt;/h2&gt;
&lt;p&gt;每行不超过80个字符&lt;/p&gt;
&lt;p&gt;例外:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;长的导入模块语句&lt;/li&gt;
&lt;li&gt;注释里的URL&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不要使用反斜杠连接行.&lt;/p&gt;
&lt;p&gt;Python会将 &lt;code&gt;圆括号, 中括号和花括号中的行隐式的连接起来&lt;/code&gt; , 你可以利用这个特点. 如果需要, 你可以在表达式外围增加一对额外的圆括号.&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Yes: foo_bar(self, width, height, color=&lt;span class=&quot;string&quot;&gt;&#39;black&#39;&lt;/span&gt;, design=&lt;span class=&quot;literal&quot;&gt;None&lt;/span&gt;, x=&lt;span class=&quot;string&quot;&gt;&#39;foo&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             emphasis=&lt;span class=&quot;literal&quot;&gt;None&lt;/span&gt;, highlight=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (width == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; height == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         color == &lt;span class=&quot;string&quot;&gt;&#39;red&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; emphasis == &lt;span class=&quot;string&quot;&gt;&#39;strong&#39;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果一个文本字符串在一行放不下, 可以使用圆括号来实现隐式行连接:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;x = (&lt;span class=&quot;string&quot;&gt;&#39;This will build a very long long &#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;string&quot;&gt;&#39;long long long long long long string&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在注释中，如果必要，将长的URL放在一行上。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Yes:  &lt;span class=&quot;comment&quot;&gt;# See details at&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;# http://www.example.com/us/developer/documentation/api/content/v2.0/csv_file_name_extension_full_specification.html&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;No:  &lt;span class=&quot;comment&quot;&gt;# See details at&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;comment&quot;&gt;# http://www.example.com/us/developer/documentation/api/content/\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;comment&quot;&gt;# v2.0/csv_file_name_extension_full_specification.html&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Tips" scheme="http://zhoutao822.coding.me/categories/Tips/"/>
    
    
      <category term="Python" scheme="http://zhoutao822.coding.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python语言规范</title>
    <link href="http://zhoutao822.coding.me/archives/403cc251.html"/>
    <id>http://zhoutao822.coding.me/archives/403cc251.html</id>
    <published>2019-06-14T12:26:46.000Z</published>
    <updated>2020-01-17T15:07:46.300Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><blockquote><p><a href="https://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_language_rules/" target="_blank" rel="noopener">Google Python语言规范</a></p></blockquote><h2 id="1-pylint"><a class="markdownIt-Anchor" href="#1-pylint"></a> 1. Pylint</h2><p>pylint是一个可以查找py文件中部分错误以及不规范的语法，虽然pylint还不够完美但是我们可以借助它修正不规范的地方。</p><p>使用方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pylint xxx.py</span><br></pre></td></tr></table></figure><p>输出类似于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">************* Module wine</span><br><span class="line">wine.py:20:0: C0304: Final newline missing (missing-final-newline)</span><br><span class="line">wine.py:1:0: C0111: Missing module docstring (missing-docstring)</span><br><span class="line">wine.py:3:0: E0401: Unable to import &#39;numpy&#39; (import-error)</span><br><span class="line">wine.py:4:0: E0401: Unable to import &#39;sklearn.datasets&#39; (import-error)</span><br><span class="line">wine.py:5:0: E0401: Unable to import &#39;sklearn.mixture&#39; (import-error)</span><br><span class="line">wine.py:6:0: C0103: Constant name &quot;rawData&quot; doesn&#39;t conform to UPPER_CASE naming style (invalid-name)</span><br><span class="line">wine.py:8:0: C0103: Constant name &quot;data&quot; doesn&#39;t conform to UPPER_CASE naming style (invalid-name)</span><br><span class="line">wine.py:9:0: C0103: Constant name &quot;target&quot; doesn&#39;t conform to UPPER_CASE naming style (invalid-name)</span><br><span class="line">wine.py:11:0: C0103: Constant name &quot;gmm&quot; doesn&#39;t conform to UPPER_CASE naming style (invalid-name)</span><br><span class="line">wine.py:15:0: C0103: Constant name &quot;prediction&quot; doesn&#39;t conform to UPPER_CASE naming style (invalid-name)</span><br><span class="line">wine.py:19:0: C0103: Constant name &quot;acc&quot; doesn&#39;t conform to UPPER_CASE naming style (invalid-name)</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Your code has been rated at -9.17&#x2F;10 (previous run: 10.00&#x2F;10, -19.17)</span><br></pre></td></tr></table></figure><a id="more"></a><p>也可以通过行注释来抑制警告</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict = 'something awful'  # Bad Idea... pylint: disable=redefined-builtin</span><br></pre></td></tr></table></figure><p>要抑制”参数未使用”告警, 你可以用”<em>”作为参数标识符, 或者在参数名前加”unused</em>”. 遇到不能改变参数名的情况, 你可以通过在函数开头”提到”它们来消除告警. 例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, unused_b, unused_c, d=None, e=None)</span>:</span></span><br><span class="line">    _ = d, e</span><br><span class="line">    <span class="keyword">return</span> a</span><br></pre></td></tr></table></figure><h2 id="2-导入"><a class="markdownIt-Anchor" href="#2-导入"></a> 2. 导入</h2><ul><li><p>使用 <code>import x</code> 来导入包和模块.</p></li><li><p>使用 <code>from x import y</code>, 其中x是包前缀, y是不带前缀的模块名.</p></li><li><p>使用 <code>from x import y as z</code>, 如果两个要导入的模块都叫做y或者y太长了.</p></li></ul><p>例如, 模块 <code>sound.effects.echo</code> 可以用如下方式导入:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sound.effects <span class="keyword">import</span> echo</span><br><span class="line">...</span><br><span class="line">echo.EchoFilter(input, output, delay=<span class="number">0.7</span>, atten=<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>导入时不要使用相对名称. 即使模块在同一个包中, 也要使用完整包名. 这能帮助你避免无意间导入一个包两次.</p><h2 id="3-包"><a class="markdownIt-Anchor" href="#3-包"></a> 3. 包</h2><p>所有的新代码都应该用完整包名来导入每个模块.</p><p>应该像下面这样导入:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Reference in code with complete name.</span></span><br><span class="line"><span class="keyword">import</span> sound.effects.echo</span><br><span class="line"></span><br><span class="line"><span class="comment"># Reference in code with just module name (preferred).</span></span><br><span class="line"><span class="keyword">from</span> sound.effects <span class="keyword">import</span> echo</span><br></pre></td></tr></table></figure><h2 id="4-异常"><a class="markdownIt-Anchor" href="#4-异常"></a> 4. 异常</h2><p>异常必须遵守特定条件:</p><ol><li>像这样触发异常: <code>raise MyException(&quot;Error message&quot;)</code> 或者 <code>raise MyException</code> . 不要使用两个参数的形式( <code>raise MyException, &quot;Error message&quot;</code> )或者过时的字符串异常( <code>raise &quot;Error message&quot;</code> ).</li><li>模块或包应该定义自己的特定域的异常基类, 这个基类应该从内建的Exception类继承. 模块的异常基类应该叫做”Error”.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Error</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ol start="3"><li>永远不要使用 <code>except:</code> 语句来捕获所有异常, 也不要捕获 <code>Exception</code> 或者 <code>StandardError</code> , 除非你打算重新触发该异常, 或者你已经在当前线程的最外层(记得还是要打印一条错误消息). 在异常这方面, Python非常宽容, <code>except:</code> 真的会捕获包括Python语法错误在内的任何错误. 使用 <code>except:</code> 很容易隐藏真正的bug.</li><li>尽量减少try/except块中的代码量. try块的体积越大, 期望之外的异常就越容易被触发. 这种情况下, try/except块将隐藏真正的错误.</li><li>使用<code>finally</code>子句来执行那些无论try块中有没有异常都应该被执行的代码. 这对于清理资源常常很有用, 例如关闭文件.</li><li>当捕获异常时, 使用 <code>as</code> 而不要用逗号. 例如</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> Error</span><br><span class="line"><span class="keyword">except</span> Error <span class="keyword">as</span> error:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="5-全局变量"><a class="markdownIt-Anchor" href="#5-全局变量"></a> 5. 全局变量</h2><p>避免使用全局变量, 用类变量来代替. 但也有一些例外:</p><ol><li>脚本的默认选项.</li><li>模块级常量. 例如:　PI = 3.14159. 常量应该全大写, 用下划线连接.</li><li>有时候用全局变量来缓存值或者作为函数返回值很有用.</li><li>如果需要, 全局变量应该仅在模块内部可用, 并通过模块级的公共函数来访问.</li></ol><h2 id="6-嵌套局部内部类或函数"><a class="markdownIt-Anchor" href="#6-嵌套局部内部类或函数"></a> 6. 嵌套/局部/内部类或函数</h2><p>鼓励使用嵌套/本地/内部类或函数</p><p>类可以定义在方法, 函数或者类中. 函数可以定义在方法或函数中. 封闭区间中定义的变量对嵌套函数是只读的.</p><p>嵌套类或局部类的实例不能序列化(pickled).</p><h2 id="6-列表推导"><a class="markdownIt-Anchor" href="#6-列表推导"></a> 6. 列表推导</h2><p>适用于简单情况. 每个部分应该单独置于一行: 映射表达式, for语句, 过滤器表达式. 禁止多重for语句或过滤器表达式. 复杂情况下还是使用循环.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Yes:</span><br><span class="line">  result = []</span><br><span class="line">  <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">      <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">          <span class="keyword">if</span> x * y &gt; <span class="number">10</span>:</span><br><span class="line">              result.append((x, y))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">5</span>):</span><br><span class="line">      <span class="keyword">for</span> y <span class="keyword">in</span> xrange(<span class="number">5</span>):</span><br><span class="line">          <span class="keyword">if</span> x != y:</span><br><span class="line">              <span class="keyword">for</span> z <span class="keyword">in</span> xrange(<span class="number">5</span>):</span><br><span class="line">                  <span class="keyword">if</span> y != z:</span><br><span class="line">                      <span class="keyword">yield</span> (x, y, z)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ((x, complicated_transform(x))</span><br><span class="line">          <span class="keyword">for</span> x <span class="keyword">in</span> long_generator_function(parameter)</span><br><span class="line">          <span class="keyword">if</span> x <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">  squares = [x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line">  eat(jelly_bean <span class="keyword">for</span> jelly_bean <span class="keyword">in</span> jelly_beans</span><br><span class="line">      <span class="keyword">if</span> jelly_bean.color == <span class="string">'black'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">No:</span><br><span class="line">  result = [(x, y) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>) <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">5</span>) <span class="keyword">if</span> x * y &gt; <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ((x, y, z)</span><br><span class="line">          <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">5</span>)</span><br><span class="line">          <span class="keyword">for</span> y <span class="keyword">in</span> xrange(<span class="number">5</span>)</span><br><span class="line">          <span class="keyword">if</span> x != y</span><br><span class="line">          <span class="keyword">for</span> z <span class="keyword">in</span> xrange(<span class="number">5</span>)</span><br><span class="line">          <span class="keyword">if</span> y != z)</span><br></pre></td></tr></table></figure><h2 id="7-默认迭代器和操作符"><a class="markdownIt-Anchor" href="#7-默认迭代器和操作符"></a> 7. 默认迭代器和操作符</h2><p>如果类型支持, 就使用默认迭代器和操作符, 例如列表, 字典和文件. 内建类型也定义了迭代器方法. 优先考虑这些方法, 而不是那些返回列表的方法. 当然，这样遍历容器时，你将不能修改容器.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Yes:  <span class="keyword">for</span> key <span class="keyword">in</span> adict: ...</span><br><span class="line">      <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> adict: ...</span><br><span class="line">      <span class="keyword">if</span> obj <span class="keyword">in</span> alist: ...</span><br><span class="line">      <span class="keyword">for</span> line <span class="keyword">in</span> afile: ...</span><br><span class="line">      <span class="keyword">for</span> k, v <span class="keyword">in</span> dict.iteritems(): ...</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">No:   <span class="keyword">for</span> key <span class="keyword">in</span> adict.keys(): ...</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> adict.has_key(key): ...</span><br><span class="line">      <span class="keyword">for</span> line <span class="keyword">in</span> afile.readlines(): ...</span><br></pre></td></tr></table></figure><h2 id="8-生成器"><a class="markdownIt-Anchor" href="#8-生成器"></a> 8. 生成器</h2><p>所谓生成器函数, 就是每当它执行一次生成(yield)语句, 它就返回一个迭代器, 这个迭代器生成一个值. 生成值后, 生成器函数的运行状态将被挂起, 直到下一次生成.</p><p>鼓励使用. 注意在生成器函数的文档字符串中使用”Yields:”而不是”Returns:”.</p><h2 id="9-lambda函数"><a class="markdownIt-Anchor" href="#9-lambda函数"></a> 9. Lambda函数</h2><p>适用于单行函数. 如果代码超过60-80个字符, 最好还是定义成常规(嵌套)函数.</p><p>对于常见的操作符，例如乘法操作符，使用 <code>operator</code> 模块中的函数以代替lambda函数. 例如, 推荐使用 <code>operator.mul</code> , 而不是 <code>lambda x, y: x * y</code> .</p><h2 id="10-条件表达式"><a class="markdownIt-Anchor" href="#10-条件表达式"></a> 10. 条件表达式</h2><p>适用于单行函数. 在其他情况下，推荐使用完整的if语句.</p><h2 id="11-默认参数值"><a class="markdownIt-Anchor" href="#11-默认参数值"></a> 11. 默认参数值</h2><p>鼓励使用, 不过有如下注意事项:</p><p>不要在函数或方法定义中使用可变对象作为默认值.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Yes: <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, b=None)</span>:</span></span><br><span class="line">         <span class="keyword">if</span> b <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">             b = []</span><br><span class="line">No:  <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, b=[])</span>:</span></span><br><span class="line">         ...</span><br><span class="line">No:  <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, b=time.time<span class="params">()</span>)</span>:</span>  <span class="comment"># The time the module was loaded???</span></span><br><span class="line">         ...</span><br><span class="line">No:  <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, b=FLAGS.my_thing)</span>:</span>  <span class="comment"># sys.argv has not yet been parsed...</span></span><br><span class="line">         ...</span><br></pre></td></tr></table></figure><h2 id="12-属性"><a class="markdownIt-Anchor" href="#12-属性"></a> 12. 属性</h2><p>你通常习惯于使用访问或设置方法来访问或设置数据, 它们简单而轻量. 不过我们建议你在新的代码中使用属性. 只读属性应该用 <code>@property</code> 装饰器 来创建.</p><p>如果子类没有覆盖属性, 那么属性的继承可能看上去不明显. 因此使用者必须确保访问方法间接被调用, 以保证子类中的重载方法被属性调用(使用模板方法设计模式).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">Yes: <span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">Square</span><span class="params">(object)</span>:</span></span><br><span class="line">         <span class="string">"""A square with two properties: a writable area and a read-only perimeter.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">         To use:</span></span><br><span class="line"><span class="string">         &gt;&gt;&gt; sq = Square(3)</span></span><br><span class="line"><span class="string">         &gt;&gt;&gt; sq.area</span></span><br><span class="line"><span class="string">         9</span></span><br><span class="line"><span class="string">         &gt;&gt;&gt; sq.perimeter</span></span><br><span class="line"><span class="string">         12</span></span><br><span class="line"><span class="string">         &gt;&gt;&gt; sq.area = 16</span></span><br><span class="line"><span class="string">         &gt;&gt;&gt; sq.side</span></span><br><span class="line"><span class="string">         4</span></span><br><span class="line"><span class="string">         &gt;&gt;&gt; sq.perimeter</span></span><br><span class="line"><span class="string">         16</span></span><br><span class="line"><span class="string">         """</span></span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, side)</span>:</span></span><br><span class="line">             self.side = side</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">def</span> <span class="title">__get_area</span><span class="params">(self)</span>:</span></span><br><span class="line">             <span class="string">"""Calculates the 'area' property."""</span></span><br><span class="line">             <span class="keyword">return</span> self.side ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">def</span> <span class="title">___get_area</span><span class="params">(self)</span>:</span></span><br><span class="line">             <span class="string">"""Indirect accessor for 'area' property."""</span></span><br><span class="line">             <span class="keyword">return</span> self.__get_area()</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">def</span> <span class="title">__set_area</span><span class="params">(self, area)</span>:</span></span><br><span class="line">             <span class="string">"""Sets the 'area' property."""</span></span><br><span class="line">             self.side = math.sqrt(area)</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">def</span> <span class="title">___set_area</span><span class="params">(self, area)</span>:</span></span><br><span class="line">             <span class="string">"""Indirect setter for 'area' property."""</span></span><br><span class="line">             self._SetArea(area)</span><br><span class="line"></span><br><span class="line">         area = property(___get_area, ___set_area,</span><br><span class="line">                         doc=<span class="string">"""Gets or sets the area of the square."""</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">         @property</span></span><br><span class="line">         <span class="function"><span class="keyword">def</span> <span class="title">perimeter</span><span class="params">(self)</span>:</span></span><br><span class="line">             <span class="keyword">return</span> self.side * <span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="13-truefalse的求值"><a class="markdownIt-Anchor" href="#13-truefalse的求值"></a> 13. True/False的求值</h2><p>尽可能使用隐式的false, 例如: 使用 <code>if foo:</code> 而不是 <code>if foo != []:</code> . 不过还是有一些注意事项需要你铭记在心:</p><ol><li><p>永远不要用==或者!=来比较单件, 比如None. 使用is或者is not.</p></li><li><p>注意: 当你写下 <code>if x:</code> 时, 你其实表示的是 <code>if x is not None</code> . 例如: 当你要测试一个默认值是None的变量或参数是否被设为其它值. 这个值在布尔语义下可能是false!</p></li><li><p>永远不要用==将一个布尔量与false相比较. 使用 <code>if not x:</code> 代替. 如果你需要区分false和None, 你应该用像 <code>if not x and x is not None:</code> 这样的语句.</p></li><li><p>对于序列(字符串, 列表, 元组), 要注意空序列是false. 因此 <code>if not seq:</code> 或者 <code>if seq:</code> 比 <code>if len(seq):</code> 或 <code>if not len(seq):</code> 要更好.</p></li><li><p>处理整数时, 使用隐式false可能会得不偿失(即不小心将None当做0来处理). 你可以将一个已知是整型(且不是len()的返回结果)的值与0比较.</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Yes: <span class="keyword">if</span> <span class="keyword">not</span> users:</span><br><span class="line">         <span class="keyword">print</span> <span class="string">'no users'</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> foo == <span class="number">0</span>:</span><br><span class="line">         self.handle_zero()</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> i % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">         self.handle_multiple_of_ten()</span><br><span class="line">No:  <span class="keyword">if</span> len(users) == <span class="number">0</span>:</span><br><span class="line">         <span class="keyword">print</span> <span class="string">'no users'</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> foo <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> <span class="keyword">not</span> foo:</span><br><span class="line">         self.handle_zero()</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> <span class="keyword">not</span> i % <span class="number">10</span>:</span><br><span class="line">         self.handle_multiple_of_ten()</span><br></pre></td></tr></table></figure><ol start="6"><li>注意‘0’(字符串)会被当做true.</li></ol><h2 id="14-词法作用域"><a class="markdownIt-Anchor" href="#14-词法作用域"></a> 14. 词法作用域</h2><p>嵌套的Python函数可以引用外层函数中定义的变量, 但是不能够对它们赋值. 变量绑定的解析是使用词法作用域, 也就是基于静态的程序文本. 对一个块中的某个名称的任何赋值都会导致Python将对该名称的全部引用当做局部变量, 甚至是赋值前的处理. 如果碰到global声明, 该名称就会被视作全局变量.</p><p>一个使用这个特性的例子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_adder</span><span class="params">(summand1)</span>:</span></span><br><span class="line">    <span class="string">"""Returns a function that adds numbers to a given number."""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">adder</span><span class="params">(summand2)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> summand1 + summand2</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> adder</span><br></pre></td></tr></table></figure><p>(译者注: 这个例子有点诡异, 你应该这样使用这个函数: <code>sum = get_adder(summand1)(summand2)</code> )</p><h2 id="15-函数与方法装饰器"><a class="markdownIt-Anchor" href="#15-函数与方法装饰器"></a> 15. 函数与方法装饰器</h2><p>用于函数及方法的装饰器 (也就是@标记). 最常见的装饰器是@classmethod 和@staticmethod, 用于将常规函数转换成类方法或静态方法. 不过, 装饰器语法也允许用户自定义装饰器. 特别地, 对于某个函数 <code>my_decorator</code> , 下面的两段代码是等效的:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">   @my_decorator</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">method</span><span class="params">(self)</span>:</span></span><br><span class="line">       <span class="comment"># method body ...</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">method</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># method body ...</span></span><br><span class="line">    method = my_decorator(method)</span><br></pre></td></tr></table></figure><h2 id="16-线程"><a class="markdownIt-Anchor" href="#16-线程"></a> 16. 线程</h2><p>虽然Python的内建类型例如字典看上去拥有原子操作, 但是在某些情形下它们仍然不是原子的(即: 如果__hash__或__eq__被实现为Python方法)且它们的原子性是靠不住的. 你也不能指望原子变量赋值(因为这个反过来依赖字典).</p><p>优先使用Queue模块的 <code>Queue</code> 数据类型作为线程间的数据通信方式. 另外, 使用threading模块及其锁原语(locking primitives). 了解条件变量的合适使用方式, 这样你就可以使用 <code>threading.Condition</code> 来取代低级别的锁了.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_language_rules/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Google Python语言规范&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-pylint&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-pylint&quot;&gt;&lt;/a&gt; 1. Pylint&lt;/h2&gt;
&lt;p&gt;pylint是一个可以查找py文件中部分错误以及不规范的语法，虽然pylint还不够完美但是我们可以借助它修正不规范的地方。&lt;/p&gt;
&lt;p&gt;使用方式&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pylint xxx.py&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出类似于&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;************* Module wine&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wine.py:20:0: C0304: Final newline missing (missing-final-newline)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wine.py:1:0: C0111: Missing module docstring (missing-docstring)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wine.py:3:0: E0401: Unable to import &amp;#39;numpy&amp;#39; (import-error)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wine.py:4:0: E0401: Unable to import &amp;#39;sklearn.datasets&amp;#39; (import-error)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wine.py:5:0: E0401: Unable to import &amp;#39;sklearn.mixture&amp;#39; (import-error)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wine.py:6:0: C0103: Constant name &amp;quot;rawData&amp;quot; doesn&amp;#39;t conform to UPPER_CASE naming style (invalid-name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wine.py:8:0: C0103: Constant name &amp;quot;data&amp;quot; doesn&amp;#39;t conform to UPPER_CASE naming style (invalid-name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wine.py:9:0: C0103: Constant name &amp;quot;target&amp;quot; doesn&amp;#39;t conform to UPPER_CASE naming style (invalid-name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wine.py:11:0: C0103: Constant name &amp;quot;gmm&amp;quot; doesn&amp;#39;t conform to UPPER_CASE naming style (invalid-name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wine.py:15:0: C0103: Constant name &amp;quot;prediction&amp;quot; doesn&amp;#39;t conform to UPPER_CASE naming style (invalid-name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wine.py:19:0: C0103: Constant name &amp;quot;acc&amp;quot; doesn&amp;#39;t conform to UPPER_CASE naming style (invalid-name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---------------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Your code has been rated at -9.17&amp;#x2F;10 (previous run: 10.00&amp;#x2F;10, -19.17)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Tips" scheme="http://zhoutao822.coding.me/categories/Tips/"/>
    
    
      <category term="Python" scheme="http://zhoutao822.coding.me/tags/Python/"/>
    
      <category term="Pylint" scheme="http://zhoutao822.coding.me/tags/Pylint/"/>
    
  </entry>
  
  <entry>
    <title>Material组件-BottomSheetDialog</title>
    <link href="http://zhoutao822.coding.me/archives/4972210c.html"/>
    <id>http://zhoutao822.coding.me/archives/4972210c.html</id>
    <published>2019-06-14T12:21:20.000Z</published>
    <updated>2020-01-19T03:38:14.921Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><blockquote><p><a href="https://material.io/develop/android/components/bottom-sheet-behavior/" target="_blank" rel="noopener">Material Design</a></p></blockquote><blockquote><p><a href="https://github.com/material-components/material-components-android/blob/master/docs/getting-started.md" target="_blank" rel="noopener">Getting started with Material Components for Android</a></p></blockquote><p>BottomSheetDialog，顾名思义就是从界面底部往上出现的Dialog，它是Material Design的控件之一，目前在<a href="https://github.com/material-components/material-components-android" target="_blank" rel="noopener">Material Components</a>库中。</p><!--  --><p><img src="http://114.116.9.65:7777/images/2020/01/19/bottomsheet-1.gif" alt="bottomsheet-1.gif" /></p><a id="more"></a><h2 id="1-准备工作"><a class="markdownIt-Anchor" href="#1-准备工作"></a> 1. 准备工作</h2><p>Google推出的<a href="https://github.com/material-components/material-components-android" target="_blank" rel="noopener">Material Components</a>库包括了很多常用的控件，我们只需要直接用这些控件就可以实现很多复杂的功能或界面，但是在使用之前还需要一些准备工作，大致在<a href="https://github.com/material-components/material-components-android/blob/master/docs/getting-started.md" target="_blank" rel="noopener">Getting started with Material Components for Android</a>也给出了，我这里简要描述一下：</p><ul><li>首先使是依赖（建议更新项目到androidx再继续），需要在<code>build.gradle</code>中加入Google’s Maven Repository <code>google()</code>，然后加入库；</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">allprojects</span> &#123;</span><br><span class="line">  <span class="keyword">repositories</span> &#123;</span><br><span class="line">    google()</span><br><span class="line">    jcenter()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 目前最新版为1.1.0-alpha07，有部分控件还是存在Bug</span></span><br><span class="line">    implementation <span class="string">'com.google.android.material:material:1.1.0-alpha07'</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>其次是<code>compileSdkVersion</code>需要在<code>28</code>或以上才能使用Material控件；</li><li>然后需要使用或继承<code>AppCompatActivity</code>，<code>AppCompatActivity</code>是专门为Material控件设计的Activity，如果不能继承则需要使用<code>AppCompatDelegate</code>；</li><li>最后是需要修改<code>AppTheme</code>，在<code>AndroidManifest.xml</code>里面修改主题，需要继承自Material Components themes，具体有哪些可以看上面给的地址，如果暂时不允许修改<code>AppTheme</code>，可以使用Material Components Bridge themes，这里的区别在于使用Material Components themes可能会导致你原来的应用中某些布局颜色UI发生改变，这时候需要重新修改一些资源文件；如果使用Bridge themes则不会修改原来应用的布局颜色UI等，却可以使用Material组件。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.MaterialComponents.NoActionBar.Bridge"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- Customize your theme here. --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/colorPrimaryDark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>到这里，准备工作基本完成，可以进行下一步使用Material组件了。</p><h2 id="2-bottomsheetdialog使用"><a class="markdownIt-Anchor" href="#2-bottomsheetdialog使用"></a> 2. BottomSheetDialog使用</h2><p>根据官网说明，BottomSheetDialog有两种使用方式（这里很多博客没有说明就直接给代码了），一种是Persistent，另一种是Modal，简而言之就是前者是固定的BottomSheetDialog，后者是动态调用的。</p><h3 id="21-persistent-bottomsheetdialog"><a class="markdownIt-Anchor" href="#21-persistent-bottomsheetdialog"></a> 2.1 Persistent BottomSheetDialog</h3><p>设想一个使用场景，某个界面必定包含BottomSheetDialog，需要靠它实现其他功能的选择，举个例子，知乎的评论就是依靠BottomSheetDialog来实现的（一个东西看起来像鸭子，吃起来也像鸭子，那么它就是鸭子），而且有很明显的特征：在回答界面必定存在这个评论功能，那么我们可以将它视为Persistent固定场景，此时实现BottomSheetDialog的方式是使用BottomSheetBehavior，而不是<code>new BottomSheetDialog()</code>，实例代码如下：</p><ul><li>首先是activity的布局文件<code>activity_second.xml</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注意要使用BottomSheetBehavior，则必须使用CoordinatorLayout作为父布局，而且需要xmlns:app --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.coordinatorlayout.widget.CoordinatorLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/btn_show"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"Show"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- BottomSheetBehavior需要一个寄主，可以是LinearLayout也可以是其他，这个layout就是弹出的dialog布局，</span></span><br><span class="line"><span class="comment">     同时需要几个属性：</span></span><br><span class="line"><span class="comment">     app:behavior_hideable="true"否则BottomSheetDialog不会收起来</span></span><br><span class="line"><span class="comment">     app:behavior_peekHeight="300dp"设置BottomSheetDialog在STATE_COLLAPSED状态的高度，也可以不设置，这个会产生一种弹性收缩的效果，具体自行尝试</span></span><br><span class="line"><span class="comment">     app:elevation="6dp"设置z轴高度，可以产生一种悬浮效果，可以不设置</span></span><br><span class="line"><span class="comment">     app:layout_behavior="com.google.android.material.bottomsheet.BottomSheetBehavior"最重要的属性，简而言之就是让LinearLayout</span></span><br><span class="line"><span class="comment">     的行为变成BottomSheetDialog的行为，这样我们就不需要实例化一个BottomSheetDialog，取而代之的是通过BottomSheetBehavior来实现，</span></span><br><span class="line"><span class="comment">     需要注意的地方是，app:layout_behavior只能在CoordinatorLayout下直接子控件中使用，像这里的CoordinatorLayout-&gt;LinearLayout就可以</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/bottom_sheet"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@color/white"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:behavior_hideable</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:behavior_peekHeight</span>=<span class="string">"300dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:elevation</span>=<span class="string">"6dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_behavior</span>=<span class="string">"com.google.android.material.bottomsheet.BottomSheetBehavior"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 这里随便加了几个子项，在BottomSheetBehavior布局下的子控件都是BottomSheetDialog一部分 --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/MenuIcon"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:src</span>=<span class="string">"@drawable/ic_share_black_24dp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/MenuText"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"Share"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/MenuIcon"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:src</span>=<span class="string">"@drawable/ic_cloud_upload_black_24dp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/MenuText"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"Upload"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/MenuIcon"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:src</span>=<span class="string">"@drawable/ic_content_copy_black_24dp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/MenuText"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"Copy"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/MenuIcon"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:src</span>=<span class="string">"@drawable/ic_print_black_24dp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/MenuText"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"Print"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.coordinatorlayout.widget.CoordinatorLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里用了<code>styles.xml</code>减少重复代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"MenuIcon"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_height"</span>&gt;</span>30dp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_width"</span>&gt;</span>30dp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_margin"</span>&gt;</span>15dp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"MenuText"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_gravity"</span>&gt;</span>center_vertical<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_marginStart"</span>&gt;</span>30dp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:gravity"</span>&gt;</span>start<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span>&gt;</span>#00574B<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>20sp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>然后是activity的代码<code>SecondActivity.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_second);</span><br><span class="line">        <span class="comment">// BottomSheetBehavior一共有5个状态：STATE_COLLAPSED/STATE_EXPANDED/STATE_DRAGGING/STATE_SETTLING/STATE_HIDDEN</span></span><br><span class="line">        <span class="comment">// 当你的布局文件中BottomSheetBehavior控件高度大于设置behavior_peekHeight，则Dialog会产生三种位置，一个是隐藏STATE_HIDDEN，</span></span><br><span class="line">        <span class="comment">// 另一个是STATE_EXPANDED即BottomSheetBehavior控件全部显示出来的位置，还有一个是介于前两者之间的STATE_COLLAPSED状态，</span></span><br><span class="line">        <span class="comment">// 此时露出来的Dialog高度为behavior_peekHeight；</span></span><br><span class="line">        <span class="comment">// 另一种情况是behavior_peekHeight大于BottomSheetBehavior控件高度，那么会产生一种弹性收缩的效果</span></span><br><span class="line">        BottomSheetBehavior bottomSheetBehavior = BottomSheetBehavior.from(findViewById(R.id.bottom_sheet));</span><br><span class="line">        bottomSheetBehavior.setState(BottomSheetBehavior.STATE_HIDDEN);</span><br><span class="line"></span><br><span class="line">        findViewById(R.id.btn_show).setOnClickListener(v -&gt; &#123;</span><br><span class="line">            <span class="comment">// 这里通过判断当前状态来进行收缩和打开，与此同时Dialog支持直接滑动关闭</span></span><br><span class="line">            <span class="keyword">if</span> (bottomSheetBehavior.getState() == BottomSheetBehavior.STATE_HIDDEN) &#123;</span><br><span class="line">                bottomSheetBehavior.setState(BottomSheetBehavior.STATE_COLLAPSED);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bottomSheetBehavior.getState() == BottomSheetBehavior.STATE_COLLAPSED) &#123;</span><br><span class="line">                bottomSheetBehavior.setState(BottomSheetBehavior.STATE_HIDDEN);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 通过设置BottomSheetCallback来控制状态变化产生的其他效果，也可以控制滑动过程中产生其他效果</span></span><br><span class="line">        bottomSheetBehavior.setBottomSheetCallback(<span class="keyword">new</span> BottomSheetBehavior.BottomSheetCallback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStateChanged</span><span class="params">(@NonNull View bottomSheet, <span class="keyword">int</span> newState)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//拖动</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSlide</span><span class="params">(@NonNull View bottomSheet, <span class="keyword">float</span> slideOffset)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//状态变化</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在设备屏幕旋转时BottomSheetDialog会消失，通过在<code>AndroidManifest.xml</code>设置<code>configChanges</code>可以避免</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">".SecondActivity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:configChanges</span>=<span class="string">"orientation"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>至此，简单的通过BottomSheetBehavior实现BottomSheetDialog就结束了，更复杂的效果是添加RecyclerView到BottomSheetDialog<br />中，同时增加点击事件监听等等，接下来介绍如何动态使用BottomSheetDialog。</p><h3 id="22-modal-bottomsheetdialog"><a class="markdownIt-Anchor" href="#22-modal-bottomsheetdialog"></a> 2.2 Modal BottomSheetDialog</h3><p>如果你使用过AlertDialog那么就应该知道了，动态调用就是直接new一个出来，然后show一下就完事了，同理对BottomSheetDialog也成立，<br />因此不需要固定的BottomSheetBehavior，而直接new也分为两种方式，一个是<code>new BottomSheetDialog()</code>，另一个是<code>new BottomSheetDialog()</code>，<br />两者显示效果相同，但是后者通过fragment控制生命周期更合理，所以使用后者，简单使用的话只需要三步：</p><ol><li>继承自<strong>BottomSheetDialogFragment</strong>；</li><li>重写<strong>onCreateView</strong>方法，加入你自定义的布局；</li><li>调用<strong>show</strong>方法，这里需要<strong>Activity.getSupportFragmentManager()</strong>。</li></ol><!--  --><p><img src="http://114.116.9.65:7777/images/2020/01/19/design1.png" alt="design1.png" /></p><p>我这里实现一个相对复杂的布局，如上图所示，具体包括两部分，一个是header，header可以是一个自定义view，也可以将header隐藏，header与下面的Menu之间是透明的，下面的Menu通过RecyclerView控制选项数量，点击单个选项有水波纹效果，代码如下：</p><ul><li>首先是Dialog的布局文件<code>dialog_option.xml</code>，根据上面的描述就知道是一个RecyclerView</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/forget_psw_bottom_sheet_layout"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.recyclerview.widget.RecyclerView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/menu_list"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>然后是需要实现这个Dialog为透明背景，这是因为header也在RecyclerView中，那么只有透明背景才可以实现header悬浮的效果，Dialog透明背景需要styles文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"SheetDialog"</span> <span class="attr">parent</span>=<span class="string">"Theme.Design.Light.BottomSheetDialog"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 关键属性是colorBackground，transparent可以是背景透明，但是这会导致一个问题，此处伏笔 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowIsTranslucent"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowContentOverlay"</span>&gt;</span>@null<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:colorBackground"</span>&gt;</span>@android:color/transparent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:backgroundDimEnabled"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:backgroundDimAmount"</span>&gt;</span>0.3<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowFrame"</span>&gt;</span>@null<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowIsFloating"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>以及header的布局文件<code>card_layout.xml</code>和Menu Item的布局文件<code>menu_item.xml</code>，header有圆角，可以用另一种Material组件实现CardView</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- card_layout.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">"8dp"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.cardview.widget.CardView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_margin</span>=<span class="string">"4dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:elevation</span>=<span class="string">"4dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:cardCornerRadius</span>=<span class="string">"10dp"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">"@color/white"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:padding</span>=<span class="string">"12dp"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/Image"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"@string/glass"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/Image"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"@string/clap"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/Image"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"@string/cry"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/Image"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"@string/party"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/Image"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"@string/heart"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/Image"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"@string/thumb"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/Image"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:src</span>=<span class="string">"@drawable/ic_keyboard_arrow_right_black_24dp"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">androidx.cardview.widget.CardView</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.cardview.widget.CardView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_margin</span>=<span class="string">"4dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:elevation</span>=<span class="string">"4dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:cardCornerRadius</span>=<span class="string">"10dp"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">"@color/white"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:padding</span>=<span class="string">"12dp"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:src</span>=<span class="string">"@drawable/outline"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">androidx.cardview.widget.CardView</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里使用了strings的资源，通过Unicode表示表情符号</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"thumb"</span>&gt;</span><span class="symbol">&amp;#128532;</span><span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"heart"</span>&gt;</span>❤️<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"party"</span>&gt;</span><span class="symbol">&amp;#128222;</span><span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"cry"</span>&gt;</span><span class="symbol">&amp;#128722;</span><span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"clap"</span>&gt;</span><span class="symbol">&amp;#128512;</span><span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"glass"</span>&gt;</span><span class="symbol">&amp;#128522;</span><span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- menu_item.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 注意这里伏笔就来了，设置为透明背景的Dialog中，子控件也会是透明的，而且若对子控件的background</span></span><br><span class="line"><span class="comment">    设置为某种颜色则无法产生水波纹效果，所以需要自定义@drawable/touch_bg --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/menu_text"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">"@style/BottomDialog"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@drawable/touch_bg"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"BottomDialog"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:padding"</span>&gt;</span>16dp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>16sp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span>&gt;</span>@color/black<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:gravity"</span>&gt;</span>center<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textStyle"</span>&gt;</span>normal<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- touch_bg.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Use an almost transparent color for the ripple itself--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ripple</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:color</span>=<span class="string">"#22000000"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Use this to define the shape of the ripple effect (rectangle, oval, ring or line). </span></span><br><span class="line"><span class="comment">The color specified here isn't used anyway--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@android:id/mask"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">shape</span> <span class="attr">android:shape</span>=<span class="string">"rectangle"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"#000000"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--This is the background for your button--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Use the shape you want here--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">shape</span> <span class="attr">android:shape</span>=<span class="string">"rectangle"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Use the solid tag to define the background color you want (here white)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"@color/white"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Use the stroke tag for a border--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">stroke</span> <span class="attr">android:width</span>=<span class="string">"1dp"</span> <span class="attr">android:color</span>=<span class="string">"@color/white"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ripple</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>接下来就是主要java代码了，包括<code>MenuBottomSheetDialog.java</code>和<code>MenuListAdapter.java</code>，前者是我们最终调用的Dialog，后者是RecyclerView的Adapter，以及自定义一个Menu Item的实体类<code>OptionMenuItem.java</code>用于保存信息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OptionMenuItem</span> </span>&#123;</span><br><span class="line">    <span class="comment">// label表示选项的名称最终会显示在Dialog，action表示该选项的行为，这里可以自定义增加其他内容，</span></span><br><span class="line">    <span class="comment">// 比如增加一个state属性表示该选项是否可用等等，如不可用，则颜色为灰色且不可点击，不过我没加</span></span><br><span class="line">    <span class="keyword">private</span> String label;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> action;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OptionMenuItem</span><span class="params">(String label, <span class="keyword">int</span> action)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.label = label;</span><br><span class="line">        <span class="keyword">this</span>.action = action;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLabel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> label;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLabel</span><span class="params">(String label)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.label = label;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> action;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAction</span><span class="params">(<span class="keyword">int</span> action)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.action = action;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuBottomSheetDialog</span> <span class="keyword">extends</span> <span class="title">BottomSheetDialogFragment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = MenuBottomSheetDialog<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RecyclerView recyclerView;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MenuListAdapter adapter;</span><br><span class="line">    <span class="comment">// 这里还加了一个参数hasItemDecoration用于控制是否显示选项之间的分割线</span></span><br><span class="line">    <span class="keyword">private</span> Boolean hasItemDecoration = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> MenuBottomSheetDialog <span class="title">newInstance</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        MenuBottomSheetDialog fragment = <span class="keyword">new</span> MenuBottomSheetDialog();</span><br><span class="line"><span class="comment">//        Bundle bundle = new Bundle();</span></span><br><span class="line"><span class="comment">//        fragment.setArguments(bundle);</span></span><br><span class="line">        fragment.setHasItemDecoration(builder.hasItemDecoration);</span><br><span class="line">        fragment.setAdapter(builder.adapter);</span><br><span class="line">        fragment.setContext(builder.context);</span><br><span class="line">        <span class="keyword">return</span> fragment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dialog <span class="title">onCreateDialog</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// R.style.SheetDialog 透明背景需要在onCreateDialog方法引入</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BottomSheetDialog(context, R.style.SheetDialog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, </span></span></span><br><span class="line"><span class="function"><span class="params">                              @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 在onCreateView引入定义的dialog布局</span></span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.dialog_option, container, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewCreated</span><span class="params">(@NonNull View view, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onViewCreated(view, savedInstanceState);</span><br><span class="line">        <span class="comment">// onViewCreated中进行初始化，这里就很简单的使用了RecyclerView</span></span><br><span class="line">        recyclerView = view.findViewById(R.id.menu_list);</span><br><span class="line">        recyclerView.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(getContext()));</span><br><span class="line">        recyclerView.setAdapter(adapter);</span><br><span class="line">        <span class="keyword">if</span> (hasItemDecoration) &#123;</span><br><span class="line">            <span class="comment">// DividerItemDecoration可以方便的加入到RecyclerView，形成分割线，布局文件在下面</span></span><br><span class="line">            DividerItemDecoration dec = <span class="keyword">new</span> DividerItemDecoration(context, DividerItemDecoration.VERTICAL);</span><br><span class="line">            dec.setDrawable(getResources().getDrawable(R.drawable.divider_line));</span><br><span class="line">            recyclerView.addItemDecoration(dec);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 最终我们通过show方法调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(FragmentManager fragmentManager)</span> </span>&#123;</span><br><span class="line">        FragmentTransaction transaction = fragmentManager.beginTransaction();</span><br><span class="line">        Fragment prevFragment = fragmentManager.findFragmentByTag(TAG);</span><br><span class="line">        <span class="keyword">if</span> (prevFragment != <span class="keyword">null</span>) &#123;</span><br><span class="line">            transaction.remove(prevFragment);</span><br><span class="line">        &#125;</span><br><span class="line">        transaction.addToBackStack(<span class="keyword">null</span>);</span><br><span class="line">        show(transaction, TAG);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 这里因为参数可能会有很多，所以采用建造者模式实现</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title">builder</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Builder(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 建造者模式需要传入的参数有三个</span></span><br><span class="line">        <span class="keyword">private</span> MenuListAdapter adapter;</span><br><span class="line">        <span class="keyword">private</span> Boolean hasItemDecoration;</span><br><span class="line">        <span class="keyword">private</span> Context context;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.context = context;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 以下都是建造者模式可调用的方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setAdapter</span><span class="params">(MenuListAdapter adapter)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.adapter = adapter;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setHasItemDecoration</span><span class="params">(Boolean hasItemDecoration)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.hasItemDecoration = hasItemDecoration;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> MenuBottomSheetDialog <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> newInstance(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> MenuBottomSheetDialog <span class="title">show</span><span class="params">(FragmentManager fragmentManager)</span> </span>&#123;</span><br><span class="line">            MenuBottomSheetDialog dialog = build();</span><br><span class="line">            dialog.show(fragmentManager);</span><br><span class="line">            <span class="keyword">return</span> dialog;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setAdapter</span><span class="params">(MenuListAdapter adapter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.adapter = adapter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setContext</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setHasItemDecoration</span><span class="params">(Boolean hasItemDecoration)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hasItemDecoration = hasItemDecoration;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- divider_line.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layer-list</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--分割线左右边距--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shape</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"@color/split_line_grey"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">size</span> <span class="attr">android:height</span>=<span class="string">"1dp"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layer-list</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>接下来是RecyclerView的Adapter文件<code>MenuListAdapter.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuListAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">RecyclerView</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过hasHeader控制是否显示header，这里是通过MenuListAdapter传入的参数，没有用上面建造者模式</span></span><br><span class="line">    <span class="keyword">private</span> Boolean hasHeader;</span><br><span class="line">    <span class="comment">// 监听选项点击，这里我仅仅对选项做监听没有对header进行任何控制，所以header只是个没有灵魂的花瓶</span></span><br><span class="line">    <span class="keyword">private</span> OnMenuItemClickListener onMenuClickListener;</span><br><span class="line">    <span class="comment">// 传入的选项list</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;OptionMenuItem&gt; options;</span><br><span class="line">    <span class="comment">// onCreateViewHolder判断是否为header的参数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VIEW_TYPE_HEADER = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VIEW_TYPE_ITEM = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MenuListAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.options = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MenuListAdapter</span><span class="params">(List&lt;OptionMenuItem&gt; options)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.options = options;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> RecyclerView.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(@NonNull ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        RecyclerView.ViewHolder viewHolder = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (viewType) &#123;</span><br><span class="line">            <span class="comment">// 这里也比较好理解，如果为header传入header的布局，如果为Menu Item则传入Item的布局</span></span><br><span class="line">            <span class="keyword">case</span> VIEW_TYPE_HEADER:</span><br><span class="line">                viewHolder = <span class="keyword">new</span> HeaderViewHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.card_layout, parent, <span class="keyword">false</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> VIEW_TYPE_ITEM:</span><br><span class="line">                viewHolder = <span class="keyword">new</span> MenuItemViewHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.menu_item, parent, <span class="keyword">false</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> viewHolder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(@NonNull RecyclerView.ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (holder.getItemViewType()) &#123;</span><br><span class="line">            <span class="keyword">case</span> VIEW_TYPE_HEADER:</span><br><span class="line">                <span class="comment">// todo add header view listener</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> VIEW_TYPE_ITEM:</span><br><span class="line">                <span class="comment">// 注意这里positon与header存在与否的关系，然后通过接口把点击事件传出去</span></span><br><span class="line">                OptionMenuItem menuItem = options.get(hasHeader ? position - <span class="number">1</span> : position);</span><br><span class="line">                ((MenuItemViewHolder) holder).bind(menuItem);</span><br><span class="line">                holder.itemView.setOnClickListener(v -&gt; &#123;</span><br><span class="line">                    Log.i(<span class="string">"aaa"</span>, <span class="string">"click"</span>);</span><br><span class="line">                    <span class="keyword">if</span> (onMenuClickListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        onMenuClickListener.onMenuClick(holder.itemView, menuItem.getAction());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 在getItemViewType定义type，从而在前面两个方法中获取</span></span><br><span class="line">        <span class="keyword">if</span> (hasHeader) &#123;</span><br><span class="line">            <span class="keyword">if</span> (position == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> VIEW_TYPE_HEADER;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> VIEW_TYPE_ITEM;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 同理options.size()与hasHeader的关系</span></span><br><span class="line">        <span class="keyword">return</span> hasHeader ?</span><br><span class="line">                (options.size() + <span class="number">1</span>) : options.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MenuItemViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line">        TextView text;</span><br><span class="line">        <span class="comment">// 正如我在Menu Item实体类中所设想的，我们可以在这里根据state进行额外的控制</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MenuItemViewHolder</span><span class="params">(@NonNull View itemView)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(itemView);</span><br><span class="line">            text = itemView.findViewById(R.id.menu_text);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(OptionMenuItem optionMenuItem)</span> </span>&#123;</span><br><span class="line">            text.setText(optionMenuItem.getLabel());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">HeaderViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">HeaderViewHolder</span><span class="params">(@NonNull View itemView)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(itemView);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAll</span><span class="params">(List&lt;OptionMenuItem&gt; options)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.options.clear();</span><br><span class="line">        <span class="keyword">this</span>.options.addAll(options);</span><br><span class="line">        notifyDataSetChanged();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(OptionMenuItem option)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (options != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.options.add(option);</span><br><span class="line">            notifyDataSetChanged();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHasHeader</span><span class="params">(Boolean hasHeader)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hasHeader = hasHeader;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 对外暴露的接口以及设置监听的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnMenuItemClickListener</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onMenuClick</span><span class="params">(View view, <span class="keyword">int</span> action)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnMenuItemClickListener</span><span class="params">(OnMenuItemClickListener listener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.onMenuClickListener = listener;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>最后是直接使用的方式<code>ThirdActivity.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThirdActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">MenuListAdapter</span>.<span class="title">OnMenuItemClickListener</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_third);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;OptionMenuItem&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> OptionMenuItem(<span class="string">"Forward"</span>, <span class="number">98</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> OptionMenuItem(<span class="string">"Copy"</span>, <span class="number">2121</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> OptionMenuItem(<span class="string">"Mark as unread"</span>, <span class="number">111</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> OptionMenuItem(<span class="string">"Star message"</span>, <span class="number">66</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> OptionMenuItem(<span class="string">"Cancel"</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        MenuListAdapter menuListAdapter = <span class="keyword">new</span> MenuListAdapter();</span><br><span class="line">        menuListAdapter.addAll(list);</span><br><span class="line">        menuListAdapter.setHasHeader(<span class="keyword">true</span>);</span><br><span class="line">        menuListAdapter.setOnMenuItemClickListener(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        findViewById(R.id.button2).setOnClickListener(v -&gt; &#123;</span><br><span class="line">            <span class="comment">// 两种方式等效</span></span><br><span class="line">            <span class="comment">// MenuBottomSheetDialog.builder(ThirdActivity.this)</span></span><br><span class="line">            <span class="comment">//         .setAdapter(menuListAdapter)</span></span><br><span class="line">            <span class="comment">//         .setHasItemDecoration(true)</span></span><br><span class="line">            <span class="comment">//         .show(getSupportFragmentManager());</span></span><br><span class="line"></span><br><span class="line">            MenuBottomSheetDialog dialog = MenuBottomSheetDialog.builder(ThirdActivity.<span class="keyword">this</span>)</span><br><span class="line">                    .setAdapter(menuListAdapter)</span><br><span class="line">                    .setHasItemDecoration(<span class="keyword">true</span>)</span><br><span class="line">                    .build();</span><br><span class="line">            dialog.show(getSupportFragmentManager());</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMenuClick</span><span class="params">(View view, <span class="keyword">int</span> action)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 点击事件的回调</span></span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"action "</span> + action, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-bottomsheetdialog进阶与bug"><a class="markdownIt-Anchor" href="#3-bottomsheetdialog进阶与bug"></a> 3. BottomSheetDialog进阶与Bug</h2><!--  --><p><img src="http://114.116.9.65:7777/images/2020/01/19/design2.gif" alt="design2.gif" /></p><p>上图即BottomSheetDialog与ViewPager以及RecyclerView之间的Bug，简而言之就是ViewPager下除了第一个页面可以滑动之外，其他页面均不可滑动，具体的<a href="https://stackoverflow.com/questions/39326321/scroll-not-working-for-multiple-recyclerview-in-bottomsheet?noredirect=1&amp;lq=1" target="_blank" rel="noopener">Error link</a>以及我在Github上提的<a href="https://github.com/material-components/material-components-android/issues/373" target="_blank" rel="noopener">issue</a>，这个问题已经有大神给出了解决方法，但是官方目前还是没有引入。</p><p>下面我们就来复现这种状况，不过我的设计效果与上图略有不同，增加了一些内容，首先是TabLayout的title，它是由两部分组成，前面是一个Unicode表情，后面是数字，数值表示在这个表情下的list的大小；TabLayout下面对应不同的Fragment，Fragment中显示当前的list，我这里生成的Item都是简单写一下，没有具体意义；整个设计思路是，自定义一个<code>ListBottomSheetDialog</code>，这个dialog由ViewPager + TabLayout + Fragment + RecyclerView组成，先从Fragment开始实现步骤</p><!--  --><p><img src="http://114.116.9.65:7777/images/2020/01/19/design3.png" alt="design3.png" /></p><ul><li><code>ListObjectFragment</code>布局文件<code>fragment_list.xml</code>与Item布局文件<code>item_list.xml</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- fragment_list.xml --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 首先暂时使用CoordinatorLayout，可能后续会修改为NestedScrollView，此处伏笔 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 而且background="@color/white"是由于后面Dialog为透明背景，这里需要白色背景避免Fragment切换时背景突变透明 --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.coordinatorlayout.widget.CoordinatorLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">"@color/white"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.recyclerview.widget.RecyclerView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/list_view"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_behavior</span>=<span class="string">"com.google.android.material.bottomsheet.BottomSheetBehavior"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.coordinatorlayout.widget.CoordinatorLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- item_list.xml --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注意这里也使用了上面文中出现的水波纹效果背景touch_bg，这是因为要实现圆角背景 --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">"@drawable/touch_bg"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">"10dp"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/avatar"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"40dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"40dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@color/holo_blue_light"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:padding</span>=<span class="string">"5dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">"@color/black"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"20sp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>然后是RecyclerView的Adapter <code>ListViewAdapter.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListViewAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">ListViewAdapter</span>.<span class="title">MyViewHolder</span>&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 这里加了点击事件的接口</span></span><br><span class="line">    <span class="keyword">private</span> ItemClickListener onItemClickListener;</span><br><span class="line">    <span class="comment">// 显示的Item就是一个一个的User信息，User信息也很简单，avatar和name，但是avatar没有赋值</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListViewAdapter</span><span class="params">(List&lt;User&gt; data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyViewHolder <span class="title">onCreateViewHolder</span><span class="params">(@NonNull ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 常见方式</span></span><br><span class="line">        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_list, parent, <span class="keyword">false</span>);</span><br><span class="line">        MyViewHolder holder = <span class="keyword">new</span> MyViewHolder(view);</span><br><span class="line">        <span class="keyword">return</span> holder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(@NonNull MyViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        User user = data.get(position);</span><br><span class="line">        <span class="comment">// 这里avatar写死了，没有赋值，偷个懒</span></span><br><span class="line">        holder.avatar.setImageResource(R.drawable.ic_launcher_foreground);</span><br><span class="line">        holder.name.setText(user.getName());</span><br><span class="line">        <span class="comment">// 把点击事件传出去</span></span><br><span class="line">        holder.itemView.setOnClickListener(v -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (onItemClickListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                onItemClickListener.onItemClick(holder.itemView, position);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line">        ImageView avatar;</span><br><span class="line">        TextView name;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyViewHolder</span><span class="params">(@NonNull View itemView)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(itemView);</span><br><span class="line">            avatar = itemView.findViewById(R.id.avatar);</span><br><span class="line">            name = itemView.findViewById(R.id.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemClickListener</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(View view, <span class="keyword">int</span> position)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setItemClickListener</span><span class="params">(ItemClickListener clickListener)</span> </span>&#123;</span><br><span class="line">        onItemClickListener = clickListener;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String avatar;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String avatar, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.avatar = avatar;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAvatar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> avatar;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAvatar</span><span class="params">(String avatar)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.avatar = avatar;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Fragment <code>ListObjectFragment.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListObjectFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> <span class="keyword">implements</span> <span class="title">ListViewAdapter</span>.<span class="title">ItemClickListener</span></span>&#123;</span><br><span class="line">    <span class="comment">// emoji表示Unicode表情，count表示list大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line">    <span class="keyword">private</span> String emoji;</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; list;</span><br><span class="line">    <span class="keyword">private</span> ListViewAdapter listViewAdapter;</span><br><span class="line">    <span class="keyword">private</span> RecyclerView recyclerView;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加了几个参数用于仅在Fragment对用户可见时加载数据，针对ViewPager预加载</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isViewInitiated;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isVisibleToUser;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isDataInitiated;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里传入了list，但是在onResume时才是真实加载数据的时候</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListObjectFragment</span><span class="params">(String emoji, <span class="keyword">int</span> count, List&lt;User&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.emoji = emoji;</span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater,</span></span></span><br><span class="line"><span class="function"><span class="params">                             ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.fragment_list_test, container, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onResume();</span><br><span class="line">        isVisibleToUser = <span class="keyword">true</span>;</span><br><span class="line">        prepareFetchData();</span><br><span class="line">        listViewAdapter = <span class="keyword">new</span> ListViewAdapter(list);</span><br><span class="line">        listViewAdapter.setItemClickListener(<span class="keyword">this</span>);</span><br><span class="line">        recyclerView.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(getContext()));</span><br><span class="line">        recyclerView.setAdapter(listViewAdapter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStop();</span><br><span class="line">        isVisibleToUser = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fetchData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 真实加载list的地方，这里仅模拟</span></span><br><span class="line">        list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> User(<span class="string">""</span>, <span class="string">"name"</span> + i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">prepareFetchData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> prepareFetchData(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">prepareFetchData</span><span class="params">(<span class="keyword">boolean</span> forceUpdate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isVisibleToUser &amp;&amp; isViewInitiated &amp;&amp; (!isDataInitiated || forceUpdate)) &#123;</span><br><span class="line">            fetchData();</span><br><span class="line">            isDataInitiated = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewCreated</span><span class="params">(@NonNull View view, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        isViewInitiated = <span class="keyword">true</span>;</span><br><span class="line">        recyclerView = view.findViewById(R.id.list_view);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(View view, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 点击事件回调</span></span><br><span class="line">        Toast.makeText(getContext(), <span class="string">"position"</span> + position, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>自定义BottomSheetDialog的布局文件<code>dialog_list.xml</code>，圆角背景<code>radius_background.xml</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.google.android.material.tabs.TabLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tablayout"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@drawable/radius_background"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:tabIndicatorColor</span>=<span class="string">"@color/colorPrimaryDark"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:tabMode</span>=<span class="string">"scrollable"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:tabTextColor</span>=<span class="string">"@color/black"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"1dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@color/split_line_grey"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.tao.bottomsheetdemo.custom.CustomViewPager</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/viewpager"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- radius_background.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"@color/white"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">corners</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:topLeftRadius</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:topRightRadius</span>=<span class="string">"10dp"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>自定义ViewPager <code>CustomViewPager.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomViewPager</span> <span class="keyword">extends</span> <span class="title">ViewPager</span> </span>&#123;</span><br><span class="line">    <span class="comment">// CustomViewPager control scroll enable</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> enabled;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomViewPager</span><span class="params">(@NonNull Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        <span class="keyword">this</span>.enabled = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomViewPager</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        <span class="keyword">this</span>.enabled = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.enabled) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 事件传递控制是否支持左右滑动</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.enabled) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onInterceptTouchEvent(event);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPagingEnabled</span><span class="params">(<span class="keyword">boolean</span> enabled)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.enabled = enabled;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>自定义BottomSheetDialog <code>ListBottomSheetDialog.java</code>与ViewPager的Adapter <code>ListPagerAdapter.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListBottomSheetDialog</span> <span class="keyword">extends</span> <span class="title">BottomSheetDialogFragment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = ListBottomSheetDialog<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里的ViewPager为自定义的CustomViewPager，多了额外的功能：可以控制是否支持左右滑动切换Fragment</span></span><br><span class="line">    <span class="keyword">private</span> TabLayout tabLayout;</span><br><span class="line">    <span class="keyword">private</span> CustomViewPager viewPager;</span><br><span class="line">    <span class="comment">// offscreenPageLimit设置可以使ViewPager下的Fragment缓存数据，数值表示缓存数据的Fragment数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> offscreenPageLimit = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 通过参数控制是否支持左右滑动</span></span><br><span class="line">    <span class="keyword">private</span> Boolean enableScroll;</span><br><span class="line">    <span class="comment">// EmojiItem是包含emoji/count/list的实体类，所以可知传入Dialog的数据是一种嵌套list形式</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;EmojiItem&gt; emojiItemList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line">    <span class="comment">// ViewPager的Adapter</span></span><br><span class="line">    <span class="keyword">private</span> ListPagerAdapter adapter;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ListBottomSheetDialog <span class="title">newInstance</span><span class="params">(ListBottomSheetDialog.Builder builder)</span> </span>&#123;</span><br><span class="line">        ListBottomSheetDialog fragment = <span class="keyword">new</span> ListBottomSheetDialog();</span><br><span class="line"><span class="comment">//        Bundle bundle = new Bundle();</span></span><br><span class="line"><span class="comment">//        fragment.setArguments(bundle);</span></span><br><span class="line"><span class="comment">//        fragment.setHeight(builder.peekHeight, builder.maxHeight);</span></span><br><span class="line">        fragment.setEmojiItemList(builder.emojiItemList);</span><br><span class="line">        fragment.setContext(builder.context);</span><br><span class="line">        fragment.setOffscreenPageLimit(builder.offscreenPageLimit);</span><br><span class="line">        fragment.setEnableScroll(builder.enableScroll);</span><br><span class="line">        <span class="keyword">return</span> fragment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dialog <span class="title">onCreateDialog</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line"><span class="comment">//      由于需要首先圆角背景，所以这里也使用了透明背景  </span></span><br><span class="line">        BottomSheetDialog dialog = <span class="keyword">new</span> BottomSheetDialog(context, R.style.SheetDialog);</span><br><span class="line"><span class="comment">//        set dialog peek height and max height</span></span><br><span class="line"><span class="comment">//        dialog.setPeekHeight(peekHeight);</span></span><br><span class="line"><span class="comment">//        dialog.setMaxHeight(maxHeight);</span></span><br><span class="line">        <span class="keyword">return</span> dialog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.dialog_list, container, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewCreated</span><span class="params">(@NonNull View view, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onViewCreated(view, savedInstanceState);</span><br><span class="line">        viewPager = view.findViewById(R.id.viewpager);</span><br><span class="line">        tabLayout = view.findViewById(R.id.tablayout);</span><br><span class="line">        <span class="keyword">if</span> (viewPager != <span class="keyword">null</span> &amp;&amp; tabLayout != <span class="keyword">null</span>) &#123;</span><br><span class="line">            initViewPager();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initViewPager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ListPagerAdapter.BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT参数控制仅在Fragment对用户可见时调用onResume，这也是对应了上面在</span></span><br><span class="line">        <span class="comment">// Fragment中数据加载</span></span><br><span class="line">        adapter = <span class="keyword">new</span> ListPagerAdapter(getChildFragmentManager(), ListPagerAdapter.BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT, context);</span><br><span class="line">        <span class="comment">// 这里的emojiItemList比较简单，没有其他参数，理论上需要根据定义的其他参数传入到Fragment中再进行进一步请求数据</span></span><br><span class="line">        adapter.setEmojiItemList(emojiItemList);</span><br><span class="line">        viewPager.setAdapter(adapter);</span><br><span class="line">        viewPager.setOffscreenPageLimit(offscreenPageLimit);</span><br><span class="line">        <span class="comment">// 这里可以控制是否左右滑动</span></span><br><span class="line">        viewPager.setPagingEnabled(enableScroll);</span><br><span class="line">        <span class="comment">// TabLayout与ViewPager关联，自动实现滑动切换或者点击切换的效果</span></span><br><span class="line">        tabLayout.setupWithViewPager(viewPager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(FragmentManager fragmentManager)</span> </span>&#123;</span><br><span class="line">        FragmentTransaction transaction = fragmentManager.beginTransaction();</span><br><span class="line">        Fragment prevFragment = fragmentManager.findFragmentByTag(TAG);</span><br><span class="line">        <span class="keyword">if</span> (prevFragment != <span class="keyword">null</span>) &#123;</span><br><span class="line">            transaction.remove(prevFragment);</span><br><span class="line">        &#125;</span><br><span class="line">        transaction.addToBackStack(<span class="keyword">null</span>);</span><br><span class="line">        show(transaction, TAG);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 建造者模式，同上</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title">builder</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Builder(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// private int peekHeight;</span></span><br><span class="line">        <span class="comment">// private int maxHeight;</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> offscreenPageLimit;</span><br><span class="line">        <span class="keyword">private</span> Boolean enableScroll;</span><br><span class="line">        <span class="keyword">private</span> List&lt;EmojiItem&gt; emojiItemList;</span><br><span class="line">        <span class="keyword">private</span> Context context;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.context = context;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 这里注释掉的方法可以控制Dialog Expand状态下的高度以及Collapse状态的高度，但是需要自定义BottomSheetDialog</span></span><br><span class="line">        <span class="comment">// 暂时不写</span></span><br><span class="line">        <span class="comment">// public Builder setPeekHeight(int peekHeight) &#123;</span></span><br><span class="line">        <span class="comment">//     this.peekHeight = peekHeight;</span></span><br><span class="line">        <span class="comment">//     return this;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// public Builder setMaxHeight(int maxHeight) &#123;</span></span><br><span class="line">        <span class="comment">//     this.maxHeight = maxHeight;</span></span><br><span class="line">        <span class="comment">//     return this;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setOffscreenPageLimit</span><span class="params">(<span class="keyword">int</span> offscreenPageLimit)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.offscreenPageLimit = offscreenPageLimit;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setEnableScroll</span><span class="params">(Boolean enableScroll)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.enableScroll = enableScroll;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setEmojiItemList</span><span class="params">(List&lt;EmojiItem&gt; emojiItemList)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.emojiItemList = emojiItemList;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ListBottomSheetDialog <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> newInstance(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ListBottomSheetDialog <span class="title">show</span><span class="params">(FragmentManager fragmentManager)</span> </span>&#123;</span><br><span class="line">            ListBottomSheetDialog dialog = build();</span><br><span class="line">            dialog.show(fragmentManager);</span><br><span class="line">            <span class="keyword">return</span> dialog;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setContext</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// private void setHeight(int peekHeight, int maxHeight) &#123;</span></span><br><span class="line">    <span class="comment">//     this.peekHeight = peekHeight;</span></span><br><span class="line">    <span class="comment">//     this.maxHeight = maxHeight;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setOffscreenPageLimit</span><span class="params">(<span class="keyword">int</span> offscreenPageLimit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.offscreenPageLimit = offscreenPageLimit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setEnableScroll</span><span class="params">(Boolean enableScroll)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.enableScroll = enableScroll;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setEmojiItemList</span><span class="params">(List&lt;EmojiItem&gt; emojiItemList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.emojiItemList = emojiItemList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListPagerAdapter</span> <span class="keyword">extends</span> <span class="title">FragmentStatePagerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;EmojiItem&gt; emojiItemList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;EmojiItem&gt; sortedList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListPagerAdapter</span><span class="params">(@NonNull FragmentManager fm, <span class="keyword">int</span> behavior, Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(fm, behavior);</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListPagerAdapter</span><span class="params">(@NonNull FragmentManager fm, <span class="keyword">int</span> behavior, List&lt;EmojiItem&gt; emojiItemList, Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(fm, behavior);</span><br><span class="line">        <span class="keyword">this</span>.emojiItemList = emojiItemList;</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">        <span class="comment">// 这里还需要将传入的emojiItemList按照count进行降序排列</span></span><br><span class="line">        <span class="keyword">this</span>.sortedList = sortList(emojiItemList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        String label = sortedList.get(position).getEmoji();</span><br><span class="line">        <span class="keyword">int</span> count = sortedList.get(position).getCount();</span><br><span class="line">        List&lt;User&gt; list = sortedList.get(position).getUserList();</span><br><span class="line">        Fragment fragment = <span class="keyword">new</span> ListObjectFragment(label, count, list);</span><br><span class="line">        Bundle args = <span class="keyword">new</span> Bundle();</span><br><span class="line">        <span class="keyword">return</span> fragment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> emojiItemList.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CharSequence <span class="title">getPageTitle</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里设置TabLayout的title，emoji+count</span></span><br><span class="line">        CharSequence emoji = sortedList.get(position).getEmoji();</span><br><span class="line">        CharSequence title = emoji + <span class="string">" "</span> + sortedList.get(position).getCount();</span><br><span class="line">        SpannableStringBuilder spBuilder = <span class="keyword">new</span> SpannableStringBuilder(title);</span><br><span class="line">        Pattern pattern = Pattern.compile(emoji.toString());</span><br><span class="line">        Matcher matcher = pattern.matcher(title);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            TextAppearanceSpan span = <span class="keyword">new</span> TextAppearanceSpan(context, R.style.UIKitTextView_ReactionLabel);</span><br><span class="line">            spBuilder.setSpan(span, matcher.start(), matcher.end(), Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> spBuilder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;EmojiItem&gt; <span class="title">sortList</span><span class="params">(List&lt;EmojiItem&gt; list)</span> </span>&#123;</span><br><span class="line">        List&lt;EmojiItem&gt; tmp = <span class="keyword">new</span> ArrayList&lt;&gt;(list);</span><br><span class="line">        Collections.sort(tmp, <span class="keyword">new</span> Comparator&lt;EmojiItem&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(EmojiItem o1, EmojiItem o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o2.getCount() - o1.getCount();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmojiItemList</span><span class="params">(List&lt;EmojiItem&gt; emojiItemList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.emojiItemList = emojiItemList;</span><br><span class="line">        <span class="keyword">this</span>.sortedList = sortList(emojiItemList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>EmojiItem实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmojiItem</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String emoji;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; userList;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EmojiItem</span><span class="params">(String emoji, <span class="keyword">int</span> count, List&lt;User&gt; userList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.emoji = emoji;</span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">        <span class="keyword">this</span>.userList = userList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmoji</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> emoji;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmoji</span><span class="params">(String emoji)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.emoji = emoji;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCount</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserList</span><span class="params">(List&lt;User&gt; userList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userList = userList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>调用 <code>FourthActivity.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FourthActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_fourth);</span><br><span class="line">        List&lt;EmojiItem&gt; data = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        String[] arr = <span class="keyword">new</span> String[]&#123;</span><br><span class="line">                <span class="string">"\uD83D\uDC4D"</span>, <span class="string">"❤️"</span>, <span class="string">"\uD83C\uDF89"</span>, <span class="string">"\uD83D\uDE02"</span>, <span class="string">"\uD83D\uDC4F"</span>, <span class="string">"\uD83D\uDE0E"</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            data.add(<span class="keyword">new</span> EmojiItem(arr[i], i + <span class="number">10</span>, <span class="keyword">null</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        findViewById(R.id.button4).setOnClickListener(v -&gt;</span><br><span class="line">                ListBottomSheetDialog.builder(FourthActivity.<span class="keyword">this</span>)</span><br><span class="line">                .setEmojiItemList(data)</span><br><span class="line">                .setOffscreenPageLimit(<span class="number">5</span>)</span><br><span class="line">                .setEnableScroll(<span class="keyword">true</span>)</span><br><span class="line">                .show(getSupportFragmentManager()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><!--  --><p><img src="http://114.116.9.65:7777/images/2020/01/19/design4.gif" alt="design4.gif" /></p><p>很明显有几个问题：</p><ol><li>list上面有一段空白；</li><li>除了第一个Fragment中的list可以上下滑动以外，其他Fragment中的list不可滑动，这也就是BottomSheetDialog的bug。</li></ol><h2 id="4-解决方法"><a class="markdownIt-Anchor" href="#4-解决方法"></a> 4. 解决方法</h2><ul><li><p>针对第一个Bug，这是由于Fragment的布局文件中采用了CoordinatorLayout，我们替换为NestedScrollView，对应伏笔。</p></li><li><p>第二个bug就比较复杂，根据找到的资料显示大致有两种解决方法（并不一定能成功）</p></li></ul><h3 id="41-重写viewpager的adapter的setprimaryitem方法"><a class="markdownIt-Anchor" href="#41-重写viewpager的adapter的setprimaryitem方法"></a> 4.1 重写ViewPager的Adapter的setPrimaryItem方法</h3><p>也就是在<code>ListPagerAdapter.java</code>中加入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrimaryItem</span><span class="params">(@NonNull ViewGroup container, <span class="keyword">int</span> position, @NonNull Object object)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.setPrimaryItem(container, position, object);</span><br><span class="line">    Fragment currentFragment = (Fragment) object;</span><br><span class="line">    <span class="keyword">if</span> (currentFragment.getView() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; container.getChildCount(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != position) &#123;</span><br><span class="line">                <span class="comment">// 注意这里用NestedScrollView是因为已经默认上面第一个bug被纠正</span></span><br><span class="line">                NestedScrollView otherScrollView = (NestedScrollView) container.getChildAt(i);</span><br><span class="line">                otherScrollView.setNestedScrollingEnabled(<span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        NestedScrollView currentNestedScrollView = (NestedScrollView) currentFragment.getView();</span><br><span class="line">        currentNestedScrollView.setNestedScrollingEnabled(<span class="keyword">true</span>);</span><br><span class="line">        container.requestLayout();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码的作用是让对用户可见的Fragment中的NestedScrollView设置为可以滑动，其他不可见为禁止滑动，但是很遗憾，并没有解决问题，不可滑动问题依然存在。</p><h3 id="42-重写bottomsheetbehavior的findscrollingchild方法"><a class="markdownIt-Anchor" href="#42-重写bottomsheetbehavior的findscrollingchild方法"></a> 4.2 重写BottomSheetBehavior的findScrollingChild方法</h3><p>我们可以对比以下原始的findScrollingChild方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">View <span class="title">findScrollingChild</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (ViewCompat.isNestedScrollingEnabled(view)) &#123;</span><br><span class="line">    <span class="keyword">return</span> view;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (view <span class="keyword">instanceof</span> ViewGroup) &#123;</span><br><span class="line">    ViewGroup group = (ViewGroup) view;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, count = group.getChildCount(); i &lt; count; i++) &#123;</span><br><span class="line">      View scrollingChild = findScrollingChild(group.getChildAt(i));</span><br><span class="line">      <span class="keyword">if</span> (scrollingChild != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> scrollingChild;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以及修改后的findScrollingChild方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> View <span class="title">findScrollingChild</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ViewCompat.isNestedScrollingEnabled(view)) &#123;</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 修改后的代码增加了判断的选项，根据debug的结果我们知道如果最终返回的scrollingChild是可见状态的Fragment中的NestedScrollView，</span></span><br><span class="line">    <span class="comment">// 那么则可以正常滑动，否则不可滑动</span></span><br><span class="line">    <span class="keyword">if</span> (view <span class="keyword">instanceof</span> ViewPager) &#123;</span><br><span class="line">        ViewPager viewPager = (ViewPager) view;</span><br><span class="line">        <span class="comment">// ViewPagerUtils通过反射获取position得到当前的Fragment中的NestedScrollView</span></span><br><span class="line">        View currentViewPagerChild = ViewPagerUtils.getCurrentView(viewPager);</span><br><span class="line">        <span class="keyword">if</span> (currentViewPagerChild == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        View scrollingChild = findScrollingChild(currentViewPagerChild);</span><br><span class="line">        <span class="keyword">if</span> (scrollingChild != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> scrollingChild;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (view <span class="keyword">instanceof</span> ViewGroup) &#123;</span><br><span class="line">        ViewGroup group = (ViewGroup) view;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, count = group.getChildCount(); i &lt; count; i++) &#123;</span><br><span class="line">            View scrollingChild = findScrollingChild(group.getChildAt(i));</span><br><span class="line">            <span class="keyword">if</span> (scrollingChild != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> scrollingChild;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了重写findScrollingChild方法，有两种方式，一是在com.google.android.material.bottomsheet包下继承BottomSheetBehavior并重写findScrollingChild方法，一是创建新的BottomSheetBehavior类，复制其中的大部分代码以及相关文件。</p><ol><li>创建当前项目下的另一个包com.google.android.material.bottomsheet不是一个很好的选择，所以不采用；</li><li>新建ViewPagerBottomSheetBehavior类，复制代码，并修改findScrollingChild方法，这样会创建很多额外的文件。</li></ol><p>采用方法二，我们需要加入以下几个文件：</p><p><code>ViewPagerBottomSheetBehavior.java</code></p><p><code>ViewPagerUtils.java</code></p><p><code>BottomSheetUtils.java</code></p><p><code>design_view_pager_bottom_sheet_dialog.xml</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * An interaction behavior plugin for a child view of &#123;<span class="doctag">@link</span> CoordinatorLayout&#125; to make it work as</span></span><br><span class="line"><span class="comment"> * a bottom sheet.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewPagerBottomSheetBehavior</span>&lt;<span class="title">V</span> <span class="keyword">extends</span> <span class="title">View</span>&gt; <span class="keyword">extends</span> <span class="title">CoordinatorLayout</span>.<span class="title">Behavior</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Callback for monitoring events about bottom sheets.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BottomSheetCallback</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Called when the bottom sheet changes its state.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> bottomSheet The bottom sheet view.</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> newState    The new state. This will be one of &#123;<span class="doctag">@link</span> #STATE_DRAGGING&#125;,</span></span><br><span class="line"><span class="comment">         *                    &#123;<span class="doctag">@link</span> #STATE_SETTLING&#125;, &#123;<span class="doctag">@link</span> #STATE_EXPANDED&#125;,</span></span><br><span class="line"><span class="comment">         *                    &#123;<span class="doctag">@link</span> #STATE_COLLAPSED&#125;, or &#123;<span class="doctag">@link</span> #STATE_HIDDEN&#125;.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">onStateChanged</span><span class="params">(@NonNull View bottomSheet, @State <span class="keyword">int</span> newState)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Called when the bottom sheet is being dragged.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> bottomSheet The bottom sheet view.</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> slideOffset The new offset of this bottom sheet within [-1,1] range. Offset</span></span><br><span class="line"><span class="comment">         *                    increases as this bottom sheet is moving upward. From 0 to 1 the sheet</span></span><br><span class="line"><span class="comment">         *                    is between collapsed and expanded states and from -1 to 0 it is</span></span><br><span class="line"><span class="comment">         *                    between hidden and collapsed states.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">onSlide</span><span class="params">(@NonNull View bottomSheet, <span class="keyword">float</span> slideOffset)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The bottom sheet is dragging.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATE_DRAGGING = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The bottom sheet is settling.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATE_SETTLING = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The bottom sheet is expanded.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATE_EXPANDED = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The bottom sheet is collapsed.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATE_COLLAPSED = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The bottom sheet is hidden.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATE_HIDDEN = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RestrictTo</span>(LIBRARY_GROUP)</span><br><span class="line">    <span class="meta">@IntDef</span>(&#123;STATE_EXPANDED, STATE_COLLAPSED, STATE_DRAGGING, STATE_SETTLING, STATE_HIDDEN&#125;)</span><br><span class="line">    <span class="meta">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> State &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Peek at the 16:9 ratio keyline of its parent.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This can be used as a parameter for &#123;<span class="doctag">@link</span> #setPeekHeight(int)&#125;.</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #getPeekHeight()&#125; will return this when the value is set.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PEEK_HEIGHT_AUTO = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> HIDE_THRESHOLD = <span class="number">0.5f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> HIDE_FRICTION = <span class="number">0.1f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mMaximumVelocity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mPeekHeight;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mPeekHeightAuto;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mPeekHeightMin;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mMinOffset;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mMaxOffset;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> mHideable;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mSkipCollapsed;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@State</span></span><br><span class="line">    <span class="keyword">int</span> mState = STATE_COLLAPSED;</span><br><span class="line"></span><br><span class="line">    ViewDragHelper mViewDragHelper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mIgnoreEvents;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mLastNestedScrollDy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mNestedScrolled;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mParentHeight;</span><br><span class="line"></span><br><span class="line">    WeakReference&lt;V&gt; mViewRef;</span><br><span class="line"></span><br><span class="line">    WeakReference&lt;View&gt; mNestedScrollingChildRef;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BottomSheetCallback mCallback;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> VelocityTracker mVelocityTracker;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mActivePointerId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mInitialY;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> mTouchingScrollingChild;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Default constructor for instantiating ViewPagerBottomSheetBehaviors.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewPagerBottomSheetBehavior</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Default constructor for inflating ViewPagerBottomSheetBehaviors from layout.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context The &#123;<span class="doctag">@link</span> Context&#125;.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> attrs   The &#123;<span class="doctag">@link</span> AttributeSet&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewPagerBottomSheetBehavior</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        TypedArray a = context.obtainStyledAttributes(attrs,</span><br><span class="line">                R.styleable.BottomSheetBehavior_Layout);</span><br><span class="line">        TypedValue value = a.peekValue(R.styleable.BottomSheetBehavior_Layout_behavior_peekHeight);</span><br><span class="line">        <span class="keyword">if</span> (value != <span class="keyword">null</span> &amp;&amp; value.data == PEEK_HEIGHT_AUTO) &#123;</span><br><span class="line">            setPeekHeight(value.data);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            setPeekHeight(a.getDimensionPixelSize(</span><br><span class="line">                    R.styleable.BottomSheetBehavior_Layout_behavior_peekHeight, PEEK_HEIGHT_AUTO));</span><br><span class="line">        &#125;</span><br><span class="line">        setHideable(a.getBoolean(R.styleable.BottomSheetBehavior_Layout_behavior_hideable, <span class="keyword">false</span>));</span><br><span class="line">        setSkipCollapsed(a.getBoolean(R.styleable.BottomSheetBehavior_Layout_behavior_skipCollapsed,</span><br><span class="line">                <span class="keyword">false</span>));</span><br><span class="line">        a.recycle();</span><br><span class="line">        ViewConfiguration configuration = ViewConfiguration.get(context);</span><br><span class="line">        mMaximumVelocity = configuration.getScaledMaximumFlingVelocity();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Parcelable <span class="title">onSaveInstanceState</span><span class="params">(CoordinatorLayout parent, V child)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SavedState(<span class="keyword">super</span>.onSaveInstanceState(parent, child), mState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRestoreInstanceState</span><span class="params">(CoordinatorLayout parent, V child, Parcelable state)</span> </span>&#123;</span><br><span class="line">        SavedState ss = (SavedState) state;</span><br><span class="line">        <span class="keyword">super</span>.onRestoreInstanceState(parent, child, ss.getSuperState());</span><br><span class="line">        <span class="comment">// Intermediate states are restored as collapsed state</span></span><br><span class="line">        <span class="keyword">if</span> (ss.state == STATE_DRAGGING || ss.state == STATE_SETTLING) &#123;</span><br><span class="line">            mState = STATE_COLLAPSED;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mState = ss.state;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onLayoutChild</span><span class="params">(CoordinatorLayout parent, V child, <span class="keyword">int</span> layoutDirection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ViewCompat.getFitsSystemWindows(parent) &amp;&amp; !ViewCompat.getFitsSystemWindows(child)) &#123;</span><br><span class="line">            ViewCompat.setFitsSystemWindows(child, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> savedTop = child.getTop();</span><br><span class="line">        <span class="comment">// First let the parent lay it out</span></span><br><span class="line">        parent.onLayoutChild(child, layoutDirection);</span><br><span class="line">        <span class="comment">// Offset the bottom sheet</span></span><br><span class="line">        mParentHeight = parent.getHeight();</span><br><span class="line">        <span class="keyword">int</span> peekHeight;</span><br><span class="line">        <span class="keyword">if</span> (mPeekHeightAuto) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mPeekHeightMin == <span class="number">0</span>) &#123;</span><br><span class="line">                mPeekHeightMin = parent.getResources().getDimensionPixelSize(</span><br><span class="line">                        R.dimen.design_bottom_sheet_peek_height_min);</span><br><span class="line">            &#125;</span><br><span class="line">            peekHeight = Math.max(mPeekHeightMin, mParentHeight - parent.getWidth() * <span class="number">9</span> / <span class="number">16</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            peekHeight = mPeekHeight;</span><br><span class="line">        &#125;</span><br><span class="line">        mMinOffset = Math.max(<span class="number">0</span>, mParentHeight - child.getHeight());</span><br><span class="line">        mMaxOffset = Math.max(mParentHeight - peekHeight, mMinOffset);</span><br><span class="line">        <span class="keyword">if</span> (mState == STATE_EXPANDED) &#123;</span><br><span class="line">            ViewCompat.offsetTopAndBottom(child, mMinOffset);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mHideable &amp;&amp; mState == STATE_HIDDEN) &#123;</span><br><span class="line">            ViewCompat.offsetTopAndBottom(child, mParentHeight);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mState == STATE_COLLAPSED) &#123;</span><br><span class="line">            ViewCompat.offsetTopAndBottom(child, mMaxOffset);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mState == STATE_DRAGGING || mState == STATE_SETTLING) &#123;</span><br><span class="line">            ViewCompat.offsetTopAndBottom(child, savedTop - child.getTop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mViewDragHelper == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mViewDragHelper = ViewDragHelper.create(parent, mDragCallback);</span><br><span class="line">        &#125;</span><br><span class="line">        mViewRef = <span class="keyword">new</span> WeakReference&lt;&gt;(child);</span><br><span class="line">        mNestedScrollingChildRef = <span class="keyword">new</span> WeakReference&lt;&gt;(findScrollingChild(child));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(CoordinatorLayout parent, V child, MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!child.isShown()) &#123;</span><br><span class="line">            mIgnoreEvents = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> action = event.getActionMasked();</span><br><span class="line">        <span class="comment">// Record the velocity</span></span><br><span class="line">        <span class="keyword">if</span> (action == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">            reset();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mVelocityTracker == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mVelocityTracker = VelocityTracker.obtain();</span><br><span class="line">        &#125;</span><br><span class="line">        mVelocityTracker.addMovement(event);</span><br><span class="line">        <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</span><br><span class="line">                mTouchingScrollingChild = <span class="keyword">false</span>;</span><br><span class="line">                mActivePointerId = MotionEvent.INVALID_POINTER_ID;</span><br><span class="line">                <span class="comment">// Reset the ignore flag</span></span><br><span class="line">                <span class="keyword">if</span> (mIgnoreEvents) &#123;</span><br><span class="line">                    mIgnoreEvents = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                <span class="keyword">int</span> initialX = (<span class="keyword">int</span>) event.getX();</span><br><span class="line">                mInitialY = (<span class="keyword">int</span>) event.getY();</span><br><span class="line">                View scroll = mNestedScrollingChildRef != <span class="keyword">null</span></span><br><span class="line">                        ? mNestedScrollingChildRef.get() : <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (scroll != <span class="keyword">null</span> &amp;&amp; parent.isPointInChildBounds(scroll, initialX, mInitialY)) &#123;</span><br><span class="line">                    mActivePointerId = event.getPointerId(event.getActionIndex());</span><br><span class="line">                    mTouchingScrollingChild = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                mIgnoreEvents = mActivePointerId == MotionEvent.INVALID_POINTER_ID &amp;&amp;</span><br><span class="line">                        !parent.isPointInChildBounds(child, initialX, mInitialY);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!mIgnoreEvents &amp;&amp; mViewDragHelper.shouldInterceptTouchEvent(event)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// We have to handle cases that the ViewDragHelper does not capture the bottom sheet because</span></span><br><span class="line">        <span class="comment">// it is not the top most view of its parent. This is not necessary when the touch event is</span></span><br><span class="line">        <span class="comment">// happening over the scrolling content as nested scrolling logic handles that case.</span></span><br><span class="line">        View scroll = mNestedScrollingChildRef.get();</span><br><span class="line">        <span class="keyword">return</span> action == MotionEvent.ACTION_MOVE &amp;&amp; scroll != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                !mIgnoreEvents &amp;&amp; mState != STATE_DRAGGING &amp;&amp;</span><br><span class="line">                !parent.isPointInChildBounds(scroll, (<span class="keyword">int</span>) event.getX(), (<span class="keyword">int</span>) event.getY()) &amp;&amp;</span><br><span class="line">                Math.abs(mInitialY - event.getY()) &gt; mViewDragHelper.getTouchSlop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(CoordinatorLayout parent, V child, MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!child.isShown()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> action = event.getActionMasked();</span><br><span class="line">        <span class="keyword">if</span> (mState == STATE_DRAGGING &amp;&amp; action == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mViewDragHelper != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mViewDragHelper.processTouchEvent(event);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Record the velocity</span></span><br><span class="line">        <span class="keyword">if</span> (action == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">            reset();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mVelocityTracker == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mVelocityTracker = VelocityTracker.obtain();</span><br><span class="line">        &#125;</span><br><span class="line">        mVelocityTracker.addMovement(event);</span><br><span class="line">        <span class="comment">// The ViewDragHelper tries to capture only the top-most View. We have to explicitly tell it</span></span><br><span class="line">        <span class="comment">// to capture the bottom sheet in case it is not captured and the touch slop is passed.</span></span><br><span class="line">        <span class="keyword">if</span> (action == MotionEvent.ACTION_MOVE &amp;&amp; !mIgnoreEvents) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Math.abs(mInitialY - event.getY()) &gt; mViewDragHelper.getTouchSlop()) &#123;</span><br><span class="line">                mViewDragHelper.captureChildView(child, event.getPointerId(event.getActionIndex()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> !mIgnoreEvents;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onStartNestedScroll</span><span class="params">(CoordinatorLayout coordinatorLayout, V child,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       View directTargetChild, View target, <span class="keyword">int</span> nestedScrollAxes)</span> </span>&#123;</span><br><span class="line">        mLastNestedScrollDy = <span class="number">0</span>;</span><br><span class="line">        mNestedScrolled = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> (nestedScrollAxes &amp; ViewCompat.SCROLL_AXIS_VERTICAL) != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNestedPreScroll</span><span class="params">(CoordinatorLayout coordinatorLayout, V child, View target, <span class="keyword">int</span> dx,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  <span class="keyword">int</span> dy, <span class="keyword">int</span>[] consumed)</span> </span>&#123;</span><br><span class="line">        View scrollingChild = mNestedScrollingChildRef.get();</span><br><span class="line">        <span class="keyword">if</span> (target != scrollingChild) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> currentTop = child.getTop();</span><br><span class="line">        <span class="keyword">int</span> newTop = currentTop - dy;</span><br><span class="line">        <span class="keyword">if</span> (dy &gt; <span class="number">0</span>) &#123; <span class="comment">// Upward</span></span><br><span class="line">            <span class="keyword">if</span> (newTop &lt; mMinOffset) &#123;</span><br><span class="line">                consumed[<span class="number">1</span>] = currentTop - mMinOffset;</span><br><span class="line">                ViewCompat.offsetTopAndBottom(child, -consumed[<span class="number">1</span>]);</span><br><span class="line">                setStateInternal(STATE_EXPANDED);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                consumed[<span class="number">1</span>] = dy;</span><br><span class="line">                ViewCompat.offsetTopAndBottom(child, -dy);</span><br><span class="line">                setStateInternal(STATE_DRAGGING);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dy &lt; <span class="number">0</span>) &#123; <span class="comment">// Downward</span></span><br><span class="line">            <span class="keyword">if</span> (!target.canScrollVertically(-<span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (newTop &lt;= mMaxOffset || mHideable) &#123;</span><br><span class="line">                    consumed[<span class="number">1</span>] = dy;</span><br><span class="line">                    ViewCompat.offsetTopAndBottom(child, -dy);</span><br><span class="line">                    setStateInternal(STATE_DRAGGING);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    consumed[<span class="number">1</span>] = currentTop - mMaxOffset;</span><br><span class="line">                    ViewCompat.offsetTopAndBottom(child, -consumed[<span class="number">1</span>]);</span><br><span class="line">                    setStateInternal(STATE_COLLAPSED);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dispatchOnSlide(child.getTop());</span><br><span class="line">        mLastNestedScrollDy = dy;</span><br><span class="line">        mNestedScrolled = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStopNestedScroll</span><span class="params">(CoordinatorLayout coordinatorLayout, V child, View target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (child.getTop() == mMinOffset) &#123;</span><br><span class="line">            setStateInternal(STATE_EXPANDED);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mNestedScrollingChildRef == <span class="keyword">null</span> || target != mNestedScrollingChildRef.get()</span><br><span class="line">                || !mNestedScrolled) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> top;</span><br><span class="line">        <span class="keyword">int</span> targetState;</span><br><span class="line">        <span class="keyword">if</span> (mLastNestedScrollDy &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            top = mMinOffset;</span><br><span class="line">            targetState = STATE_EXPANDED;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mHideable &amp;&amp; shouldHide(child, getYVelocity())) &#123;</span><br><span class="line">            top = mParentHeight;</span><br><span class="line">            targetState = STATE_HIDDEN;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mLastNestedScrollDy == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> currentTop = child.getTop();</span><br><span class="line">            <span class="keyword">if</span> (Math.abs(currentTop - mMinOffset) &lt; Math.abs(currentTop - mMaxOffset)) &#123;</span><br><span class="line">                top = mMinOffset;</span><br><span class="line">                targetState = STATE_EXPANDED;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                top = mMaxOffset;</span><br><span class="line">                targetState = STATE_COLLAPSED;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            top = mMaxOffset;</span><br><span class="line">            targetState = STATE_COLLAPSED;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mViewDragHelper.smoothSlideViewTo(child, child.getLeft(), top)) &#123;</span><br><span class="line">            setStateInternal(STATE_SETTLING);</span><br><span class="line">            ViewCompat.postOnAnimation(child, <span class="keyword">new</span> SettleRunnable(child, targetState));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            setStateInternal(targetState);</span><br><span class="line">        &#125;</span><br><span class="line">        mNestedScrolled = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onNestedPreFling</span><span class="params">(CoordinatorLayout coordinatorLayout, V child, View target,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    <span class="keyword">float</span> velocityX, <span class="keyword">float</span> velocityY)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> target == mNestedScrollingChildRef.get() &amp;&amp;</span><br><span class="line">                (mState != STATE_EXPANDED ||</span><br><span class="line">                        <span class="keyword">super</span>.onNestedPreFling(coordinatorLayout, child, target,</span><br><span class="line">                                velocityX, velocityY));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">invalidateScrollingChild</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> View scrollingChild = findScrollingChild(mViewRef.get());</span><br><span class="line">        mNestedScrollingChildRef = <span class="keyword">new</span> WeakReference&lt;&gt;(scrollingChild);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets the height of the bottom sheet when it is collapsed.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> peekHeight The height of the collapsed bottom sheet in pixels, or</span></span><br><span class="line"><span class="comment">     *                   &#123;<span class="doctag">@link</span> #PEEK_HEIGHT_AUTO&#125; to configure the sheet to peek automatically</span></span><br><span class="line"><span class="comment">     *                   at 16:9 ratio keyline.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@attr</span> ref android.support.design.R.styleable#BottomSheetBehavior_Layout_behavior_peekHeight</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setPeekHeight</span><span class="params">(<span class="keyword">int</span> peekHeight)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> layout = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (peekHeight == PEEK_HEIGHT_AUTO) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!mPeekHeightAuto) &#123;</span><br><span class="line">                mPeekHeightAuto = <span class="keyword">true</span>;</span><br><span class="line">                layout = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mPeekHeightAuto || mPeekHeight != peekHeight) &#123;</span><br><span class="line">            mPeekHeightAuto = <span class="keyword">false</span>;</span><br><span class="line">            mPeekHeight = Math.max(<span class="number">0</span>, peekHeight);</span><br><span class="line">            mMaxOffset = mParentHeight - peekHeight;</span><br><span class="line">            layout = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (layout &amp;&amp; mState == STATE_COLLAPSED &amp;&amp; mViewRef != <span class="keyword">null</span>) &#123;</span><br><span class="line">            V view = mViewRef.get();</span><br><span class="line">            <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">                view.requestLayout();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Gets the height of the bottom sheet when it is collapsed.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The height of the collapsed bottom sheet in pixels, or &#123;<span class="doctag">@link</span> #PEEK_HEIGHT_AUTO&#125;</span></span><br><span class="line"><span class="comment">     * if the sheet is configured to peek automatically at 16:9 ratio keyline</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@attr</span> ref android.support.design.R.styleable#BottomSheetBehavior_Layout_behavior_peekHeight</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getPeekHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mPeekHeightAuto ? PEEK_HEIGHT_AUTO : mPeekHeight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets whether this bottom sheet can hide when it is swiped down.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hideable &#123;<span class="doctag">@code</span> true&#125; to make this bottom sheet hideable.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@attr</span> ref android.support.design.R.styleable#BottomSheetBehavior_Layout_behavior_hideable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHideable</span><span class="params">(<span class="keyword">boolean</span> hideable)</span> </span>&#123;</span><br><span class="line">        mHideable = hideable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Gets whether this bottom sheet can hide when it is swiped down.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if this bottom sheet can hide.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@attr</span> ref android.support.design.R.styleable#BottomSheetBehavior_Layout_behavior_hideable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHideable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mHideable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets whether this bottom sheet should skip the collapsed state when it is being hidden</span></span><br><span class="line"><span class="comment">     * after it is expanded once. Setting this to true has no effect unless the sheet is hideable.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> skipCollapsed True if the bottom sheet should skip the collapsed state.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@attr</span> ref android.support.design.R.styleable#BottomSheetBehavior_Layout_behavior_skipCollapsed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSkipCollapsed</span><span class="params">(<span class="keyword">boolean</span> skipCollapsed)</span> </span>&#123;</span><br><span class="line">        mSkipCollapsed = skipCollapsed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets whether this bottom sheet should skip the collapsed state when it is being hidden</span></span><br><span class="line"><span class="comment">     * after it is expanded once.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Whether the bottom sheet should skip the collapsed state.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@attr</span> ref android.support.design.R.styleable#BottomSheetBehavior_Layout_behavior_skipCollapsed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getSkipCollapsed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mSkipCollapsed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets a callback to be notified of bottom sheet events.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> callback The callback to notify when bottom sheet events occur.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBottomSheetCallback</span><span class="params">(BottomSheetCallback callback)</span> </span>&#123;</span><br><span class="line">        mCallback = callback;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets the state of the bottom sheet. The bottom sheet will transition to that state with</span></span><br><span class="line"><span class="comment">     * animation.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> state One of &#123;<span class="doctag">@link</span> #STATE_COLLAPSED&#125;, &#123;<span class="doctag">@link</span> #STATE_EXPANDED&#125;, or</span></span><br><span class="line"><span class="comment">     *              &#123;<span class="doctag">@link</span> #STATE_HIDDEN&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">final</span> @State <span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (state == mState) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mViewRef == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// The view is not laid out yet; modify mState and let onLayoutChild handle it later</span></span><br><span class="line">            <span class="keyword">if</span> (state == STATE_COLLAPSED || state == STATE_EXPANDED ||</span><br><span class="line">                    (mHideable &amp;&amp; state == STATE_HIDDEN)) &#123;</span><br><span class="line">                mState = state;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> V child = mViewRef.get();</span><br><span class="line">        <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Start the animation; wait until a pending layout if there is one.</span></span><br><span class="line">        ViewParent parent = child.getParent();</span><br><span class="line">        <span class="keyword">if</span> (parent != <span class="keyword">null</span> &amp;&amp; parent.isLayoutRequested() &amp;&amp; ViewCompat.isAttachedToWindow(child)) &#123;</span><br><span class="line">            child.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    startSettlingAnimation(child, state);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            startSettlingAnimation(child, state);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Gets the current state of the bottom sheet.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> One of &#123;<span class="doctag">@link</span> #STATE_EXPANDED&#125;, &#123;<span class="doctag">@link</span> #STATE_COLLAPSED&#125;, &#123;<span class="doctag">@link</span> #STATE_DRAGGING&#125;,</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #STATE_SETTLING&#125;, and &#123;<span class="doctag">@link</span> #STATE_HIDDEN&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@State</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setStateInternal</span><span class="params">(@State <span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mState == state) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mState = state;</span><br><span class="line">        View bottomSheet = mViewRef.get();</span><br><span class="line">        <span class="keyword">if</span> (bottomSheet != <span class="keyword">null</span> &amp;&amp; mCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mCallback.onStateChanged(bottomSheet, state);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mActivePointerId = ViewDragHelper.INVALID_POINTER;</span><br><span class="line">        <span class="keyword">if</span> (mVelocityTracker != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mVelocityTracker.recycle();</span><br><span class="line">            mVelocityTracker = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">shouldHide</span><span class="params">(View child, <span class="keyword">float</span> yvel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mSkipCollapsed) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (child.getTop() &lt; mMaxOffset) &#123;</span><br><span class="line">            <span class="comment">// It should not hide, but collapse.</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> newTop = child.getTop() + yvel * HIDE_FRICTION;</span><br><span class="line">        <span class="keyword">return</span> Math.abs(newTop - mMaxOffset) / (<span class="keyword">float</span>) mPeekHeight &gt; HIDE_THRESHOLD;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@VisibleForTesting</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> View <span class="title">findScrollingChild</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ViewCompat.isNestedScrollingEnabled(view)) &#123;</span><br><span class="line">            <span class="keyword">return</span> view;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (view <span class="keyword">instanceof</span> ViewPager) &#123;</span><br><span class="line">            ViewPager viewPager = (ViewPager) view;</span><br><span class="line">            View currentViewPagerChild = ViewPagerUtils.getCurrentView(viewPager);</span><br><span class="line">            <span class="keyword">if</span> (currentViewPagerChild == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            View scrollingChild = findScrollingChild(currentViewPagerChild);</span><br><span class="line">            <span class="keyword">if</span> (scrollingChild != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> scrollingChild;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (view <span class="keyword">instanceof</span> ViewGroup) &#123;</span><br><span class="line">            ViewGroup group = (ViewGroup) view;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, count = group.getChildCount(); i &lt; count; i++) &#123;</span><br><span class="line">                View scrollingChild = findScrollingChild(group.getChildAt(i));</span><br><span class="line">                <span class="keyword">if</span> (scrollingChild != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> scrollingChild;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">float</span> <span class="title">getYVelocity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mVelocityTracker.computeCurrentVelocity(<span class="number">1000</span>, mMaximumVelocity);</span><br><span class="line">        <span class="keyword">return</span> mVelocityTracker.getYVelocity(mActivePointerId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">startSettlingAnimation</span><span class="params">(View child, <span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> top;</span><br><span class="line">        <span class="keyword">if</span> (state == STATE_COLLAPSED) &#123;</span><br><span class="line">            top = mMaxOffset;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == STATE_EXPANDED) &#123;</span><br><span class="line">            top = mMinOffset;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mHideable &amp;&amp; state == STATE_HIDDEN) &#123;</span><br><span class="line">            top = mParentHeight;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal state argument: "</span> + state);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mViewDragHelper.smoothSlideViewTo(child, child.getLeft(), top)) &#123;</span><br><span class="line">            setStateInternal(STATE_SETTLING);</span><br><span class="line">            ViewCompat.postOnAnimation(child, <span class="keyword">new</span> SettleRunnable(child, state));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            setStateInternal(state);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ViewDragHelper.Callback mDragCallback = <span class="keyword">new</span> ViewDragHelper.Callback() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryCaptureView</span><span class="params">(View child, <span class="keyword">int</span> pointerId)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (mState == STATE_DRAGGING) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mTouchingScrollingChild) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mState == STATE_EXPANDED &amp;&amp; mActivePointerId == pointerId) &#123;</span><br><span class="line">                View scroll = mNestedScrollingChildRef.get();</span><br><span class="line">                <span class="keyword">if</span> (scroll != <span class="keyword">null</span> &amp;&amp; scroll.canScrollVertically(-<span class="number">1</span>)) &#123;</span><br><span class="line">                    <span class="comment">// Let the content scroll up</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> mViewRef != <span class="keyword">null</span> &amp;&amp; mViewRef.get() == child;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewPositionChanged</span><span class="params">(View changedView, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span>&#123;</span><br><span class="line">            dispatchOnSlide(top);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewDragStateChanged</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (state == ViewDragHelper.STATE_DRAGGING) &#123;</span><br><span class="line">                setStateInternal(STATE_DRAGGING);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewReleased</span><span class="params">(View releasedChild, <span class="keyword">float</span> xvel, <span class="keyword">float</span> yvel)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> top;</span><br><span class="line">            <span class="meta">@State</span> <span class="keyword">int</span> targetState;</span><br><span class="line">            <span class="keyword">if</span> (yvel &lt; <span class="number">0</span>) &#123; <span class="comment">// Moving up</span></span><br><span class="line">                top = mMinOffset;</span><br><span class="line">                targetState = STATE_EXPANDED;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mHideable &amp;&amp; shouldHide(releasedChild, yvel)) &#123;</span><br><span class="line">                top = mParentHeight;</span><br><span class="line">                targetState = STATE_HIDDEN;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (yvel == <span class="number">0</span>.f) &#123;</span><br><span class="line">                <span class="keyword">int</span> currentTop = releasedChild.getTop();</span><br><span class="line">                <span class="keyword">if</span> (Math.abs(currentTop - mMinOffset) &lt; Math.abs(currentTop - mMaxOffset)) &#123;</span><br><span class="line">                    top = mMinOffset;</span><br><span class="line">                    targetState = STATE_EXPANDED;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    top = mMaxOffset;</span><br><span class="line">                    targetState = STATE_COLLAPSED;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                top = mMaxOffset;</span><br><span class="line">                targetState = STATE_COLLAPSED;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mViewDragHelper.settleCapturedViewAt(releasedChild.getLeft(), top)) &#123;</span><br><span class="line">                setStateInternal(STATE_SETTLING);</span><br><span class="line">                ViewCompat.postOnAnimation(releasedChild,</span><br><span class="line">                        <span class="keyword">new</span> SettleRunnable(releasedChild, targetState));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                setStateInternal(targetState);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">clampViewPositionVertical</span><span class="params">(View child, <span class="keyword">int</span> top, <span class="keyword">int</span> dy)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> MathUtils.clamp(top, mMinOffset, mHideable ? mParentHeight : mMaxOffset);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">clampViewPositionHorizontal</span><span class="params">(View child, <span class="keyword">int</span> left, <span class="keyword">int</span> dx)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> child.getLeft();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getViewVerticalDragRange</span><span class="params">(View child)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (mHideable) &#123;</span><br><span class="line">                <span class="keyword">return</span> mParentHeight - mMinOffset;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> mMaxOffset - mMinOffset;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dispatchOnSlide</span><span class="params">(<span class="keyword">int</span> top)</span> </span>&#123;</span><br><span class="line">        View bottomSheet = mViewRef.get();</span><br><span class="line">        <span class="keyword">if</span> (bottomSheet != <span class="keyword">null</span> &amp;&amp; mCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (top &gt; mMaxOffset) &#123;</span><br><span class="line">                mCallback.onSlide(bottomSheet, (<span class="keyword">float</span>) (mMaxOffset - top) /</span><br><span class="line">                        (mParentHeight - mMaxOffset));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mCallback.onSlide(bottomSheet,</span><br><span class="line">                        (<span class="keyword">float</span>) (mMaxOffset - top) / ((mMaxOffset - mMinOffset)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@VisibleForTesting</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getPeekHeightMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mPeekHeightMin;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">SettleRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> View mView;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@State</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> mTargetState;</span><br><span class="line"></span><br><span class="line">        SettleRunnable(View view, <span class="meta">@State</span> <span class="keyword">int</span> targetState) &#123;</span><br><span class="line">            mView = view;</span><br><span class="line">            mTargetState = targetState;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (mViewDragHelper != <span class="keyword">null</span> &amp;&amp; mViewDragHelper.continueSettling(<span class="keyword">true</span>)) &#123;</span><br><span class="line">                ViewCompat.postOnAnimation(mView, <span class="keyword">this</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                setStateInternal(mTargetState);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SavedState</span> <span class="keyword">extends</span> <span class="title">AbsSavedState</span> </span>&#123;</span><br><span class="line">        <span class="meta">@State</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> state;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SavedState</span><span class="params">(Parcel source)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>(source, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SavedState</span><span class="params">(Parcel source, ClassLoader loader)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(source, loader);</span><br><span class="line">            <span class="comment">//noinspection ResourceType</span></span><br><span class="line">            state = source.readInt();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SavedState</span><span class="params">(Parcelable superState, @State <span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(superState);</span><br><span class="line">            <span class="keyword">this</span>.state = state;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel out, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.writeToParcel(out, flags);</span><br><span class="line">            out.writeInt(state);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Creator&lt;SavedState&gt; CREATOR = <span class="keyword">new</span> ClassLoaderCreator&lt;SavedState&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> SavedState <span class="title">createFromParcel</span><span class="params">(Parcel in, ClassLoader loader)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> SavedState(in, loader);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> SavedState <span class="title">createFromParcel</span><span class="params">(Parcel in)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> SavedState(in, <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> SavedState[] newArray(<span class="keyword">int</span> size) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> SavedState[size];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A utility function to get the &#123;<span class="doctag">@link</span> ViewPagerBottomSheetBehavior&#125; associated with the &#123;<span class="doctag">@code</span> view&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> view The &#123;<span class="doctag">@link</span> View&#125; with &#123;<span class="doctag">@link</span> ViewPagerBottomSheetBehavior&#125;.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The &#123;<span class="doctag">@link</span> ViewPagerBottomSheetBehavior&#125; associated with the &#123;<span class="doctag">@code</span> view&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;V extends View&gt; <span class="function">ViewPagerBottomSheetBehavior&lt;V&gt; <span class="title">from</span><span class="params">(V view)</span> </span>&#123;</span><br><span class="line">        ViewGroup.LayoutParams params = view.getLayoutParams();</span><br><span class="line">        <span class="keyword">if</span> (!(params <span class="keyword">instanceof</span> CoordinatorLayout.LayoutParams)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"The view is not a child of CoordinatorLayout"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        CoordinatorLayout.Behavior behavior = ((CoordinatorLayout.LayoutParams) params)</span><br><span class="line">                .getBehavior();</span><br><span class="line">        <span class="keyword">if</span> (!(behavior <span class="keyword">instanceof</span> ViewPagerBottomSheetBehavior)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    <span class="string">"The view is not associated with ViewPagerBottomSheetBehavior"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (ViewPagerBottomSheetBehavior&lt;V&gt;) behavior;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewPagerUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> View <span class="title">getCurrentView</span><span class="params">(ViewPager viewPager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> currentItem = viewPager.getCurrentItem();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; viewPager.getChildCount(); i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> View child = viewPager.getChildAt(i);</span><br><span class="line">            <span class="keyword">final</span> ViewPager.LayoutParams layoutParams = (ViewPager.LayoutParams) child.getLayoutParams();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Field field = layoutParams.getClass().getDeclaredField(<span class="string">"position"</span>);</span><br><span class="line">                field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                <span class="keyword">int</span> position = field.getInt(layoutParams);</span><br><span class="line">                <span class="keyword">if</span> (!layoutParams.isDecor &amp;&amp; currentItem == position) &#123;</span><br><span class="line">                    <span class="keyword">return</span> child;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">BottomSheetUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setupViewPager</span><span class="params">(ViewPager viewPager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> View bottomSheetParent = findBottomSheetParent(viewPager);</span><br><span class="line">        <span class="keyword">if</span> (bottomSheetParent != <span class="keyword">null</span>) &#123;</span><br><span class="line">            viewPager.addOnPageChangeListener(<span class="keyword">new</span> BottomSheetViewPagerListener(viewPager, bottomSheetParent));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BottomSheetViewPagerListener</span> <span class="keyword">extends</span> <span class="title">ViewPager</span>.<span class="title">SimpleOnPageChangeListener</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ViewPager viewPager;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ViewPagerBottomSheetBehavior&lt;View&gt; behavior;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">BottomSheetViewPagerListener</span><span class="params">(ViewPager viewPager, View bottomSheetParent)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.viewPager = viewPager;</span><br><span class="line">            <span class="keyword">this</span>.behavior = ViewPagerBottomSheetBehavior.from(bottomSheetParent);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageSelected</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">            viewPager.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    behavior.invalidateScrollingChild();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> View <span class="title">findBottomSheetParent</span><span class="params">(<span class="keyword">final</span> View view)</span> </span>&#123;</span><br><span class="line">        View current = view;</span><br><span class="line">        <span class="keyword">while</span> (current != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> ViewGroup.LayoutParams params = current.getLayoutParams();</span><br><span class="line">            <span class="keyword">if</span> (params <span class="keyword">instanceof</span> CoordinatorLayout.LayoutParams &amp;&amp; ((CoordinatorLayout.LayoutParams) params).getBehavior() <span class="keyword">instanceof</span> ViewPagerBottomSheetBehavior) &#123;</span><br><span class="line">                <span class="keyword">return</span> current;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">final</span> ViewParent parent = current.getParent();</span><br><span class="line">            current = parent == <span class="keyword">null</span> || !(parent <span class="keyword">instanceof</span> View) ? <span class="keyword">null</span> : (View) parent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- design_view_pager_bottom_sheet_dialog.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  ~ Copyright (C) 2015 The Android Open Source Project</span></span><br><span class="line"><span class="comment">  ~</span></span><br><span class="line"><span class="comment">  ~ Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment">  ~ you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  ~ You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">  ~</span></span><br><span class="line"><span class="comment">  ~      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">  ~</span></span><br><span class="line"><span class="comment">  ~ Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  ~ distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment">  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  ~ See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  ~ limitations under the License.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.coordinatorlayout.widget.CoordinatorLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/touch_outside"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:soundEffectsEnabled</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/design_bottom_sheet"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"center_horizontal|top"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:clickable</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_behavior</span>=<span class="string">".behavior.ViewPagerBottomSheetBehavior"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">"?attr/bottomSheetStyle"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.coordinatorlayout.widget.CoordinatorLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后基于上述文件自定义BottomSheetDialog <code>ViewPagerBottomSheetDialog.java</code>以及<code>ViewPagerBottomSheetDialogFragment.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewPagerBottomSheetDialog</span> <span class="keyword">extends</span> <span class="title">AppCompatDialog</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ViewPagerBottomSheetBehavior&lt;FrameLayout&gt; mBehavior;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mCancelable = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mCanceledOnTouchOutside = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mCanceledOnTouchOutsideSet;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mCreated;</span><br><span class="line">    <span class="comment">// 在这个自定义的Dialog中加入了设置高度的功能</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mPeekHeight;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mMaxHeight;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Window mWindow;</span><br><span class="line">    <span class="keyword">private</span> ViewPagerBottomSheetBehavior mBottomSheetBehavior;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewPagerBottomSheetDialog</span><span class="params">(@NonNull Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, getThemeResId(context, <span class="number">0</span>));</span><br><span class="line">        init(<span class="number">1000</span>,<span class="number">1000</span>); <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewPagerBottomSheetDialog</span><span class="params">(@NonNull Context context, @StyleRes <span class="keyword">int</span> theme)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, getThemeResId(context, theme));</span><br><span class="line">        <span class="comment">// We hide the title bar for any style configuration. Otherwise, there will be a gap</span></span><br><span class="line">        <span class="comment">// above the bottom sheet when it is expanded.</span></span><br><span class="line">        supportRequestWindowFeature(Window.FEATURE_NO_TITLE);</span><br><span class="line">        init(<span class="number">1000</span>, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewPagerBottomSheetDialog</span><span class="params">(@NonNull Context context, <span class="keyword">int</span> peekHeight, <span class="keyword">int</span> maxHeight)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="number">0</span>, peekHeight, maxHeight);</span><br><span class="line">        init(peekHeight, maxHeight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewPagerBottomSheetDialog</span><span class="params">(@NonNull Context context, @StyleRes <span class="keyword">int</span> theme, <span class="keyword">int</span> peekHeight, <span class="keyword">int</span> maxHeight)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, getThemeResId(context, theme));</span><br><span class="line">        <span class="comment">// We hide the title bar for any style configuration. Otherwise, there will be a gap</span></span><br><span class="line">        <span class="comment">// above the bottom sheet when it is expanded.</span></span><br><span class="line">        supportRequestWindowFeature(Window.FEATURE_NO_TITLE);</span><br><span class="line">        init(peekHeight, maxHeight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">ViewPagerBottomSheetDialog</span><span class="params">(@NonNull Context context, <span class="keyword">boolean</span> cancelable,</span></span></span><br><span class="line"><span class="function"><span class="params">                                         DialogInterface.OnCancelListener cancelListener, <span class="keyword">int</span> peekHeight, <span class="keyword">int</span> maxHeight)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, cancelable, cancelListener);</span><br><span class="line">        supportRequestWindowFeature(Window.FEATURE_NO_TITLE);</span><br><span class="line">        mCancelable = cancelable;</span><br><span class="line">        init(peekHeight, maxHeight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> peekHeight, <span class="keyword">int</span> maxHeight)</span> </span>&#123;</span><br><span class="line">        mWindow = getWindow();</span><br><span class="line">        mPeekHeight = peekHeight;</span><br><span class="line">        mMaxHeight = maxHeight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(@LayoutRes <span class="keyword">int</span> layoutResId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setContentView(wrapInBottomSheet(layoutResId, <span class="keyword">null</span>, <span class="keyword">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        getWindow().setLayout(</span><br><span class="line">                ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);</span><br><span class="line">        setPeekHeight();</span><br><span class="line">        setMaxHeight();</span><br><span class="line">        mCreated = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPeekHeight</span><span class="params">(<span class="keyword">int</span> peekHeight)</span> </span>&#123;</span><br><span class="line">        mPeekHeight = peekHeight;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mCreated) &#123;</span><br><span class="line">            setPeekHeight();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaxHeight</span><span class="params">(<span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">        mMaxHeight = height;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mCreated) &#123;</span><br><span class="line">            setMaxHeight();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setPeekHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mPeekHeight &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (getBottomSheetBehavior() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mBottomSheetBehavior.setPeekHeight(mPeekHeight);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setMaxHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mMaxHeight &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置高度的核心函数</span></span><br><span class="line">        mWindow.setLayout(ViewGroup.LayoutParams.MATCH_PARENT, mMaxHeight);</span><br><span class="line">        mWindow.setGravity(Gravity.BOTTOM);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ViewPagerBottomSheetBehavior <span class="title">getBottomSheetBehavior</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mBottomSheetBehavior != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> mBottomSheetBehavior;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        View view = mWindow.findViewById(R.id.design_bottom_sheet);</span><br><span class="line">        <span class="comment">// setContentView() 没有调用</span></span><br><span class="line">        <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mBottomSheetBehavior = ViewPagerBottomSheetBehavior.from(view);</span><br><span class="line">        <span class="keyword">return</span> mBottomSheetBehavior;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setContentView(wrapInBottomSheet(<span class="number">0</span>, view, <span class="keyword">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(View view, ViewGroup.LayoutParams params)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setContentView(wrapInBottomSheet(<span class="number">0</span>, view, params));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCancelable</span><span class="params">(<span class="keyword">boolean</span> cancelable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setCancelable(cancelable);</span><br><span class="line">        <span class="keyword">if</span> (mCancelable != cancelable) &#123;</span><br><span class="line">            mCancelable = cancelable;</span><br><span class="line">            <span class="keyword">if</span> (mBehavior != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mBehavior.setHideable(cancelable);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCanceledOnTouchOutside</span><span class="params">(<span class="keyword">boolean</span> cancel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setCanceledOnTouchOutside(cancel);</span><br><span class="line">        <span class="keyword">if</span> (cancel &amp;&amp; !mCancelable) &#123;</span><br><span class="line">            mCancelable = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mCanceledOnTouchOutside = cancel;</span><br><span class="line">        mCanceledOnTouchOutsideSet = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> View <span class="title">wrapInBottomSheet</span><span class="params">(<span class="keyword">int</span> layoutResId, View view, ViewGroup.LayoutParams params)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> CoordinatorLayout coordinator = (CoordinatorLayout) View.inflate(getContext(),</span><br><span class="line">                R.layout.design_view_pager_bottom_sheet_dialog, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (layoutResId != <span class="number">0</span> &amp;&amp; view == <span class="keyword">null</span>) &#123;</span><br><span class="line">            view = getLayoutInflater().inflate(layoutResId, coordinator, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        FrameLayout bottomSheet = (FrameLayout) coordinator.findViewById(R.id.design_bottom_sheet);</span><br><span class="line">        mBehavior = ViewPagerBottomSheetBehavior.from(bottomSheet);</span><br><span class="line">        mBehavior.setBottomSheetCallback(mBottomSheetCallback);</span><br><span class="line">        mBehavior.setHideable(mCancelable);</span><br><span class="line">        <span class="keyword">if</span> (params == <span class="keyword">null</span>) &#123;</span><br><span class="line">            bottomSheet.addView(view);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            bottomSheet.addView(view, params);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// We treat the CoordinatorLayout as outside the dialog though it is technically inside</span></span><br><span class="line">        coordinator.findViewById(R.id.touch_outside).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (mCancelable &amp;&amp; isShowing() &amp;&amp; shouldWindowCloseOnTouchOutside()) &#123;</span><br><span class="line">                    cancel();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> coordinator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">shouldWindowCloseOnTouchOutside</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!mCanceledOnTouchOutsideSet) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Build.VERSION.SDK_INT &lt; <span class="number">11</span>) &#123;</span><br><span class="line">                mCanceledOnTouchOutside = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                TypedArray a = getContext().obtainStyledAttributes(</span><br><span class="line">                        <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;android.R.attr.windowCloseOnTouchOutside&#125;);</span><br><span class="line">                mCanceledOnTouchOutside = a.getBoolean(<span class="number">0</span>, <span class="keyword">true</span>);</span><br><span class="line">                a.recycle();</span><br><span class="line">            &#125;</span><br><span class="line">            mCanceledOnTouchOutsideSet = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mCanceledOnTouchOutside;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getThemeResId</span><span class="params">(Context context, <span class="keyword">int</span> themeId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (themeId == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// If the provided theme is 0, then retrieve the dialogTheme from our theme</span></span><br><span class="line">            TypedValue outValue = <span class="keyword">new</span> TypedValue();</span><br><span class="line">            <span class="keyword">if</span> (context.getTheme().resolveAttribute(</span><br><span class="line">                    R.attr.bottomSheetDialogTheme, outValue, <span class="keyword">true</span>)) &#123;</span><br><span class="line">                themeId = outValue.resourceId;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// bottomSheetDialogTheme is not provided; we default to our light theme</span></span><br><span class="line">                themeId = R.style.Theme_Design_Light_BottomSheetDialog;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> themeId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ViewPagerBottomSheetBehavior.BottomSheetCallback mBottomSheetCallback</span><br><span class="line">            = <span class="keyword">new</span> ViewPagerBottomSheetBehavior.BottomSheetCallback() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStateChanged</span><span class="params">(@NonNull View bottomSheet,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   @ViewPagerBottomSheetBehavior.State <span class="keyword">int</span> newState)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (newState == ViewPagerBottomSheetBehavior.STATE_HIDDEN) &#123;</span><br><span class="line">                dismiss();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSlide</span><span class="params">(@NonNull View bottomSheet, <span class="keyword">float</span> slideOffset)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewPagerBottomSheetDialogFragment</span> <span class="keyword">extends</span> <span class="title">AppCompatDialogFragment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dialog <span class="title">onCreateDialog</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ViewPagerBottomSheetDialog(getContext(), getTheme());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Activity中使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FourthActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_fourth);</span><br><span class="line">        List&lt;EmojiItem&gt; data = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        String[] arr = <span class="keyword">new</span> String[]&#123;</span><br><span class="line">                <span class="string">"\uD83D\uDC4D"</span>, <span class="string">"❤️"</span>, <span class="string">"\uD83C\uDF89"</span>, <span class="string">"\uD83D\uDE02"</span>, <span class="string">"\uD83D\uDC4F"</span>, <span class="string">"\uD83D\uDE0E"</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            data.add(<span class="keyword">new</span> EmojiItem(arr[i], i + <span class="number">10</span>, <span class="keyword">null</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 多了setMaxHeight(1600)和setPeekHeight(1000)</span></span><br><span class="line">        findViewById(R.id.button4).setOnClickListener(v -&gt;</span><br><span class="line">                ListBottomSheetDialog.builder(FourthActivity.<span class="keyword">this</span>)</span><br><span class="line">                        .setEmojiItemList(data)</span><br><span class="line">                        .setMaxHeight(<span class="number">1600</span>)</span><br><span class="line">                        .setPeekHeight(<span class="number">1000</span>)</span><br><span class="line">                        .setOffscreenPageLimit(<span class="number">5</span>)</span><br><span class="line">                        .setEnableScroll(<span class="keyword">true</span>)</span><br><span class="line">                        .show(getSupportFragmentManager()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下，但是如果BottomSheetDialog官方将这个bug修复了，那么就不需要修改这么多的文件，而且自定义的ViewPagerBottomSheetBehavior只是复制了BottomSheetBehavior中的部分代码，可能存在其他问题尚未发现。</p><!--  --><p><img src="http://114.116.9.65:7777/images/2020/01/19/design5.gif" alt="design5.gif" /></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://material.io/develop/android/components/bottom-sheet-behavior/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Material Design&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/material-components/material-components-android/blob/master/docs/getting-started.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Getting started with Material Components for Android&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;BottomSheetDialog，顾名思义就是从界面底部往上出现的Dialog，它是Material Design的控件之一，目前在&lt;a href=&quot;https://github.com/material-components/material-components-android&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Material Components&lt;/a&gt;库中。&lt;/p&gt;
&lt;!--  --&gt;
&lt;p&gt;&lt;img src=&quot;http://114.116.9.65:7777/images/2020/01/19/bottomsheet-1.gif&quot; alt=&quot;bottomsheet-1.gif&quot; /&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://zhoutao822.coding.me/categories/Android/"/>
    
    
      <category term="Android" scheme="http://zhoutao822.coding.me/tags/Android/"/>
    
      <category term="Material" scheme="http://zhoutao822.coding.me/tags/Material/"/>
    
      <category term="BottomSheetDialog" scheme="http://zhoutao822.coding.me/tags/BottomSheetDialog/"/>
    
      <category term="ViewPager" scheme="http://zhoutao822.coding.me/tags/ViewPager/"/>
    
      <category term="RecyclerView" scheme="http://zhoutao822.coding.me/tags/RecyclerView/"/>
    
  </entry>
  
  <entry>
    <title>正则式</title>
    <link href="http://zhoutao822.coding.me/archives/75276563.html"/>
    <id>http://zhoutao822.coding.me/archives/75276563.html</id>
    <published>2019-06-13T11:37:03.000Z</published>
    <updated>2020-01-17T15:07:46.298Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><blockquote><p><a href="https://www.liaoxuefeng.com/wiki/897692888725344/923056128128864" target="_blank" rel="noopener">正则表达式-廖雪峰</a></p></blockquote><blockquote><p>1.用<code>\d</code>可以匹配一个数字，<code>\w</code>可以匹配一个字母或数字，所以：</p></blockquote><ul><li><p><code>'00\d'</code>可以匹配<code>'007'</code>，但无法匹配<code>'00A'</code>；</p></li><li><p><code>'\d\d\d'</code>可以匹配<code>'010'</code>；</p></li><li><p><code>'\w\w\d'</code>可以匹配<code>'py3'</code>；</p></li></ul><blockquote><p>2.<code>.</code>可以匹配任意字符，所以：</p></blockquote><ul><li><code>'py.'</code>可以匹配<code>'pyc'</code>、<code>'pyo'</code>、<code>'py!'</code>等等。</li></ul><blockquote><p>3.用<code>*</code>表示任意个字符（包括0个），用<code>+</code>表示至少一个字符，用<code>?</code>表示0个或1个字符，用<code>{n}</code>表示n个字符，用<code>{n,m}</code>表示n-m个字符：</p></blockquote><p>来看一个复杂的例子：<code>\d{3}\s+\d{3,8}</code></p><ul><li><p><code>\d{3}</code>表示匹配3个数字，例如<code>'010'</code>；</p></li><li><p><code>\s</code>可以匹配一个空格（也包括Tab等空白符），所以<code>\s+</code>表示至少有一个空格，例如匹配<code>' '</code>，<code>' '</code>等；</p></li><li><p><code>\d{3,8}</code>表示3-8个数字，例如<code>'1234567'</code>。</p></li></ul><a id="more"></a><h2 id="1-进阶"><a class="markdownIt-Anchor" href="#1-进阶"></a> 1. 进阶</h2><p>要做更精确地匹配，可以用<code>[]</code>表示范围，比如：</p><p><code>[0-9a-zA-Z\_]</code>可以匹配一个数字、字母或者下划线；</p><p><code>[0-9a-zA-Z\_]+</code>可以匹配至少由一个数字、字母或者下划线组成的字符串，比如<code>'a100'</code>，<code>'0_Z'</code>，<code>'Py3000'</code>等等；</p><p><code>[a-zA-Z\_][0-9a-zA-Z\_]*</code>可以匹配由字母或下划线开头，后接任意个由一个数字、字母或者下划线组成的字符串，也就是Python合法的变量；</p><p><code>[a-zA-Z\_][0-9a-zA-Z\_]{0, 19}</code>更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）。</p><p><code>A|B</code>可以匹配A或B，所以<code>(P|p)ython</code>可以匹配<code>'Python'</code>或者<code>'python'</code>。</p><p><code>^</code>表示行的开头，<code>^\d</code>表示必须以数字开头。</p><p><code>$</code>表示行的结束，<code>\d$</code>表示必须以数字结束。</p><p>你可能注意到了，<code>^py</code>也可以匹配<code>'python'</code>，但是加上<code>^py$</code>就变成了整行匹配，就只能匹配<code>'py'</code>了。</p><h2 id="2-re"><a class="markdownIt-Anchor" href="#2-re"></a> 2. re</h2><p>强烈建议使用Python的r前缀，就不用考虑转义的问题了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">r'ABC\-001'</span> <span class="comment"># Python的字符串</span></span><br><span class="line"><span class="comment"># 对应的正则表达式字符串不变：</span></span><br><span class="line"><span class="comment"># 'ABC\-001'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">r'^\d&#123;3&#125;\-\d&#123;3,8&#125;$'</span>, <span class="string">'010-12345'</span>)</span><br><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">9</span>), match=<span class="string">'010-12345'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">r'^\d&#123;3&#125;\-\d&#123;3,8&#125;$'</span>, <span class="string">'010 12345'</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p><code>match()</code>方法判断是否匹配，如果匹配成功，返回一个<code>Match</code>对象，否则返回<code>None</code>。常见的判断方法就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test = <span class="string">'用户输入的字符串'</span></span><br><span class="line"><span class="keyword">if</span> re.match(<span class="string">r'正则表达式'</span>, test):</span><br><span class="line">    print(<span class="string">'ok'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'failed'</span>)</span><br></pre></td></tr></table></figure><h2 id="3-切分字符串"><a class="markdownIt-Anchor" href="#3-切分字符串"></a> 3. 切分字符串</h2><p>用正则表达式切分字符串比用固定的字符更灵活，请看正常的切分代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'a b   c'</span>.split(<span class="string">' '</span>)</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">'c'</span>]</span><br></pre></td></tr></table></figure><p>嗯，无法识别连续的空格，用正则表达式试试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">r'\s+'</span>, <span class="string">'a b   c'</span>)</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br></pre></td></tr></table></figure><p>无论多少个空格都可以正常分割。加入<code>,</code>试试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">r'[\s\,]+'</span>, <span class="string">'a,b, c  d'</span>)</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br></pre></td></tr></table></figure><p>再加入<code>;</code>试试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">r'[\s\,\;]+'</span>, <span class="string">'a,b;; c  d'</span>)</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br></pre></td></tr></table></figure><h2 id="4-分组"><a class="markdownIt-Anchor" href="#4-分组"></a> 4. 分组</h2><p>除了简单地判断是否匹配之外，正则表达式还有提取子串的强大功能。用()表示的就是要提取的分组（Group）。比如：</p><p><code>^(\d{3})-(\d{3,8})$</code>分别定义了两个组，可以直接从匹配的字符串中提取出区号和本地号码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = re.match(<span class="string">r'^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$'</span>, <span class="string">'010-12345'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m</span><br><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">9</span>), match=<span class="string">'010-12345'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">0</span>)</span><br><span class="line"><span class="string">'010-12345'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">1</span>)</span><br><span class="line"><span class="string">'010'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">2</span>)</span><br><span class="line"><span class="string">'12345'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = <span class="string">'19:05:30'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = re.match(<span class="string">r'^(0[0-9]|1[0-9]|2[0-3]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])$'</span>, t)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.groups()</span><br><span class="line">(<span class="string">'19'</span>, <span class="string">'05'</span>, <span class="string">'30'</span>)</span><br></pre></td></tr></table></figure><p>这个正则表达式可以直接识别合法的时间。但是有些时候，用正则表达式也无法做到完全验证，比如识别日期：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'^(0[1-9]|1[0-2]|[0-9])-(0[1-9]|1[0-9]|2[0-9]|3[0-1]|[0-9])$'</span></span><br></pre></td></tr></table></figure><p>对于<code>'2-30'</code>，<code>'4-31'</code>这样的非法日期，用正则还是识别不了，或者说写出来非常困难，这时就需要程序配合识别了。</p><h2 id="5-贪婪匹配"><a class="markdownIt-Anchor" href="#5-贪婪匹配"></a> 5. 贪婪匹配</h2><p>最后需要特别指出的是，正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。举例如下，匹配出数字后面的0：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">r'^(\d+)(0*)$'</span>, <span class="string">'102300'</span>).groups()</span><br><span class="line">(<span class="string">'102300'</span>, <span class="string">''</span>)</span><br></pre></td></tr></table></figure><p>由于<code>\d+</code>采用贪婪匹配，直接把后面的0全部匹配了，结果<code>0*</code>只能匹配空字符串了。</p><p>必须让<code>\d+</code>采用非贪婪匹配（也就是尽可能少匹配），才能把后面的0匹配出来，加个<code>?</code>就可以让<code>\d+</code>采用非贪婪匹配：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">r'^(\d+?)(0*)$'</span>, <span class="string">'102300'</span>).groups()</span><br><span class="line">(<span class="string">'1023'</span>, <span class="string">'00'</span>)</span><br></pre></td></tr></table></figure><h2 id="6-编译"><a class="markdownIt-Anchor" href="#6-编译"></a> 6. 编译</h2><p>当我们在Python中使用正则表达式时，re模块内部会干两件事情：</p><ol><li><p>编译正则表达式，如果正则表达式的字符串本身不合法，会报错；</p></li><li><p>用编译后的正则表达式去匹配字符串。</p></li></ol><p>如果一个正则表达式要重复使用几千次，出于效率的考虑，我们可以预编译该正则表达式，接下来重复使用时就不需要编译这个步骤了，直接匹配：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># 编译:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re_telephone = re.compile(<span class="string">r'^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$'</span>)</span><br><span class="line"><span class="comment"># 使用：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re_telephone.match(<span class="string">'010-12345'</span>).groups()</span><br><span class="line">(<span class="string">'010'</span>, <span class="string">'12345'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re_telephone.match(<span class="string">'010-8086'</span>).groups()</span><br><span class="line">(<span class="string">'010'</span>, <span class="string">'8086'</span>)</span><br></pre></td></tr></table></figure><p>编译后生成Regular Expression对象，由于该对象自己包含了正则表达式，所以调用对应的方法时不用给出正则字符串。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/897692888725344/923056128128864&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;正则表达式-廖雪峰&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;1.用&lt;code&gt;\d&lt;/code&gt;可以匹配一个数字，&lt;code&gt;\w&lt;/code&gt;可以匹配一个字母或数字，所以：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&#39;00\d&#39;&lt;/code&gt;可以匹配&lt;code&gt;&#39;007&#39;&lt;/code&gt;，但无法匹配&lt;code&gt;&#39;00A&#39;&lt;/code&gt;；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&#39;\d\d\d&#39;&lt;/code&gt;可以匹配&lt;code&gt;&#39;010&#39;&lt;/code&gt;；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&#39;\w\w\d&#39;&lt;/code&gt;可以匹配&lt;code&gt;&#39;py3&#39;&lt;/code&gt;；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;2.&lt;code&gt;.&lt;/code&gt;可以匹配任意字符，所以：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#39;py.&#39;&lt;/code&gt;可以匹配&lt;code&gt;&#39;pyc&#39;&lt;/code&gt;、&lt;code&gt;&#39;pyo&#39;&lt;/code&gt;、&lt;code&gt;&#39;py!&#39;&lt;/code&gt;等等。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;3.用&lt;code&gt;*&lt;/code&gt;表示任意个字符（包括0个），用&lt;code&gt;+&lt;/code&gt;表示至少一个字符，用&lt;code&gt;?&lt;/code&gt;表示0个或1个字符，用&lt;code&gt;{n}&lt;/code&gt;表示n个字符，用&lt;code&gt;{n,m}&lt;/code&gt;表示n-m个字符：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;来看一个复杂的例子：&lt;code&gt;\d{3}\s+\d{3,8}&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;\d{3}&lt;/code&gt;表示匹配3个数字，例如&lt;code&gt;&#39;010&#39;&lt;/code&gt;；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;\s&lt;/code&gt;可以匹配一个空格（也包括Tab等空白符），所以&lt;code&gt;\s+&lt;/code&gt;表示至少有一个空格，例如匹配&lt;code&gt;&#39; &#39;&lt;/code&gt;，&lt;code&gt;&#39; &#39;&lt;/code&gt;等；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;\d{3,8}&lt;/code&gt;表示3-8个数字，例如&lt;code&gt;&#39;1234567&#39;&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Tips" scheme="http://zhoutao822.coding.me/categories/Tips/"/>
    
    
      <category term="Regex" scheme="http://zhoutao822.coding.me/tags/Regex/"/>
    
  </entry>
  
  <entry>
    <title>VSCode搭建LaTeX论文写作环境</title>
    <link href="http://zhoutao822.coding.me/archives/212d026f.html"/>
    <id>http://zhoutao822.coding.me/archives/212d026f.html</id>
    <published>2019-06-12T12:46:05.000Z</published>
    <updated>2020-01-19T03:40:05.095Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><blockquote><p><a href="https://github.com/ustctug/ustcthesis" target="_blank" rel="noopener">中国科学技术大学学位论文 LaTeX 模板</a></p></blockquote><blockquote><p><a href="https://blog.csdn.net/yinqingwang/article/details/79684419" target="_blank" rel="noopener">论文写作的又一利器：VSCode + LaTeX Workshop + MikTex + Git</a></p></blockquote><blockquote><p><a href="https://miktex.org/" target="_blank" rel="noopener">MikTeX</a></p></blockquote><blockquote><p><a href="https://www.tug.org/mactex/" target="_blank" rel="noopener">MacTeX</a></p></blockquote><blockquote><p><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">VSCode</a></p></blockquote><h2 id="windows环境"><a class="markdownIt-Anchor" href="#windows环境"></a> Windows环境</h2><h3 id="1-安装latex发行版"><a class="markdownIt-Anchor" href="#1-安装latex发行版"></a> 1. 安装LaTeX发行版</h3><p>在Windows下我选择的是MikTeX，Mac下选择的是MacTex，这个LaTeX发行版相当于一个开发工具包，你需要的编译器以及某些资源文件都包含在这个包里面，安装完成后可以通过命令行启用。</p><p>在Windows下MikTeX的安装教程链接为<a href="https://miktex.org/howto/install-miktex" target="_blank" rel="noopener">Install MiKTeX on Windows</a>，链接里也给出了安装包的地址<a href="https://miktex.org/download" target="_blank" rel="noopener">Basic MiKTeX Installer</a>，安装完成后打开 MiKTeX Console 更新package。目前这个阶段还不需要安装额外的package，这个我们可以等到编译论文的时候再下载。</p><a id="more"></a><h3 id="2-vscode安装与参数设置"><a class="markdownIt-Anchor" href="#2-vscode安装与参数设置"></a> 2. VSCode安装与参数设置</h3><p>VSCode的安装没什么可说的，完成后需要在<strong>扩展</strong>中搜索<code>latex</code>，就可以找到需要的插件<code>LaTeX Workshop</code>，安装完成后需要配置一些参数，在设置中搜索<code>latex</code>，打开<code>settings.json</code>，加入以下参数</p><!--  --><p><img src="http://114.116.9.65:7777/images/2020/01/19/latex-workshop.png" alt="latex-workshop.png" /></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">"latex-workshop.view.pdf.viewer": "tab",</span><br><span class="line">"latex-workshop.latex.recipes": [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"latexmk"</span>,</span><br><span class="line">        <span class="attr">"tools"</span>: [</span><br><span class="line">            <span class="string">"latexmk"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"pdflatex"</span>,</span><br><span class="line">        <span class="attr">"tools"</span>: [</span><br><span class="line">            <span class="string">"pdflatex"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"pdflatex -&gt; bibtex -&gt; pdflatex*2"</span>,</span><br><span class="line">        <span class="attr">"tools"</span>: [</span><br><span class="line">            <span class="string">"pdflatex"</span>,</span><br><span class="line">            <span class="string">"bibtex"</span>,</span><br><span class="line">            <span class="string">"pdflatex"</span>,</span><br><span class="line">            <span class="string">"pdflatex"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line">"latex-workshop.latex.tools": [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"xelatex"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"xelatex"</span>,</span><br><span class="line">        <span class="attr">"args"</span>: [</span><br><span class="line">            <span class="string">"-synctex=1"</span>,</span><br><span class="line">            <span class="string">"-interaction=nonstopmode"</span>,</span><br><span class="line">            <span class="string">"-file-line-error"</span>,</span><br><span class="line">            <span class="string">"%DOC%"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"pdflatex"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"pdflatex"</span>,</span><br><span class="line">        <span class="attr">"args"</span>: [</span><br><span class="line">            <span class="string">"-synctex=1"</span>,</span><br><span class="line">            <span class="string">"-interaction=nonstopmode"</span>,</span><br><span class="line">            <span class="string">"-file-line-error"</span>,</span><br><span class="line">            <span class="string">"%DOC%"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"latexmk"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"latexmk"</span>,</span><br><span class="line">        <span class="attr">"args"</span>: [</span><br><span class="line">            <span class="string">"-xelatex"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"bibtex"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"bibtex"</span>,</span><br><span class="line">        <span class="attr">"args"</span>: [</span><br><span class="line">            <span class="string">"%DOCFILE%"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line">"latex-workshop.latex.autoBuild.run": "never",</span><br><span class="line">"latex-workshop.latex.autoClean.run": "never",</span><br><span class="line">"latex-workshop.latex.clean.fileTypes": [</span><br><span class="line">        "*.aux",</span><br><span class="line">        "*.bbl",</span><br><span class="line">        "*.blg",</span><br><span class="line">        "*.idx",</span><br><span class="line">        "*.ind",</span><br><span class="line">        "*.lof",</span><br><span class="line">        "*.lot",</span><br><span class="line">        "*.out",</span><br><span class="line">        "*.toc",</span><br><span class="line">        "*.acn",</span><br><span class="line">        "*.acr",</span><br><span class="line">        "*.alg",</span><br><span class="line">        "*.glg",</span><br><span class="line">        "*.glo",</span><br><span class="line">        "*.gls",</span><br><span class="line">        "*.ist",</span><br><span class="line">        "*.fls",</span><br><span class="line">        "*.log",</span><br><span class="line">        "*.xdv",</span><br><span class="line">        "*.fdb_latexmk",</span><br><span class="line">        <span class="string">"*.synctex.gz"</span></span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><p>参数说明：</p><ol><li><code>latex-workshop.view.pdf.viewer</code>设置为<code>tab</code>可以在VSCode里查看生成的pdf文件，你也可以选择其他方式；</li><li><code>latex-workshop.latex.tools</code>定义你可能需要用到的编译工具，比如<code>latexmk</code>、<code>xelatex</code>、<code>pdflatex</code>等等，这里定义的工具才可以在<code>latex-workshop.latex.recipes</code>里使用，<strong>这里<code>latexmk</code>的参数被修改为<code>-xelatex</code>，与Github上相同</strong>，我这里加入了很多的工具，并不一定全都要用；</li><li><code>latex-workshop.latex.recipes</code>定义编译方式，比如<code>latexmk</code>、<code>pdflatex -&gt; bibtex -&gt; pdflatex*2</code>，这里同上，也并不一定全都要用，不同的编译方式会导致最终生成的pdf文件内容存在差异，使用<code>latexmk</code>以外的编译工具编译<a href="https://github.com/ustctug/ustcthesis" target="_blank" rel="noopener">中国科学技术大学学位论文 LaTeX 模板</a>可能会导致pdf中丢失目录以及文献列表等内容，在这里定义的编译方式会在后面显示在VSCode的选项中；</li><li><code>latex-workshop.latex.autoBuild.run</code>设置为<code>never</code>是为了避免每次修改完<code>tex</code>文件后自动编译，也可以不设置此参数；</li><li><code>latex-workshop.latex.autoClean.run</code>设置为<code>never</code>是为了避免自动清理编译过程产生的临时文件，这里会有一些log文件，也可以不设置此参数。</li><li><code>latex-workshop.latex.clean.fileTypes</code>设置需要清理临时文件类型，以各种后缀表示，有些文件可能不需要清理，这个需要自行判断。</li></ol><h3 id="3-编译论文模板"><a class="markdownIt-Anchor" href="#3-编译论文模板"></a> 3. 编译论文模板</h3><p>在<a href="https://github.com/ustctug/ustcthesis" target="_blank" rel="noopener">中国科学技术大学学位论文 LaTeX 模板</a>下载release文件<a href="https://github.com/ustctug/ustcthesis/releases/download/v3.1.06/ustcthesis-v3.1.06.zip" target="_blank" rel="noopener">ustcthesis-v3.1.06.zip</a>，这里面有模板以及样例文件。</p><p>文件目录大概如下图，里面某些pdf和tex文件可能不同，但不重要</p><!--  --><p><img src="http://114.116.9.65:7777/images/2020/01/19/ustcthesis.png" alt="ustcthesis.png" /></p><p>用VSCode打开模板文件，并打开<code>main.tex</code>文件，这里可以先把<code>main.pdf</code>重命名一下，此时如果之前的步骤都是对的，那么VSCode的左下角会有一个勾的图标，点击后应该如下图</p><!--  --><p><img src="http://114.116.9.65:7777/images/2020/01/19/recipe.png" alt="recipe.png" /></p><p>这里会发现之前设置参数时加入的<code>recipe</code>都显示出来，中国科学技术大学学位论文 LaTeX 模板 需要用<code>latexmk</code>编译，所以直接双击<code>Recipe: latexmk</code>编译<code>main.tex</code>，生成<code>main.pdf</code>文件，在编译过程中会提示你缺少某些package，这些package里面有需要的一些样式文件，类似于CSS，弹出的窗口来自于<code>MikTeX Console</code>，点击确定下载即可，可能会需要点很多次，当所有需要的package下载完成后编译也可以继续下去，最后比对一下生成的<code>main.pdf</code>文件内容与重命名之前的<code>main.pdf</code>，看看有没有缺失或者显示不对的地方，如果有，再查找原因，一般来说问题出在缺少某些package。如果需要清理生成的临时文件只需要双击<code>Clean up</code>即可。</p><p>这是我生成的pdf文件截图，第一张图我修改为<code>硕士</code>，第二张图生成当前时间。</p><!--  --><p><img src="http://114.116.9.65:7777/images/2020/01/19/1.png" alt="1.png" /></p><!--  --><p><img src="http://114.116.9.65:7777/images/2020/01/19/2.png" alt="2.png" /></p><h2 id="mac环境"><a class="markdownIt-Anchor" href="#mac环境"></a> Mac环境</h2><h3 id="1-安装latex发行版-2"><a class="markdownIt-Anchor" href="#1-安装latex发行版-2"></a> 1. 安装LaTeX发行版</h3><p>在Mac下选择的安装<a href="https://www.tug.org/mactex/" target="_blank" rel="noopener">MacTeX</a>，而MacTeX有几个不同的安装包，一个是<code>MacTeX.pkg</code>，大概3.9G，还有一个是<code>BasicTeX.pkg</code>，大概76M，区别在于前者包括了GUI，大概有4个工具配合使用，后者没有GUI仅提供命令行工具，这里我选择了后者，前者应该也没有区别。</p><p>命令行工具为<code>tlmgr</code>，我在运行时需要加<code>sudo</code>，应该是安装路径对一般用户不可写。</p><p>然后需要使用<code>tlmgr</code>安装一些package，我们先设置一下镜像源加速下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 这是清华镜像源，也可以使用科大镜像源http://mirrors.ustc.edu.cn/CTAN/systems/texlive/tlnet</span></span><br><span class="line">tlmgr option repository https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/tlnet</span><br></pre></td></tr></table></figure><p>然后更新自己和所有的package</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tlmgr update --self --all</span><br></pre></td></tr></table></figure><p>最后需要下载<code>latexmk</code>包，Windows不需要应该是MikTeX中已经包含了这个包，而Mac下<code>BasicTeX</code>没有包含，所以需要自己下载。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tlmgr install latexmk</span><br></pre></td></tr></table></figure><h3 id="2-vscode安装与参数设置-2"><a class="markdownIt-Anchor" href="#2-vscode安装与参数设置-2"></a> 2. VSCode安装与参数设置</h3><p>安装配置同Windows。</p><h3 id="3-编译论文模板-2"><a class="markdownIt-Anchor" href="#3-编译论文模板-2"></a> 3. 编译论文模板</h3><p>在Mac上使用<code>latexmk -xelatex main.tex</code>会失败，而且<strong>系统不会像Windows那样提示你需要下载哪些package，每次失败都会告诉你缺少哪个文件，这个在log中是可以看到的，一般来说在<a href="https://www.ctan.org/" target="_blank" rel="noopener">CTAN官网</a><em>搜索缺少的文件</em>就可以知道需要下载哪个package</strong>。</p><p>下载package的代码为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> package_name为包名，比如可能有siunitx...</span></span><br><span class="line">sudo tlmgr install package_name</span><br></pre></td></tr></table></figure><p>这些下载的package是可以在<code>/usr/local/texlive/2019basic/texmf-dist/tex/latex</code>下找到的，我的可以正确运行科大LaTeX模板的package截图如下，不想一个一个搜索的可以直接对照下载缺少的package。</p><!--  --><p><img src="http://114.116.9.65:7777/images/2020/01/19/3.png" alt="3.png" /></p><p>最后同上测试一下能否正确生成pdf文件。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ustctug/ustcthesis&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;中国科学技术大学学位论文 LaTeX 模板&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/yinqingwang/article/details/79684419&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;论文写作的又一利器：VSCode + LaTeX Workshop + MikTex + Git&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://miktex.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MikTeX&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.tug.org/mactex/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MacTeX&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://code.visualstudio.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;VSCode&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;windows环境&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#windows环境&quot;&gt;&lt;/a&gt; Windows环境&lt;/h2&gt;
&lt;h3 id=&quot;1-安装latex发行版&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-安装latex发行版&quot;&gt;&lt;/a&gt; 1. 安装LaTeX发行版&lt;/h3&gt;
&lt;p&gt;在Windows下我选择的是MikTeX，Mac下选择的是MacTex，这个LaTeX发行版相当于一个开发工具包，你需要的编译器以及某些资源文件都包含在这个包里面，安装完成后可以通过命令行启用。&lt;/p&gt;
&lt;p&gt;在Windows下MikTeX的安装教程链接为&lt;a href=&quot;https://miktex.org/howto/install-miktex&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Install MiKTeX on Windows&lt;/a&gt;，链接里也给出了安装包的地址&lt;a href=&quot;https://miktex.org/download&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Basic MiKTeX Installer&lt;/a&gt;，安装完成后打开 MiKTeX Console 更新package。目前这个阶段还不需要安装额外的package，这个我们可以等到编译论文的时候再下载。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tips" scheme="http://zhoutao822.coding.me/categories/Tips/"/>
    
    
      <category term="VSCode" scheme="http://zhoutao822.coding.me/tags/VSCode/"/>
    
      <category term="LaTeX" scheme="http://zhoutao822.coding.me/tags/LaTeX/"/>
    
      <category term="Windows" scheme="http://zhoutao822.coding.me/tags/Windows/"/>
    
      <category term="Mac" scheme="http://zhoutao822.coding.me/tags/Mac/"/>
    
      <category term="MacTeX" scheme="http://zhoutao822.coding.me/tags/MacTeX/"/>
    
      <category term="MikTeX" scheme="http://zhoutao822.coding.me/tags/MikTeX/"/>
    
  </entry>
  
  <entry>
    <title>深度学习-深度学习中的结构化概率模型</title>
    <link href="http://zhoutao822.coding.me/archives/e4c77c8d.html"/>
    <id>http://zhoutao822.coding.me/archives/e4c77c8d.html</id>
    <published>2019-03-17T15:17:30.000Z</published>
    <updated>2020-01-17T15:07:46.297Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><blockquote><p><a href="https://github.com/exacity/deeplearningbook-chinese" target="_blank" rel="noopener">《深度学习》第16章 深度学习中的结构化概率模型</a></p></blockquote><p><strong>结构化概率模型</strong>使用图来描述概率分布中随机变量之间的直接相互作用，从而描述一个概率分布。所以也被称为<strong>图模型</strong>。</p><p>图模型中的一个主要难点就是判断哪些变量之间存在直接的相互作用关系，也就是对于给定的问题哪一种图结构是最适合的。</p><h2 id="1-非结构化建模的挑战"><a class="markdownIt-Anchor" href="#1-非结构化建模的挑战"></a> 1. 非结构化建模的挑战</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/exacity/deeplearningbook-chinese&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《深度学习》第16章 深度学习中的结构化
      
    
    </summary>
    
    
      <category term="Deep Learning" scheme="http://zhoutao822.coding.me/categories/Deep-Learning/"/>
    
    
      <category term="Theory" scheme="http://zhoutao822.coding.me/tags/Theory/"/>
    
  </entry>
  
</feed>
