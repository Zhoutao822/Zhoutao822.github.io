<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker-Ubuntu服务器安装Seafile私人网盘</title>
    <url>/archives/2.9125e+72.html</url>
    <content><![CDATA[<p>参考：</p>
<blockquote>
<p><a href="https://cloud.seafile.com/published/seafile-manual-cn/docker/%E7%94%A8Docker%E9%83%A8%E7%BD%B2Seafile.md" target="_blank" rel="noopener">用 Docker 部署 Seafile 服务</a></p>
</blockquote>
<p>Seafile 是一款开源的企业云盘，注重可靠性和性能。支持 Windows, Mac, Linux, iOS, Android 平台。支持文件同步或者直接挂载到本地访问。</p>
<a id="more"></a>
<h2 id="1-Ubuntu服务器安装docker"><a href="#1-Ubuntu服务器安装docker" class="headerlink" title="1. Ubuntu服务器安装docker"></a>1. Ubuntu服务器安装docker</h2><p>参考<a href="https://mr7ldu.coding-pages.com/archives/44250e0e.html" target="_blank" rel="noopener">Docker-Ubuntu服务器安装Chevereto图床</a></p>
<h2 id="2-配置docker-compose"><a href="#2-配置docker-compose" class="headerlink" title="2. 配置docker-compose"></a>2. 配置docker-compose</h2><p>首先在根目录下创建一个隐藏文件夹<code>.seafile</code>存放我们的配置文件以及挂载的数据卷，进入<code>.seafile</code>目录，并新建一个<code>docker-compose.yml</code>文件，<code>docker-compose.yml</code>内容如下，需要自行配置管理员账号和密码（<strong>尽量不要修改80:80端口映射，我修改为其他端口号会导致拒绝访问</strong>），<code>seafile-mysql、seafile-data</code>启动后会自动生成：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2.0'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mariadb:10.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">seafile-mysql</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=root</span>  <span class="comment"># Requested, set the root's password of MySQL service.</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_LOG_CONSOLE=true</span></span><br><span class="line">    <span class="comment"># 挂载容器mysql数据到本地文件夹seafile-mysql</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./seafile-mysql:/var/lib/mysql</span>  <span class="comment"># Requested, specifies the path to MySQL data persistent store.</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">seafile-net</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">memcached:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">memcached:1.5.6</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">seafile-memcached</span></span><br><span class="line">    <span class="attr">entrypoint:</span> <span class="string">memcached</span> <span class="string">-m</span> <span class="number">256</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">seafile-net</span></span><br><span class="line">          </span><br><span class="line">  <span class="attr">seafile:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">seafileltd/seafile-mc</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">seafile</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"80:80"</span></span><br><span class="line">      <span class="comment"># - "443:443"  # If https is enabled, cancel the comment.</span></span><br><span class="line">    <span class="comment"># 挂载云盘数据到本地文件夹seafile-data</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./seafile-data:/shared</span>   <span class="comment"># Requested, specifies the path to Seafile data persistent store.</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_HOST=db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_ROOT_PASSWD=root</span>  <span class="comment"># Requested, the value shuold be root's password of MySQL service.</span></span><br><span class="line">        <span class="comment">#- TIME_ZONE=Asia/Shanghai # Optional, default is UTC. Should be uncomment and set to your local time zone.</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SEAFILE_ADMIN_EMAIL=aaa@aaa.com</span> <span class="comment"># Specifies Seafile admin user, default is 'me@example.com'.</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SEAFILE_ADMIN_PASSWORD=password</span>     <span class="comment"># Specifies Seafile admin password, default is 'asecret'.</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SEAFILE_SERVER_LETSENCRYPT=false</span>   <span class="comment"># Whether use letsencrypt to generate cert.</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SEAFILE_SERVER_HOSTNAME=175.24.47.141</span> <span class="comment"># Specifies your host name.</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">memcached</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">seafile-net</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">seafile-net:</span></span><br></pre></td></tr></table></figure>
<p>不用修改权限，最后启动<code>docker-compose up -d</code>，然后就可以通过IP+端口号（如果配置了域名也可以用域名）访问seafile云盘了（<strong>应该只能通过http访问，https是不可以的，除非配置过</strong>）。首次登录如下：</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/seafile1.png" alt="seafile1.png"><br>测试上传文件</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/seafile2.png" alt="seafile2.png"></p>
<h2 id="3-数据迁移"><a href="#3-数据迁移" class="headerlink" title="3. 数据迁移"></a>3. 数据迁移</h2><p>同理，上面我们的<code>seafile-mysql</code>文件夹保存的是我们的账号信息等等，<code>seafile-data</code>保存了我们上传的文件数据、日志信息，如果我们需要从当前服务器迁移到另一个服务器只需要保存好<code>.seafile</code>中的所有内容，然后全部放到另一个服务器的<code>.seafile</code>目录中，不用设置权限，然后安装<code>docker</code>和<code>docker-compose</code>，然后执行<code>docker-compose up -d</code>就可以直接运行，我们的数据也会一起同步过来。</p>
<h2 id="4-启动seafile容器出错"><a href="#4-启动seafile容器出错" class="headerlink" title="4. 启动seafile容器出错"></a>4. 启动seafile容器出错</h2><p>如果启动seafile容器后无法访问，需要重新配置时，<strong>务必先执行<code>docker-compose kill</code>和<code>docker-compose rm</code>停止并删除容器，再删除掉<code>seafile-mysql</code>和<code>seafile-data</code>两个文件夹</strong>，之后再重新启动<code>docker-compose up -d</code>。</p>
]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Seafile</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-Ubuntu服务器安装Chevereto图床</title>
    <url>/archives/44250e0e.html</url>
    <content><![CDATA[<p>参考：</p>
<blockquote>
<p><a href="https://hub.docker.com/r/nmtan/chevereto/" target="_blank" rel="noopener">Chevereto Free Docker</a><br><a href="https://zealot.top/%E4%BD%BF%E7%94%A8Docker%E8%BD%BB%E6%9D%BE%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8Achevereto.html" target="_blank" rel="noopener">使用Docker轻松搭建个人图床chevereto</a></p>
</blockquote>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/chevereto4.png" alt="chevereto4.png"><br><a id="more"></a></p>
<h2 id="1-Ubuntu服务器安装docker"><a href="#1-Ubuntu服务器安装docker" class="headerlink" title="1. Ubuntu服务器安装docker"></a>1. Ubuntu服务器安装docker</h2><p><strong>强烈建议在ubuntu上使用apt安装docker，brew安装docker会出现很多问题</strong></p>
<p>需要安装两个关键包<code>docker</code>和<code>docker-compose</code>，前者是docker容器，后者是一个可以根据<code>docker-compose.yml</code>配置文件快速部署docker应用的软件，后续会使用到。</p>
<p>使用<code>sudo apt install docker.io</code>以及<code>sudo apt install docker-compose</code>安装（如果你想尝试使用brew也可以按照以下方式使用）。</p>
<p>首先查看一下docker相关包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ubuntu@VM-0-9-ubuntu ~ brew search docker</span><br><span class="line">==&gt; Formulae</span><br><span class="line">docker                             docker-ls                          docker-machine-parallels</span><br><span class="line">docker-clean                       docker-machine                     docker-slim</span><br><span class="line">docker-completion                  docker-machine-completion          docker-squash</span><br><span class="line">docker-compose                     docker-machine-driver-hyperkit     docker-swarm</span><br><span class="line">docker-compose-completion          docker-machine-driver-vmware       docker2aci</span><br><span class="line">docker-credential-helper           docker-machine-driver-vultr        dockerize</span><br><span class="line">docker-credential-helper-ecr       docker-machine-driver-xhyve        lazydocker</span><br><span class="line">docker-gen                         docker-machine-nfs</span><br><span class="line"></span><br><span class="line">==&gt; Casks</span><br><span class="line">homebrew/cask-versions/docker-edge                   homebrew/cask/docker-toolbox</span><br><span class="line">homebrew/cask/docker</span><br></pre></td></tr></table></figure>
<p>执行<code>brew install docker</code>以及<code>brew install docker-compose</code></p>
<p>安装完成查看版本信息并<strong>开启docker服务<code>sudo systemctl stop docker</code></strong>，然后可以执行<code>docker run hello-world</code>测试docker是否可以正常运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ubuntu@VM-0-9-ubuntu ~ docker-compose -v</span><br><span class="line">docker-compose version 1.25.1, build unknown</span><br><span class="line">ubuntu@VM-0-9-ubuntu ~ docker -v        </span><br><span class="line">Docker version 19.03.5, build 633a0ea</span><br><span class="line">ubuntu@VM-0-9-ubuntu ~ sudo systemctl stop docker</span><br><span class="line"></span><br><span class="line">ubuntu@VM-0-9-ubuntu ~ docker run hello-world</span><br><span class="line">Unable to find image 'hello-world:latest' locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">1b930d010525: Pull complete </span><br><span class="line">Digest: sha256:d1668a9a1f5b42ed3f46b70b9cb7c88fd8bdc8a2d73509bb0041cf436018fbf5</span><br><span class="line">Status: Downloaded newer image for hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br></pre></td></tr></table></figure>
<h2 id="2-配置docker-compose"><a href="#2-配置docker-compose" class="headerlink" title="2. 配置docker-compose"></a>2. 配置docker-compose</h2><p>Chevereto支持通过docker部署，这样方便进行管理而且不会影响服务器环境，数据保存和导入也更加方便。使用<code>docker-compose</code>可以快速部署，并且配置一些数据卷挂载以及依赖容器等等。</p>
<p>首先在根目录下创建一个隐藏文件夹<code>.chevereto</code>存放我们的配置文件以及挂载的数据卷，进入<code>.chevereto</code>目录，并新建一个<code>docker-compose.yml</code>文件，以及三个文件夹<code>chevereto_images、conf、database</code>，<code>docker-compose.yml</code>内容如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mariadb</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">chevereto-mysql</span></span><br><span class="line">    <span class="comment"># 挂载容器中的mysql数据卷到本地database文件夹</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./database:/var/lib/mysql:rw</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">chevereto-net</span></span><br><span class="line">    <span class="comment"># 设置容器中的mysql的root用户密码以及其他用户</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">chevereto</span></span><br><span class="line">      <span class="attr">MYSQL_USER:</span> <span class="string">chevereto</span></span><br><span class="line">      <span class="attr">MYSQL_PASSWORD:</span> <span class="string">chevereto</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">chevereto:</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nmtan/chevereto</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">chevereto</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">chevereto-net</span></span><br><span class="line">    <span class="comment"># 设置CHEVERETO_DB的一些参数</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">CHEVERETO_DB_HOST:</span> <span class="string">db</span></span><br><span class="line">      <span class="attr">CHEVERETO_DB_USERNAME:</span> <span class="string">chevereto</span></span><br><span class="line">      <span class="attr">CHEVERETO_DB_PASSWORD:</span> <span class="string">chevereto</span></span><br><span class="line">      <span class="attr">CHEVERETO_DB_NAME:</span> <span class="string">chevereto</span></span><br><span class="line">      <span class="attr">CHEVERETO_DB_PREFIX:</span> <span class="string">chv_</span></span><br><span class="line">    <span class="comment"># 挂载容器中的images文件夹到本地的chevereto_images文件夹，以及</span></span><br><span class="line">    <span class="comment"># 将本地的conf/upload.ini配置文件挂载到容器的/usr/local/etc/php/conf.d/中</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./chevereto_images:/var/www/html/images:rw</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf/upload.ini:/usr/local/etc/php/conf.d/upload.ini:ro</span></span><br><span class="line">    <span class="comment"># 端口映射，本机:容器，需要配置安全组</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">7777</span><span class="string">:80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">chevereto-net:</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">database:</span></span><br><span class="line">  <span class="attr">chevereto_images:</span></span><br></pre></td></tr></table></figure>
<p>我们创建的三个文件夹分别挂载了不同的容器文件夹，<code>chevereto_images</code>和<code>database</code>用于数据迁移，<code>/conf/upload.ini</code>用于配置上传文件限制。</p>
<p>在<code>conf</code>目录中创建<code>upload.ini</code>，这个可以取消2MB文件上传限制，内容如下：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">PHP:</span><br><span class="line"><span class="attr">max_execution_time</span> = <span class="number">60</span><span class="comment">;</span></span><br><span class="line"><span class="attr">memory_limit</span> = <span class="number">256</span>M<span class="comment">;</span></span><br><span class="line"><span class="attr">upload_max_filesize</span> = <span class="number">256</span>M<span class="comment">;</span></span><br><span class="line"><span class="attr">post_max_size</span> =  <span class="number">256</span>M<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>然后修改权限<code>sudo chown -R www-data:www-data database chevereto_images conf</code>，最后启动<code>docker-compose up -d</code>，然后就可以通过IP+端口号访问chevereto图床了（<strong>应该只能通过http访问，https是不可以的</strong>）。首次登录如下：</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/chevereto1.png" alt="chevereto1.png"></p>
<p>修改语言为中文</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/chevereto2.png" alt="chevereto2.png"></p>
<p>可以看到文件上传大小被修改为上面的<code>uploda.ini</code>的内容了</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/chevereto3.png" alt="chevereto3.png"></p>
<h2 id="3-数据迁移"><a href="#3-数据迁移" class="headerlink" title="3. 数据迁移"></a>3. 数据迁移</h2><p>上面我们的<code>database</code>文件夹保存的是我们的账号信息、配置信息等等，<code>chevereto_images</code>保存了我们上传的图片数据，如果我们需要从当前服务器迁移到另一个服务器只需要保存好<code>.chevereto</code>中的所有内容，然后全部放到另一个服务器的<code>.chevereto</code>目录中，同样设置权限，然后安装<code>docker</code>和<code>docker-compose</code>，然后执行<code>docker-compose up -d</code>就可以直接运行，我们的数据也会一起同步过来。</p>
]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Docker</tag>
        <tag>Chevereto</tag>
      </tags>
  </entry>
  <entry>
    <title>Homebrew+MySQL+DataGrip</title>
    <url>/archives/46c7a56d.html</url>
    <content><![CDATA[<p>参考：</p>
<blockquote>
<p><a href="https://www.jetbrains.com/datagrip/" target="_blank" rel="noopener">DataGrip</a></p>
</blockquote>
<p>MySQL 是最流行的关系型数据库管理系统。</p>
<a id="more"></a>
<h2 id="1-brew安装MySQL"><a href="#1-brew安装MySQL" class="headerlink" title="1. brew安装MySQL"></a>1. brew安装MySQL</h2><p>brew安装软件之前可以先执行<code>brew search XXX</code>查看brew仓库是否存在此软件，在安装MySQL之前我们先搜索一下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ubuntu@VM-0-9-ubuntu ~ brew search mysql</span><br><span class="line">==&gt; Formulae</span><br><span class="line">automysqlbackup               mysql-client@5.7              mysql-search-replace</span><br><span class="line">mysql                         mysql-connector-c++           mysql@5.6</span><br><span class="line">mysql++                       mysql-connector-c++@1.1       mysql@5.7</span><br><span class="line">mysql-client                  mysql-sandbox                 mysqltuner</span><br></pre></td></tr></table></figure>
<p>可以发现是没问题的，所以执行<code>brew install mysql</code>（如果brew安装很慢，则使用<code>sudo apt install mysql-server</code>安装），这里不指定版本号即默认安装最新版。在此过程中会自动安装MySQL的依赖库，默认情况下这些依赖库是只能被brew安装的软件使用的，如果你需要从其他位置使用brew提供的依赖库需要手动export这些库的路径到<code>.zshrc</code>中（不export也是可以的），安装完成后显示以下内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">==&gt; mysql</span><br><span class="line">We've installed your MySQL database without a root password. To secure it run:</span><br><span class="line">    mysql_secure_installation</span><br><span class="line"></span><br><span class="line">MySQL is configured to only allow connections from localhost by default</span><br><span class="line"></span><br><span class="line">To connect run:</span><br><span class="line">    mysql -uroot</span><br><span class="line"></span><br><span class="line">Warning: mysql provides a launchd plist which can only be used on macOS!</span><br><span class="line">You can manually execute the service instead with:</span><br><span class="line">  mysql.server start</span><br></pre></td></tr></table></figure>
<p>在Ubuntu上只能通过<code>mysql.server start</code>启动，如果在macOS上可以通过<code>brew services start mysql</code>启动，<strong>在使用MySQL之前先启动MySQL服务</strong>，再按照上面的提示完成一些设置<code>mysql_secure_installation</code>，具体会涉及到几个选项，需要设置MySQL root用户的密码，以及允许从远端连接MySQL（仅供测试Ubuntu服务器，本机macOS可以禁止）等等。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ubuntu@VM-0-9-ubuntu ~ mysql.server start</span><br><span class="line">Starting MySQL</span><br><span class="line">.. * </span><br><span class="line"> ubuntu@VM-0-9-ubuntu ~ mysql_secure_installation</span><br><span class="line"></span><br><span class="line">Securing the MySQL server deployment.</span><br><span class="line"></span><br><span class="line">Connecting to MySQL using a blank password.</span><br><span class="line"></span><br><span class="line">VALIDATE PASSWORD COMPONENT can be used to test passwords</span><br><span class="line">and improve security. It checks the strength of password</span><br><span class="line">and allows the users to set only those passwords which are</span><br><span class="line">secure enough. Would you like to setup VALIDATE PASSWORD component?</span><br><span class="line"></span><br><span class="line">Press y|Y for Yes, any other key for No: n</span><br><span class="line">Please set the password for root here.</span><br><span class="line"></span><br><span class="line">New password: </span><br><span class="line"></span><br><span class="line">Re-enter new password: </span><br><span class="line">By default, a MySQL installation has an anonymous user,</span><br><span class="line">allowing anyone to log into MySQL without having to have</span><br><span class="line">a user account created for them. This is intended only for</span><br><span class="line">testing, and to make the installation go a bit smoother.</span><br><span class="line">You should remove them before moving into a production</span><br><span class="line">environment.</span><br><span class="line"></span><br><span class="line">Remove anonymous users? (Press y|Y for Yes, any other key for No) : y</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Normally, root should only be allowed to connect from</span><br><span class="line">'localhost'. This ensures that someone cannot guess at</span><br><span class="line">the root password from the network.</span><br><span class="line"></span><br><span class="line">Disallow root login remotely? (Press y|Y for Yes, any other key for No) : n</span><br><span class="line"></span><br><span class="line"> ... skipping.</span><br><span class="line">By default, MySQL comes with a database named 'test' that</span><br><span class="line">anyone can access. This is also intended only for testing,</span><br><span class="line">and should be removed before moving into a production</span><br><span class="line">environment.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Remove test database and access to it? (Press y|Y for Yes, any other key for No) : y</span><br><span class="line"> - Dropping test database...</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line"> - Removing privileges on test database...</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line">Reloading the privilege tables will ensure that all changes</span><br><span class="line">made so far will take effect immediately.</span><br><span class="line"></span><br><span class="line">Reload privilege tables now? (Press y|Y for Yes, any other key for No) : y</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line">All done!</span><br></pre></td></tr></table></figure>
<p>使用<code>mysql -uroot -pXXXX</code>进入MySQL，<code>XXXX</code>为上面你设置的root用户密码，然后执行<code>show databases;</code>，就可以查看当前存在的数据库了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ubuntu@VM-0-9-ubuntu ~ mysql -uroot -pXXXX</span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 8</span><br><span class="line">Server version: 8.0.18 Homebrew</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show databases;</span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>
<h2 id="2-服务器安全组配置"><a href="#2-服务器安全组配置" class="headerlink" title="2. 服务器安全组配置"></a>2. 服务器安全组配置</h2><p>如果需要远程连接服务器的MySQL数据库，那么需要将服务器的安全组配置一下，允许MySQL服务的端口被访问，MySQL默认端口号是3306</p>
<p>安全组分为两类：出站就是你访问外网；入站就是外网访问你。</p>
<p>如果我们需要访问服务器的3306端口，则入站规则配置如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>来源</th>
<th>端口协议</th>
<th>策略</th>
</tr>
</thead>
<tbody>
<tr>
<td>0.0.0.0/0</td>
<td>TCP:3306</td>
<td>允许</td>
</tr>
</tbody>
</table>
</div>
<p>来源为<code>0.0.0.0/0</code>，表示允许所有IP访问服务器，也可以设置为指定的某些IP；端口协议指定允许被访问的端口，MySQL是<code>TCP:3306</code>，SSH是<code>TCP:22</code>， HTTP或HTTPS是<code>TCP:80</code>以及<code>TCP:443</code>等等。</p>
<h2 id="3-MySQL创建新用户"><a href="#3-MySQL创建新用户" class="headerlink" title="3. MySQL创建新用户"></a>3. MySQL创建新用户</h2><p>默认的root用户权限非常大，需要谨慎使用，所以可以创建一个新的权限没有那么大的用户。需要先启动MySQL服务<code>mysql.server start</code>，然后命令行执行<code>mysql -uroot -pXXXX</code>进入MySQL，这里使用的是root用户，通过在root用户下创建新用户，<code>mysqlname</code>即我们指定的新用户名，<code>password</code>为该用户的密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> CREATE USER <span class="string">'mysqlname'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'password'</span>;</span></span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br></pre></td></tr></table></figure>
<p><strong>然后需要进行授权，否则新用户无法进行其他操作</strong>，<code>GRANT privileges ON databasename.tablename TO &#39;username&#39;@&#39;host&#39;</code>，<code>privileges</code>代表一些比如<code>SELECT, INSERT</code>权限，你也可以设置为<code>ALL</code>，<code>databasename.tablename</code>为允许用户操作的数据库和表，谨慎使用<code>ALL</code>和通配符<code>*.*</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> GRANT ALL ON *.* TO <span class="string">'mysqlname'</span>@<span class="string">'%'</span>;</span></span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> flush privileges;</span></span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br></pre></td></tr></table></figure>
<p>然后使用新用户登录MySQL执行<code>mysql -umysqlname -ppassword</code>，可以查看新用户可以操作的数据库，和root相同，实际并不推荐</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ubuntu@VM-0-9-ubuntu ~ mysql -umysqlname -ppassword</span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 11</span><br><span class="line">Server version: 8.0.18 Homebrew</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show databases;</span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure>
<p>然后尝试创建新的数据库，并添加一些表以及字段等等</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建数据库<span class="built_in">test</span></span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> create database <span class="built_in">test</span>;</span></span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用<span class="built_in">test</span>数据库</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> use <span class="built_in">test</span>;</span></span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建user表，添加id、name字段</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> create table user (</span></span><br><span class="line">    -&gt; id int primary key auto_increment,</span><br><span class="line">    -&gt; name varchar(32)</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br></pre></td></tr></table></figure>
<p>添加数据并查看</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> insert into user (name) values (<span class="string">'Sam'</span>);</span></span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select * from user;</span></span><br><span class="line">+----+------+</span><br><span class="line">| id | name |</span><br><span class="line">+----+------+</span><br><span class="line">|  1 | Sam  |</span><br><span class="line">+----+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<h2 id="4-使用数据库软件连接服务器MySQL"><a href="#4-使用数据库软件连接服务器MySQL" class="headerlink" title="4. 使用数据库软件连接服务器MySQL"></a>4. 使用数据库软件连接服务器MySQL</h2><p>命令行操作数据库有点不方便，可以使用一些数据库软件连接数据库并进行操作，因为之前已经设置了安全组，所以可以访问服务器上的数据库（如果数据库在本机，原理基本相同，基本上只需要修改host为localhost或者127.0.0.1）。</p>
<p>比较好用的数据库软件是DataGrip，功能很强大，支持的数据库类型也比较多，当然其他开源数据库软件也都很好用，比如Windows上的HeidiSQL。</p>
<h3 id="4-0-修改Ubuntu上MySQL配置"><a href="#4-0-修改Ubuntu上MySQL配置" class="headerlink" title="4.0 修改Ubuntu上MySQL配置"></a>4.0 修改Ubuntu上MySQL配置</h3><p>在启动MySQL服务后执行<code>netstat -an | grep 3306</code>，可以发现结果是</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tcp        0      0 127.0.0.1:33060         0.0.0.0:*               LISTEN</span><br><span class="line">tcp        0      0 127.0.0.1:3306          0.0.0.0:*               LISTEN</span><br></pre></td></tr></table></figure>
<p>只要这里是<code>127.0.0.1</code>的话，我们是没法使用软件远程连接服务器上的MySQL，首先需要修改MySQL的配置文件，又因为我们的MySQL是通过brew安装的，因此配置文件位置可能与网上的解决方案不相同，但是可以通过执行<code>mysqld --help --verbose | less</code>，查看配置文件位置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Default options are read from the following files in the given order:</span><br><span class="line">/etc/my.cnf /etc/mysql/my.cnf /home/linuxbrew/.linuxbrew/etc/my.cnf ~/.my.cnf</span><br></pre></td></tr></table></figure>
<p>这是按照<code>my.cnf</code>的顺序优先级启动MySQ，如果<code>/etc/my.cnf</code>存在就按照这个配置文件启动，否则依次后延，显然在Ubuntu服务器上是找不到前面两个<code>cnf</code>文件的，因此我们修改<code>/home/linuxbrew/.linuxbrew/etc/my.cnf</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Default Homebrew MySQL server config</span><br><span class="line">[mysqld]</span><br><span class="line"># Only allow connections from localhost</span><br><span class="line">bind-address &#x3D; 127.0.0.1</span><br><span class="line">mysqlx-bind-address &#x3D; 127.0.0.1</span><br></pre></td></tr></table></figure>
<p>把<code>bind-address = 127.0.0.1</code>这一行注释掉，用<code>#</code>，然后重启MySQL，执行<code>mysql.server restart</code>，才可以进行后续操作。</p>
<h3 id="4-1-DataGrip连接"><a href="#4-1-DataGrip连接" class="headerlink" title="4.1 DataGrip连接"></a>4.1 DataGrip连接</h3><p>首先创建Data Source，选择MySQL</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/data1.png" alt="data1.png"></p>
<p>然后设置服务器IP，我们创建的数据库User以及密码，即上文创建的mysqlname用户，Database可以不写</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/data2.png" alt="data2.png"></p>
<p>先测试连接，如果现实以下内容，则说明可以连接成功，否则需要检查配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DBMS: MySQL (ver. 8.0.18) Case sensitivity: plain&#x3D;exact, delimited&#x3D;exact Driver: MySQL Connector&#x2F;J (ver. mysql-connector-java-8.0.15 (Revision: 79a4336f140499bd22dd07f02b708e163844e3d5), JDBC4.2) Ping: 115 ms SSL: yes</span><br></pre></td></tr></table></figure>
<p>连接成功后可以执行SQL语句查看上面创建数据库、数据表以及其他数据</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/data3.png" alt="data3.png"></p>
<h3 id="4-2-HeidiSQL连接"><a href="#4-2-HeidiSQL连接" class="headerlink" title="4.2 HeidiSQL连接"></a>4.2 HeidiSQL连接</h3><p>当然也可以选择不修改<code>cnf</code>文件，采用SSH隧道的方式连接，以Windows为例，HeidiSQL连接Ubuntu服务器上的MySQL，配置如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>网络类型</th>
<th>主机名/IP</th>
<th>用户名/密码</th>
<th>端口</th>
</tr>
</thead>
<tbody>
<tr>
<td>MariaDB or MySQL(SSH tunnel)</td>
<td>127.0.0.1</td>
<td>服务器上创建的新用户/密码</td>
<td>服务器MySQL服务端口号</td>
</tr>
</tbody>
</table>
</div>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/hei1.png" alt="hei1.png"></p>
<p>SSH隧道配置如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>plink.exe位置</th>
<th>SSH主机+端口</th>
<th>用户名/密码</th>
</tr>
</thead>
<tbody>
<tr>
<td>自行下载路径</td>
<td>服务器公网IP+22</td>
<td>服务器用户/密码</td>
</tr>
</tbody>
</table>
</div>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/hei2.png" alt="hei2.png"></p>
<p>连接成功后的结果如下，可以看到我们之前添加的数据库以及表数据</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/hei3.png" alt="hei3.png"></p>
]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>Ubuntu</tag>
        <tag>Linuxbrew</tag>
        <tag>Homebrew</tag>
        <tag>MySQL</tag>
        <tag>DataGrip</tag>
        <tag>HeidiSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-共享元素动画效果</title>
    <url>/archives/2943f9f3.html</url>
    <content><![CDATA[<p>参考：</p>
<blockquote>
<p><a href="https://developer.android.com/training/transitions/start-activity" target="_blank" rel="noopener">Android Developers文档指南</a><br><a href="https://github.com/android/animation-samples" target="_blank" rel="noopener">Github animation-samples</a><br><a href="https://mikescamell.com/shared-element-transitions-part-1/" target="_blank" rel="noopener">Shared Element Transitions - Part 1: Activities</a><br><a href="https://mikescamell.com/shared-element-transitions-part-2/" target="_blank" rel="noopener">Shared Element Transitions - Part 2: Fragments</a><br><a href="https://mikescamell.com/shared-element-transitions-part-3/" target="_blank" rel="noopener">Shared Element Transitions - Part 3: Picasso &amp; Glide</a><br><a href="https://github.com/codepath/android_guides/wiki/Shared-Element-Activity-Transition" target="_blank" rel="noopener">android_guides</a><br><a href="https://medium.com/@bherbst/fragment-transitions-with-shared-elements-7c7d71d31cbb" target="_blank" rel="noopener">Fragment transitions with shared elements</a></p>
</blockquote>
<p>共享元素可以在Activity之间或者Fragment之间实现非常舒适的动画效果，如下图所示，特别是在跳转的界面之间拥有相同的界面元素，比如同一张图片但是大小不同，同一个View但是位置不同。需要注意的是最低api需要为21，即Android LOLLIPOP。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/cat.gif" alt="cat.gif"></p>
<a id="more"></a>
<h2 id="1-Fragment之间共享元素"><a href="#1-Fragment之间共享元素" class="headerlink" title="1. Fragment之间共享元素"></a>1. Fragment之间共享元素</h2><p>首先实现在Fragment之间的共享元素动画，因为Fragment可能比Activity更加常用，这两者实现的代码略有区别，而且在我的测试过程中还发现了部分奇怪的问题。</p>
<h3 id="1-1-简单使用"><a href="#1-1-简单使用" class="headerlink" title="1.1 简单使用"></a>1.1 简单使用</h3><p>首先创建两个Fragment，定义各自布局，关键是两个布局中需要共享的元素需要指定一个属性<code>android:transitionName</code>，可以是任何自定义的字符串，其中Fragment1中的共享元素的<code>transitionName</code>可以与Fragment2中的共享元素不同，但是必须要设置（通过xml或者<code>setTransitionName</code>方法），否则会报错。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Fragment1.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fragment1</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ARG_PARAM1 = <span class="string">"param1"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ARG_PARAM2 = <span class="string">"param2"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = Fragment1<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView textView;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Fragment默认生成的实例化方法，参数这里没有用到，无所谓</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Fragment1 <span class="title">newInstance</span><span class="params">(String param1, String param2)</span> </span>&#123;</span><br><span class="line">        Fragment1 fragment = <span class="keyword">new</span> Fragment1();</span><br><span class="line">        Bundle args = <span class="keyword">new</span> Bundle();</span><br><span class="line">        args.putString(ARG_PARAM1, param1);</span><br><span class="line">        args.putString(ARG_PARAM2, param2);</span><br><span class="line">        fragment.setArguments(args);</span><br><span class="line">        <span class="keyword">return</span> fragment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewCreated</span><span class="params">(@NonNull View view, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onViewCreated(view, savedInstanceState);</span><br><span class="line">        <span class="comment">// 我们仅在Fragment中显示一个TextView</span></span><br><span class="line">        textView = view.findViewById(R.id.textView1);</span><br><span class="line">        textView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 点击跳转到Fragment2，同理参数不重要</span></span><br><span class="line">                Fragment2 destination = Fragment2.newInstance(<span class="string">"1"</span>, <span class="string">"2"</span>);</span><br><span class="line">                <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class="line">                    <span class="comment">// 定义共享元素的动画效果</span></span><br><span class="line">                    <span class="comment">// setSharedElementEnterTransition以及setSharedElementReturnTransition分别设置</span></span><br><span class="line">                    <span class="comment">// 共享元素的动画效果，在目的地Fragment调用Enter方法，当前Fragment调用Return方法，否则</span></span><br><span class="line">                    <span class="comment">// 无效，系统提供了一些动画效果，比如move、fade等等，可以直接使用，也可以通过继承</span></span><br><span class="line">                    <span class="comment">// TransitionSet实现自定义动画效果</span></span><br><span class="line">                    destination.setSharedElementEnterTransition(TransitionInflater.from(getContext()).inflateTransition(android.R.transition.move));</span><br><span class="line">                    setSharedElementReturnTransition(TransitionInflater.from(getContext()).inflateTransition(android.R.transition.move));</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// setEnterTransition和setExitTransition设置除了共享元素之外其他View的动画效果</span></span><br><span class="line">                    <span class="comment">// 一般来说仅需要设置目的地Fragment的Enter效果和当前Fragment的Exit效果，同样系统</span></span><br><span class="line">                    <span class="comment">// 也提供比如Fade之类的效果</span></span><br><span class="line">                    destination.setEnterTransition(<span class="keyword">new</span> Fade());</span><br><span class="line">                    setExitTransition(<span class="keyword">new</span> Fade());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (getFragmentManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    getFragmentManager()</span><br><span class="line">                            .beginTransaction()</span><br><span class="line">                            <span class="comment">// 在切换Fragment时调用addSharedElement方法，标记我们的共享元素，参数为共享元素</span></span><br><span class="line">                            <span class="comment">// 对象以及Fragment2中的共享元素的transitionName，可以写死，需要注意的是，这里传入</span></span><br><span class="line">                            <span class="comment">// 的transitionName需要与Fragment2中的共享元素相同。以我们的代码为例，只有在两个布</span></span><br><span class="line">                            <span class="comment">// 局中共享元素transitionName相同时才可以使用ViewCompat.getTransitionName方法获取</span></span><br><span class="line">                            .addSharedElement(textView, Objects.requireNonNull(ViewCompat.getTransitionName(textView)))</span><br><span class="line">                            .addToBackStack(TAG)</span><br><span class="line">                            .replace(R.id.container, destination)</span><br><span class="line">                            .commit();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.layout1, container, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fragment2.java Fragment2没有加入任何效果，仅显示我们需要的布局</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fragment2</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ARG_PARAM1 = <span class="string">"param1"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ARG_PARAM2 = <span class="string">"param2"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Fragment2 <span class="title">newInstance</span><span class="params">(String param1, String param2)</span> </span>&#123;</span><br><span class="line">        Fragment2 fragment = <span class="keyword">new</span> Fragment2();</span><br><span class="line">        Bundle args = <span class="keyword">new</span> Bundle();</span><br><span class="line">        args.putString(ARG_PARAM1, param1);</span><br><span class="line">        args.putString(ARG_PARAM2, param2);</span><br><span class="line">        fragment.setArguments(args);</span><br><span class="line">        <span class="keyword">return</span> fragment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.layout2, container, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应的两个布局文件，两者的区别仅仅是layout1中TextView有上边距，<code>android:transitionName=&quot;textView&quot;</code>相同（可以不同，因为Fragment1中的transitionName并不重要）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- layout1.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/textView1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"200dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"qqqqqqqqqqqq"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"24sp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:transitionName</span>=<span class="string">"textView"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- layout2.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/textView2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"qqqqqqqqqqqq"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"24sp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:transitionName</span>=<span class="string">"textView"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果如下</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/share1.gif" alt="share1.gif"></p>
<p>当然我们实际应用中不会使用如此简单的布局，此时我仅仅修改layout2，增加一个ImageView，那么就会出现一个奇怪的Bug现象</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"40dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"40dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:src</span>=<span class="string">"@drawable/ic_launcher_foreground"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/textView2"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"qqqqqqqqqqqq"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">"24sp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:transitionName</span>=<span class="string">"textView"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如下图所示，从Fragment1跳转到Fragment2时，TextView并没有按照轨迹移动，而实突然出现在顶部，但是返回时TextView按照轨迹移动，而我仅仅只是增加了一点布局。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/share2.gif" alt="share2.gif"></p>
<p>更加奇怪的是如果上述布局layout2中，设置第二层LinearLayout的<code>android:layout_marginTop=&quot;1dp&quot;</code>，那么又可以正常按照轨迹移动了，这里就不截图了。也就是说如果在实际应用过程中出现这样的显示效果问题，可以通过设置<code>layout_marginTop</code>来避免，但是可能会有1dp的显示问题。</p>
<h3 id="1-2-RecyclerView以及图片缩放效果"><a href="#1-2-RecyclerView以及图片缩放效果" class="headerlink" title="1.2 RecyclerView以及图片缩放效果"></a>1.2 RecyclerView以及图片缩放效果</h3><p>具体可以参考<a href="https://github.com/bherbst/FragmentTransitionSample" target="_blank" rel="noopener">FragmentTransitionSample</a>，其中还包括自定义TransitionSet的实现。需要注意的是，在RecyclerView中添加<code>transitionName</code>的方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里对应了上面说到的问题，Fragment1中的transitionName不重要，仅仅需要让它们的transitionName唯一即可，</span></span><br><span class="line"><span class="comment">// 否则会出现显示其他图片的异常</span></span><br><span class="line">ViewCompat.setTransitionName(viewHolder.image, position + <span class="string">"_image"</span>);</span><br><span class="line"></span><br><span class="line">getActivity().getSupportFragmentManager()</span><br><span class="line">        .beginTransaction()</span><br><span class="line">        <span class="comment">// 只要最终addSharedElement方法添加的transitionName与Fragment2相同即可</span></span><br><span class="line">        .addSharedElement(holder.image, <span class="string">"kittenImage"</span>)</span><br><span class="line">        .replace(R.id.container, kittenDetails)</span><br><span class="line">        .addToBackStack(<span class="keyword">null</span>)</span><br><span class="line">        .commit();</span><br></pre></td></tr></table></figure>
<h2 id="2-Activity之间共享元素"><a href="#2-Activity之间共享元素" class="headerlink" title="2. Activity之间共享元素"></a>2. Activity之间共享元素</h2><p>从Fragment提供的方法可知，Fragment之间共享元素仅能实现一个View的动画，如果在一个界面中需要对多个View实现动画就只能在Activity中实现了。</p>
<h3 id="2-1-简单使用"><a href="#2-1-简单使用" class="headerlink" title="2.1 简单使用"></a>2.1 简单使用</h3><p>首先看看之前在Fragment中存在的问题是否会同样出现在Activity中。与Fragment不同的是，在Activity中启用共享元素需要提前配置一下Theme</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.NoActionBar"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- Customize your theme here. --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/colorPrimaryDark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- windowContentTransitions也可以通过getWindow().requestFeature(Window.FEATURE_CONTENT_TRANSITIONS)动态控制 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowContentTransitions"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 也可以通过getWindow().setExitTransition(new Fade())动态控制 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- specify enter and exit transitions --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowEnterTransition"</span>&gt;</span>@android:transition/fade<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowExitTransition"</span>&gt;</span>@android:transition/fade<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 也可以通过getWindow().setSharedElementEnterTransition()动态控制 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- specify shared element transitions --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowSharedElementEnterTransition"</span>&gt;</span></span></span><br><span class="line">        @android:transition/move</span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowSharedElementExitTransition"</span>&gt;</span></span></span><br><span class="line">        @android:transition/move</span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在Theme中控制和通过代码动态控制的区别是Theme是全局的设置，后续如果在代码中没有显示控制则会使用Theme的效果，动态控制的话可以对不同Activity设置不同的动画效果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// FirstActivity.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView textView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_first);</span><br><span class="line">        textView = findViewById(R.id.text_1);</span><br><span class="line">        textView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                Intent intent = <span class="keyword">new</span> Intent(FirstActivity.<span class="keyword">this</span>, SecondActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                <span class="comment">// 由于Activity是通过startActivity启动，所以使用makeSceneTransitionAnimation</span></span><br><span class="line">                <span class="comment">// 同理，这里的transitionName为"text"，与SecondActivity相同，而且这里并没有设置</span></span><br><span class="line">                <span class="comment">// FirstActivity的transitionName</span></span><br><span class="line">                ActivityOptionsCompat options = ActivityOptionsCompat.</span><br><span class="line">                        makeSceneTransitionAnimation(FirstActivity.<span class="keyword">this</span>,</span><br><span class="line">                                textView,</span><br><span class="line">                                <span class="string">"text"</span>);</span><br><span class="line">                startActivity(intent, options.toBundle());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SecondActivity.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView textView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_second);</span><br><span class="line">        textView = findViewById(R.id.text_2);</span><br><span class="line">        <span class="comment">// 动态设置transitionName</span></span><br><span class="line">        ViewCompat.setTransitionName(textView, <span class="string">"text"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而且Fragmen中存在的动画效果异常的问题没有出现在Activity中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- activity_first.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    &lt;LinearLayout--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        android:layout_width="match_parent"--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        android:layout_height="wrap_content"&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/text_1"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">"200dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"aaaaaaaaaaaaaa"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">"24sp"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/LinearLayout&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- activity_second.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"40dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"40dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:src</span>=<span class="string">"@drawable/ic_launcher_foreground"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/text_2"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"aaaaaaaaaaaaaa"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">"24sp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>具体效果如下，但是仔细观察可以发现存在问题，状态栏在动画过程中会闪烁</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/share3.gif" alt="share3.gif"></p>
<p>解决方法是指定状态栏或者其他控件不参加动画，原理是因为在动画过程中实际是通过一层windows ViewOverlay播放动画，这一层在包括了界面所有的View（状态栏也在其中），当我们指定动画时可以将状态栏的id排除出去就可以实现状态栏不参与动画，也就不会有闪烁的现象。</p>
<ul>
<li>Theme控制</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">// styles.xml</span><br><span class="line"><span class="comment">&lt;!-- specify enter and exit transitions --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 自定义fade.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowEnterTransition"</span>&gt;</span>@transition/fade<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowExitTransition"</span>&gt;</span>@transition/fade<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// fade.xml</span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transitionSet</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fade</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">targets</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 可以设置statusBarBackground的id，也可以是我们自定义的控件的id，比如Toolbar --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">target</span> <span class="attr">android:excludeId</span>=<span class="string">"@android:id/statusBarBackground"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">target</span> <span class="attr">android:excludeId</span>=<span class="string">"@android:id/navigationBarBackground"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;target android:excludeId="@id/appBar" /&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">targets</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fade</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transitionSet</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>动态代码控制</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当前Activity设置Exit效果，目的地Activity设置Enter效果</span></span><br><span class="line"><span class="comment">// FirstActivity.java</span></span><br><span class="line">Fade fade = <span class="keyword">new</span> Fade();</span><br><span class="line">fade.excludeTarget(android.R.id.statusBarBackground, <span class="keyword">true</span>);</span><br><span class="line">fade.excludeTarget(android.R.id.navigationBarBackground, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">getWindow().setExitTransition(fade);</span><br><span class="line"></span><br><span class="line"><span class="comment">// SecondActivity.java</span></span><br><span class="line">Fade fade = <span class="keyword">new</span> Fade();</span><br><span class="line">fade.excludeTarget(android.R.id.statusBarBackground, <span class="keyword">true</span>);</span><br><span class="line">fade.excludeTarget(android.R.id.navigationBarBackground, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">getWindow().setEnterTransition(fade);</span><br></pre></td></tr></table></figure>
<ul>
<li>Activity设置独立Theme</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">// styles.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"DefaultActivity"</span> <span class="attr">parent</span>=<span class="string">"AppTheme"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowEnterTransition"</span>&gt;</span>@transition/fade<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowExitTransition"</span>&gt;</span>@transition/fade<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// AndroidManifest.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">".SecondActivity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:theme</span>=<span class="string">"@style/DefaultActivity"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">".FirstActivity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:theme</span>=<span class="string">"@style/DefaultActivity"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/share4.gif" alt="share4.gif"></p>
<h3 id="2-2-RecyclerView复杂效果"><a href="#2-2-RecyclerView复杂效果" class="headerlink" title="2.2 RecyclerView复杂效果"></a>2.2 RecyclerView复杂效果</h3><p>上面写的代码都是用的本地图片，如果从网络中加载图片并在不同Activity中跳转，那么必然需要考虑在两个Activity中加载图片时的缓存时间，常用的图片加载框架有Picasso和Glide，可以参考上面给出的<a href="https://mikescamell.com/shared-element-transitions-part-4-recyclerview/" target="_blank" rel="noopener">链接</a>。</p>
<p>首先获取图片数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Constants</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> List&lt;String&gt; <span class="title">getImageUrls</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; data = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        data.add(<span class="string">"https://i.loli.net/2020/01/02/ClMXcUkJNETpYHb.jpg"</span>);</span><br><span class="line">        data.add(<span class="string">"https://i.loli.net/2020/01/02/ulnhD8S79w4IfaY.jpg"</span>);</span><br><span class="line">        data.add(<span class="string">"https://i.loli.net/2020/01/02/i9IFevNYqKVRcXP.jpg"</span>);</span><br><span class="line">        data.add(<span class="string">"https://i.loli.net/2020/01/02/7QDskmZunBg4GEj.jpg"</span>);</span><br><span class="line">        data.add(<span class="string">"https://i.loli.net/2020/01/02/eHzuXSqIoUbh8Mc.jpg"</span>);</span><br><span class="line">        data.add(<span class="string">"https://i.loli.net/2020/01/02/biSqYO73CLvjh8p.jpg"</span>);</span><br><span class="line">        data.add(<span class="string">"https://i.loli.net/2020/01/02/a4NjuqfMmckoVT2.jpg"</span>);</span><br><span class="line">        data.add(<span class="string">"https://i.loli.net/2020/01/02/jSoFtq7VRBM6TUZ.jpg"</span>);</span><br><span class="line">        data.add(<span class="string">"https://i.loli.net/2020/01/02/nw3vUZBlyIph1oH.jpg"</span>);</span><br><span class="line">        data.add(<span class="string">"https://i.loli.net/2020/01/02/y3wGlkoXq4EWSDt.jpg"</span>);</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后定义RecyclerView相关代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">MyAdapter</span>.<span class="title">MyViewHolder</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyAdapter</span><span class="params">(List&lt;String&gt; data, Context context, OnItemClickListener onItemClickListener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">        <span class="keyword">this</span>.onItemClickListener = onItemClickListener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyViewHolder <span class="title">onCreateViewHolder</span><span class="params">(@NonNull ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        View view = LayoutInflater.from(context).inflate(R.layout.layout_item, parent, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyViewHolder(view);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(@NonNull <span class="keyword">final</span> MyViewHolder holder, <span class="keyword">final</span> <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里没有设置imageView和textView的transitionName也可以正常运行</span></span><br><span class="line">        String url = data.get(position);</span><br><span class="line">        holder.textView.setText(url);</span><br><span class="line">        loadImage(url, holder);</span><br><span class="line">        holder.imageView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                onItemClickListener.onItemClick(holder, position);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分别通过Glide和Picasso加载图片</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadImage</span><span class="params">(String url, MyViewHolder holder)</span> </span>&#123;</span><br><span class="line">        Glide.with(context)</span><br><span class="line">                .load(url)</span><br><span class="line">                .centerCrop()</span><br><span class="line">                .into(holder.imageView);</span><br><span class="line"><span class="comment">//        Picasso.get()</span></span><br><span class="line"><span class="comment">//                .load(url)</span></span><br><span class="line"><span class="comment">//                .fit()</span></span><br><span class="line"><span class="comment">//                .centerCrop()</span></span><br><span class="line"><span class="comment">//                .into(holder.imageView);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> ImageView imageView;</span><br><span class="line">        <span class="keyword">public</span> TextView textView;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyViewHolder</span><span class="params">(@NonNull View itemView)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(itemView);</span><br><span class="line">            imageView = itemView.findViewById(R.id.item_image);</span><br><span class="line">            textView = itemView.findViewById(R.id.item_text);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OnItemClickListener onItemClickListener;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnItemClickListener</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(MyViewHolder viewHolder, <span class="keyword">int</span> position)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- layout_item.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"150dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginBottom</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/item_image"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:src</span>=<span class="string">"@drawable/ic_launcher_foreground"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/item_text"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:lines</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"16sp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:text</span>=<span class="string">"aaaaaa"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后是Activity的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ThirdActivity.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThirdActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">MyAdapter</span>.<span class="title">OnItemClickListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RecyclerView recyclerView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_third);</span><br><span class="line"></span><br><span class="line">        MyAdapter adapter = <span class="keyword">new</span> MyAdapter(Constants.getImageUrls(), <span class="keyword">this</span>, <span class="keyword">this</span>);</span><br><span class="line">        recyclerView = findViewById(R.id.list);</span><br><span class="line">        recyclerView.setLayoutManager(<span class="keyword">new</span> GridLayoutManager(<span class="keyword">this</span>, <span class="number">2</span>));</span><br><span class="line">        recyclerView.setAdapter(adapter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(MyAdapter.MyViewHolder viewHolder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(ThirdActivity.<span class="keyword">this</span>, ForthActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        intent.putExtra(<span class="string">"position"</span>, position);</span><br><span class="line">        <span class="comment">// 与单个共享元素不同的是，多个共享元素动画需要使用Pair传参，而且需要强制转换类型为View</span></span><br><span class="line">        Pair&lt;View, String&gt; imagePair = Pair.create((View)viewHolder.imageView, <span class="string">"image"</span>);</span><br><span class="line">        Pair&lt;View, String&gt; textPair = Pair.create((View)viewHolder.textView, <span class="string">"text"</span>);</span><br><span class="line">        ActivityOptionsCompat options = ActivityOptionsCompat.</span><br><span class="line">                makeSceneTransitionAnimation(<span class="keyword">this</span>, imagePair, textPair);</span><br><span class="line">        startActivity(intent, options.toBundle());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ForthActivity.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForthActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView textView;</span><br><span class="line">    <span class="keyword">private</span> ImageView imageView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_forth);</span><br><span class="line">        <span class="keyword">int</span> position = getIntent().getIntExtra(<span class="string">"position"</span>, <span class="number">0</span>);</span><br><span class="line">        textView = findViewById(R.id.text_detail);</span><br><span class="line">        imageView = findViewById(R.id.image_detail);</span><br><span class="line">        textView.setText(Constants.getImageUrls().get(position));</span><br><span class="line">        loadImage(Constants.getImageUrls().get(position), imageView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分别通过Glide和Picasso加载图片，注意这里与MyAdapter使用不同的框架也是没有问题的</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadImage</span><span class="params">(String url, ImageView view)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 关键代码supportPostponeEnterTransition()方法，可以使得Activity</span></span><br><span class="line">        <span class="comment">// 延迟显示，直到执行了supportStartPostponedEnterTransition()方法。</span></span><br><span class="line">        <span class="comment">// 也就是说，为了使图片能够先从网络上缓存下来再显示，可以在图片缓存成功的</span></span><br><span class="line">        <span class="comment">// 回调方法中调用supportStartPostponedEnterTransition()</span></span><br><span class="line">        supportPostponeEnterTransition();</span><br><span class="line"></span><br><span class="line">        Glide.with(<span class="keyword">this</span>)</span><br><span class="line">                .load(url)</span><br><span class="line">                .centerCrop()</span><br><span class="line">                .dontAnimate() <span class="comment">// 实测这一行没有什么用</span></span><br><span class="line">                .listener(<span class="keyword">new</span> RequestListener&lt;Drawable&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onLoadFailed</span><span class="params">(@Nullable GlideException e, Object model, Target&lt;Drawable&gt; target, <span class="keyword">boolean</span> isFirstResource)</span> </span>&#123;</span><br><span class="line">                        supportStartPostponedEnterTransition();</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onResourceReady</span><span class="params">(Drawable resource, Object model, Target&lt;Drawable&gt; target, DataSource dataSource, <span class="keyword">boolean</span> isFirstResource)</span> </span>&#123;</span><br><span class="line">                        supportStartPostponedEnterTransition();</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .into(view);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        Picasso.get()</span></span><br><span class="line"><span class="comment">//                .load(url)</span></span><br><span class="line"><span class="comment">//                .noFade()  // 实测这一行没有什么用</span></span><br><span class="line"><span class="comment">//                .into(view, new Callback() &#123;</span></span><br><span class="line"><span class="comment">//                    @Override</span></span><br><span class="line"><span class="comment">//                    public void onSuccess() &#123;</span></span><br><span class="line"><span class="comment">//                        supportStartPostponedEnterTransition();</span></span><br><span class="line"><span class="comment">//                    &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                    @Override</span></span><br><span class="line"><span class="comment">//                    public void onError(Exception e) &#123;</span></span><br><span class="line"><span class="comment">//                        supportStartPostponedEnterTransition();</span></span><br><span class="line"><span class="comment">//                    &#125;</span></span><br><span class="line"><span class="comment">//                &#125;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最终效果</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/share5.gif" alt="share5.gif"></p>
<p>这个显示效果有几个问题，一是TextView字体大小突变，二是图片返回时会有微小的大小反弹现象，三是图片如果卡在状态栏上会出现短时间覆盖状态栏的现象，最后是点击时不会立即跳转，会出现明显的卡顿。如果需要解决上述几个问题，可以参考<a href="https://github.com/android/animation-samples" target="_blank" rel="noopener">Github animation-samples</a>中的Unslpash示例。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/share6.gif" alt="share6.gif"></p>
<p>可以发现这个示例没有出现上面我所发生的显示效果问题，如果仔细查看代码可以发现为了优化这个效果加入了一些的自定义动画以及自定义View。</p>
<h2 id="3-复杂效果的优化"><a href="#3-复杂效果的优化" class="headerlink" title="3. 复杂效果的优化"></a>3. 复杂效果的优化</h2><p>具体可以参考<a href="https://github.com/android/animation-samples" target="_blank" rel="noopener">Github animation-samples</a>中的Unslpash示例。</p>
<p>Unslpash示例具体实现了一下几个细节效果：</p>
<ol>
<li>在图片详情页使用了ViewPager，可以左右滑动切换图片；</li>
<li>当我们左右滑动切换图片再返回时，RecyclerView会滑动到对应的图片，而且有返回动画效果；</li>
<li>点击查看图片详情时动画没有卡顿的感觉，而且字体大小有良好的变换动画效果，不是突变；</li>
<li>ViewPager左右滑动也没有产生加载的卡顿现象。</li>
</ol>
<h3 id="3-1-效果实现分析"><a href="#3-1-效果实现分析" class="headerlink" title="3.1 效果实现分析"></a>3.1 效果实现分析</h3><p>首先是数据来源，Unslpash示例数据来自于<code>https://unsplash.it</code>，通过Retrofit获取，示例仅获取12张图片，构造的Photo数据结构就不用分析了，很简单。</p>
<p>然后是两个Activity的动画效果，是通过Theme设置的，分别对MainActivity和DetailActivity使用不同的Theme，即最主要的动画效果是通过xml定义的，java代码只控制逻辑</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- MainActivity --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"App.Home"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowExitTransition"</span>&gt;</span>@transition/grid_exit<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowReenterTransition"</span>&gt;</span>@transition/grid_reenter<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- DetailActivity --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"App.Details"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowSharedElementEnterTransition"</span>&gt;</span></span></span><br><span class="line"><span class="css">        <span class="keyword">@transition</span>/shared_main_detail</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>MainActivity的非共享元素移出界面时的效果是grid_exit，即爆炸效果；返回MainActivity时是grid_reenter，即从上向下滑动效果；DetailActivity的共享元素进入界面的效果是shared_main_detail，分别定义了photo和text的动画效果，photo使用了传统的几个动画就不说了，text使用的是自定义的动画，这个TextResize类还是有点复杂，所以会用就行了，而且不会出现在java代码中。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- grid_exit.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">explode</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- grid_reenter.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slide</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:slideEdge</span>=<span class="string">"top"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:duration</span>=<span class="string">"300"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:interpolator</span>=<span class="string">"@android:interpolator/linear_out_slow_in"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">slide</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- shared_main_detail.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transitionSet</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transitionSet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">targets</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">target</span> <span class="attr">android:targetId</span>=<span class="string">"@id/photo"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">targets</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">changeBounds</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">arcMotion</span> <span class="attr">android:maximumAngle</span>=<span class="string">"50"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">changeBounds</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">changeTransform</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">changeClipBounds</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">changeImageTransform</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transitionSet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transitionSet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">targets</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">target</span> <span class="attr">android:targetId</span>=<span class="string">"@id/author"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">targets</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transition</span> <span class="attr">class</span>=<span class="string">"com.example.android.unsplash.transition.TextResize"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">changeBounds</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transitionSet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- recolor不知道有什么用，删了也没有区别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">recolor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">targets</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">target</span> <span class="attr">android:targetId</span>=<span class="string">"@android:id/statusBarBackground"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">target</span> <span class="attr">android:targetId</span>=<span class="string">"@android:id/navigationBarBackground"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">targets</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">recolor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transitionSet</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>从MainActivity点击跳转到DetailActivity时需要通过Intent传入几个数据，比如当前界面中text的属性值，点击的图片索引以及从网络请求得到的图片url等等</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Intent <span class="title">getDetailActivityStartIntent</span><span class="params">(Activity host, ArrayList&lt;Photo&gt; photos,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                    <span class="keyword">int</span> position, PhotoItemBinding binding)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Intent intent = <span class="keyword">new</span> Intent(host, DetailActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    intent.setAction(Intent.ACTION_VIEW);</span><br><span class="line">    intent.putParcelableArrayListExtra(IntentUtil.PHOTO, photos);</span><br><span class="line">    intent.putExtra(IntentUtil.SELECTED_ITEM_POSITION, position);</span><br><span class="line">    intent.putExtra(IntentUtil.FONT_SIZE, binding.author.getTextSize());</span><br><span class="line">    intent.putExtra(IntentUtil.PADDING,</span><br><span class="line">            <span class="keyword">new</span> Rect(binding.author.getPaddingLeft(),</span><br><span class="line">                    binding.author.getPaddingTop(),</span><br><span class="line">                    binding.author.getPaddingRight(),</span><br><span class="line">                    binding.author.getPaddingBottom()));</span><br><span class="line">    intent.putExtra(IntentUtil.TEXT_COLOR, binding.author.getCurrentTextColor());</span><br><span class="line">    <span class="keyword">return</span> intent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在DetailActivity中通过getIntent方法获取传入的数据，构造DetailSharedElementEnterCallback，通过setEnterSharedElementCallback设置回调；setEnterSharedElementCallback可以监听共享元素进入此Activity时的状态，由sharedElementCallback自定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    Intent intent = getIntent();</span><br><span class="line">    sharedElementCallback = <span class="keyword">new</span> DetailSharedElementEnterCallback(intent);</span><br><span class="line">    setEnterSharedElementCallback(sharedElementCallback);</span><br><span class="line">    initialItem = intent.getIntExtra(IntentUtil.SELECTED_ITEM_POSITION, <span class="number">0</span>);</span><br><span class="line">    setUpViewPager(intent.&lt;Photo&gt;getParcelableArrayListExtra(IntentUtil.PHOTO));</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>DetailSharedElementEnterCallback的主要功能是在Activity切换时调整TextView的属性以及对共享元素进行绑定。从这个Callback可以看出来实际动画效果是发生在DetailActivity中，首先当处于onCreate方法中，在调用<code>super.onCreate(savedInstanceState);</code>之前设置DetailSharedElementEnterCallback，此时动画还未开始。</p>
<p>按照顺序执行<code>onMapSharedElements-&gt;onSharedElementStart-&gt;onSharedElementEnd</code>方法，在onMapSharedElements方法中需要将对应的共享元素View与其transitionName关联起来，这里的作用其实等价于在MainActivity中生成的Pair对象，试想一下如果我们在点击时绑定的是position为1的ImageView，而如果我们在ViewPager中滑动后position变为4，那么我们就需要更新Pair对象，否则返回时动画效果就不是返回position为4的ImageView。所以只能在Callback中处理，由于使用了Databinding而且两个Activity中的ImageView的transitionName相同，所以简单的添加即可，将其他不需要变换动画的元素移出Map也可以在这里操作。</p>
<p>然后在onSharedElementStart方法中会先将DetailActivity中的TextView的属性修改为MainActivity中对应TextView的属性，最后在onSharedElementEnd方法中将TextView设置为DetailActivity中原本的属性即可，也就是说从<code>onSharedElementStart-&gt;onSharedElementEnd</code>就是动画的过程了，实际动画控制是由上面transitionSet定义的，这里仅提供最初和最终状态。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DetailSharedElementEnterCallback</span> <span class="keyword">extends</span> <span class="title">SharedElementCallback</span> </span>&#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSharedElementStart</span><span class="params">(List&lt;String&gt; sharedElementNames,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     List&lt;View&gt; sharedElements,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     List&lt;View&gt; sharedElementSnapshots)</span> </span>&#123;</span><br><span class="line">        TextView author = getAuthor();</span><br><span class="line">        targetTextSize = author.getTextSize();</span><br><span class="line">        targetTextColors = author.getTextColors();</span><br><span class="line">        targetPadding = <span class="keyword">new</span> Rect(author.getPaddingLeft(),</span><br><span class="line">                author.getPaddingTop(),</span><br><span class="line">                author.getPaddingRight(),</span><br><span class="line">                author.getPaddingBottom());</span><br><span class="line">        <span class="keyword">if</span> (IntentUtil.hasAll(intent,</span><br><span class="line">                IntentUtil.TEXT_COLOR, IntentUtil.FONT_SIZE, IntentUtil.PADDING)) &#123;</span><br><span class="line">            author.setTextColor(intent.getIntExtra(IntentUtil.TEXT_COLOR, Color.BLACK));</span><br><span class="line">            <span class="keyword">float</span> textSize = intent.getFloatExtra(IntentUtil.FONT_SIZE, targetTextSize);</span><br><span class="line">            author.setTextSize(TypedValue.COMPLEX_UNIT_PX, textSize);</span><br><span class="line">            Rect padding = intent.getParcelableExtra(IntentUtil.PADDING);</span><br><span class="line">            author.setPadding(padding.left, padding.top, padding.right, padding.bottom);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSharedElementEnd</span><span class="params">(List&lt;String&gt; sharedElementNames,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   List&lt;View&gt; sharedElements,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   List&lt;View&gt; sharedElementSnapshots)</span> </span>&#123;</span><br><span class="line">        TextView author = getAuthor();</span><br><span class="line">        author.setTextSize(TypedValue.COMPLEX_UNIT_PX, targetTextSize);</span><br><span class="line">        <span class="keyword">if</span> (targetTextColors != <span class="keyword">null</span>) &#123;</span><br><span class="line">            author.setTextColor(targetTextColors);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (targetPadding != <span class="keyword">null</span>) &#123;</span><br><span class="line">            author.setPadding(targetPadding.left, targetPadding.top,</span><br><span class="line">                    targetPadding.right, targetPadding.bottom);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (currentDetailBinding != <span class="keyword">null</span>) &#123;</span><br><span class="line">            forceSharedElementLayout(currentDetailBinding.description);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMapSharedElements</span><span class="params">(List&lt;String&gt; names, Map&lt;String, View&gt; sharedElements)</span> </span>&#123;</span><br><span class="line">        removeObsoleteElements(names, sharedElements, mapObsoleteElements(names));</span><br><span class="line">        mapSharedElement(names, sharedElements, getAuthor());</span><br><span class="line">        mapSharedElement(names, sharedElements, getPhoto());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBinding</span><span class="params">(@NonNull DetailViewBinding binding)</span> </span>&#123;</span><br><span class="line">        currentDetailBinding = binding;</span><br><span class="line">        currentPhotoBinding = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBinding</span><span class="params">(@NonNull PhotoItemBinding binding)</span> </span>&#123;</span><br><span class="line">        currentPhotoBinding = binding;</span><br><span class="line">        currentDetailBinding = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> TextView <span class="title">getAuthor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (currentPhotoBinding != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> currentPhotoBinding.author;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentDetailBinding != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> currentDetailBinding.author;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Must set a binding before transitioning."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ImageView <span class="title">getPhoto</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (currentPhotoBinding != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> currentPhotoBinding.photo;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentDetailBinding != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> currentDetailBinding.photo;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Must set a binding before transitioning."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Maps all views that don't start with "android" namespace.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> names All shared element names.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The obsolete shared element names.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">mapObsoleteElements</span><span class="params">(List&lt;String&gt; names)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; elementsToRemove = <span class="keyword">new</span> ArrayList&lt;&gt;(names.size());</span><br><span class="line">        <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">            <span class="keyword">if</span> (name.startsWith(<span class="string">"android"</span>)) <span class="keyword">continue</span>;</span><br><span class="line">            elementsToRemove.add(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> elementsToRemove;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Removes obsolete elements from names and shared elements.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> names            Shared element names.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sharedElements   Shared elements.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> elementsToRemove The elements that should be removed.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeObsoleteElements</span><span class="params">(List&lt;String&gt; names,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        Map&lt;String, View&gt; sharedElements,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        List&lt;String&gt; elementsToRemove)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (elementsToRemove.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            names.removeAll(elementsToRemove);</span><br><span class="line">            <span class="keyword">for</span> (String elementToRemove : elementsToRemove) &#123;</span><br><span class="line">                sharedElements.remove(elementToRemove);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Puts a shared element to transitions and names.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> names          The names for this transition.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sharedElements The elements for this transition.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> view           The view to add.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mapSharedElement</span><span class="params">(List&lt;String&gt; names, Map&lt;String, View&gt; sharedElements, View view)</span> </span>&#123;</span><br><span class="line">        String transitionName = view.getTransitionName();</span><br><span class="line">        names.add(transitionName);</span><br><span class="line">        sharedElements.put(transitionName, view);</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">forceSharedElementLayout</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> widthSpec = View.MeasureSpec.makeMeasureSpec(view.getWidth(),</span><br><span class="line">                View.MeasureSpec.EXACTLY);</span><br><span class="line">        <span class="keyword">int</span> heightSpec = View.MeasureSpec.makeMeasureSpec(view.getHeight(),</span><br><span class="line">                View.MeasureSpec.EXACTLY);</span><br><span class="line">        view.measure(widthSpec, heightSpec);</span><br><span class="line">        view.layout(view.getLeft(), view.getTop(), view.getRight(), view.getBottom());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上就是从MainActivity点击跳转到DetailActivity的全部流程，当然Unsplash示例还有ViewPager以及返回动画效果。</p>
<p>当我们左右滑动时会调用DetailViewPagerAdapter的setPrimaryItem，在这个方法中我们设置的上面Callback的View binding，将其置为当前的ImageView，此时如果点击返回键，那么Callback的执行顺序是<code>onMapSharedElements-&gt;onMapSharedElements-&gt;onSharedElementEnd-&gt;onSharedElementStart-&gt;onSharedElementStart-&gt;onSharedElementEnd</code>，且都是在DetailActivity的onPause之前执行的，这里分为两个阶段，因为此时在两个Activity中都有Callback，第一个onMapSharedElements是DetailActivity的，这里重新绑定position为4的ImageView；第二个onMapSharedElements是MainActivity的的，在onActivityReenter方法（Activity返回）中被调用，此时MainActivity已经知道了当前position为4，因此滑动RecyclerView到position为4的位置，并且将其对应的binding传入MainActivity的Callback中；然后是<code>onSharedElementEnd-&gt;onSharedElementStart</code>，这个状态是DetailActivity的动作，很显然这个效果就是上面动画的逆过程；再是<code>onSharedElementStart-&gt;onSharedElementEnd</code>，这个是MainActivity的动画过程，前面已经在onActivityReenter方法中获取了position和binding等数据，此时传入Callback中的Intent没有存储TextView的属性，因此这个过程在MainActivity中没有对共享元素产生任何动画效果。</p>
<h3 id="3-2-在Fragment中实现类似效果"><a href="#3-2-在Fragment中实现类似效果" class="headerlink" title="3.2 在Fragment中实现类似效果"></a>3.2 在Fragment中实现类似效果</h3><p>在Fragment中实现类似ImageView共享元素+ViewPager的效果会遇到几个问题，一是Fragment仅支持一个元素的动画，所以不能再使用TextView和ImageView一起变化；二是Fragment没有类似Activity的onActivityReenter方法，因此Fragment无法知道是从哪个position返回的，也就是说返回动画可能会出错，当然通过传参的方式（可能有传空数据的异常）或者ViewModel的方式是可以共享数据，如果没有使用ViewModel，那么可以考虑禁用返回动画来避免错误，当然动画效果就不是很好。具体代码可参考<a href="https://github.com/android/animation-samples" target="_blank" rel="noopener">Github animation-samples</a>中的GridToPager示例。</p>
<p>如果使用ViewModel来实现相同的效果可以参考<a href="https://github.com/zhuantou233/ShareElementWithViewModel" target="_blank" rel="noopener">ShareElementWithViewModel</a>。大部分代码都是参考<a href="https://github.com/android/animation-samples" target="_blank" rel="noopener">Github animation-samples</a>中的示例，仅修改了数据处理部分以使用ViewModel。下面大致说明一下修改的思路。</p>
<p>首先是依赖库，包括ViewModel和Navigation，以及使用了Databinding，用Glide加载图片</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    dataBinding &#123;</span><br><span class="line">        enabled = <span class="keyword">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    implementation <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</span><br><span class="line">    implementation <span class="string">'androidx.appcompat:appcompat:1.1.0'</span></span><br><span class="line">    implementation <span class="string">'androidx.constraintlayout:constraintlayout:1.1.3'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> lifecycle_version = <span class="string">"2.1.0"</span></span><br><span class="line">    implementation <span class="string">"androidx.lifecycle:lifecycle-extensions:$lifecycle_version"</span></span><br><span class="line"></span><br><span class="line">    implementation <span class="string">"androidx.recyclerview:recyclerview:1.1.0"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> nav_version = <span class="string">"2.1.0"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Java language implementation</span></span><br><span class="line">    implementation <span class="string">"androidx.navigation:navigation-fragment:$nav_version"</span></span><br><span class="line">    implementation <span class="string">"androidx.navigation:navigation-ui:$nav_version"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    implementation <span class="string">'com.github.bumptech.glide:glide:4.10.0'</span></span><br><span class="line">    implementation <span class="string">'androidx.legacy:legacy-support-v4:1.0.0'</span></span><br><span class="line">    annotationProcessor <span class="string">'com.github.bumptech.glide:compiler:4.10.0'</span></span><br><span class="line"></span><br><span class="line">    implementation <span class="string">'com.google.android.material:material:1.0.0'</span></span><br><span class="line">    implementation <span class="string">'com.squareup.retrofit2:retrofit:2.7.1'</span></span><br><span class="line">    implementation <span class="string">'com.squareup.retrofit2:converter-gson:2.7.1'</span></span><br><span class="line"></span><br><span class="line">    testImplementation <span class="string">'junit:junit:4.12'</span></span><br><span class="line">    androidTestImplementation <span class="string">'androidx.test.ext:junit:1.1.1'</span></span><br><span class="line">    androidTestImplementation <span class="string">'androidx.test.espresso:espresso-core:3.2.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用Navigation控制Fragment跳转，而且仅使用GridListFragment跳转到DetailPagerFragment，同时MainActivity不再进行任何操作。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">navigation</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/nav_graph"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:startDestination</span>=<span class="string">"@id/listFragment"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/listFragment"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">"us.zoom.shareelementwithviewmodel.ui.grid.GridListFragment"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"fragment_list"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:layout</span>=<span class="string">"@layout/fragment_list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/action_listFragment_to_detailPagerFragment"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:destination</span>=<span class="string">"@id/detailPagerFragment"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fragment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/detailPagerFragment"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">"us.zoom.shareelementwithviewmodel.ui.pager.DetailPagerFragment"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"fragment_detail_pager"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:layout</span>=<span class="string">"@layout/fragment_detail_pager"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">navigation</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>实现ImageListViewModel，用于保存数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageListViewModel</span> <span class="keyword">extends</span> <span class="title">ViewModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存从api获取到的数据</span></span><br><span class="line">    <span class="keyword">private</span> MutableLiveData&lt;List&lt;Photo&gt;&gt; photos = <span class="keyword">new</span> MutableLiveData&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> LiveData&lt;List&lt;Photo&gt;&gt; getPhotos() &#123;</span><br><span class="line">        <span class="keyword">return</span> photos;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 保存请求过程的状态</span></span><br><span class="line">    <span class="keyword">private</span> MutableLiveData&lt;Boolean&gt; isLoading = <span class="keyword">new</span> MutableLiveData&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LiveData&lt;Boolean&gt; <span class="title">getIsLoading</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isLoading;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 保存ViewPager中当前位置</span></span><br><span class="line">    <span class="keyword">private</span> MutableLiveData&lt;Integer&gt; currentPosition = <span class="keyword">new</span> MutableLiveData&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LiveData&lt;Integer&gt; <span class="title">getCurrentPosition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> currentPosition;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCurrentPosition</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        currentPosition.setValue(position);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        loadPhotos();</span><br><span class="line">        setCurrentPosition(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadPhotos</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        isLoading.setValue(<span class="keyword">true</span>);</span><br><span class="line">        UnsplashService unsplashApi = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">                .baseUrl(UnsplashService.BASEURL)</span><br><span class="line">                .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">                .build()</span><br><span class="line">                .create(UnsplashService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        unsplashApi.getPhoto().enqueue(<span class="keyword">new</span> Callback&lt;List&lt;Photo&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call&lt;List&lt;Photo&gt;&gt; call, Response&lt;List&lt;Photo&gt;&gt; response)</span> </span>&#123;</span><br><span class="line">                List&lt;Photo&gt; list = response.body();</span><br><span class="line">                <span class="keyword">if</span> (list != <span class="keyword">null</span> &amp;&amp; !list.isEmpty()) &#123;</span><br><span class="line">                    photos.setValue(<span class="keyword">new</span> ArrayList&lt;&gt;(list.subList(list.size() - PHOTO_COUNT,</span><br><span class="line">                            list.size())));</span><br><span class="line">                &#125;</span><br><span class="line">                isLoading.setValue(<span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call&lt;List&lt;Photo&gt;&gt; call, Throwable t)</span> </span>&#123;</span><br><span class="line">                Log.i(<span class="string">"ShareElement"</span>, <span class="string">"UnsplashService onFailure: "</span> + t.getMessage());</span><br><span class="line">                isLoading.setValue(<span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Unsplash示例使用的api有时候会用不了，可以用本地的url替代，对应需要修改Photo的getPhotoUrl方法</span></span><br><span class="line">        <span class="comment">// List&lt;Photo&gt; data = new ArrayList&lt;&gt;();</span></span><br><span class="line">        <span class="comment">// for (String url : Constants.getImageUrls()) &#123;</span></span><br><span class="line">        <span class="comment">//     Photo photo = new Photo("", 0, 0, "", url.hashCode(), "", "", url);</span></span><br><span class="line">        <span class="comment">//     data.add(photo);</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// photos.setValue(data);</span></span><br><span class="line">        <span class="comment">// isLoading.setValue(false);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Databinding适配，修改BindingAdapters，实现Glide加载并增加回调，回调会影响后续Fragment跳转的动画</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BindingAdapters</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定RecyclerView的list数据</span></span><br><span class="line">    <span class="meta">@BindingAdapter</span>(<span class="string">"listData"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bindRecyclerView</span><span class="params">(RecyclerView recyclerView, List&lt;Photo&gt; data)</span> </span>&#123;</span><br><span class="line">        GridPhotoAdapter adapter = (GridPhotoAdapter) recyclerView.getAdapter();</span><br><span class="line">        <span class="keyword">assert</span> adapter != <span class="keyword">null</span>;</span><br><span class="line">        adapter.submitList(data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 绑定Progressbar的状态</span></span><br><span class="line">    <span class="meta">@BindingAdapter</span>(<span class="string">"loadingStatus"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bindStatus</span><span class="params">(ProgressBar progressBar, Boolean isLoading)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isLoading) &#123;</span><br><span class="line">            progressBar.setVisibility(View.VISIBLE);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            progressBar.setVisibility(View.GONE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Glide加载以及增加回调</span></span><br><span class="line">    <span class="meta">@BindingAdapter</span>(value = &#123;<span class="string">"imageUrl"</span>, <span class="string">"glideListener"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bindImage</span><span class="params">(ImageView imageView, Photo photo, OnGlideRequestListener listener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> requestedPhotoWidth = imageView.getContext().getResources().getDisplayMetrics().widthPixels;</span><br><span class="line">        Glide.with(imageView.getContext())</span><br><span class="line">                .load(photo.getPhotoUrl(requestedPhotoWidth))</span><br><span class="line">                .placeholder(R.drawable.ic_launcher_foreground)</span><br><span class="line">                .override(ImageSize.NORMAL[<span class="number">0</span>], ImageSize.NORMAL[<span class="number">1</span>])</span><br><span class="line">                .addListener(<span class="keyword">new</span> RequestListener&lt;Drawable&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onLoadFailed</span><span class="params">(@Nullable GlideException e, Object model, Target&lt;Drawable&gt; target, <span class="keyword">boolean</span> isFirstResource)</span> </span>&#123;</span><br><span class="line">                        listener.onLoadFailed(e, model, target, isFirstResource);</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onResourceReady</span><span class="params">(Drawable resource, Object model, Target&lt;Drawable&gt; target, DataSource dataSource, <span class="keyword">boolean</span> isFirstResource)</span> </span>&#123;</span><br><span class="line">                        listener.onResourceReady(resource, model, target, dataSource, isFirstResource);</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .into(imageView);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为使用ViewModel在GridListFragment和DetailPagerFragment共享数据，所以ViewModel与MainActivity绑定</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">viewModel = ViewModelProviders.of(requireActivity()).get(ImageListViewModel<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure>
<p>GridListFragment使用了RecyclerView和Databinding，所以GridPhotoAdapter继承自ListAdapter，并实现DiffUtil.ItemCallback，以及点击事件的监听，又因为共享元素动画效果受Glide加载状态影响，所以需要把加载状态再通过OnLoadCompletedListener传到Fragment中，PhotoViewHolder采用Databinding实现。</p>
<p>在GridListFragment使用<code>postponeEnterTransition()</code>控制加载动画，但是我遇到了一些非常奇怪的问题，所以只能在<code>onStart()</code>中调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onStart();</span><br><span class="line">    <span class="comment">// 其他生命周期会触发不显示RecyclerView</span></span><br><span class="line">    postponeEnterTransition();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为通过GridPhotoAdapter传出了Glide的状态，所以可以在这里控制<code>startPostponedEnterTransition</code>，否则需要将Fragment实例传给Adapter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onImageLoadCompleted</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Call startPostponedEnterTransition only when the 'selected' image loading is completed.</span></span><br><span class="line">    <span class="keyword">if</span> (currentPosition != position) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    startPostponedEnterTransition();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>点击跳转Fragment也可以通过Navigation实现了，同时更新ViewModel的数据，共享元素的绑定也是通过FragmentNavigator.Extras实现，不过看了这个的代码后发现似乎使用Navigation可以实现在Fragment中同时有多个共享元素动画。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onListItemClick</span><span class="params">(View view, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Update the position.</span></span><br><span class="line">    viewModel.setCurrentPosition(position);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Exclude the clicked card from the exit transition (e.g. the card will disappear immediately</span></span><br><span class="line">    <span class="comment">// instead of fading out with the rest to prevent an overlapping animation of fade and move).</span></span><br><span class="line">    <span class="function"><span class="keyword">assert</span> <span class="title">getExitTransition</span><span class="params">()</span> !</span>= <span class="keyword">null</span>;</span><br><span class="line">    ((TransitionSet) getExitTransition()).excludeTarget(view, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    ImageView transitioningView = view.findViewById(R.id.photo);</span><br><span class="line">    FragmentNavigator.Extras extras = <span class="keyword">new</span> FragmentNavigator.Extras.Builder()</span><br><span class="line">            .addSharedElement(transitioningView, transitioningView.getTransitionName())</span><br><span class="line">            .build();</span><br><span class="line">    Navigation.findNavController(view).navigate(R.id.action_listFragment_to_detailPagerFragment, <span class="keyword">null</span>, <span class="keyword">null</span>, extras);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后是DetailPagerFragment和DetailFragment，因为在实现过程中DetailFragment其实不是非常依赖ViewModel的数据，它只是作为显示结果被使用的，无论是当前位置还是全部图片数据都不需要获取或修改，所以DetailFragment仅需要进行Databinding即可，其他左右滑动数据修改都是在DetailPagerFragment中处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DetailFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> <span class="keyword">implements</span> <span class="title">OnGlideRequestListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = DetailFragment<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Photo photo;</span><br><span class="line">    <span class="comment">// 仅需要Photo数据</span></span><br><span class="line">    DetailFragment(Photo photo) &#123;</span><br><span class="line">        <span class="keyword">this</span>.photo = photo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(@NonNull LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class="line"><span class="function"><span class="params">                             Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Inflate the layout for this fragment</span></span><br><span class="line">        FragmentDetailBinding binding = FragmentDetailBinding.inflate(inflater);</span><br><span class="line">        binding.setLifecycleOwner(<span class="keyword">this</span>);</span><br><span class="line">        binding.setListener(<span class="keyword">this</span>);</span><br><span class="line">        binding.setData(photo);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> binding.getRoot();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 同样需要处理动画</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadFailed</span><span class="params">(@Nullable GlideException e, Object model, Target&lt;Drawable&gt; target, <span class="keyword">boolean</span> isFirstResource)</span> </span>&#123;</span><br><span class="line">        requireParentFragment().startPostponedEnterTransition();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResourceReady</span><span class="params">(Drawable resource, Object model, Target&lt;Drawable&gt; target, DataSource dataSource, <span class="keyword">boolean</span> isFirstResource)</span> </span>&#123;</span><br><span class="line">        requireParentFragment().startPostponedEnterTransition();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>DetailViewPagerAdapter的实现就比较简单了，继承自FragmentStatePagerAdapter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DetailViewPagerAdapter</span> <span class="keyword">extends</span> <span class="title">FragmentStatePagerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Photo&gt; photos;</span><br><span class="line"></span><br><span class="line">    DetailViewPagerAdapter(<span class="meta">@NonNull</span> FragmentManager fm, <span class="keyword">int</span> size, List&lt;Photo&gt; photos) &#123;</span><br><span class="line">        <span class="keyword">super</span>(fm, BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT);</span><br><span class="line">        <span class="keyword">this</span>.size = size;</span><br><span class="line">        <span class="keyword">this</span>.photos = photos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DetailFragment(photos.get(position));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后是DetailPagerFragment，ViewModel中Photo数据的观察，以及Toolbar返回功能的修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回现过必须通过onBackPressed实现，否则共享元素动画会消失</span></span><br><span class="line"><span class="keyword">private</span> View.OnClickListener navigateListener = view -&gt; requireActivity().onBackPressed();</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">viewModel.getPhotos().observe(<span class="keyword">this</span>, photos -&gt; viewPager.setAdapter(<span class="keyword">new</span> DetailViewPagerAdapter(</span><br><span class="line">        getChildFragmentManager(), photos.size(), photos)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set the current position and add a listener that will update the selection coordinator when</span></span><br><span class="line"><span class="comment">// paging the images.</span></span><br><span class="line">viewModel.getCurrentPosition().observe(<span class="keyword">this</span>, position -&gt; &#123;</span><br><span class="line">    viewPager.setCurrentItem(position);</span><br><span class="line">    currentPosition = position;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Toolbar toolbar = view.findViewById(R.id.toolbar);</span><br><span class="line">toolbar.setNavigationOnClickListener(navigateListener);</span><br></pre></td></tr></table></figure>
<h2 id="4-使用技巧总结"><a href="#4-使用技巧总结" class="headerlink" title="4. 使用技巧总结"></a>4. 使用技巧总结</h2><ol>
<li>Fragment中使用时，当前Fragment的共享元素的<code>transitionName</code>必须存在但是与目的地Fragment不同也能用，且RecyclerView中的每一个共享元素都必须设置为不同的<code>transitionName</code>（Activity中当前Activity的<code>transitionName</code>可以不设置，包括使用了RecyclerView，目的地Activity必须设置），<strong>但是实际使用时请务必将对应共享元素的<code>transitionName</code>设置为相同（RecyclerView除外）</strong>；</li>
<li>Fragment中使用时，当目的地Fragment中共享元素被嵌套了多层，则可能出现滑动动画缺失现象，可以通过<code>marginTop:1dp</code>解决；Activity中不会有这种现象；</li>
<li>切换动画产生时会导致状态栏、ActionBar以及Toolbar的闪烁，可以通过在动画中将这些View的id排除即可避免；</li>
<li>如果使用了Glide或者Picasso等图片加载框架从网络请求加载图片，可以在Activity中设置<code>supportPostponeEnterTransition()</code>以及<code>supportStartPostponedEnterTransition()</code>方法来确保图片能够先缓存再显示（或者是<code>postponeEnterTransition()</code>和<code>startPostponedEnterTransition()</code>），但是会导致另一个问题，点击跳转非常卡顿；</li>
<li>ViewPager配合使用实现左右滑动查看图片时，返回动画会出错，显示错误的图片，此时可以通过对ViewPager中的Fragment设置<code>setSharedElementReturnTransition(null)</code>来禁用返回动画（<a href="https://mikescamell.com/shared-element-transitions-part-4-recyclerview/" target="_blank" rel="noopener">参考</a>）；</li>
<li>如果需要完成良好的动画效果体验，请参考Github上的示例，在SharedElementCallback中处理共享元素匹配，并在合适的实际调用<code>postponeEnterTransition()</code>和<code>startPostponedEnterTransition()</code>。</li>
</ol>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Material</tag>
        <tag>ShareElement</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu+linuxbrew+zsh+oh-my-zsh</title>
    <url>/archives/3a6fd8b5.html</url>
    <content><![CDATA[<p>参考：</p>
<blockquote>
<p><a href="https://docs.brew.sh/Homebrew-on-Linux" target="_blank" rel="noopener">Homebrew Documentation</a><br><a href="https://ohmyz.sh/" target="_blank" rel="noopener">Oh My ZSH!</a><br><a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Installing-ZSH" target="_blank" rel="noopener">Installing ZSH</a></p>
</blockquote>
<p>租一个服务器能干什么，我想大致分为两个方面：使用和学习。可以将云盘部署到服务器上，那么你就拥有了一个私有云盘，也可以将WordPress部署到服务器上，那么你就拥有了一个可以写博客的个人网站；学习JavaWeb，需要了解Tomcat、MySQL、Nginx、Redis等等，你可以在服务器上运行这些程序而不必使用宝贵的本地资源。为了后续的使用以及学习，首先需要优化一下我们的服务器配置，因为控制服务器一般都是通过命令行，所以前期优化一下，后续会更好操作。</p>
<a id="more"></a>
<h2 id="1-为什么需要标题中的工具"><a href="#1-为什么需要标题中的工具" class="headerlink" title="1. 为什么需要标题中的工具"></a>1. 为什么需要标题中的工具</h2><p>首先你需要一个云服务器，可以是华为云、腾讯云、阿里云等等，注册购买即可，最便宜的1核心CPU加2GB内存加40GB/50GB的硬盘存储基本足够前期的学习使用，你可以先租1个月玩玩，如果有学生优惠基本上一个月只要10元。云服务器的操作系统一般有Windows Server、CentOS以及Ubuntu等等，我最常用的是Ubuntu而且出了问题能够最容易找到解决方法，稳定性什么的以后再说。Ubuntu版本可以直接上18.04，不用考虑旧版本16.04。</p>
<p>得到服务器后我会先安装zsh，zsh就是命令行工具，我们在服务器上输入的指令都通过zsh执行，zsh搭配oh-my-zsh可以实现非常舒适的UI效果并且提供一些很有用的插件，比如自动提示命令等等。</p>
<p>然后安装Linuxbrew，这是一个包管理工具，是从Homebrew迁移而来（Homebrew只能在macOS上使用），在服务器上安装了brew之后，后续需要安装的软件就都可以通过brew安装，如果brew仓库没有再考虑自行安装。使用brew最明显的好处是你可以直接通过brew更新、删除、查看所安装的软件，而且brew可以提供快速开启某些服务的命令，比如MySQL、Redis、Tomcat等等。</p>
<h2 id="2-Ubuntu服务器配置"><a href="#2-Ubuntu服务器配置" class="headerlink" title="2. Ubuntu服务器配置"></a>2. Ubuntu服务器配置</h2><p>我的服务器是Ubuntu18.04，拿到服务器后首先可以ssh登录上服务器，购买之后会给你用户名和首次登录密码，有些厂商给的是root用户有些是其他用户例如ubuntu</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh ubuntu@175.24.47.141</span><br></pre></td></tr></table></figure>
<p>第一次登录需要输入密码</p>
<p><img src="http://114.116.9.65:7777/images/2020/01/18/ssh.png" alt="ssh.png"><br><!--  —&gt;</p>
<p>登录成功结果</p>
<p><img src="http://114.116.9.65:7777/images/2020/01/18/login.png" alt="login.png"><br><!--  —&gt;</p>
<p>一般来说初始的服务器是不支持中文的，此时你将输入法调为中文也是无法打字的，而且某些文件如果里面包含中文，则会显示为乱码或者问号，所以第一步我会先配置中文支持。</p>
<h3 id="2-1-中文支持"><a href="#2-1-中文支持" class="headerlink" title="2.1 中文支持"></a>2.1 中文支持</h3><p>先给出我写好的脚本，在服务器任意目录保存为<code>ch.sh</code>，然后执行<code>chmod 777 ch.sh</code>，最后执行<code>sh ch.sh</code>，服务器会重启，之后再登录就可以用中文打字了，而且中文不会乱码。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"------Start to support Chinese------"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"------Install Chinese language pack------"</span></span><br><span class="line">sudo apt-get install language-pack-zh-hans -y</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"------Set environment------"</span></span><br><span class="line">sudo sed -i <span class="string">'$aLANG=zh_CN.UTF-8\nLANGUAGE=zh_CN:zh:en_US:en\nLC_CTYPE="en_US.UTF-8"\nLC_ALL=en_US.UTF-8'</span> /etc/environment</span><br><span class="line"></span><br><span class="line">sudo locale-gen</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"------Reboot------"</span></span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>
<p>然后再说明一下脚本里都干了些什么，首先<code>sudo apt-get install language-pack-zh-hans -y</code>安装中文支持包，然后执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo sed -i '$aLANG=zh_CN.UTF-8\nLANGUAGE=zh_CN:zh:en_US:en\nLC_CTYPE="en_US.UTF-8"\nLC_ALL=en_US.UTF-8 /etc/environment</span><br></pre></td></tr></table></figure>
<p>在<code>/etc/environment</code>末尾添加以下几行配置，这个是永久设置环境变量</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">LANG=zh_CN.UTF-8</span><br><span class="line">LANGUAGE=zh_CN:zh:en_US:en</span><br><span class="line">LC_CTYPE=<span class="string">"en_US.UTF-8"</span></span><br><span class="line">LC_ALL=en_US.UTF-8</span><br></pre></td></tr></table></figure>
<p>最后是<code>sudo locale-gen</code>编译生成编码相关文件，然后<code>sudo reboot</code>重启。</p>
<h3 id="2-2-ssh免密登录"><a href="#2-2-ssh免密登录" class="headerlink" title="2.2 ssh免密登录"></a>2.2 ssh免密登录</h3><p>每次ssh登录都需要输入密码，这是非常烦人的事情，可以配置ssh免密登录，需要本机和服务器做一个联动，你在本机生成一个key，然后将key保存到服务器上的某个位置，之后再从本机ssh服务器时，服务器就知道了是从哪个机器访问的服务器，如果有对应的key就直接让你连接，否则需要密码。</p>
<p>本机输入指令<code>ssh-keygen -t rsa</code>，然后你就可以在<code>/home/usera/.ssh/id_rsa.pub</code>中查看生成的密钥，注意这个目录是在指令执行了输出结果里出现的，不是所有人都一样</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[usera@local ~]$ ssh-keygen -t rsa</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/home/usera/.ssh/id_rsa): </span><br><span class="line">Created directory '/home/usera/.ssh'.</span><br><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved in /home/usera/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /home/usera/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">39:f2:fc:70:ef:e9:bd:05:40:6e:64:b0:99:56:6e:01 usera@local</span><br><span class="line">The key's randomart image is:</span><br><span class="line">+--[ RSA 2048]----+</span><br><span class="line">|          Eo*    |</span><br><span class="line">|           @ .   |</span><br><span class="line">|          = *    |</span><br><span class="line">|         o o .   |</span><br><span class="line">|      . S     .  |</span><br><span class="line">|       + .     . |</span><br><span class="line">|        + .     .|</span><br><span class="line">|         + . o . |</span><br><span class="line">|          .o= o. |</span><br><span class="line">+-----------------+</span><br></pre></td></tr></table></figure>
<p>我们需要的是<code>id_rsa.pub</code>的内容，以<code>ssh-rsa</code>开头的文本，将<code>id_rsa.pub</code>的内容复制一份放到服务器的根目录的<code>.ssh/authorized_keys</code>文件中，如果没有<code>.ssh</code>目录及<code>authorized_keys</code>文件，那就创建一份，之后ssh就不需要密码了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDG79mJLYz80Q+kh7MNUH4uLc&#x2F;sBRyJPQqjOoSEA&#x2F;co2XXXXXXXXjrxcLoKySsGchi&#x2F;zALeo9aTaNZSn8nNwaIcg&#x2F;S+yxZeB6XuqJhjWxQGOonRbAPPcnOldxk&#x2F;S0J4WS+cFbp0gCmBuu17fjaQXXXXXXXXXXXXXXXXXXXXXXXXXX+N9YXXXXXXXXXXXXXXXXm37ArgxfKoh5U0W2pZhDDdeHeriK5oPu&#x2F;D8ZN36RVMQ&#x2F;kxUnuA+Kpv35MjboAjPsT6sa+RnsT&#x2F;Ftg&#x2F;ZQXOMV&#x2F;Tz7UQa7vOERjFoTzMidHhwztZuOw&#x2F;cTNpDozextbPGBxoWb7rpA0sMNLNoPAX XXXXXXXXXXX</span><br></pre></td></tr></table></figure>
<h2 id="3-zsh-amp-oh-my-zsh安装"><a href="#3-zsh-amp-oh-my-zsh安装" class="headerlink" title="3. zsh&amp;oh-my-zsh安装"></a>3. zsh&amp;oh-my-zsh安装</h2><h3 id="3-1-zsh"><a href="#3-1-zsh" class="headerlink" title="3.1 zsh"></a>3.1 zsh</h3><p>接下来安装zsh和oh-my-zsh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install zsh</span><br></pre></td></tr></table></figure>
<p>然后设置默认为zsh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>
<p>重新ssh登录，会提示需要完成zsh配置，这里选<code>1</code>即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">This is the Z Shell configuration function for new users,</span><br><span class="line">zsh-newuser-install.</span><br><span class="line">You are seeing this message because you have no zsh startup files</span><br><span class="line">(the files .zshenv, .zprofile, .zshrc, .zlogin in the directory</span><br><span class="line">~).  This function can help you with a few settings that should</span><br><span class="line">make your use of the shell easier.</span><br><span class="line"></span><br><span class="line">You can:</span><br><span class="line"></span><br><span class="line">(q)  Quit and do nothing.  The function will be run again next time.</span><br><span class="line"></span><br><span class="line">(0)  Exit, creating the file ~/.zshrc containing just a comment.</span><br><span class="line">     That will prevent this function being run again.</span><br><span class="line"></span><br><span class="line">(1)  Continue to the main menu.</span><br><span class="line"></span><br><span class="line">(2)  Populate your ~/.zshrc with the configuration recommended</span><br><span class="line">     by the system administrator and exit (you will need to edit</span><br><span class="line">     the file by hand, if so desired).</span><br><span class="line"></span><br><span class="line">--- Type one of the keys in parentheses ---</span><br></pre></td></tr></table></figure>
<p>然后会出现一些初始配置，这里直接选<code>0</code>即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Please pick one of the following options:</span><br><span class="line"></span><br><span class="line">(1)  Configure settings for history, i.e. command lines remembered</span><br><span class="line">     and saved by the shell.  (Recommended.)</span><br><span class="line"></span><br><span class="line">(2)  Configure the new completion system.  (Recommended.)</span><br><span class="line"></span><br><span class="line">(3)  Configure how keys behave when editing command lines.  (Recommended.)</span><br><span class="line"></span><br><span class="line">(4)  Pick some of the more common shell options.  These are simple "on"</span><br><span class="line">     or "off" switches controlling the shell's features.</span><br><span class="line"></span><br><span class="line">(0)  Exit, creating a blank ~/.zshrc file.</span><br><span class="line"></span><br><span class="line">(a)  Abort all settings and start from scratch.  Note this will overwrite</span><br><span class="line">     any settings from zsh-newuser-install already in the startup file.</span><br><span class="line">     It will not alter any of your other settings, however.</span><br><span class="line"></span><br><span class="line">(q)  Quit and do nothing else.  The function will be run again next time.</span><br><span class="line">--- Type one of the keys in parentheses ---</span><br></pre></td></tr></table></figure>
<p>最后安装完成的结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">The function will not be run in future, but you can run</span><br><span class="line">it yourself as follows:</span><br><span class="line">  autoload -Uz zsh-newuser-install</span><br><span class="line">  zsh-newuser-install -f</span><br><span class="line"></span><br><span class="line">The code added to ~/.zshrc is marked by the lines</span><br><span class="line"><span class="meta">#</span><span class="bash"> Lines configured by zsh-newuser-install</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> End of lines configured by zsh-newuser-install</span></span><br><span class="line">You should not edit anything between these lines if you intend to</span><br><span class="line">run zsh-newuser-install again.  You may, however, edit any other part</span><br><span class="line">of the file.</span><br><span class="line"><span class="meta">#</span><span class="bash"> 此时你的用户名会改变，且UI有变化</span></span><br><span class="line"><span class="meta">VM-0-9-ubuntu%</span></span><br></pre></td></tr></table></figure>
<h3 id="3-2-oh-my-zsh"><a href="#3-2-oh-my-zsh" class="headerlink" title="3.2 oh-my-zsh"></a>3.2 oh-my-zsh</h3><p>然后安装oh-my-zsh，这里可能出现443问题<code>curl: (7) Failed to connect to raw.github.com port 443: Connection refused</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"</span><br></pre></td></tr></table></figure>
<p>翻墙查看<code>https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh</code>的内容，并将内容保存为<code>install.sh</code>，然后执行<code>sh install.sh</code>即可完成安装。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This script should be run via curl:</span></span><br><span class="line"><span class="comment">#   sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"</span></span><br><span class="line"><span class="comment"># or wget:</span></span><br><span class="line"><span class="comment">#   sh -c "$(wget -qO- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># As an alternative, you can first download the install script and run it afterwards:</span></span><br><span class="line"><span class="comment">#   wget https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh</span></span><br><span class="line"><span class="comment">#   sh install.sh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You can tweak the install behavior by setting variables when running the script. For</span></span><br><span class="line"><span class="comment"># example, to change the path to the Oh My Zsh repository:</span></span><br><span class="line"><span class="comment">#   ZSH=~/.zsh sh install.sh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Respects the following environment variables:</span></span><br><span class="line"><span class="comment">#   ZSH     - path to the Oh My Zsh repository folder (default: $HOME/.oh-my-zsh)</span></span><br><span class="line"><span class="comment">#   REPO    - name of the GitHub repo to install from (default: ohmyzsh/ohmyzsh)</span></span><br><span class="line"><span class="comment">#   REMOTE  - full remote URL of the git repo to install (default: GitHub via HTTPS)</span></span><br><span class="line"><span class="comment">#   BRANCH  - branch to check out immediately after install (default: master)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Other options:</span></span><br><span class="line"><span class="comment">#   CHSH    - 'no' means the installer will not change the default shell (default: yes)</span></span><br><span class="line"><span class="comment">#   RUNZSH  - 'no' means the installer will not run zsh after the install (default: yes)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You can also pass some arguments to the install script to set some these options:</span></span><br><span class="line"><span class="comment">#   --skip-chsh: has the same behavior as setting CHSH to 'no'</span></span><br><span class="line"><span class="comment">#   --unattended: sets both CHSH and RUNZSH to 'no'</span></span><br><span class="line"><span class="comment"># For example:</span></span><br><span class="line"><span class="comment">#   sh install.sh --unattended</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="comment"># Default settings</span></span><br><span class="line">ZSH=<span class="variable">$&#123;ZSH:-~/.oh-my-zsh&#125;</span></span><br><span class="line">REPO=<span class="variable">$&#123;REPO:-ohmyzsh/ohmyzsh&#125;</span></span><br><span class="line">REMOTE=<span class="variable">$&#123;REMOTE:-https://github.com/$&#123;REPO&#125;</span>.git&#125;</span><br><span class="line">BRANCH=<span class="variable">$&#123;BRANCH:-master&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Other options</span></span><br><span class="line">CHSH=<span class="variable">$&#123;CHSH:-yes&#125;</span></span><br><span class="line">RUNZSH=<span class="variable">$&#123;RUNZSH:-yes&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">command_exists</span></span>() &#123;</span><br><span class="line"> <span class="built_in">command</span> -v <span class="string">"<span class="variable">$@</span>"</span> &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">error</span></span>() &#123;</span><br><span class="line"> <span class="built_in">echo</span> <span class="variable">$&#123;RED&#125;</span><span class="string">"Error: <span class="variable">$@</span>"</span><span class="variable">$&#123;RESET&#125;</span> &gt;&amp;2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">setup_color</span></span>() &#123;</span><br><span class="line"> <span class="comment"># Only use colors if connected to a terminal</span></span><br><span class="line"> <span class="keyword">if</span> [ -t 1 ]; <span class="keyword">then</span></span><br><span class="line">  RED=$(<span class="built_in">printf</span> <span class="string">'\033[31m'</span>)</span><br><span class="line">  GREEN=$(<span class="built_in">printf</span> <span class="string">'\033[32m'</span>)</span><br><span class="line">  YELLOW=$(<span class="built_in">printf</span> <span class="string">'\033[33m'</span>)</span><br><span class="line">  BLUE=$(<span class="built_in">printf</span> <span class="string">'\033[34m'</span>)</span><br><span class="line">  BOLD=$(<span class="built_in">printf</span> <span class="string">'\033[1m'</span>)</span><br><span class="line">  RESET=$(<span class="built_in">printf</span> <span class="string">'\033[m'</span>)</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">  RED=<span class="string">""</span></span><br><span class="line">  GREEN=<span class="string">""</span></span><br><span class="line">  YELLOW=<span class="string">""</span></span><br><span class="line">  BLUE=<span class="string">""</span></span><br><span class="line">  BOLD=<span class="string">""</span></span><br><span class="line">  RESET=<span class="string">""</span></span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">setup_ohmyzsh</span></span>() &#123;</span><br><span class="line"> <span class="comment"># Prevent the cloned repository from having insecure permissions. Failing to do</span></span><br><span class="line"> <span class="comment"># so causes compinit() calls to fail with "command not found: compdef" errors</span></span><br><span class="line"> <span class="comment"># for users with insecure umasks (e.g., "002", allowing group writability). Note</span></span><br><span class="line"> <span class="comment"># that this will be ignored under Cygwin by default, as Windows ACLs take</span></span><br><span class="line"> <span class="comment"># precedence over umasks except for filesystems mounted with option "noacl".</span></span><br><span class="line"> <span class="built_in">umask</span> g-w,o-w</span><br><span class="line"></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;BLUE&#125;</span>Cloning Oh My Zsh...<span class="variable">$&#123;RESET&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"> command_exists git || &#123;</span><br><span class="line">  error <span class="string">"git is not installed"</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> [ <span class="string">"<span class="variable">$OSTYPE</span>"</span> = cygwin ] &amp;&amp; git --version | grep -q msysgit; <span class="keyword">then</span></span><br><span class="line">  error <span class="string">"Windows/MSYS Git is not supported on Cygwin"</span></span><br><span class="line">  error <span class="string">"Make sure the Cygwin git package is installed and is first on the \$PATH"</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"> git <span class="built_in">clone</span> -c core.eol=lf -c core.autocrlf=<span class="literal">false</span> \</span><br><span class="line">  -c fsck.zeroPaddedFilemode=ignore \</span><br><span class="line">  -c fetch.fsck.zeroPaddedFilemode=ignore \</span><br><span class="line">  -c receive.fsck.zeroPaddedFilemode=ignore \</span><br><span class="line">  --depth=1 --branch <span class="string">"<span class="variable">$BRANCH</span>"</span> <span class="string">"<span class="variable">$REMOTE</span>"</span> <span class="string">"<span class="variable">$ZSH</span>"</span> || &#123;</span><br><span class="line">  error <span class="string">"git clone of oh-my-zsh repo failed"</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">echo</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">setup_zshrc</span></span>() &#123;</span><br><span class="line"> <span class="comment"># Keep most recent old .zshrc at .zshrc.pre-oh-my-zsh, and older ones</span></span><br><span class="line"> <span class="comment"># with datestamp of installation that moved them aside, so we never actually</span></span><br><span class="line"> <span class="comment"># destroy a user's original zshrc</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;BLUE&#125;</span>Looking for an existing zsh config...<span class="variable">$&#123;RESET&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># Must use this exact name so uninstall.sh can find it</span></span><br><span class="line"> OLD_ZSHRC=~/.zshrc.pre-oh-my-zsh</span><br><span class="line"> <span class="keyword">if</span> [ -f ~/.zshrc ] || [ -h ~/.zshrc ]; <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">if</span> [ -e <span class="string">"<span class="variable">$OLD_ZSHRC</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">   OLD_OLD_ZSHRC=<span class="string">"<span class="variable">$&#123;OLD_ZSHRC&#125;</span>-<span class="variable">$(date +%Y-%m-%d_%H-%M-%S)</span>"</span></span><br><span class="line">   <span class="keyword">if</span> [ -e <span class="string">"<span class="variable">$OLD_OLD_ZSHRC</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    error <span class="string">"<span class="variable">$OLD_OLD_ZSHRC</span> exists. Can't back up <span class="variable">$&#123;OLD_ZSHRC&#125;</span>"</span></span><br><span class="line">    error <span class="string">"re-run the installer again in a couple of seconds"</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line">   mv <span class="string">"<span class="variable">$OLD_ZSHRC</span>"</span> <span class="string">"<span class="variable">$&#123;OLD_OLD_ZSHRC&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;YELLOW&#125;</span>Found old ~/.zshrc.pre-oh-my-zsh."</span> \</span><br><span class="line">    <span class="string">"<span class="variable">$&#123;GREEN&#125;</span>Backing up to <span class="variable">$&#123;OLD_OLD_ZSHRC&#125;</span><span class="variable">$&#123;RESET&#125;</span>"</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;YELLOW&#125;</span>Found ~/.zshrc.<span class="variable">$&#123;RESET&#125;</span> <span class="variable">$&#123;GREEN&#125;</span>Backing up to <span class="variable">$&#123;OLD_ZSHRC&#125;</span><span class="variable">$&#123;RESET&#125;</span>"</span></span><br><span class="line">  mv ~/.zshrc <span class="string">"<span class="variable">$OLD_ZSHRC</span>"</span></span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;GREEN&#125;</span>Using the Oh My Zsh template file and adding it to ~/.zshrc.<span class="variable">$&#123;RESET&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"> cp <span class="string">"<span class="variable">$ZSH</span>/templates/zshrc.zsh-template"</span> ~/.zshrc</span><br><span class="line"> sed <span class="string">"/^export ZSH=/ c\\</span></span><br><span class="line"><span class="string">export ZSH=\"<span class="variable">$ZSH</span>\"</span></span><br><span class="line"><span class="string">"</span> ~/.zshrc &gt; ~/.zshrc-omztemp</span><br><span class="line"> mv -f ~/.zshrc-omztemp ~/.zshrc</span><br><span class="line"></span><br><span class="line"> <span class="built_in">echo</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">setup_shell</span></span>() &#123;</span><br><span class="line"> <span class="comment"># Skip setup if the user wants or stdin is closed (not running interactively).</span></span><br><span class="line"> <span class="keyword">if</span> [ <span class="variable">$CHSH</span> = no ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># If this user's login shell is already "zsh", do not attempt to switch.</span></span><br><span class="line"> <span class="keyword">if</span> [ <span class="string">"<span class="variable">$(basename "$SHELL")</span>"</span> = <span class="string">"zsh"</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># If this platform doesn't provide a "chsh" command, bail out.</span></span><br><span class="line"> <span class="keyword">if</span> ! command_exists chsh; <span class="keyword">then</span></span><br><span class="line">  cat &lt;&lt;-EOF</span><br><span class="line">   I can<span class="string">'t change your shell automatically because this system does not have chsh.</span></span><br><span class="line"><span class="string">   $&#123;BLUE&#125;Please manually change your default shell to zsh$&#123;RESET&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="string">  return</span></span><br><span class="line"><span class="string"> fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> echo "$&#123;BLUE&#125;Time to change your default shell to zsh:$&#123;RESET&#125;"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> # Prompt for user choice on changing the default login shell</span></span><br><span class="line"><span class="string"> printf "$&#123;YELLOW&#125;Do you want to change your default shell to zsh? [Y/n]$&#123;RESET&#125; "</span></span><br><span class="line"><span class="string"> read opt</span></span><br><span class="line"><span class="string"> case $opt in</span></span><br><span class="line"><span class="string">  y*|Y*|"") echo "Changing the shell..." ;;</span></span><br><span class="line"><span class="string">  n*|N*) echo "Shell change skipped."; return ;;</span></span><br><span class="line"><span class="string">  *) echo "Invalid choice. Shell change skipped."; return ;;</span></span><br><span class="line"><span class="string"> esac</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> # Check if we'</span>re running on Termux</span><br><span class="line"> <span class="keyword">case</span> <span class="string">"<span class="variable">$PREFIX</span>"</span> <span class="keyword">in</span></span><br><span class="line">  *com.termux*) termux=<span class="literal">true</span>; zsh=zsh ;;</span><br><span class="line">  *) termux=<span class="literal">false</span> ;;</span><br><span class="line"> <span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> [ <span class="string">"<span class="variable">$termux</span>"</span> != <span class="literal">true</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="comment"># Test for the right location of the "shells" file</span></span><br><span class="line">  <span class="keyword">if</span> [ -f /etc/shells ]; <span class="keyword">then</span></span><br><span class="line">   shells_file=/etc/shells</span><br><span class="line">  <span class="keyword">elif</span> [ -f /usr/share/defaults/etc/shells ]; <span class="keyword">then</span> <span class="comment"># Solus OS</span></span><br><span class="line">   shells_file=/usr/share/defaults/etc/shells</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">   error <span class="string">"could not find /etc/shells file. Change your default shell manually."</span></span><br><span class="line">   <span class="built_in">return</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Get the path to the right zsh binary</span></span><br><span class="line">  <span class="comment"># 1. Use the most preceding one based on $PATH, then check that it's in the shells file</span></span><br><span class="line">  <span class="comment"># 2. If that fails, get a zsh path from the shells file, then check it actually exists</span></span><br><span class="line">  <span class="keyword">if</span> ! zsh=$(<span class="built_in">which</span> zsh) || ! grep -qx <span class="string">"<span class="variable">$zsh</span>"</span> <span class="string">"<span class="variable">$shells_file</span>"</span>; <span class="keyword">then</span></span><br><span class="line">   <span class="keyword">if</span> ! zsh=$(grep <span class="string">'^/.*/zsh$'</span> <span class="string">"<span class="variable">$shells_file</span>"</span> | tail -1) || [ ! -f <span class="string">"<span class="variable">$zsh</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    error <span class="string">"no zsh binary found or not present in '<span class="variable">$shells_file</span>'"</span></span><br><span class="line">    error <span class="string">"change your default shell manually."</span></span><br><span class="line">    <span class="built_in">return</span></span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># We're going to change the default shell, so back up the current one</span></span><br><span class="line"> <span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$SHELL</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$SHELL</span> &gt; ~/.shell.pre-oh-my-zsh</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">  grep <span class="string">"^<span class="variable">$USER</span>:"</span> /etc/passwd | awk -F: <span class="string">'&#123;print $7&#125;'</span> &gt; ~/.shell.pre-oh-my-zsh</span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># Actually change the default shell to zsh</span></span><br><span class="line"> <span class="keyword">if</span> ! chsh -s <span class="string">"<span class="variable">$zsh</span>"</span>; <span class="keyword">then</span></span><br><span class="line">  error <span class="string">"chsh command unsuccessful. Change your default shell manually."</span></span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">  <span class="built_in">export</span> SHELL=<span class="string">"<span class="variable">$zsh</span>"</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;GREEN&#125;</span>Shell successfully changed to '<span class="variable">$zsh</span>'.<span class="variable">$&#123;RESET&#125;</span>"</span></span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"> <span class="built_in">echo</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line"> <span class="comment"># Run as unattended if stdin is closed</span></span><br><span class="line"> <span class="keyword">if</span> [ ! -t 0 ]; <span class="keyword">then</span></span><br><span class="line">  RUNZSH=no</span><br><span class="line">  CHSH=no</span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># Parse arguments</span></span><br><span class="line"> <span class="keyword">while</span> [ <span class="variable">$#</span> -gt 0 ]; <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">   --unattended) RUNZSH=no; CHSH=no ;;</span><br><span class="line">   --skip-chsh) CHSH=no ;;</span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line">  <span class="built_in">shift</span></span><br><span class="line"> <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"> setup_color</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> ! command_exists zsh; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;YELLOW&#125;</span>Zsh is not installed.<span class="variable">$&#123;RESET&#125;</span> Please install zsh first."</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> [ -d <span class="string">"<span class="variable">$ZSH</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">  cat &lt;&lt;-EOF</span><br><span class="line">   <span class="variable">$&#123;YELLOW&#125;</span>You already have Oh My Zsh installed.<span class="variable">$&#123;RESET&#125;</span></span><br><span class="line">   You<span class="string">'ll need to remove '</span><span class="variable">$ZSH</span><span class="string">' if you want to reinstall.</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="string">  exit 1</span></span><br><span class="line"><span class="string"> fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> setup_ohmyzsh</span></span><br><span class="line"><span class="string"> setup_zshrc</span></span><br><span class="line"><span class="string"> setup_shell</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> printf "$GREEN"</span></span><br><span class="line"><span class="string"> cat &lt;&lt;-'</span>EOF<span class="string">'</span></span><br><span class="line"><span class="string">           __                                     __</span></span><br><span class="line"><span class="string">    ____  / /_     ____ ___  __  __   ____  _____/ /_</span></span><br><span class="line"><span class="string">   / __ \/ __ \   / __ `__ \/ / / /  /_  / / ___/ __ \</span></span><br><span class="line"><span class="string">  / /_/ / / / /  / / / / / / /_/ /    / /_(__  ) / / /</span></span><br><span class="line"><span class="string">  \____/_/ /_/  /_/ /_/ /_/\__, /    /___/____/_/ /_/</span></span><br><span class="line"><span class="string">                          /____/                       ....is now installed!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  Please look over the ~/.zshrc file to select plugins, themes, and options.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  p.s. Follow us on https://twitter.com/ohmyzsh</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  p.p.s. Get stickers, shirts, and coffee mugs at https://shop.planetargon.com/collections/oh-my-zsh</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="string"> printf "$RESET"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> if [ $RUNZSH = no ]; then</span></span><br><span class="line"><span class="string">  echo "$&#123;YELLOW&#125;Run zsh to try it out.$&#123;RESET&#125;"</span></span><br><span class="line"><span class="string">  exit</span></span><br><span class="line"><span class="string"> fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> exec zsh -l</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">main "$@"</span></span><br></pre></td></tr></table></figure>
<p>安装完成结果如下：</p>
<p><img src="http://114.116.9.65:7777/images/2020/01/18/ohmyzsh.png" alt="ohmyzsh.png"><br><!--  —&gt;</p>
<p>oh-my-zsh安装成功会在根目录下重写<code>.zshrc</code>文件，这是zsh的配置文件，可以在其中修改主题以及增加插件等等</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 比如设置主题为agnoster</span></span><br><span class="line">ZSH_THEME="agnoster"</span><br></pre></td></tr></table></figure>
<p>以及安装命令提示插件<code>zsh-autosuggestions</code>，首先在终端里执行以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure>
<p>然后修改<code>.zshrc</code>文件，修改完记得<code>source .zshrc</code>，使配置生效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">plugins=(</span><br><span class="line">    git</span><br><span class="line">    zsh-autosuggestions</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>最终效果如下，包括命令提示功能</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/auto.png" alt="auto.png"></p>
<h2 id="4-Linuxbrew安装"><a href="#4-Linuxbrew安装" class="headerlink" title="4. Linuxbrew安装"></a>4. Linuxbrew安装</h2><p><strong>注意先安装zsh再安装linuxbrew，否则可能出现brew无法在zsh中使用</strong></p>
<h3 id="4-1-创建非root用户（可选）"><a href="#4-1-创建非root用户（可选）" class="headerlink" title="4.1 创建非root用户（可选）"></a>4.1 创建非root用户（可选）</h3><p>安装Linuxbrew参考官网不一定有效，因为Linuxbrew不能在root用户下安装，所以你如果之前登陆的是root用户需要创建一个新的非root用户，通过以下几个指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建your_user，需要设置密码</span></span><br><span class="line">sudo adduser your_user</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加your_user到sudo组</span></span><br><span class="line">sudo adduser your_user sudo</span><br></pre></td></tr></table></figure>
<p>然后修改系统中/etc/sudoers文件的方法分配用户权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chmod +w /etc/sudoers</span><br><span class="line">sudo vim /etc/sudoers</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> User privilege specification</span></span><br><span class="line">root　ALL=(ALL:ALL) ALL</span><br><span class="line"><span class="meta">#</span><span class="bash"> 新增your_user</span></span><br><span class="line">your_user ALL=(ALL:ALL) ALL</span><br></pre></td></tr></table></figure>
<p>将sudoers文件的操作权限还原只读模式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chmod -w /etc/sudoers</span><br></pre></td></tr></table></figure>
<p>最后再登录<code>your_user</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su - your_user</span><br></pre></td></tr></table></figure>
<h3 id="4-2-Linuxbrew"><a href="#4-2-Linuxbrew" class="headerlink" title="4.2 Linuxbrew"></a>4.2 Linuxbrew</h3><p>如果已经是非root用户则可以跳过以上创建新用户步骤。</p>
<p>按照Linuxbrew官网的指令安装brew，在这里可能会出现问题，我的华为云服务器这里会报443错误，无法访问<code>raw.githubusercontent.com</code>，而腾讯云没有问题，安装成功，需要几分钟。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh -c "$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)"</span><br></pre></td></tr></table></figure>
<p>如果出现443错误<code>Failed to connect to raw.githubusercontent.com port 443: Operation timed out</code>，则直接将以下内容保存为<code>brew_install.rb</code>，然后执行<code>ruby brew_install.rb</code>即可，如果系统没有ruby，则执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install ruby</span><br></pre></td></tr></table></figure>
<p>以下内容来自于<code>https://raw.githubusercontent.com/Linuxbrew/install/master/install</code>，如有更新，请翻墙访问</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line"><span class="comment"># On macOS, this script installs to /usr/local only.</span></span><br><span class="line"><span class="comment"># On Linux, it installs to /home/linuxbrew/.linuxbrew if you have sudo access</span></span><br><span class="line"><span class="comment"># and ~/.linuxbrew otherwise.</span></span><br><span class="line"><span class="comment"># To install elsewhere (which is unsupported) you can untar</span></span><br><span class="line"><span class="comment"># https://github.com/Homebrew/brew/tarball/master anywhere you like.</span></span><br><span class="line"><span class="comment"># or set the environment variable HOMEBREW_PREFIX.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">"fileutils"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mac?</span></span></span><br><span class="line">  RUBY_PLATFORM[<span class="regexp">/darwin/</span>]</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">BREW_REPO = <span class="string">"https://github.com/Homebrew/brew"</span>.freeze</span><br><span class="line"><span class="keyword">if</span> mac?</span><br><span class="line">  HOMEBREW_PREFIX = <span class="string">"/usr/local"</span>.freeze</span><br><span class="line">  HOMEBREW_REPOSITORY = <span class="string">"/usr/local/Homebrew"</span>.freeze</span><br><span class="line">  HOMEBREW_CACHE = <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"HOME"</span>]&#125;</span>/Library/Caches/Homebrew"</span>.freeze</span><br><span class="line">  HOME_CACHE = <span class="literal">nil</span></span><br><span class="line">  CHOWN = <span class="string">"/usr/sbin/chown"</span>.freeze</span><br><span class="line">  CHGRP = <span class="string">"/usr/bin/chgrp"</span>.freeze</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  HOMEBREW_PREFIX_DEFAULT = <span class="string">"/home/linuxbrew/.linuxbrew"</span>.freeze</span><br><span class="line">  HOME_CACHE = <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"HOME"</span>]&#125;</span>/.cache"</span>.freeze</span><br><span class="line">  HOMEBREW_CACHE = <span class="string">"<span class="subst">#&#123;HOME_CACHE&#125;</span>/Homebrew"</span>.freeze</span><br><span class="line">  CHOWN = <span class="string">"/bin/chown"</span>.freeze</span><br><span class="line">  CHGRP = <span class="string">"/bin/chgrp"</span>.freeze</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> bump version when new macOS is released</span></span><br><span class="line">MACOS_LATEST_SUPPORTED = <span class="string">"10.15"</span>.freeze</span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> bump version when new macOS is released</span></span><br><span class="line">MACOS_OLDEST_SUPPORTED = <span class="string">"10.13"</span>.freeze</span><br><span class="line"></span><br><span class="line"><span class="comment"># no analytics during installation</span></span><br><span class="line">ENV[<span class="string">"HOMEBREW_NO_ANALYTICS_THIS_RUN"</span>] = <span class="string">"1"</span></span><br><span class="line">ENV[<span class="string">"HOMEBREW_NO_ANALYTICS_MESSAGE_OUTPUT"</span>] = <span class="string">"1"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># get nicer global variables</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">"English"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Tty</span></span></span><br><span class="line">  module_function</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">blue</span></span></span><br><span class="line">    bold <span class="number">34</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">red</span></span></span><br><span class="line">    bold <span class="number">31</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">reset</span></span></span><br><span class="line">    escape <span class="number">0</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">bold</span><span class="params">(code = <span class="number">39</span>)</span></span></span><br><span class="line">    escape <span class="string">"1;<span class="subst">#&#123;code&#125;</span>"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">underline</span></span></span><br><span class="line">    escape <span class="string">"4;39"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">escape</span><span class="params">(code)</span></span></span><br><span class="line">    <span class="string">"\033[<span class="subst">#&#123;code&#125;</span>m"</span> <span class="keyword">if</span> STDOUT.tty?</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Array</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">shell_s</span></span></span><br><span class="line">    cp = dup</span><br><span class="line">    first = cp.shift</span><br><span class="line">    cp.map &#123; <span class="params">|arg|</span> arg.gsub <span class="string">" "</span>, <span class="string">"\\ "</span> &#125;.unshift(first).join(<span class="string">" "</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ohai</span><span class="params">(*args)</span></span></span><br><span class="line">  puts <span class="string">"<span class="subst">#&#123;Tty.blue&#125;</span>==&gt;<span class="subst">#&#123;Tty.bold&#125;</span> <span class="subst">#&#123;args.shell_s&#125;</span><span class="subst">#&#123;Tty.reset&#125;</span>"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">warn</span><span class="params">(warning)</span></span></span><br><span class="line">  puts <span class="string">"<span class="subst">#&#123;Tty.red&#125;</span>Warning<span class="subst">#&#123;Tty.reset&#125;</span>: <span class="subst">#&#123;warning.chomp&#125;</span>"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">system</span><span class="params">(*args)</span></span></span><br><span class="line">  abort <span class="string">"Failed during: <span class="subst">#&#123;args.shell_s&#125;</span>"</span> <span class="keyword">unless</span> Kernel.system(*args)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sudo?</span></span></span><br><span class="line">  <span class="keyword">return</span> @have_sudo <span class="keyword">unless</span> @have_sudo.<span class="literal">nil</span>?</span><br><span class="line"></span><br><span class="line">  Kernel.system <span class="string">"/usr/bin/sudo"</span>, <span class="string">"-l"</span>, <span class="string">"mkdir"</span></span><br><span class="line">  @have_sudo = $CHILD_STATUS.success?</span><br><span class="line"><span class="keyword">rescue</span> Interrupt</span><br><span class="line">  exit</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sudo</span><span class="params">(*args)</span></span></span><br><span class="line">  <span class="keyword">if</span> sudo?</span><br><span class="line">    args.unshift(<span class="string">"-A"</span>) <span class="keyword">unless</span> ENV[<span class="string">"SUDO_ASKPASS"</span>].<span class="literal">nil</span>?</span><br><span class="line">    ohai <span class="string">"/usr/bin/sudo"</span>, *args</span><br><span class="line">    system <span class="string">"/usr/bin/sudo"</span>, *args</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    ohai *args</span><br><span class="line">    system *args</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getc</span></span></span><br><span class="line">  system <span class="string">"/bin/stty raw -echo"</span></span><br><span class="line">  <span class="keyword">if</span> STDIN.respond_to?(<span class="symbol">:getbyte</span>)</span><br><span class="line">    STDIN.getbyte</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    STDIN.getc</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">ensure</span></span><br><span class="line">  system <span class="string">"/bin/stty -raw echo"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wait_for_user</span></span></span><br><span class="line">  puts</span><br><span class="line">  puts <span class="string">"Press RETURN to continue or any other key to abort"</span></span><br><span class="line">  c = getc</span><br><span class="line">  <span class="comment"># we test for \r and \n because some stuff does \r instead</span></span><br><span class="line">  abort <span class="keyword">unless</span> (c == <span class="number">13</span>) <span class="params">||</span> (c == <span class="number">10</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Version</span></span></span><br><span class="line">  <span class="keyword">include</span> Comparable</span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:parts</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(str)</span></span></span><br><span class="line">    @parts = str.split(<span class="string">"."</span>).map(&amp;<span class="symbol">:to_i</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">&lt;=&gt;</span><span class="params">(other)</span></span></span><br><span class="line">    parts &lt;=&gt; <span class="keyword">self</span><span class="class">.<span class="keyword">class</span>.<span class="title">new</span>(<span class="title">other</span>).<span class="title">parts</span></span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">to_s</span></span></span><br><span class="line">    parts.join(<span class="string">"."</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">macos_version</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">unless</span> mac?</span><br><span class="line"></span><br><span class="line">  @macos_version <span class="params">||</span>= Version.new(<span class="string">`/usr/bin/sw_vers -productVersion`</span>.chomp[<span class="regexp">/10\.\d+/</span>])</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">should_install_command_line_tools?</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span> <span class="keyword">unless</span> mac?</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> macos_version &gt; <span class="string">"10.13"</span></span><br><span class="line">    !File.exist?(<span class="string">"/Library/Developer/CommandLineTools/usr/bin/git"</span>)</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    !File.exist?(<span class="string">"/Library/Developer/CommandLineTools/usr/bin/git"</span>) <span class="params">||</span></span><br><span class="line">      !File.exist?(<span class="string">"/usr/include/iconv.h"</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_only_chmod?</span><span class="params">(path)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span> <span class="keyword">unless</span> File.directory?(path)</span><br><span class="line"></span><br><span class="line">  mode = File.stat(path).mode &amp; <span class="number">0777</span></span><br><span class="line">  <span class="comment"># u = (mode &gt;&gt; 6) &amp; 07</span></span><br><span class="line">  <span class="comment"># g = (mode &gt;&gt; 3) &amp; 07</span></span><br><span class="line">  <span class="comment"># o = (mode &gt;&gt; 0) &amp; 07</span></span><br><span class="line">  mode != <span class="number">0755</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chmod?</span><span class="params">(path)</span></span></span><br><span class="line">  File.exist?(path) &amp;&amp; !(File.readable?(path) &amp;&amp; File.writable?(path) &amp;&amp; File.executable?(path))</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chown?</span><span class="params">(path)</span></span></span><br><span class="line">  !File.owned?(path)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chgrp?</span><span class="params">(path)</span></span></span><br><span class="line">  !File.grpowned?(path)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># return the shell profile file based on users' preference shell</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell_profile</span></span></span><br><span class="line">  <span class="keyword">case</span> ENV[<span class="string">"SHELL"</span>]</span><br><span class="line">  <span class="keyword">when</span> %r&#123;<span class="regexp">/bash$&#125; then File.readable?("<span class="subst">#&#123;ENV[<span class="string">"HOME"</span>]&#125;</span>/</span>.bash_profile<span class="string">") ? "</span>~<span class="regexp">/.bash_profile" : "~/</span>.profile<span class="string">"</span></span><br><span class="line"><span class="string">  when %r&#123;/zsh$&#125; then "</span>~<span class="regexp">/.zprofile"</span></span><br><span class="line"><span class="regexp">  else "~/</span>.profile<span class="string">"</span></span><br><span class="line"><span class="string">  end</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># USER isn't always set so provide a fall back for the installer and subprocesses.</span></span><br><span class="line"><span class="string">ENV["</span>USER<span class="string">"] ||= `id -un`.chomp</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Invalidate sudo timestamp before exiting (if it wasn't active before).</span></span><br><span class="line"><span class="string">Kernel.system "</span>/usr/bin/sudo -n -v <span class="number">2</span>&gt;<span class="regexp">/dev/null</span><span class="string">"</span></span><br><span class="line"><span class="string">at_exit &#123; Kernel.system "</span>/usr/bin/sudo<span class="string">", "</span>-k<span class="string">" &#125; unless $CHILD_STATUS.success?</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># The block form of Dir.chdir fails later if Dir.CWD doesn't exist which I</span></span><br><span class="line"><span class="string"># guess is fair enough. Also sudo prints a warning message for no good reason</span></span><br><span class="line"><span class="string">Dir.chdir "</span>/usr<span class="string">"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">####################################################################### script</span></span><br><span class="line"><span class="string">unless mac?</span></span><br><span class="line"><span class="string">  if File.writable?(HOMEBREW_PREFIX_DEFAULT) || File.writable?("</span>/home/linuxbrew<span class="string">") || File.writable?("</span>/home<span class="string">")</span></span><br><span class="line"><span class="string">    HOMEBREW_PREFIX = HOMEBREW_PREFIX_DEFAULT.freeze</span></span><br><span class="line"><span class="string">  else</span></span><br><span class="line"><span class="string">    sudo_output = `/usr/bin/sudo -n -l mkdir 2&gt;&amp;1`</span></span><br><span class="line"><span class="string">    if !$CHILD_STATUS.success? &amp;&amp; sudo_output == "</span><span class="symbol">sudo:</span> a password is required\n<span class="string">"</span></span><br><span class="line"><span class="string">      ohai "</span>Select the Homebrew installation directory<span class="string">"</span></span><br><span class="line"><span class="string">      puts "</span>- <span class="comment">#&#123;Tty.bold&#125;Enter your password#&#123;Tty.reset&#125; to install to #&#123;Tty.underline&#125;#&#123;HOMEBREW_PREFIX_DEFAULT&#125;#&#123;Tty.reset&#125; (#&#123;Tty.bold&#125;recommended#&#123;Tty.reset&#125;)"</span></span><br><span class="line">      puts <span class="string">"- <span class="subst">#&#123;Tty.bold&#125;</span>Press Control-D<span class="subst">#&#123;Tty.reset&#125;</span> to install to <span class="subst">#&#123;Tty.underline&#125;</span><span class="subst">#&#123;ENV[<span class="string">"HOME"</span>]&#125;</span>/.linuxbrew<span class="subst">#&#123;Tty.reset&#125;</span>"</span></span><br><span class="line">      puts <span class="string">"- <span class="subst">#&#123;Tty.bold&#125;</span>Press Control-C<span class="subst">#&#123;Tty.reset&#125;</span> to cancel installation"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> sudo?</span><br><span class="line">      HOMEBREW_PREFIX = HOMEBREW_PREFIX_DEFAULT.freeze</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      HOMEBREW_PREFIX = <span class="string">"<span class="subst">#&#123;ENV[<span class="string">"HOME"</span>]&#125;</span>/.linuxbrew"</span>.freeze</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  HOMEBREW_REPOSITORY = <span class="string">"<span class="subst">#&#123;HOMEBREW_PREFIX&#125;</span>/Homebrew"</span>.freeze</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> mac? &amp;&amp; macos_version &lt; <span class="string">"10.7"</span></span><br><span class="line">  abort &lt;&lt;-EOABORT</span><br><span class="line">Your Mac OS X version is too old. <span class="symbol">See:</span></span><br><span class="line">  <span class="comment">#&#123;Tty.underline&#125;https://github.com/mistydemeo/tigerbrew#&#123;Tty.reset&#125;"</span></span><br><span class="line">  EOABORT</span><br><span class="line"><span class="keyword">elsif</span> mac? &amp;&amp; macos_version &lt; <span class="string">"10.9"</span></span><br><span class="line">  abort <span class="string">"Your OS X version is too old"</span></span><br><span class="line"><span class="keyword">elsif</span> Process.uid.zero?</span><br><span class="line">  abort <span class="string">"Don't run this as root!"</span></span><br><span class="line"><span class="keyword">elsif</span> mac? &amp;&amp; !<span class="string">`dsmemberutil checkmembership -U "<span class="subst">#&#123;ENV[<span class="string">"USER"</span>]&#125;</span>" -G admin`</span>.<span class="keyword">include</span>?(<span class="string">"user is a member"</span>)</span><br><span class="line">  abort <span class="string">"This script requires the user <span class="subst">#&#123;ENV[<span class="string">"USER"</span>]&#125;</span> to be an Administrator."</span></span><br><span class="line"><span class="keyword">elsif</span> File.directory?(HOMEBREW_PREFIX) &amp;&amp; (!File.executable? HOMEBREW_PREFIX)</span><br><span class="line">  abort &lt;&lt;-EOABORT</span><br><span class="line">The Homebrew prefix, <span class="comment">#&#123;HOMEBREW_PREFIX&#125;, exists but is not searchable. If this is</span></span><br><span class="line"><span class="keyword">not</span> intentional, please restore the default permissions <span class="keyword">and</span> try running the</span><br><span class="line">installer <span class="symbol">again:</span></span><br><span class="line">    sudo chmod <span class="number">775</span> <span class="comment">#&#123;HOMEBREW_PREFIX&#125;</span></span><br><span class="line">  EOABORT</span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> bump version when new macOS is released</span></span><br><span class="line"><span class="keyword">elsif</span> mac? &amp;&amp; (macos_version &gt; MACOS_LATEST_SUPPORTED <span class="params">||</span> macos_version &lt; MACOS_OLDEST_SUPPORTED)</span><br><span class="line">  who = <span class="string">"We"</span></span><br><span class="line">  <span class="keyword">if</span> macos_version &gt; MACOS_LATEST_SUPPORTED</span><br><span class="line">    what = <span class="string">"pre-release version"</span></span><br><span class="line">  <span class="keyword">elsif</span> macos_version &lt; MACOS_OLDEST_SUPPORTED</span><br><span class="line">    who &lt;&lt; <span class="string">" (and Apple)"</span></span><br><span class="line">    what = <span class="string">"old version"</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  ohai <span class="string">"You are using macOS <span class="subst">#&#123;macos_version.parts.join(<span class="string">"."</span>)&#125;</span>."</span></span><br><span class="line">  ohai <span class="string">"<span class="subst">#&#123;who&#125;</span> do not provide support for this <span class="subst">#&#123;what&#125;</span>."</span></span><br><span class="line"></span><br><span class="line">  puts &lt;&lt;-EOS</span><br><span class="line">This installation may <span class="keyword">not</span> succeed.</span><br><span class="line">After installation, you will encounter build failures with some formulae.</span><br><span class="line">Please create pull requests instead of asking <span class="keyword">for</span> help on Homebrew<span class="string">'s GitHub,</span></span><br><span class="line"><span class="string">Discourse, Twitter or IRC. You are responsible for resolving any issues you</span></span><br><span class="line"><span class="string">experience while you are running this <span class="subst">#&#123;what&#125;</span>.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  EOS</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ohai "This script will install:"</span></span><br><span class="line"><span class="string">puts "<span class="subst">#&#123;HOMEBREW_PREFIX&#125;</span>/bin/brew"</span></span><br><span class="line"><span class="string">puts "<span class="subst">#&#123;HOMEBREW_PREFIX&#125;</span>/share/doc/homebrew"</span></span><br><span class="line"><span class="string">puts "<span class="subst">#&#123;HOMEBREW_PREFIX&#125;</span>/share/man/man1/brew.1"</span></span><br><span class="line"><span class="string">puts "<span class="subst">#&#123;HOMEBREW_PREFIX&#125;</span>/share/zsh/site-functions/_brew"</span></span><br><span class="line"><span class="string">puts "<span class="subst">#&#123;HOMEBREW_PREFIX&#125;</span>/etc/bash_completion.d/brew"</span></span><br><span class="line"><span class="string">puts "<span class="subst">#&#123;HOMEBREW_CACHE&#125;</span>/"</span></span><br><span class="line"><span class="string">puts HOMEBREW_REPOSITORY.to_s</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Keep relatively in sync with</span></span><br><span class="line"><span class="string"># https://github.com/Homebrew/brew/blob/master/Library/Homebrew/keg.rb</span></span><br><span class="line"><span class="string">group_chmods = %w[bin etc include lib sbin share opt var</span></span><br><span class="line"><span class="string">                  Frameworks</span></span><br><span class="line"><span class="string">                  etc/bash_completion.d lib/pkgconfig</span></span><br><span class="line"><span class="string">                  share/aclocal share/doc share/info share/locale share/man</span></span><br><span class="line"><span class="string">                  share/man/man1 share/man/man2 share/man/man3 share/man/man4</span></span><br><span class="line"><span class="string">                  share/man/man5 share/man/man6 share/man/man7 share/man/man8</span></span><br><span class="line"><span class="string">                  var/log var/homebrew var/homebrew/linked</span></span><br><span class="line"><span class="string">                  bin/brew]</span></span><br><span class="line"><span class="string">               .map &#123; |d| File.join(HOMEBREW_PREFIX, d) &#125;</span></span><br><span class="line"><span class="string">               .select &#123; |d| chmod?(d) &#125;</span></span><br><span class="line"><span class="string"># zsh refuses to read from these directories if group writable</span></span><br><span class="line"><span class="string">zsh_dirs = %w[share/zsh share/zsh/site-functions]</span></span><br><span class="line"><span class="string">           .map &#123; |d| File.join(HOMEBREW_PREFIX, d) &#125;</span></span><br><span class="line"><span class="string">mkdirs = %w[bin etc include lib sbin share var opt</span></span><br><span class="line"><span class="string">            share/zsh share/zsh/site-functions</span></span><br><span class="line"><span class="string">            var/homebrew var/homebrew/linked</span></span><br><span class="line"><span class="string">            Cellar Caskroom Homebrew Frameworks]</span></span><br><span class="line"><span class="string">         .map &#123; |d| File.join(HOMEBREW_PREFIX, d) &#125;</span></span><br><span class="line"><span class="string">         .reject &#123; |d| File.directory?(d) &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">user_chmods = zsh_dirs.select &#123; |d| user_only_chmod?(d) &#125;</span></span><br><span class="line"><span class="string">chmods = group_chmods + user_chmods</span></span><br><span class="line"><span class="string">chowns = chmods.select &#123; |d| chown?(d) &#125;</span></span><br><span class="line"><span class="string">chgrps = chmods.select &#123; |d| chgrp?(d) &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">group = `id -gn`.chomp</span></span><br><span class="line"><span class="string">abort "error: id -gn: failed" unless $CHILD_STATUS.success? &amp;&amp; !group.empty?</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">unless group_chmods.empty?</span></span><br><span class="line"><span class="string">  ohai "The following existing directories will be made group writable:"</span></span><br><span class="line"><span class="string">  puts(*group_chmods)</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">unless user_chmods.empty?</span></span><br><span class="line"><span class="string">  ohai "The following existing directories will be made writable by user only:"</span></span><br><span class="line"><span class="string">  puts(*user_chmods)</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">unless chowns.empty?</span></span><br><span class="line"><span class="string">  ohai "The following existing directories will have their owner set to <span class="subst">#&#123;Tty.underline&#125;</span><span class="subst">#&#123;ENV[<span class="string">"USER"</span>]&#125;</span><span class="subst">#&#123;Tty.reset&#125;</span>:"</span></span><br><span class="line"><span class="string">  puts(*chowns)</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">unless chgrps.empty?</span></span><br><span class="line"><span class="string">  ohai "The following existing directories will have their group set to <span class="subst">#&#123;Tty.underline&#125;</span><span class="subst">#&#123;group&#125;</span><span class="subst">#&#123;Tty.reset&#125;</span>:"</span></span><br><span class="line"><span class="string">  puts(*chgrps)</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">unless mkdirs.empty?</span></span><br><span class="line"><span class="string">  ohai "The following new directories will be created:"</span></span><br><span class="line"><span class="string">  puts(*mkdirs)</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">if should_install_command_line_tools?</span></span><br><span class="line"><span class="string">  ohai "The Xcode Command Line Tools will be installed."</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">wait_for_user if STDIN.tty? &amp;&amp; !ENV["CI"]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if File.directory? HOMEBREW_PREFIX</span></span><br><span class="line"><span class="string">  sudo "/bin/chmod", "u+rwx", *chmods unless chmods.empty?</span></span><br><span class="line"><span class="string">  sudo "/bin/chmod", "g+rwx", *group_chmods unless group_chmods.empty?</span></span><br><span class="line"><span class="string">  sudo "/bin/chmod", "755", *user_chmods unless user_chmods.empty?</span></span><br><span class="line"><span class="string">  sudo CHOWN, ENV["USER"], *chowns unless chowns.empty?</span></span><br><span class="line"><span class="string">  sudo CHGRP, group, *chgrps unless chgrps.empty?</span></span><br><span class="line"><span class="string">else</span></span><br><span class="line"><span class="string">  sudo "/bin/mkdir", "-p", HOMEBREW_PREFIX</span></span><br><span class="line"><span class="string">  sudo CHOWN, "<span class="subst">#&#123;ENV[<span class="string">"USER"</span>]&#125;</span>:<span class="subst">#&#123;group&#125;</span>", HOMEBREW_PREFIX</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">unless mkdirs.empty?</span></span><br><span class="line"><span class="string">  sudo "/bin/mkdir", "-p", *mkdirs</span></span><br><span class="line"><span class="string">  sudo "/bin/chmod", "g+rwx", *mkdirs</span></span><br><span class="line"><span class="string">  sudo "/bin/chmod", "755", *zsh_dirs</span></span><br><span class="line"><span class="string">  sudo CHOWN, ENV["USER"], *mkdirs</span></span><br><span class="line"><span class="string">  sudo CHGRP, group, *mkdirs</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">sudo "/bin/mkdir", "-p", HOMEBREW_CACHE unless File.directory? HOMEBREW_CACHE</span></span><br><span class="line"><span class="string">sudo "/bin/chmod", "g+rwx", HOMEBREW_CACHE if chmod? HOMEBREW_CACHE</span></span><br><span class="line"><span class="string">sudo CHOWN, ENV["USER"], HOMEBREW_CACHE if chown? HOMEBREW_CACHE</span></span><br><span class="line"><span class="string">sudo CHGRP, group, HOMEBREW_CACHE if chgrp? HOMEBREW_CACHE</span></span><br><span class="line"><span class="string">if HOME_CACHE</span></span><br><span class="line"><span class="string">  sudo CHOWN, ENV["USER"], HOME_CACHE if chown? HOME_CACHE</span></span><br><span class="line"><span class="string">  sudo CHGRP, group, HOME_CACHE if chgrp? HOME_CACHE</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">FileUtils.touch "<span class="subst">#&#123;HOMEBREW_CACHE&#125;</span>/.cleaned" if File.directory? HOMEBREW_CACHE</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if should_install_command_line_tools? &amp;&amp; macos_version &gt;= "10.13"</span></span><br><span class="line"><span class="string">  ohai "Searching online for the Command Line Tools"</span></span><br><span class="line"><span class="string">  # This temporary file prompts the '</span>softwareupdate<span class="string">' utility to list the Command Line Tools</span></span><br><span class="line"><span class="string">  clt_placeholder = "/tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress"</span></span><br><span class="line"><span class="string">  sudo "/usr/bin/touch", clt_placeholder</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  clt_label_command = "/usr/sbin/softwareupdate -l | " \</span></span><br><span class="line"><span class="string">                      "grep -B 1 -E '</span>Command Line Tools<span class="string">' | " \</span></span><br><span class="line"><span class="string">                      "awk -F'</span>*<span class="string">' '</span>/^ *\\*<span class="regexp">/ &#123;print $2&#125;' | " \</span></span><br><span class="line"><span class="regexp">                      "sed -e 's/</span>^ *<span class="symbol">Label:</span> /<span class="regexp">/' -e 's/</span>^ *<span class="regexp">//</span><span class="string">' | " \</span></span><br><span class="line"><span class="string">                      "sort -V | " \</span></span><br><span class="line"><span class="string">                      "tail -n1"</span></span><br><span class="line"><span class="string">  clt_label = `<span class="subst">#&#123;clt_label_command&#125;</span>`.chomp</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  unless clt_label.empty?</span></span><br><span class="line"><span class="string">    ohai "Installing <span class="subst">#&#123;clt_label&#125;</span>"</span></span><br><span class="line"><span class="string">    sudo "/usr/sbin/softwareupdate", "-i", clt_label</span></span><br><span class="line"><span class="string">    sudo "/bin/rm", "-f", clt_placeholder</span></span><br><span class="line"><span class="string">    sudo "/usr/bin/xcode-select", "--switch", "/Library/Developer/CommandLineTools"</span></span><br><span class="line"><span class="string">  end</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Headless install may have failed, so fallback to original '</span>xcode-select<span class="string">' method</span></span><br><span class="line"><span class="string">if should_install_command_line_tools? &amp;&amp; STDIN.tty?</span></span><br><span class="line"><span class="string">  ohai "Installing the Command Line Tools (expect a GUI popup):"</span></span><br><span class="line"><span class="string">  sudo "/usr/bin/xcode-select", "--install"</span></span><br><span class="line"><span class="string">  puts "Press any key when the installation has completed."</span></span><br><span class="line"><span class="string">  getc</span></span><br><span class="line"><span class="string">  sudo "/usr/bin/xcode-select", "--switch", "/Library/Developer/CommandLineTools"</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">abort &lt;&lt;-EOABORT if mac? &amp;&amp; `/usr/bin/xcrun clang 2&gt;&amp;1` =~ /license/ &amp;&amp; !$CHILD_STATUS.success?</span></span><br><span class="line"><span class="string">You have not agreed to the Xcode license.</span></span><br><span class="line"><span class="string">Before running the installer again please agree to the license by opening</span></span><br><span class="line"><span class="string">Xcode.app or running:</span></span><br><span class="line"><span class="string">    sudo xcodebuild -license</span></span><br><span class="line"><span class="string">EOABORT</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ohai "Downloading and installing Homebrew..."</span></span><br><span class="line"><span class="string">Dir.chdir HOMEBREW_REPOSITORY do</span></span><br><span class="line"><span class="string">  # we do it in four steps to avoid merge errors when reinstalling</span></span><br><span class="line"><span class="string">  system "git", "init", "-q"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  # "git remote add" will fail if the remote is defined in the global config</span></span><br><span class="line"><span class="string">  system "git", "config", "remote.origin.url", BREW_REPO</span></span><br><span class="line"><span class="string">  system "git", "config", "remote.origin.fetch", "+refs/heads/*:refs/remotes/origin/*"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  # ensure we don'</span>t munge line endings on checkout</span><br><span class="line">  system <span class="string">"git"</span>, <span class="string">"config"</span>, <span class="string">"core.autocrlf"</span>, <span class="string">"false"</span></span><br><span class="line"></span><br><span class="line">  system <span class="string">"git"</span>, <span class="string">"fetch"</span>, <span class="string">"origin"</span>, <span class="string">"master:refs/remotes/origin/master"</span>,</span><br><span class="line">         <span class="string">"--tags"</span>, <span class="string">"--force"</span></span><br><span class="line"></span><br><span class="line">  system <span class="string">"git"</span>, <span class="string">"reset"</span>, <span class="string">"--hard"</span>, <span class="string">"origin/master"</span></span><br><span class="line"></span><br><span class="line">  system <span class="string">"ln"</span>, <span class="string">"-sf"</span>, <span class="string">"<span class="subst">#&#123;HOMEBREW_REPOSITORY&#125;</span>/bin/brew"</span>, <span class="string">"<span class="subst">#&#123;HOMEBREW_PREFIX&#125;</span>/bin/brew"</span></span><br><span class="line"></span><br><span class="line">  system <span class="string">"<span class="subst">#&#123;HOMEBREW_PREFIX&#125;</span>/bin/brew"</span>, <span class="string">"update"</span>, <span class="string">"--force"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">ohai <span class="string">"Installation successful!"</span></span><br><span class="line">puts</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use the shell's audible bell.</span></span><br><span class="line">print <span class="string">"\a"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use an extra newline and bold to avoid this being missed.</span></span><br><span class="line">ohai <span class="string">"Homebrew has enabled anonymous aggregate formulae and cask analytics."</span></span><br><span class="line">puts &lt;&lt;-EOS</span><br><span class="line"><span class="comment">#&#123;Tty.bold&#125;Read the analytics documentation (and how to opt-out) here:</span></span><br><span class="line">  <span class="comment">#&#123;Tty.underline&#125;https://docs.brew.sh/Analytics#&#123;Tty.reset&#125;</span></span><br><span class="line"></span><br><span class="line">EOS</span><br><span class="line"></span><br><span class="line">ohai <span class="string">"Homebrew is run entirely by unpaid volunteers. Please consider donating:"</span></span><br><span class="line">puts &lt;&lt;-EOS</span><br><span class="line">  <span class="comment">#&#123;Tty.underline&#125;https://github.com/Homebrew/brew#donations#&#123;Tty.reset&#125;</span></span><br><span class="line">EOS</span><br><span class="line"></span><br><span class="line">Dir.chdir HOMEBREW_REPOSITORY <span class="keyword">do</span></span><br><span class="line">  system <span class="string">"git"</span>, <span class="string">"config"</span>, <span class="string">"--replace-all"</span>, <span class="string">"homebrew.analyticsmessage"</span>, <span class="string">"true"</span></span><br><span class="line">  system <span class="string">"git"</span>, <span class="string">"config"</span>, <span class="string">"--replace-all"</span>, <span class="string">"homebrew.caskanalyticsmessage"</span>, <span class="string">"true"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">ohai <span class="string">"Next steps:"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unless</span> mac?</span><br><span class="line">  puts &lt;&lt;-EOS</span><br><span class="line">- Install the Homebrew dependencies <span class="keyword">if</span> you have sudo <span class="symbol">access:</span></span><br><span class="line">  <span class="comment">#&#123;Tty.bold&#125;Debian, Ubuntu, etc.#&#123;Tty.reset&#125;</span></span><br><span class="line">    sudo apt-get install build-essential</span><br><span class="line">  <span class="comment">#&#123;Tty.bold&#125;Fedora, Red Hat, CentOS, etc.#&#123;Tty.reset&#125;</span></span><br><span class="line">    sudo yum groupinstall <span class="string">'Development Tools'</span></span><br><span class="line">  See <span class="comment">#&#123;Tty.underline&#125;https://docs.brew.sh/linux#&#123;Tty.reset&#125; for more information.</span></span><br><span class="line">- Configure Homebrew <span class="keyword">in</span> your <span class="comment">#&#123;Tty.underline&#125;#&#123;shell_profile&#125;#&#123;Tty.reset&#125; by running</span></span><br><span class="line">    echo <span class="string">'eval $(<span class="subst">#&#123;HOMEBREW_PREFIX&#125;</span>/bin/brew shellenv)'</span> &gt;&gt;<span class="comment">#&#123;shell_profile&#125;</span></span><br><span class="line">- Add Homebrew to your <span class="comment">#&#123;Tty.bold&#125;PATH#&#123;Tty.reset&#125;</span></span><br><span class="line">    eval $(<span class="comment">#&#123;HOMEBREW_PREFIX&#125;/bin/brew shellenv)</span></span><br><span class="line">- We recommend that you install GCC by <span class="symbol">running:</span></span><br><span class="line">    brew install gcc</span><br><span class="line">  EOS</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">puts <span class="string">"- Run `brew help` to get started"</span></span><br><span class="line">puts <span class="string">"- Further documentation: "</span></span><br><span class="line">puts <span class="string">"    <span class="subst">#&#123;Tty.underline&#125;</span>https://docs.brew.sh<span class="subst">#&#123;Tty.reset&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">warn <span class="string">"<span class="subst">#&#123;HOMEBREW_PREFIX&#125;</span>/bin is not in your PATH."</span> <span class="keyword">unless</span> ENV[<span class="string">"PATH"</span>].split(<span class="string">":"</span>).<span class="keyword">include</span>? <span class="string">"<span class="subst">#&#123;HOMEBREW_PREFIX&#125;</span>/bin"</span></span><br></pre></td></tr></table></figure>
<p>安装成功结果如下，这里需要按照提示依次执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install build-essential</span><br><span class="line"></span><br><span class="line">echo 'eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)' &gt;&gt;~/.zprofile</span><br><span class="line"></span><br><span class="line">eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)</span><br><span class="line"></span><br><span class="line">brew install gcc</span><br></pre></td></tr></table></figure>
<p>就可以正常使用brew了，最后一步安装gcc可能会非常耗时（腾讯云网络速度非常奇葩，有时快有时慢，最后从源码编译gcc花了两个小时）。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">==&gt; Installation successful!</span><br><span class="line"></span><br><span class="line">==&gt; Homebrew has enabled anonymous aggregate formulae and cask analytics.</span><br><span class="line">Read the analytics documentation (and how to opt-out) here:</span><br><span class="line">  https://docs.brew.sh/Analytics</span><br><span class="line"></span><br><span class="line">==&gt; Homebrew is run entirely by unpaid volunteers. Please consider donating:</span><br><span class="line">  https://github.com/Homebrew/brew#donations</span><br><span class="line">==&gt; Next steps:</span><br><span class="line">- Install the Homebrew dependencies if you have sudo access:</span><br><span class="line">  Debian, Ubuntu, etc.</span><br><span class="line">    sudo apt-get install build-essential</span><br><span class="line">  Fedora, Red Hat, CentOS, etc.</span><br><span class="line">    sudo yum groupinstall 'Development Tools'</span><br><span class="line">  See https://docs.brew.sh/linux for more information.</span><br><span class="line">- Configure Homebrew in your ~/.zprofile by running</span><br><span class="line">    echo 'eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)' &gt;&gt;~/.zprofile</span><br><span class="line">- Add Homebrew to your PATH</span><br><span class="line">    eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)</span><br><span class="line">- We recommend that you install GCC by running:</span><br><span class="line">    brew install gcc</span><br><span class="line">- Run `brew help` to get started</span><br><span class="line">- Further documentation: </span><br><span class="line">    https://docs.brew.sh</span><br><span class="line">Warning: /home/linuxbrew/.linuxbrew/bin is not in your PATH.</span><br></pre></td></tr></table></figure>
<p>若brew正确安装，则可以通过<code>brew -v</code>查看brew版本信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Homebrew 2.2.2</span><br><span class="line">Homebrew/linuxbrew-core (git revision 906b; last commit 2020-01-11)</span><br></pre></td></tr></table></figure>
<h3 id="4-3-腾讯云下载问题"><a href="#4-3-腾讯云下载问题" class="headerlink" title="4.3 腾讯云下载问题"></a>4.3 腾讯云下载问题</h3><p>在安装linuxbrew时，我发现腾讯云服务器在下载<a href="https://linuxbrew.bintray.com/bottles-portable-ruby/portable-ruby-2.6.3.x86_64_linux.bottle.tar.gz" target="_blank" rel="noopener"><code>portable-ruby-2.6.3.x86_64_linux.bottle.tar.gz</code></a>这个包的时候速度非常慢并且导致超时（华为云没有问题），结果brew安装失败，如果失败了可以先将linuxbrew删除（执行<code>sudo rm -rf /home/linuxbrew</code>，具体看你的linuxbrew安装目录），再通过其他方式预先把<code>portable-ruby-2.6.3.x86_64_linux.bottle.tar.gz</code>下载下来并且放到<code>~/.cache/Homebrew/</code>目录下，这样重新安装linuxbrew时就会直接从<code>.cache</code>中解压安装了。</p>
<h3 id="4-4-brew更换源（Ubuntu不要使用，macOS可以使用）"><a href="#4-4-brew更换源（Ubuntu不要使用，macOS可以使用）" class="headerlink" title="4.4 brew更换源（Ubuntu不要使用，macOS可以使用）"></a>4.4 brew更换源（<strong>Ubuntu不要使用，macOS可以使用</strong>）</h3><p>brew下载某些软件时会因为网络原因非常慢，甚至导致安装失败的问题，所以可以使用国内源，比如<a href="https://mirror.tuna.tsinghua.edu.cn/help/homebrew/" target="_blank" rel="noopener">清华大学开源软件镜像站</a>以及<a href="https://lug.ustc.edu.cn/wiki/mirrors/help/brew.git" target="_blank" rel="noopener">中科大镜像源</a>，可以更换4个位置的源，分别是<code>brew/homebrew-core/homebrew-cask/homebrew-bottles</code>，前三个可以修改本地仓库的信息，最后一个需要修改<code>.zshrc</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> brew自己的仓库</span></span><br><span class="line">git -C "$(brew --repo)" remote set-url origin https://mirrors.ustc.edu.cn/brew.git</span><br><span class="line"><span class="meta">#</span><span class="bash"> brew可以安装的软件名称的仓库</span></span><br><span class="line">git -C "$(brew --repo homebrew/core)" remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br><span class="line"><span class="meta">#</span><span class="bash"> brew可以安装的GUI软件的仓库，如果提示没有cask，可以先执行brew cask</span></span><br><span class="line">git -C "$(brew --repo homebrew/cask)" remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新brew自己</span></span><br><span class="line">brew update</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新brew安装的软件</span></span><br><span class="line">brew upgrade</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 清楚无效连接以及本地下载的安装文件缓存</span></span><br><span class="line">brew cleanup</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> brew可以安装的软件的仓库</span></span><br><span class="line">echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles' &gt;&gt; ~/.zshrc</span><br><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure>
<h3 id="4-5-卸载linuxbrew"><a href="#4-5-卸载linuxbrew" class="headerlink" title="4.5 卸载linuxbrew"></a>4.5 卸载linuxbrew</h3><p>执行以下命令，同理如果出现443问题，翻墙查看并保存，然后直接运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/uninstall)"</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Linuxbrew</tag>
        <tag>Zsh</tag>
        <tag>Oh-my-zsh</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-Q适配-存储方式</title>
    <url>/archives/bb3604db.html</url>
    <content><![CDATA[<p>参考：</p>
<blockquote>
<p><a href="https://developer.android.com/preview/privacy/scoped-storage" target="_blank" rel="noopener">Android Q 隐私权变更：分区存储</a><br><a href="https://developer.android.com/training/data-storage/files/external" target="_blank" rel="noopener">Save a file on external storage</a><br><a href="https://juejin.im/post/5d838a7af265da03ee6a90cd" target="_blank" rel="noopener">Android 10(Android Q) 适配</a><br><a href="https://developer.android.com/guide/topics/providers/document-provider?hl=zh-cn" target="_blank" rel="noopener">使用存储访问框架打开文件</a><br><a href="https://segmentfault.com/a/1190000019224425" target="_blank" rel="noopener">Android Q 沙箱适配多媒体文件总结</a></p>
</blockquote>
<p>Android Q之后对系统存储方式进行了调整，简而言之就是禁止开发人员随意通过路径访问操作外部存储文件，内部存储没有影响。这样做的目的很明显，即往后原生Android的文件管理器将不会出现各种App生成的乱七八糟的文件，不同类型的文件都在其各自相应的位置。</p>
<p>示意图如下，主要行为变更在媒体文件（音频、视频、图片）以及下载文件中</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/file.png" alt="file.png"></p>
<a id="more"></a>
<h2 id="1-SAF框架"><a href="#1-SAF框架" class="headerlink" title="1. SAF框架"></a>1. SAF框架</h2><p>SAF（Storage Access Framework，存储访问框架），是Android 4.4之后提供的文件选择器，通过Intent方式启动，UI界面由系统提供，一般来说其他厂商魔改的系统都没有对这方面进行重写，所以示意图基本相同，如下</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/saf.png" alt="saf.png"></p>
<h3 id="1-1-外部存储"><a href="#1-1-外部存储" class="headerlink" title="1.1 外部存储"></a>1.1 外部存储</h3><p>如果应用有发送文件、选择文件等功能，特别是需要读取系统文件目录的方法都需要修改，在target Q的情况下，试图通过路径访问外部公共文件的方式都会失效，如下所示，因此需要使用SAF框架选取文件，得到的结果是文件的Uri，然后再使用Uri读取或者处理该文件，外部存储路径如果打印出来类似<code>/storage/emulated/0/Android/data/us.zoom.androidqdemo/files/aabb.rar</code>、<code>/storage/emulated/0/Pictures/Screenshots/Screenshot_20191014-141713.png</code>，前者是当前应用的外部路径（可以直接访问），后者是公共图片文件下外部路径；内部路径类似<code>/data/user/0/us.zoom.androidqdemo/data/aabb.png</code>，内部路径无法直接在系统中查看。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在手机外部存储根目录下创建text.txt文件，在Android P上可以成功创建此文件并写入数据，file.exists()返回True；</span></span><br><span class="line"><span class="comment">// 在Android Q上无法创建此文件，返回False</span></span><br><span class="line">String filename = <span class="string">"text.txt"</span>;</span><br><span class="line">File file = <span class="keyword">new</span> File(Environment.getExternalStorageDirectory(), filename);</span><br><span class="line"><span class="comment">// File file = new File(getFilesDir(), filename); //如果是内部存储，则两者都是正常访问</span></span><br><span class="line"><span class="comment">// File file = new File(getExternalFilesDir(""), filename); // 外部存储的当前应用路径可以正常访问</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    FileOutputStream outputStream = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">    outputStream.write(<span class="string">"123456"</span>.getBytes());</span><br><span class="line">    outputStream.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">Toast.makeText(<span class="keyword">this</span>, file.exists() ? <span class="string">"True"</span> : <span class="string">"False"</span>, Toast.LENGTH_SHORT).show();</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 同理对读文件，Android P上可以读取text.txt内容，并且file.exists()返回True；Android Q上FileInputStream报错：</span></span><br><span class="line"><span class="comment">// 无法访问，拒绝权限，但是file.exists()返回true</span></span><br><span class="line">String filename = <span class="string">"text.txt"</span>;</span><br><span class="line">File file = <span class="keyword">new</span> File(Environment.getExternalStorageDirectory(), filename);</span><br><span class="line"><span class="comment">// File file = new File(getFilesDir(), filename); //如果是内部存储，则两者都是正常访问</span></span><br><span class="line"><span class="comment">// File file = new File(getExternalFilesDir(""), filename); // 外部存储的当前应用路径可以正常访问</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">    InputStreamReader reader = <span class="keyword">new</span> InputStreamReader(inputStream);</span><br><span class="line">    BufferedReader br = <span class="keyword">new</span> BufferedReader(reader);</span><br><span class="line">    String line = <span class="string">""</span>;</span><br><span class="line">    line = br.readLine();</span><br><span class="line">    <span class="keyword">while</span> (line != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Log.i(<span class="string">"TestRead"</span>, line);</span><br><span class="line">        line = br.readLine(); <span class="comment">// 一次读入一行数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">Toast.makeText(<span class="keyword">this</span>, file.exists() ? <span class="string">"True"</span> : <span class="string">"False"</span>, Toast.LENGTH_SHORT).show();</span><br></pre></td></tr></table></figure>
<h3 id="1-2-SAF使用"><a href="#1-2-SAF使用" class="headerlink" title="1.2 SAF使用"></a>1.2 SAF使用</h3><p>SAF原理可以在Google官网<a href="https://developer.android.com/guide/topics/providers/document-provider?hl=zh-cn" target="_blank" rel="noopener">使用存储访问框架打开文件</a>中查看，发送文件不能通过公共路径，那么就需要使用SAF。SAF读取到的文件有四类：图片、音频、视频、下载、内部存储空间（外部存储）以及各种网盘，可以通过setType设置显示的文件类别，其中图片（一般包含根目录以及照片DCIM文件夹、公有图片Pictures文件夹、Download下图片文件）、音频（一般包含根目录以及公有音频Music文件夹、Download下音频文件）、视频（一般包含根目录以及视频DCIM文件夹、公有视频Movies文件夹、Download下视频文件）中都是通过MediaStore保存的文件，下载中都是通过DownloadManager下载的文件，否则不显示在这几个目录中；内部存储空间即外部存储，从这里可以访问各个应用的外部存储；各种网盘也可以访问，从网盘获取文件会先调用网盘的下载功能，然后再获取下载好的文件，下载过程不可见。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4.3及以下用 ACTION_PICK 或 ACTION_GET_CONTENT，Android 4.4以上可以多一个选择ACTION_OPEN_DOCUMENT，ACTION_PICK弹出单项选择窗口</span></span><br><span class="line"><span class="comment">// ACTION_GET_CONTENT与ACTION_OPEN_DOCUMENT类似，且使用ACTION_GET_CONTENT时，应用会导入数据（如图片文件）的副本，即如果</span></span><br><span class="line"><span class="comment">// 只是需要读取数据而不修改原始数据，那就用ACTION_GET_CONTENT，如果需要修改，使用ACTION_OPEN_DOCUMENT</span></span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_OPEN_DOCUMENT);</span><br><span class="line"><span class="comment">// 过滤器只显示可以打开的结果</span></span><br><span class="line">intent.addCategory(Intent.CATEGORY_OPENABLE);</span><br><span class="line"><span class="comment">// 使用图像MIME数据类型过滤以仅显示图像</span></span><br><span class="line"><span class="comment">// intent.setType("image/*");</span></span><br><span class="line"><span class="comment">// 要搜索通过已安装的存储提供商提供的所有文档</span></span><br><span class="line">intent.setType(<span class="string">"*/*"</span>);</span><br><span class="line"><span class="comment">// 如果需要多选，对应的onActivityResult获取Uri通过data.getClipData()</span></span><br><span class="line"><span class="comment">// intent.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true)</span></span><br><span class="line">startActivityForResult(intent, READ_REQUEST_CODE);</span><br></pre></td></tr></table></figure>
<p>在onActivityResult中获取到文件的Uri，如果是发送文件功能的话，还需要文件名和文件类型，然后加上FileInputStream发送出去，所以需要通过Uri获取文件相关信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode,</span></span></span><br><span class="line"><span class="function"><span class="params">                                Intent resultData)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (requestCode == READ_REQUEST_CODE &amp;&amp; resultCode == Activity.RESULT_OK) &#123;</span><br><span class="line">        Uri uri = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (resultData != <span class="keyword">null</span>) &#123;</span><br><span class="line">            uri = resultData.getData();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>比如：</p>
<ul>
<li>图片目录下的图片Uri类似于<code>content://com.android.providers.media.documents/document/image%3A616260</code>，</li>
<li>音频目录下<code>content://com.android.providers.media.documents/document/audio%3A417558</code>，</li>
<li>视频目录下<code>content://com.android.providers.media.documents/document/video%3A616341</code>，</li>
<li>下载目录下<code>content://com.android.providers.downloads.documents/document/2884</code>。</li>
</ul>
<p>根据Uri可以使用ContentResolver查询相关文件的信息，比如ID、MIME_TYPE等等，查询代码可以看下面的FileUtils，在使用getDataColumn之前需要对Uri进行判断，获取文件种类以及id，比如<code>image%3A616260</code>，这就是一个Image文件，并且id为<code>616260</code>，<code>%3A</code>为冒号<code>:</code>，然后根据文件类型，使用相应的Uri查询，比如Image对应<code>contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;</code>，打印出来的结果是<code>content://media/external/images/media</code>，然后selection为<code>_id=?</code>，selectionArgs为id值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getDataColumn</span><span class="params">(Context context, Uri uri, String selection,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    String[] selectionArgs)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Cursor cursor = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// ContentProvider查询方式，通过uri加上指定的column，类似于查询数据库，uri中包括了provider的全称以及id，</span></span><br><span class="line">    <span class="comment">// 等价于数据库表与id，column等价于列，这样就可以直接取到对应的值；这里查询的是DISPLAY_NAME，一般来说文件名</span></span><br><span class="line">    <span class="comment">// 应该就包含了文件类型，但是在实际使用中，有的文件的DISPLAY_NAME与文件名并不相同，所以需要知道文件类型，</span></span><br><span class="line">    <span class="comment">// 可以使用MIME_TYPE，还有其他种类的信息例如修改时间等等，并不常用（DATA列已被弃用，但可以查询到文件路径）</span></span><br><span class="line">    <span class="keyword">final</span> String column = MediaStore.Images.ImageColumns.DISPLAY_NAME;</span><br><span class="line">    <span class="keyword">final</span> String[] projection = &#123;</span><br><span class="line">            column</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 查询方法调用query</span></span><br><span class="line">        cursor = context.getContentResolver().query(</span><br><span class="line">            uri, projection, selection, selectionArgs,<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (cursor != <span class="keyword">null</span> &amp;&amp; cursor.moveToFirst()) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> column_index = cursor.getColumnIndexOrThrow(column);</span><br><span class="line">            <span class="keyword">return</span> cursor.getString(column_index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cursor != <span class="keyword">null</span>)</span><br><span class="line">            cursor.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在测试过程中发现，对于SAF中图片、音频、视频三个目录下的文件都可以获取其正确的信息，但是对于下载目录下的文件存在问题。网上的对于<code>com.android.providers.downloads</code>的查询Uri是如下三种，但是全部无法查询到任何结果，<code>public_downloads</code>报异常<code>Unknown URI</code>（Android 6可以查询到），<code>my_downloads</code>查询结果为空，<code>all_downloads</code>报异常</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.lang.SecurityException: Permission Denial: reading com.android.providers.downloads.provider.DownloadProvider uri content:&#x2F;&#x2F;downloads&#x2F;all_downloads&#x2F;2884 from pid&#x3D;25434, uid&#x3D;10786 requires android.permission.ACCESS_ALL_DOWNLOADS, or grantUriPermission()</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> String id = DocumentsContract.getDocumentId(uri);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (id != <span class="keyword">null</span> &amp;&amp; id.startsWith(<span class="string">"raw:"</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> id.substring(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line">String[] contentUriPrefixesToTry = <span class="keyword">new</span> String[]&#123;</span><br><span class="line">        <span class="string">"content://downloads/public_downloads"</span>,</span><br><span class="line">        <span class="string">"content://downloads/my_downloads"</span>,</span><br><span class="line">        <span class="string">"content://downloads/all_downloads"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 在API 29上多了一个新的Uri MediaStore.Downloads.EXTERNAL_CONTENT_URI，打印结果是</span></span><br><span class="line"><span class="comment">// content://media/external/downloads，类似于上面的MediaStore.Images.Media.EXTERNAL_CONTENT_URI，</span></span><br><span class="line"><span class="comment">// 但是还是查询不到任何结果；如果直接拿content://com.android.providers.downloads.documents/document/2884</span></span><br><span class="line"><span class="comment">// 来查询可以查到MIME_TYPE和DISPLAY_NAME，或者通过context.getContentResolver().getType(uri)获取MIME_TYPE</span></span><br><span class="line"><span class="keyword">for</span> (String contentUriPrefix : contentUriPrefixesToTry) &#123;</span><br><span class="line">    Uri contentUri = ContentUris.withAppendedId(Uri.parse(contentUriPrefix), Long.valueOf(id));</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String path = getDataColumn(context, contentUri, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (path != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> path;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于下载目录下的文件获取其文件名以及文件类型的方式就只能通过原始Uri查询了，但是DISPLAY_NAME并不一定与真实文件名相同，然后通过Uri取文件数据，如下所示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 读取文件中的字符串</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">readTextFromUri</span><span class="params">(Uri uri)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">try</span> (InputStream inputStream =</span><br><span class="line">            getContentResolver().openInputStream(uri);</span><br><span class="line">            BufferedReader reader = <span class="keyword">new</span> BufferedReader(</span><br><span class="line">            <span class="keyword">new</span> InputStreamReader(Objects.requireNonNull(inputStream)))) &#123;</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stringBuilder.append(line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或者取数据的FileInputStream，再利用FileInputStream进行其他操作，比如复制文件或者发送</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ContentResolver contentResolver = <span class="keyword">this</span>.getContentResolver();</span><br><span class="line">ParcelFileDescriptor parcelFileDescriptor = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    parcelFileDescriptor = contentResolver.openFileDescriptor(uri, <span class="string">"r"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (parcelFileDescriptor == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FileChannel inputChannel = <span class="keyword">null</span>;</span><br><span class="line">FileChannel outputChannel = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为了验证是否获取到数据，可以将数据保存到其他位置，比如这里的aabb.rar</span></span><br><span class="line">String dest = <span class="string">"/storage/emulated/0/Android/data/us.zoom.androidqdemo/files/aabb.rar"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(</span><br><span class="line">            parcelFileDescriptor.getFileDescriptor());</span><br><span class="line">    inputChannel = inputStream.getChannel();</span><br><span class="line">    outputChannel = <span class="keyword">new</span> FileOutputStream(dest).getChannel();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> srcSize = inputChannel.size();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> size = outputChannel.transferFrom(inputChannel, <span class="number">0</span>, srcSize);</span><br><span class="line">    <span class="keyword">if</span> (size == srcSize) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">    Toast.makeText(<span class="keyword">this</span>, <span class="string">"Time: "</span> + (end - start), Toast.LENGTH_LONG).show();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (inputChannel != <span class="keyword">null</span>) &#123;</span><br><span class="line">            inputChannel.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (outputChannel != <span class="keyword">null</span>) &#123;</span><br><span class="line">            outputChannel.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-3-MediaStore使用"><a href="#1-3-MediaStore使用" class="headerlink" title="1.3 MediaStore使用"></a>1.3 MediaStore使用</h3><p>MediaStore是用于获取或者添加媒体文件（图片、音频、视频）信息的工具，需要配合ContentResolver使用，MediaStore定义列的名称，通过ContentResolver的query和insert方法去查询和添加文件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取系统外部存储内所有的图片</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> list</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;ImageInfo&gt; <span class="title">getImageList</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    List&lt;ImageInfo&gt; list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    ContentResolver contentResolver = context.getContentResolver();</span><br><span class="line">    <span class="comment">// 查询图片需要的Uri</span></span><br><span class="line">    Uri uri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;</span><br><span class="line">    String[] projection = <span class="keyword">null</span>;</span><br><span class="line">    String selection = <span class="keyword">null</span>;</span><br><span class="line">    String[] selectionArgs = <span class="keyword">null</span>;</span><br><span class="line">    String sortOrder = <span class="keyword">null</span>;</span><br><span class="line">    Cursor cursor = contentResolver.query(uri, projection, selection, selectionArgs, sortOrder);</span><br><span class="line">    <span class="keyword">if</span> (cursor != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (cursor.moveToNext()) &#123;</span><br><span class="line">            ImageInfo imageInfo = <span class="keyword">new</span> ImageInfo();</span><br><span class="line">            imageInfo.id = cursor.getInt(cursor.getColumnIndexOrThrow(MediaStore.Images.Media._ID));</span><br><span class="line">            <span class="comment">// 组装图片uri</span></span><br><span class="line">            imageInfo.uri = ContentUris.withAppendedId(uri, imageInfo.id);</span><br><span class="line">            imageInfo.filePath = cursor.getString(cursor.getColumnIndex(MediaStore.Images.Media.DATA));</span><br><span class="line">            imageInfo.mimeType = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.MIME_TYPE));</span><br><span class="line">            imageInfo.title = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.TITLE));</span><br><span class="line">            imageInfo.addTime = cursor.getLong(cursor.getColumnIndex(MediaStore.Images.Media.DATE_ADDED));</span><br><span class="line">            list.add(imageInfo);</span><br><span class="line">        &#125;</span><br><span class="line">        cursor.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>得到uri后可以通过上面提到的方式取数据也可以直接通过<code>ImageView.setImageURI(imageInfo.uri)</code>展示出来。如果有加载缩略图的要求，也可以通过Uri获取缩略图的Bitmap，调用loadThumbnail方法，并且可以指定缩略图大小（视频文件也可以加载缩略图），通过query方式查询缩略图的方式在Android Q上基本失效。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">context.getContentResolver().loadThumbnail(imageInfo.uri, <span class="keyword">new</span> Size(<span class="number">50</span>, <span class="number">50</span>), <span class="keyword">null</span>)</span><br></pre></td></tr></table></figure>
<p>除了查询之外，比较重要的是插入媒体文件的功能，比如在外部存储的应用私有目录下的图片不会显示在SAF框架中，如果需要将其显示在图片目录中，需要将文件另存到公有目录下，一般是Pictures文件夹中。同理对音频、视频文件也是如此，通过insert方法传入的Uri决定文件保存位置。在Android Q上通过Uri将文件保存到Download目录下似乎不太可行，只能依靠DownloadManager直接下载保存到Download下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">SavePictureFile</span><span class="params">(Context context, File file)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 首先需要获取到源文件的File对象，然后根据File对象的相关信息构造Uri，比如MIME_TYPE和DISPLAY_NAME等等</span></span><br><span class="line">    Uri uri = insertFileIntoMediaStore(context, file, <span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">// 然后通过FileInputStream的方式将文件拷贝到目的文件中</span></span><br><span class="line">    <span class="keyword">return</span> copyFile(context, file, uri);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Uri <span class="title">insertFileIntoMediaStore</span><span class="params">(Context context, File file, <span class="keyword">boolean</span> isPicture)</span> </span>&#123;</span><br><span class="line">    ContentValues contentValues = <span class="keyword">new</span> ContentValues();</span><br><span class="line">    contentValues.put(MediaStore.Video.Media.DISPLAY_NAME, file.getName());</span><br><span class="line">    contentValues.put(MediaStore.Video.Media.MIME_TYPE, isPicture ? <span class="string">"image/jpeg"</span> : <span class="string">"video/mp4"</span>);</span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">29</span>) &#123;</span><br><span class="line">        contentValues.put(MediaStore.Video.Media.DATE_TAKEN, file.lastModified());</span><br><span class="line">        <span class="comment">// Android Q如果不设置RELATIVE_PATH，则默认保存在Pictures文件夹下，可以通过RELATIVE_PATH添加</span></span><br><span class="line">        <span class="comment">// Pictures/MyPictures子文件夹，文件将会保存在MyPictures中</span></span><br><span class="line">        <span class="comment">// contentValues.put(MediaStore.Video.Media.RELATIVE_PATH, Environment.DIRECTORY_PICTURES + File.separator + "MyPictures");</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Uri uri = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 通过insert方法得到公有目录下目的文件的Uri</span></span><br><span class="line">        uri = context.getContentResolver().insert(</span><br><span class="line">                (isPicture ? MediaStore.Images.Media.EXTERNAL_CONTENT_URI : MediaStore.Video.Media.EXTERNAL_CONTENT_URI)</span><br><span class="line">                , contentValues</span><br><span class="line">        );</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> uri;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件复制的方式同上</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">copyFile</span><span class="params">(Context context, File srcFile, Uri destFile)</span> </span>&#123;</span><br><span class="line">    ContentResolver contentResolver = context.getContentResolver();</span><br><span class="line">    ParcelFileDescriptor parcelFileDescriptor = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        parcelFileDescriptor = contentResolver.openFileDescriptor(destFile, <span class="string">"w"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (parcelFileDescriptor == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    FileChannel inputChannel = <span class="keyword">null</span>;</span><br><span class="line">    FileChannel outputChannel = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(</span><br><span class="line">                srcFile);</span><br><span class="line">        inputChannel = inputStream.getChannel();</span><br><span class="line">        outputChannel = <span class="keyword">new</span> FileOutputStream(parcelFileDescriptor.getFileDescriptor()).getChannel();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> srcSize = inputChannel.size();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> size = outputChannel.transferFrom(inputChannel, <span class="number">0</span>, srcSize);</span><br><span class="line">        <span class="keyword">if</span> (size == srcSize) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (inputChannel != <span class="keyword">null</span>) &#123;</span><br><span class="line">                inputChannel.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (outputChannel != <span class="keyword">null</span>) &#123;</span><br><span class="line">                outputChannel.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-Android系统路径API补充说明"><a href="#2-Android系统路径API补充说明" class="headerlink" title="2. Android系统路径API补充说明"></a>2. Android系统路径API补充说明</h2><h3 id="2-1-内部存储与外部存储"><a href="#2-1-内部存储与外部存储" class="headerlink" title="2.1 内部存储与外部存储"></a>2.1 内部存储与外部存储</h3><p>首先是内部存储与外部存储，内部存储类似<code>/data/user/0/us.zoom.androidqdemo/</code>，其中<code>us.zoom.androidqdemo</code>是包名，可以通过以下几个方法获取到当前应用的内部路径，内部存储一个最主要的特点就是与应用绑定，如果应用卸载了那么内部存储中应用私有目录的所有文件都会被删除，另一个特点就是内部存储无法直接通过手机中的文件管理或者其他名字的系统应用查看（而外部存储可见），内部存储的空间一般较小，需要谨慎使用，外部存储空间很大。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Environment.getDataDirectory().getAbsolutePath() <span class="comment">// /data</span></span><br><span class="line">getFilesDir().getAbsolutePath() <span class="comment">// /data/user/0/us.zoom.androidqdemo/files</span></span><br><span class="line">getCacheDir().getAbsolutePath() <span class="comment">// /data/user/0/us.zoom.androidqdemo/cache</span></span><br><span class="line">getDir(<span class="string">"myFile"</span>, MODE_PRIVATE).getAbsolutePath() <span class="comment">// /data/user/0/us.zoom.androidqdemo/app_myFile</span></span><br></pre></td></tr></table></figure>
<p>外部存储类似<code>/storage/emulated/0/Android/data/us.zoom.androidqdemo/files/</code>（外部存储的应用私有目录）、<code>/storage/emulated/0/Pictures/Screenshots/</code>（外部存储的公有目录）这样的路径，我们通过文件管理这个系统应用进入的根目录就是<code>/storage/emulated/0</code>，在Android Q之前我们会发现这个目录下有非常多的乱七八糟的文件夹，除了<code>Alarms, Android, DCIM, Download, Movies, Music, Notifications, Pictures, Podcasts, Ringtones</code>之外，其他文件或者文件夹都是由你安装的其他APP自行生成的，所以Android Q之前的文件系统极其混乱，因此在Android Q之后不允许对外部存储中公有目录随意访问（可能提示权限拒绝），而内部存储以及外部存储的应用私有目录可以直接通过路径访问，因此在Android Q上我们就会发现外部存储的根目录仅有上面我提到的几个文件夹。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Environment.getExternalStorageDirectory().getAbsolutePath() <span class="comment">// /storage/emulated/0</span></span><br><span class="line">Environment.getExternalStoragePublicDirectory(<span class="string">""</span>).getAbsolutePath() <span class="comment">// /storage/emulated/0</span></span><br><span class="line">getExternalFilesDir(<span class="string">""</span>).getAbsolutePath() <span class="comment">// /storage/emulated/0/Android/data/us.zoom.androidqdemo/files</span></span><br><span class="line">getExternalCacheDir().getAbsolutePath() <span class="comment">// /storage/emulated/0/Android/data/us.zoom.androidqdemo/cache</span></span><br><span class="line"><span class="comment">// 如果手机支持SD卡扩展，那么可以通过getExternalFilesDirs("")获取所有的外部存储（手机内置外部存储+SD卡）</span></span><br></pre></td></tr></table></figure>
<p>现在的Android手机一般情况下存储空间都非常大了基本在32GB起步，64GB比较常见，一般用到的都是外部存储，但是还是需要判断外部存储空间是否可用，比如通过<code>Environment.getExternalStorageState()</code>判断是否正常挂载，如果不可用那么就需要使用到内部存储。</p>
<h3 id="2-2-缓存与其他文件"><a href="#2-2-缓存与其他文件" class="headerlink" title="2.2 缓存与其他文件"></a>2.2 缓存与其他文件</h3><p>在内部存储和外部存储的应用私有目录下会发现两个文件夹<code>files</code>和<code>cache</code>，很显然，<code>files</code>用于存储普通数据，<code>cache</code>用于存储缓存数据，如何使用这两个目录存储应用的文件就依赖开发人员的选择了，比如如果是应用本身下载的文件但是不想对外公开，那么可以放在<code>files</code>中，如果是应用读写文件过程中产生的临时文件可以放在<code>cache</code>中，实际开发时需自行设计。</p>
<ul>
<li><p>清除缓存：我们知道应用程序在运行过程中需要经过很多过程，比如读入程序，计算，输入输出等等，这些过程中肯定会产生很多的数据，它们在内存中，以供程序运行时调用。所以清除缓存清除的是APP运行过程中所产生的临时数据。 </p>
</li>
<li><p>清除数据：清除数据才是真正的删除了我们保存在文件中的数据（永久性数据，如果不人为删除的话会一直保存在文件中）例如当我们在设置里面清除了某个应用的数据，那么<code>/data/user/0/packname/</code>和<code>/storage/emulated/0/Android/data/packname/</code>下的文件里面的数据会全部删除，包括<code>cache</code>，<code>files</code>，<code>lib</code>，<code>shared_prefs</code>等等。</p>
</li>
</ul>
<h2 id="3-FileUtils相关代码"><a href="#3-FileUtils相关代码" class="headerlink" title="3. FileUtils相关代码"></a>3. FileUtils相关代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> us.zoom.androidqdemo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (C) 2018 OpenIntents.org</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.ContentUris;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.database.Cursor;</span><br><span class="line"><span class="keyword">import</span> android.database.DatabaseUtils;</span><br><span class="line"><span class="keyword">import</span> android.net.Uri;</span><br><span class="line"><span class="keyword">import</span> android.os.Build;</span><br><span class="line"><span class="keyword">import</span> android.os.Environment;</span><br><span class="line"><span class="keyword">import</span> android.provider.DocumentsContract;</span><br><span class="line"><span class="keyword">import</span> android.provider.MediaStore;</span><br><span class="line"><span class="keyword">import</span> android.provider.OpenableColumns;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.webkit.MimeTypeMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.annotation.NonNull;</span><br><span class="line"><span class="keyword">import</span> androidx.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> androidx.core.content.FileProvider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.text.DecimalFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DOCUMENTS_DIR = <span class="string">"documents"</span>;</span><br><span class="line">    <span class="comment">// configured android:authorities in AndroidManifest (https://developer.android.com/reference/android/support/v4/content/FileProvider)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTHORITY =  <span class="string">"YOUR_AUTHORITY.provider"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String HIDDEN_PREFIX = <span class="string">"."</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * TAG for log messages.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"FileUtils"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> DEBUG = <span class="keyword">false</span>; <span class="comment">// Set to true to enable logging</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * File and folder comparator. TODO Expose sorting option method</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Comparator&lt;File&gt; sComparator = (f1, f2) -&gt; &#123;</span><br><span class="line">        <span class="comment">// Sort alphabetically by lower case, which is much cleaner</span></span><br><span class="line">        <span class="keyword">return</span> f1.getName().toLowerCase().compareTo(</span><br><span class="line">                f2.getName().toLowerCase());</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * File (not directories) filter.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> FileFilter sFileFilter = file -&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> String fileName = file.getName();</span><br><span class="line">        <span class="comment">// Return files only (not directories) and skip hidden files</span></span><br><span class="line">        <span class="keyword">return</span> file.isFile() &amp;&amp; !fileName.startsWith(HIDDEN_PREFIX);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Folder (directories) filter.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> FileFilter sDirFilter = file -&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> String fileName = file.getName();</span><br><span class="line">        <span class="comment">// Return directories only and skip hidden directories</span></span><br><span class="line">        <span class="keyword">return</span> file.isDirectory() &amp;&amp; !fileName.startsWith(HIDDEN_PREFIX);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">FileUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125; <span class="comment">//private constructor to enforce Singleton pattern</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Gets the extension of a file name, like ".png" or ".jpg".</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uri</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Extension including the dot("."); "" if there is no extension;</span></span><br><span class="line"><span class="comment">     * null if uri was null.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getExtension</span><span class="params">(String uri)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (uri == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> dot = uri.lastIndexOf(<span class="string">"."</span>);</span><br><span class="line">        <span class="keyword">if</span> (dot &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> uri.substring(dot);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// No extension.</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Whether the URI is a local one.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isLocal</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> url != <span class="keyword">null</span> &amp;&amp; !url.startsWith(<span class="string">"http://"</span>) &amp;&amp; !url.startsWith(<span class="string">"https://"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> True if Uri is a MediaStore Uri.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> paulburke</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isMediaUri</span><span class="params">(Uri uri)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"media"</span>.equalsIgnoreCase(uri.getAuthority());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Convert File into Uri.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> uri</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Uri <span class="title">getUri</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (file != <span class="keyword">null</span>) ? Uri.fromFile(file) : <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the path only (without file name).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">getPathWithoutFilename</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (file != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">                <span class="comment">// no file to be split off. Return everything</span></span><br><span class="line">                <span class="keyword">return</span> file;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                String filename = file.getName();</span><br><span class="line">                String filepath = file.getAbsolutePath();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Construct path without file name.</span></span><br><span class="line">                String pathwithoutname = filepath.substring(<span class="number">0</span>,</span><br><span class="line">                        filepath.length() - filename.length());</span><br><span class="line">                <span class="keyword">if</span> (pathwithoutname.endsWith(<span class="string">"/"</span>)) &#123;</span><br><span class="line">                    pathwithoutname = pathwithoutname.substring(<span class="number">0</span>, pathwithoutname.length() - <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> File(pathwithoutname);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The MIME type for the given file.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getMimeType</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String extension = getExtension(file.getName());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (extension.length() &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> MimeTypeMap.getSingleton().getMimeTypeFromExtension(extension.substring(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"application/octet-stream"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The MIME type for the give Uri.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getMimeType</span><span class="params">(Context context, Uri uri)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(getPath(context, uri));</span><br><span class="line">        <span class="keyword">return</span> getMimeType(file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The MIME type for the give String Uri.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getMimeType</span><span class="params">(Context context, String url)</span> </span>&#123;</span><br><span class="line">        String type = context.getContentResolver().getType(Uri.parse(url));</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="keyword">null</span>) &#123;</span><br><span class="line">            type = <span class="string">"application/octet-stream"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uri The Uri to check.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Whether the Uri authority is local.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isLocalStorageDocument</span><span class="params">(Uri uri)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> AUTHORITY.equals(uri.getAuthority());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uri The Uri to check.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Whether the Uri authority is ExternalStorageProvider.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isExternalStorageDocument</span><span class="params">(Uri uri)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"com.android.externalstorage.documents"</span>.equals(uri.getAuthority());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uri The Uri to check.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Whether the Uri authority is DownloadsProvider.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isDownloadsDocument</span><span class="params">(Uri uri)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"com.android.providers.downloads.documents"</span>.equals(uri.getAuthority());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uri The Uri to check.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Whether the Uri authority is MediaProvider.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isMediaDocument</span><span class="params">(Uri uri)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"com.android.providers.media.documents"</span>.equals(uri.getAuthority());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uri The Uri to check.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Whether the Uri authority is Google Photos.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isGooglePhotosUri</span><span class="params">(Uri uri)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"com.google.android.apps.photos.content"</span>.equals(uri.getAuthority());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the value of the data column for this Uri. This is useful for</span></span><br><span class="line"><span class="comment">     * MediaStore Uris, and other file-based ContentProviders.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context       The context.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uri           The Uri to query.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> selection     (Optional) Filter used in the query.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> selectionArgs (Optional) Selection arguments used in the query.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The value of the _data column, which is typically a file path.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getDataColumn</span><span class="params">(Context context, Uri uri, String selection,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       String[] selectionArgs)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Cursor cursor = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">final</span> String column = MediaStore.Files.FileColumns.DATA;</span><br><span class="line">        <span class="keyword">final</span> String[] projection = &#123;</span><br><span class="line">                column</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cursor = context.getContentResolver().query(uri, projection, selection, selectionArgs,</span><br><span class="line">                    <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (cursor != <span class="keyword">null</span> &amp;&amp; cursor.moveToFirst()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG)</span><br><span class="line">                    DatabaseUtils.dumpCursor(cursor);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> column_index = cursor.getColumnIndexOrThrow(column);</span><br><span class="line">                <span class="keyword">return</span> cursor.getString(column_index);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;  <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (cursor != <span class="keyword">null</span>)</span><br><span class="line">                cursor.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get a file path from a Uri. This will get the the path for Storage Access</span></span><br><span class="line"><span class="comment">     * Framework Documents, as well as the _data field for the MediaStore and</span></span><br><span class="line"><span class="comment">     * other file-based ContentProviders.&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * &lt;br&gt;</span></span><br><span class="line"><span class="comment">     * Callers should check whether the path is local before assuming it</span></span><br><span class="line"><span class="comment">     * represents a local file.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context The context.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uri     The Uri to query.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #isLocal(String)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #getFile(Context, Uri)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPath</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> Uri uri)</span> </span>&#123;</span><br><span class="line">        String absolutePath = getLocalPath(context, uri);</span><br><span class="line">        <span class="keyword">return</span> absolutePath != <span class="keyword">null</span> ? absolutePath : uri.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getLocalPath</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> Uri uri)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (DEBUG)</span><br><span class="line">            Log.d(TAG + <span class="string">" File -"</span>,</span><br><span class="line">                    <span class="string">"Authority: "</span> + uri.getAuthority() +</span><br><span class="line">                            <span class="string">", Fragment: "</span> + uri.getFragment() +</span><br><span class="line">                            <span class="string">", Port: "</span> + uri.getPort() +</span><br><span class="line">                            <span class="string">", Query: "</span> + uri.getQuery() +</span><br><span class="line">                            <span class="string">", Scheme: "</span> + uri.getScheme() +</span><br><span class="line">                            <span class="string">", Host: "</span> + uri.getHost() +</span><br><span class="line">                            <span class="string">", Segments: "</span> + uri.getPathSegments().toString()</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> isKitKat = Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// DocumentProvider</span></span><br><span class="line">        <span class="keyword">if</span> (isKitKat &amp;&amp; DocumentsContract.isDocumentUri(context, uri)) &#123;</span><br><span class="line">            <span class="comment">// LocalStorageProvider</span></span><br><span class="line">            <span class="keyword">if</span> (isLocalStorageDocument(uri)) &#123;</span><br><span class="line">                <span class="comment">// The path is the id</span></span><br><span class="line">                <span class="keyword">return</span> DocumentsContract.getDocumentId(uri);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// ExternalStorageProvider</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (isExternalStorageDocument(uri)) &#123;</span><br><span class="line">                <span class="keyword">final</span> String docId = DocumentsContract.getDocumentId(uri);</span><br><span class="line">                <span class="keyword">final</span> String[] split = docId.split(<span class="string">":"</span>);</span><br><span class="line">                <span class="keyword">final</span> String type = split[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"primary"</span>.equalsIgnoreCase(type)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> Environment.getExternalStorageDirectory() + <span class="string">"/"</span> + split[<span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"home"</span>.equalsIgnoreCase(type)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> Environment.getExternalStorageDirectory() + <span class="string">"/documents/"</span> + split[<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// DownloadsProvider</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (isDownloadsDocument(uri)) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">final</span> String id = DocumentsContract.getDocumentId(uri);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (id != <span class="keyword">null</span> &amp;&amp; id.startsWith(<span class="string">"raw:"</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> id.substring(<span class="number">4</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// Android Q 似乎无效</span></span><br><span class="line">                String[] contentUriPrefixesToTry = <span class="keyword">new</span> String[]&#123;</span><br><span class="line">                        <span class="string">"content://downloads/public_downloads"</span>,</span><br><span class="line">                        <span class="string">"content://downloads/my_downloads"</span>,</span><br><span class="line">                        <span class="string">"content://downloads/all_downloads"</span></span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (String contentUriPrefix : contentUriPrefixesToTry) &#123;</span><br><span class="line">                    Uri contentUri = ContentUris.withAppendedId(Uri.parse(contentUriPrefix), Long.valueOf(id));</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        String path = getDataColumn(context, contentUri, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> (path != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> path;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// path could not be retrieved using ContentResolver, therefore copy file to accessible cache using streams</span></span><br><span class="line">                String fileName = getFileName(context, uri);</span><br><span class="line">                File cacheDir = getDocumentCacheDir(context);</span><br><span class="line">                File file = generateFileName(fileName, cacheDir);</span><br><span class="line">                String destinationPath = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (file != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    destinationPath = file.getAbsolutePath();</span><br><span class="line">                    saveFileFromUri(context, uri, destinationPath);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> destinationPath;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// MediaProvider</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (isMediaDocument(uri)) &#123;</span><br><span class="line">                <span class="keyword">final</span> String docId = DocumentsContract.getDocumentId(uri);</span><br><span class="line">                <span class="keyword">final</span> String[] split = docId.split(<span class="string">":"</span>);</span><br><span class="line">                <span class="keyword">final</span> String type = split[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">                Uri contentUri = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"image"</span>.equals(type)) &#123;</span><br><span class="line">                    contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"video"</span>.equals(type)) &#123;</span><br><span class="line">                    contentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"audio"</span>.equals(type)) &#123;</span><br><span class="line">                    contentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">final</span> String selection = <span class="string">"_id=?"</span>;</span><br><span class="line">                <span class="keyword">final</span> String[] selectionArgs = <span class="keyword">new</span> String[]&#123;</span><br><span class="line">                        split[<span class="number">1</span>]</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> getDataColumn(context, contentUri, selection, selectionArgs);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// MediaStore (and general)</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"content"</span>.equalsIgnoreCase(uri.getScheme())) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Return the remote address</span></span><br><span class="line">            <span class="keyword">if</span> (isGooglePhotosUri(uri)) &#123;</span><br><span class="line">                <span class="keyword">return</span> uri.getLastPathSegment();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> getDataColumn(context, uri, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// File</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"file"</span>.equalsIgnoreCase(uri.getScheme())) &#123;</span><br><span class="line">            <span class="keyword">return</span> uri.getPath();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Convert Uri into File, if possible.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> file A local file that the Uri was pointing to, or null if the</span></span><br><span class="line"><span class="comment">     * Uri is unsupported or pointed to a remote resource.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> paulburke</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #getPath(Context, Uri)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">getFile</span><span class="params">(Context context, Uri uri)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (uri != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String path = getPath(context, uri);</span><br><span class="line">            <span class="keyword">if</span> (path != <span class="keyword">null</span> &amp;&amp; isLocal(path)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> File(path);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the file size in a human-readable string.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> paulburke</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getReadableFileSize</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> BYTES_IN_KILOBYTES = <span class="number">1024</span>;</span><br><span class="line">        <span class="keyword">final</span> DecimalFormat dec = <span class="keyword">new</span> DecimalFormat(<span class="string">"###.#"</span>);</span><br><span class="line">        <span class="keyword">final</span> String KILOBYTES = <span class="string">" KB"</span>;</span><br><span class="line">        <span class="keyword">final</span> String MEGABYTES = <span class="string">" MB"</span>;</span><br><span class="line">        <span class="keyword">final</span> String GIGABYTES = <span class="string">" GB"</span>;</span><br><span class="line">        <span class="keyword">float</span> fileSize = <span class="number">0</span>;</span><br><span class="line">        String suffix = KILOBYTES;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (size &gt; BYTES_IN_KILOBYTES) &#123;</span><br><span class="line">            fileSize = size / BYTES_IN_KILOBYTES;</span><br><span class="line">            <span class="keyword">if</span> (fileSize &gt; BYTES_IN_KILOBYTES) &#123;</span><br><span class="line">                fileSize = fileSize / BYTES_IN_KILOBYTES;</span><br><span class="line">                <span class="keyword">if</span> (fileSize &gt; BYTES_IN_KILOBYTES) &#123;</span><br><span class="line">                    fileSize = fileSize / BYTES_IN_KILOBYTES;</span><br><span class="line">                    suffix = GIGABYTES;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    suffix = MEGABYTES;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(dec.format(fileSize) + suffix);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the Intent for selecting content to be used in an Intent Chooser.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The intent for opening a file with Intent.createChooser()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Intent <span class="title">createGetContentIntent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Implicitly allow the user to select a particular kind of data</span></span><br><span class="line">        <span class="keyword">final</span> Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_GET_CONTENT);</span><br><span class="line">        <span class="comment">// The MIME data type filter</span></span><br><span class="line">        intent.setType(<span class="string">"*/*"</span>);</span><br><span class="line">        <span class="comment">// Only return URIs that can be opened with ContentResolver</span></span><br><span class="line">        intent.addCategory(Intent.CATEGORY_OPENABLE);</span><br><span class="line">        <span class="keyword">return</span> intent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates View intent for given file</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The intent for viewing file</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Intent <span class="title">getViewIntent</span><span class="params">(Context context, File file)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Uri uri = Uri.fromFile(file);</span></span><br><span class="line">        Uri uri = FileProvider.getUriForFile(context, AUTHORITY, file);</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW);</span><br><span class="line">        String url = file.toString();</span><br><span class="line">        <span class="keyword">if</span> (url.contains(<span class="string">".doc"</span>) || url.contains(<span class="string">".docx"</span>)) &#123;</span><br><span class="line">            <span class="comment">// Word document</span></span><br><span class="line">            intent.setDataAndType(uri, <span class="string">"application/msword"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url.contains(<span class="string">".pdf"</span>)) &#123;</span><br><span class="line">            <span class="comment">// PDF file</span></span><br><span class="line">            intent.setDataAndType(uri, <span class="string">"application/pdf"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url.contains(<span class="string">".ppt"</span>) || url.contains(<span class="string">".pptx"</span>)) &#123;</span><br><span class="line">            <span class="comment">// Powerpoint file</span></span><br><span class="line">            intent.setDataAndType(uri, <span class="string">"application/vnd.ms-powerpoint"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url.contains(<span class="string">".xls"</span>) || url.contains(<span class="string">".xlsx"</span>)) &#123;</span><br><span class="line">            <span class="comment">// Excel file</span></span><br><span class="line">            intent.setDataAndType(uri, <span class="string">"application/vnd.ms-excel"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url.contains(<span class="string">".zip"</span>) || url.contains(<span class="string">".rar"</span>)) &#123;</span><br><span class="line">            <span class="comment">// WAV audio file</span></span><br><span class="line">            intent.setDataAndType(uri, <span class="string">"application/x-wav"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url.contains(<span class="string">".rtf"</span>)) &#123;</span><br><span class="line">            <span class="comment">// RTF file</span></span><br><span class="line">            intent.setDataAndType(uri, <span class="string">"application/rtf"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url.contains(<span class="string">".wav"</span>) || url.contains(<span class="string">".mp3"</span>)) &#123;</span><br><span class="line">            <span class="comment">// WAV audio file</span></span><br><span class="line">            intent.setDataAndType(uri, <span class="string">"audio/x-wav"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url.contains(<span class="string">".gif"</span>)) &#123;</span><br><span class="line">            <span class="comment">// GIF file</span></span><br><span class="line">            intent.setDataAndType(uri, <span class="string">"image/gif"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url.contains(<span class="string">".jpg"</span>) || url.contains(<span class="string">".jpeg"</span>) || url.contains(<span class="string">".png"</span>)) &#123;</span><br><span class="line">            <span class="comment">// JPG file</span></span><br><span class="line">            intent.setDataAndType(uri, <span class="string">"image/jpeg"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url.contains(<span class="string">".txt"</span>)) &#123;</span><br><span class="line">            <span class="comment">// Text file</span></span><br><span class="line">            intent.setDataAndType(uri, <span class="string">"text/plain"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url.contains(<span class="string">".3gp"</span>) || url.contains(<span class="string">".mpg"</span>) || url.contains(<span class="string">".mpeg"</span>) ||</span><br><span class="line">                url.contains(<span class="string">".mpe"</span>) || url.contains(<span class="string">".mp4"</span>) || url.contains(<span class="string">".avi"</span>)) &#123;</span><br><span class="line">            <span class="comment">// Video files</span></span><br><span class="line">            intent.setDataAndType(uri, <span class="string">"video/*"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            intent.setDataAndType(uri, <span class="string">"*/*"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">        intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);</span><br><span class="line">        intent.addFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION);</span><br><span class="line">        <span class="keyword">return</span> intent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">getDownloadsDir</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">getDocumentCacheDir</span><span class="params">(@NonNull Context context)</span> </span>&#123;</span><br><span class="line">        File dir = <span class="keyword">new</span> File(context.getCacheDir(), DOCUMENTS_DIR);</span><br><span class="line">        <span class="keyword">if</span> (!dir.exists()) &#123;</span><br><span class="line">            dir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        logDir(context.getCacheDir());</span><br><span class="line">        logDir(dir);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dir;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">logDir</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!DEBUG) <span class="keyword">return</span>;</span><br><span class="line">        Log.d(TAG, <span class="string">"Dir="</span> + dir);</span><br><span class="line">        File[] files = dir.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"File="</span> + file.getPath());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">generateFileName</span><span class="params">(@Nullable String name, File directory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        File file = <span class="keyword">new</span> File(directory, name);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">            String fileName = name;</span><br><span class="line">            String extension = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">int</span> dotIndex = name.lastIndexOf(<span class="string">'.'</span>);</span><br><span class="line">            <span class="keyword">if</span> (dotIndex &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                fileName = name.substring(<span class="number">0</span>, dotIndex);</span><br><span class="line">                extension = name.substring(dotIndex);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (file.exists()) &#123;</span><br><span class="line">                index++;</span><br><span class="line">                name = fileName + <span class="string">'('</span> + index + <span class="string">')'</span> + extension;</span><br><span class="line">                file = <span class="keyword">new</span> File(directory, name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!file.createNewFile()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            Log.w(TAG, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        logDir(directory);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> file;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    /**</span></span><br><span class="line"><span class="comment">//     * Writes response body to disk</span></span><br><span class="line"><span class="comment">//     *</span></span><br><span class="line"><span class="comment">//     * @param body ResponseBody</span></span><br><span class="line"><span class="comment">//     * @param path file path</span></span><br><span class="line"><span class="comment">//     * @return File</span></span><br><span class="line"><span class="comment">//     */</span></span><br><span class="line"><span class="comment">//    public static File writeResponseBodyToDisk(ResponseBody body, String path) &#123;</span></span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//            File target = new File(path);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            InputStream inputStream = null;</span></span><br><span class="line"><span class="comment">//            OutputStream outputStream = null;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            try &#123;</span></span><br><span class="line"><span class="comment">//                byte[] fileReader = new byte[4096];</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                inputStream = body.byteStream();</span></span><br><span class="line"><span class="comment">//                outputStream = new FileOutputStream(target);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                while (true) &#123;</span></span><br><span class="line"><span class="comment">//                    int read = inputStream.read(fileReader);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                    if (read == -1) &#123;</span></span><br><span class="line"><span class="comment">//                        break;</span></span><br><span class="line"><span class="comment">//                    &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                    outputStream.write(fileReader, 0, read);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                outputStream.flush();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                return target;</span></span><br><span class="line"><span class="comment">//            &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">//                return null;</span></span><br><span class="line"><span class="comment">//            &#125; finally &#123;</span></span><br><span class="line"><span class="comment">//                if (inputStream != null) &#123;</span></span><br><span class="line"><span class="comment">//                    inputStream.close();</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                if (outputStream != null) &#123;</span></span><br><span class="line"><span class="comment">//                    outputStream.close();</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">//            return null;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">saveFileFromUri</span><span class="params">(Context context, Uri uri, String destinationPath)</span> </span>&#123;</span><br><span class="line">        InputStream is = <span class="keyword">null</span>;</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            is = context.getContentResolver().openInputStream(uri);</span><br><span class="line">            bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(destinationPath, <span class="keyword">false</span>));</span><br><span class="line">            <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            is.read(buf);</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                bos.write(buf);</span><br><span class="line">            &#125; <span class="keyword">while</span> (is.read(buf) != -<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (is != <span class="keyword">null</span>) is.close();</span><br><span class="line">                <span class="keyword">if</span> (bos != <span class="keyword">null</span>) bos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] readBytesFromFile(String filePath) &#123;</span><br><span class="line"></span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] bytesArray = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            File file = <span class="keyword">new</span> File(filePath);</span><br><span class="line">            bytesArray = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>) file.length()];</span><br><span class="line"></span><br><span class="line">            <span class="comment">//read file into bytes[]</span></span><br><span class="line">            fileInputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">            fileInputStream.read(bytesArray);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fileInputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fileInputStream.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bytesArray;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">createTempImageFile</span><span class="params">(Context context, String fileName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// Create an image file name</span></span><br><span class="line">        File storageDir = <span class="keyword">new</span> File(context.getCacheDir(), DOCUMENTS_DIR);</span><br><span class="line">        <span class="keyword">return</span> File.createTempFile(fileName, <span class="string">".jpg"</span>, storageDir);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFileName</span><span class="params">(@NonNull Context context, Uri uri)</span> </span>&#123;</span><br><span class="line">        String mimeType = context.getContentResolver().getType(uri);</span><br><span class="line">        String filename = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mimeType == <span class="keyword">null</span> &amp;&amp; context != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String path = getPath(context, uri);</span><br><span class="line">            <span class="keyword">if</span> (path == <span class="keyword">null</span>) &#123;</span><br><span class="line">                filename = getName(uri.toString());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                File file = <span class="keyword">new</span> File(path);</span><br><span class="line">                filename = file.getName();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Cursor returnCursor = context.getContentResolver().query(uri, <span class="keyword">null</span>,</span><br><span class="line">                    <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (returnCursor != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> nameIndex = returnCursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);</span><br><span class="line">                returnCursor.moveToFirst();</span><br><span class="line">                filename = returnCursor.getString(nameIndex);</span><br><span class="line">                returnCursor.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> filename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getName</span><span class="params">(String filename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (filename == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> index = filename.lastIndexOf(<span class="string">'/'</span>);</span><br><span class="line">        <span class="keyword">return</span> filename.substring(index + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidQ</tag>
      </tags>
  </entry>
  <entry>
    <title>LSGAN</title>
    <url>/archives/8f4a6b8f.html</url>
    <content><![CDATA[<p>参考：</p>
<blockquote>
<p><a href="https://arxiv.org/abs/1611.04076" target="_blank" rel="noopener">Least Squares Generative Adversarial Networks</a></p>
</blockquote>
<a id="more"></a>
<h2 id="1-LSGAN作者说"><a href="#1-LSGAN作者说" class="headerlink" title="1. LSGAN作者说"></a>1. LSGAN作者说</h2><p>LSGAN(Least Squares Generative Adversarial Networks)，提出的目的也是为了加强训练过程的稳定性，同时经过对比实验发现LSGAN能生成质量更好的<br>图片，它的做法是修改损失函数，通过对判别器使用最小均方损失来实现。</p>
<p>对于原始GAN来说，其目标函数为</p>
<script type="math/tex; mode=display">
\min_G \max_D V_{GAN}(D, G) = \mathbb{E}_{\boldsymbol{x} \sim p_{data}(\boldsymbol{x})}[\log D(\boldsymbol{x})] + \mathbb{E}_{\boldsymbol{z} \sim p_{z}(\boldsymbol{z})}[\log (1 - D(G(\boldsymbol{z})))]</script><p>原始GAN的判别器使用了Sigmoid激活函数输出结果，我们知道Sigmoid有一个很显著的特点就是对于输出结果非常容易将其划分到1或者0，这一点可以从Sigmoid函数图像中看出，这在CNN分类任务中是很有效的，因为分类任务的目的是将目标的种类进行划分，而目标的种类不是0就是1（二分类），但是对于GAN来说使用Sigmoid会产生问题，GAN的目的是生成对抗样本，如果判别器将生成样本判别为1，则生成器梯度下降为0，那么此样本将不会对模型产生任何训练影响，但是此样本是否属于接近真实样本我们不得而知，而仅仅依靠判别器进行判断，所以说Sigmoid作为最后一层的激活函数应该不适合用于GAN的判别器。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/sigmoid.png" alt="sigmoid.png"></p>
<p>因此LSGAN的作者提出了使用最小二乘法作为损失函数</p>
<script type="math/tex; mode=display">
\min_D V_{LSGAN}(D) = \frac{1}{2} \mathbb{E}_{\boldsymbol{x} \sim p_{data}(\boldsymbol{x})}[(D(\boldsymbol{x}) - b)^2] + \frac{1}{2} \mathbb{E}_{\boldsymbol{z} \sim p_{z}(\boldsymbol{z})}[(D(G(\boldsymbol{z}))-a)^2]
\\
\min_G V_{LSGAN}(G) = \frac{1}{2}\mathbb{E}_{\boldsymbol{z} \sim p_{z}(\boldsymbol{z})}[(D(G(\boldsymbol{z}))-c)^2]</script><p>其中$a, b$分别是生成样本和真实样本的标签，$c$表示G希望D相信这是生成样本的程度，如果$c = b$，则表示我们希望G能够生成更加接近真实样本的数据，如果$a &lt; c &lt; b$，则表示我们希望G能够生成多样性更强的数据。</p>
<p>当G固定时，D的最优解为</p>
<script type="math/tex; mode=display">
D^*(\boldsymbol{x}) = \frac{bp_{data}(\boldsymbol{x}) + ap_g(\boldsymbol{x})}{p_{data}(\boldsymbol{x}) + p_g(\boldsymbol{x})}</script>]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Theory</tag>
        <tag>LSGAN</tag>
      </tags>
  </entry>
  <entry>
    <title>Android IPC-AIDL、Messenger和Socket</title>
    <url>/archives/c75dc4ab.html</url>
    <content><![CDATA[<p>参考：</p>
<blockquote>
<p><a href="https://item.m.jd.com/product/11760209.html" target="_blank" rel="noopener">Android开发艺术探索</a></p>
</blockquote>
<p>Android系统中的每一个应用都运行在一个各自的进程中，那么不同的应用是如何进行数据交互的呢，大致分为两类，第一类我称之为伪进程间通信，其特征是不同进程都对同一个文件进行操作，数据交互通过此文件，比如两个进程共同读写同一个数据库；第二类我称之为真进程间通信，特征是基于系统级别的Binder进行服务调用从而实现的进程间通信或者Socket，具体细节后面再说。</p>
<a id="more"></a>
<h2 id="1-Socket"><a href="#1-Socket" class="headerlink" title="1. Socket"></a>1. Socket</h2><p>首先了解一下Socket，Socket是对TCP和UDP协议的封装，通过Socket建立的连接可以实现互联网中任意两个进程间的通信，不仅限于局域网或者单机多进程，而我们仅需要确定的是设备的IP和监听的端口号，下面看看Socket是如何实现局域网内从手机传数据到笔记本上。</p>
<p>Socket的使用分为服务端和客户端，服务端需要监听自己设定的端口，客户端需要知道服务端的IP和服务端监听的端口，两者通过Socket建立连接，然后以数据流的形式通过Socket传输数据。</p>
<p>首先是服务端，在笔记本上运行的代码，同时需要知道笔记本的IP地址（笔记本和手机在同一局域网中）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义线程Server</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    ServerSocket server = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Server</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Server线程初始化需要指定端口号，且服务端使用ServerSocket建立连接</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            server = <span class="keyword">new</span> ServerSocket(port);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.run();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"服务器在启动中...等待用户的连接"</span>);</span><br><span class="line">            <span class="comment">// 一直接收用户的连接，连接之后发送一条短信给用户</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 建立socket接口，accept方法是一个阻塞进程,等到有用户连接才往下走</span></span><br><span class="line">                <span class="comment">// 定义Socket类</span></span><br><span class="line">                Socket socket = server.accept();</span><br><span class="line">                <span class="comment">// 通过socket对象可以获得输出流，用来写数据</span></span><br><span class="line">                OutputStream os = socket.getOutputStream();</span><br><span class="line">                <span class="comment">// 向客户端发送消息</span></span><br><span class="line">                os.write(<span class="string">"服务器正在向你发送消息！"</span>.getBytes());</span><br><span class="line">                <span class="comment">// 在服务器上显示连接的上的电脑、</span></span><br><span class="line">                System.out.println(socket.getInetAddress().getHostAddress() + <span class="string">"连接上了！"</span>);</span><br><span class="line">                <span class="comment">// 通过socket对象可以获得输入流，用来读取用户数据</span></span><br><span class="line">                InputStream is = socket.getInputStream();</span><br><span class="line">                <span class="comment">// 读取数据</span></span><br><span class="line">                <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="keyword">while</span> ((len = is.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="comment">// 直接把获得的数据打印出来</span></span><br><span class="line">                    String msgFromClient = <span class="keyword">new</span> String(buf, <span class="number">0</span>, len);</span><br><span class="line">                    System.out.println(<span class="string">"服务器接收到客户端的数据："</span> + msgFromClient);</span><br><span class="line">                    <span class="comment">// 根据客户端传来的数据，我们再返回数据给客户端</span></span><br><span class="line">                    <span class="keyword">if</span> (msgFromClient.contains(<span class="string">"hello"</span>)) &#123;</span><br><span class="line">                        os.write(<span class="string">"hello too!!"</span>.getBytes());</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (msgFromClient.contains(<span class="string">"are"</span>)) &#123;</span><br><span class="line">                        os.write(<span class="string">"I'm fine."</span>.getBytes());</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (msgFromClient.contains(<span class="string">"bye"</span>)) &#123;</span><br><span class="line">                        os.write(<span class="string">"Bye!"</span>.getBytes());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                os.flush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在main函数中启用即可，这里选择监听的端口为6768</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里服务器只需要定义一个端口号就可以了，程序会自动获取IP地址</span></span><br><span class="line">        <span class="comment">// 但是客户端需要连接这个服务器时，需要知道它的IP地址还有端口号</span></span><br><span class="line">        <span class="comment">// ip地址的查看方法：进入cmd窗口，输入ipconfig/all可以看到</span></span><br><span class="line">        Server server = <span class="keyword">new</span> Server(<span class="number">6768</span>);</span><br><span class="line">        server.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后是客户端的设计，需要权限<code>&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;</code></p>
<blockquote>
<p>1.简单布局</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Socket socket = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView textView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Button button = findViewById(R.id.button);</span><br><span class="line">        button.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        Button button1 = findViewById(R.id.hello);</span><br><span class="line">        button1.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        Button button2 = findViewById(R.id.how);</span><br><span class="line">        button2.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        Button button3 = findViewById(R.id.bye);</span><br><span class="line">        button3.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        textView = findViewById(R.id.textView);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>2.定义连接Socket的方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">connectToServer</span><span class="params">(String host, <span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 需要的参数是IP和端口号，就是局域网中你的笔记本的IP和监听的端口号，对应上文的6768</span></span><br><span class="line">    <span class="keyword">while</span> (socket == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 建立连接</span></span><br><span class="line">            socket = <span class="keyword">new</span> Socket(host, port);</span><br><span class="line">            <span class="comment">// 读socket里面的数据</span></span><br><span class="line">            InputStream s = socket.getInputStream();</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((len = s.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> finalLen = len;</span><br><span class="line">                <span class="comment">// 在主线程中更新读取的数据</span></span><br><span class="line">                runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        textView.setText(<span class="keyword">new</span> String(buf, <span class="number">0</span>, finalLen));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>3.创建发送数据到服务器的线程</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SendMessThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SendMessThread</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.run();</span><br><span class="line">        <span class="comment">//写操作</span></span><br><span class="line">        <span class="keyword">if</span> (socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 向Socket中的OutputStream写数据即可</span></span><br><span class="line">                OutputStream os = socket.getOutputStream();</span><br><span class="line">                os.write((<span class="string">"客户端:"</span> + message).getBytes());</span><br><span class="line">                os.flush();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>4.最后是点击事件的处理</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (v.getId()) &#123;</span><br><span class="line">        <span class="keyword">case</span> R.id.button:</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="comment">// 我笔记本的IP为192.168.31.43</span></span><br><span class="line">                    connectToServer(<span class="string">"192.168.31.43"</span>, <span class="number">6768</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> R.id.hello:</span><br><span class="line">            <span class="keyword">new</span> SendMessThread(<span class="string">"hello"</span>).start();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> R.id.how:</span><br><span class="line">            <span class="keyword">new</span> SendMessThread(<span class="string">"how are you?"</span>).start();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> R.id.bye:</span><br><span class="line">            <span class="keyword">new</span> SendMessThread(<span class="string">"bye"</span>).start();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<blockquote>
<p>服务器（笔记本）</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">服务器在启动中...等待用户的连接</span><br><span class="line">192.168.31.100连接上了！</span><br><span class="line">服务器接收到客户端的数据：客户端:hello</span><br><span class="line">服务器接收到客户端的数据：客户端:how are you?</span><br><span class="line">服务器接收到客户端的数据：客户端:bye</span><br></pre></td></tr></table></figure>
<blockquote>
<p>客户端（手机）</p>
</blockquote>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/socket.gif" alt="socket.gif"></p>
<p>这样就完成了服务器与客户端的对话。</p>
<h2 id="2-AIDL"><a href="#2-AIDL" class="headerlink" title="2. AIDL"></a>2. AIDL</h2><h2 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h2><h2 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h2>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>IPC</tag>
        <tag>AIDL</tag>
        <tag>Binder</tag>
        <tag>Messenger</tag>
        <tag>Socket</tag>
        <tag>进程间通信</tag>
      </tags>
  </entry>
  <entry>
    <title>Android框架-RxJava</title>
    <url>/archives/686da54d.html</url>
    <content><![CDATA[<p>参考：</p>
<blockquote>
<p><a href="https://github.com/ReactiveX/RxJava/tree/2.x" target="_blank" rel="noopener">RxJava2</a><br><a href="http://greenrobot.org/eventbus/" target="_blank" rel="noopener">EventBus</a><br><a href="https://www.jianshu.com/p/1a5a3db45cfa" target="_blank" rel="noopener">Android Handler 消息机制详述</a><br><a href="https://www.jianshu.com/p/ee1342fcf5e7" target="_blank" rel="noopener">Android 多线程：手把手教你使用AsyncTask</a><br><a href="https://juejin.im/post/5a6c36fff265da3e2f012f82" target="_blank" rel="noopener">EventBus使用详解</a><br><a href="https://juejin.im/post/5a224cc76fb9a04527256683" target="_blank" rel="noopener">Rxjava这一篇就够了，墙裂推荐</a><br><a href="http://www.10tiao.com/html/227/201802/2650242399/1.html" target="_blank" rel="noopener">精彩的RxJava源码剖析</a><br><a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="noopener">给 Android 开发者的 RxJava 详解</a></p>
</blockquote>
<p>Android中很多地方都需要跨线程通信，这是由于Android主线程不允许进行复杂的网络请求或者其他非常耗时的操作，否则会导致ANR，主线程只能进行UI操作，比如修改某个控件的text、设置某个控件不可见等等，因此网络请求等操作需要在其他线程中完成，当数据在其他线程中获取完毕时，通过跨线程通信将数据传到主线程中，主线程就可以直接根据数据进行UI操作。常见的跨线程通信的方式有Handler、AsyncTask、EventBus以及RxJava等，前两个是Android自带，后两者是封装好的第三方库。</p>
<a id="more"></a>
<h2 id="1-Handler"><a href="#1-Handler" class="headerlink" title="1. Handler"></a>1. Handler</h2><p>Handler是Android中最简单的线程间通信方式，同时也可以在同一个线程中发送消息，但是使用时需要注意内存泄漏的问题。</p>
<h3 id="1-1-Handler简单使用"><a href="#1-1-Handler简单使用" class="headerlink" title="1.1 Handler简单使用"></a>1.1 Handler简单使用</h3><p>还是以和风天气请求为例，我们的目标是在子线程中请求数据，然后通过Handler将数据传到主线程中并显示出来。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String KEY = <span class="string">"XXXXXXXXXX"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String URL = <span class="string">"https://free-api.heweather.net/s6/weather/"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView textView;</span><br><span class="line">    <span class="keyword">private</span> Handler handler;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        textView = findViewById(R.id.textView);</span><br><span class="line">        <span class="comment">// Handler的实例化，重写handleMessage方法用于等待处理msg，</span></span><br><span class="line">        <span class="comment">// handleMessage方法是回调，在回调中更新UI，此时执行在主线程，</span></span><br><span class="line">        <span class="comment">// 在Android Studio中会提示这里存在内存泄漏问题</span></span><br><span class="line">        handler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">                textView.setText(msg.obj.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 在子线程开启一个网络请求</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// Retrofit通用代码</span></span><br><span class="line">                Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">                        .baseUrl(URL) <span class="comment">// 设置网络请求的公共Url地址</span></span><br><span class="line">                        .addConverterFactory(GsonConverterFactory.create()) <span class="comment">// 设置数据解析器</span></span><br><span class="line">                        .build();</span><br><span class="line"></span><br><span class="line">                Api api = retrofit.create(Api<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                Call&lt;WeatherEntity&gt; call = api.getNowWeather(<span class="string">"beijing"</span>, KEY);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 为了在当前子线程获取数据，这里直接使用execute</span></span><br><span class="line">                    WeatherEntity result = call.execute().body();</span><br><span class="line">                    <span class="comment">// Message的实例化方法Message.obtain</span></span><br><span class="line">                    Message message = Message.obtain();</span><br><span class="line">                    <span class="comment">// 可以通过Message附加很多数据，这里仅用obj，保存我们网络请求得到的实例</span></span><br><span class="line">                    message.obj = result;</span><br><span class="line">                    <span class="comment">// 通过handler.sendMessage(message)实现调用回调方法，完成数据传输</span></span><br><span class="line">                    <span class="comment">// 这种操作有点类似于接口回调</span></span><br><span class="line">                    handler.sendMessage(message);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的内存泄露的原因可以参考其他资料，主要是<strong>Java 中非静态内部类和匿名内部类会持有外部类的引用</strong>同时<strong>Handler 的生命周期比外部类长</strong>导致的。如何解决，肯定就是让Handler是静态内部类就完事了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String KEY = <span class="string">"XXXXXXXXXX"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String URL = <span class="string">"https://free-api.heweather.net/s6/weather/"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView textView;</span><br><span class="line">    <span class="keyword">private</span> Handler handler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        textView = findViewById(R.id.textView);</span><br><span class="line">        <span class="comment">// 使用自定义的静态内部类</span></span><br><span class="line">        handler = <span class="keyword">new</span> MyHandler(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// 子线程请求没有变化</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123; </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">                        .baseUrl(URL) <span class="comment">// 设置网络请求的公共Url地址</span></span><br><span class="line">                        .addConverterFactory(GsonConverterFactory.create()) <span class="comment">// 设置数据解析器</span></span><br><span class="line">                        .build();</span><br><span class="line"></span><br><span class="line">                Api api = retrofit.create(Api<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                Call&lt;WeatherEntity&gt; call = api.getNowWeather(<span class="string">"beijing"</span>, KEY);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    WeatherEntity result = call.execute().body();</span><br><span class="line">                    Message message = Message.obtain();</span><br><span class="line">                    message.obj = result;</span><br><span class="line">                    handler.sendMessage(message);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        handler.removeCallbacksAndMessages(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        textView.setText(msg.obj.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 自定义静态内部类，与onDestroy中removeCallbacksAndMessages一起使用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> WeakReference&lt;MainActivity&gt; reference;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyHandler</span><span class="params">(MainActivity mainActivity)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 同时需要持有对MainActivity的弱引用</span></span><br><span class="line">            <span class="keyword">this</span>.reference = <span class="keyword">new</span> WeakReference&lt;&gt;(mainActivity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">            MainActivity mainActivity = reference.get();</span><br><span class="line">            <span class="keyword">if</span> (mainActivity != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 将msg传给MainActivity处理</span></span><br><span class="line">                mainActivity.handleMessage(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-2-Handler线程间通信"><a href="#1-2-Handler线程间通信" class="headerlink" title="1.2 Handler线程间通信"></a>1.2 Handler线程间通信</h3><p>上面的例子仅演示了从子线程传数据给主线程，那么如果同时需要从主线程传数据给子线程，怎么办</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 首先需要自定义MyThread，完成Looper的初始化，否则子线程不会自动初始化Looper</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Looper looper;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.run();</span><br><span class="line">            Looper.prepare();</span><br><span class="line">            looper = Looper.myLooper();</span><br><span class="line">            Looper.loop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后在onCreate方法中</span></span><br><span class="line">    Log.i(<span class="string">"aaaa"</span>, String.valueOf(Thread.currentThread()));</span><br><span class="line">    MyThread thread = <span class="keyword">new</span> MyThread();</span><br><span class="line">    thread.start(); <span class="comment">// 必须先启动子线程</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 确保子线程中的Looper初始化完成</span></span><br><span class="line">        <span class="keyword">if</span> (thread.looper != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 此时handler的handleMessage方法是在子线程MyThread中执行的</span></span><br><span class="line">            <span class="comment">// 两处log中线程的值是不一样的，通过Handler的构造方法实现子线程的调用</span></span><br><span class="line">            handler = <span class="keyword">new</span> Handler(thread.looper) &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">                    Log.i(<span class="string">"aaaa"</span>, String.valueOf(msg.what) + Thread.currentThread());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            handler.sendEmptyMessage(<span class="number">12321</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果使用定义好的HandlerThread，则不需要继承Thread，直接使用，</span></span><br><span class="line"><span class="comment">// HandlerThread默认帮我们完成了Looper的初始化</span></span><br><span class="line">    Log.i(<span class="string">"aaaa"</span>, String.valueOf(Thread.currentThread()));</span><br><span class="line">    <span class="comment">// HandlerThread需要用String的构造方法，我们在log中也可以看到</span></span><br><span class="line">    HandlerThread thread = <span class="keyword">new</span> HandlerThread(<span class="string">"new thread"</span>);</span><br><span class="line">    thread.start();</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (thread.getLooper() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            handler = <span class="keyword">new</span> Handler(thread.getLooper()) &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">                    Log.i(<span class="string">"aaaa"</span>, String.valueOf(msg.what) + Thread.currentThread());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            handler.sendEmptyMessage(<span class="number">12321</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>为什么子线程需要初始化Looper，而主线程不需要？</p>
</blockquote>
<p>首先需要明白的是，只有需要处理消息的线程才需要Looper，即哪个线程执行了handleMessage方法，则线程需要Looper，原因在源码分析中解释；主线程以及HandlerThread会自动进行Looper的初始化，而<code>new Thread()</code>不会，因此在第二个例子中，子线程需要处理消息，所以需要初始化Looper而第一个例子中主线程不需要。</p>
<blockquote>
<p>Handler的初始化，其构造方法依赖于什么，为什么第二个例子中Handler不是在主线程中初始化的吗？</p>
</blockquote>
<p>首先需要知道的是Handler是可以被跨线程调用的，而View是不可以的，举个例子，如果在第一个例子中我们在子线程中调用<code>textView.setText(result.toString());</code>，则会报错<code>CalledFromWrongThreadException: Only the original thread that created a view hierarchy can touch its views.</code>，而Handler没问题，Handler默认构造方法<code>new Handler()</code>会将当前线程的Looper保存在自己这个实例中，即将主线程中的Looper保存，而带参数的构造方法<code>new Handler(thread.looper)</code>会保存thread的looper在实例中，又因为Handler是可以跨线程调用的，所以区分Handler属于哪个线程其实是根据构造方法传入的参数决定的，至于Handler归属于不同的线程会有什么影响，在源码分析中解释。</p>
<h3 id="1-3-Handler源码分析"><a href="#1-3-Handler源码分析" class="headerlink" title="1.3 Handler源码分析"></a>1.3 Handler源码分析</h3><p>以从子线程向主线程发送消息为例，首先从ActivityThread的main方法开始，前面说过主线程中的Looper是自动初始化的，其初始化的位置就在ActivityThread的main方法中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ActivityThread.java 核心就两个Looper.prepareMainLooper()和Looper.loop()</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        Looper.prepareMainLooper();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="comment">// 显然这里是不会执行的</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">false</span>) &#123;</span><br><span class="line">            Looper.myLooper().setMessageLogging(<span class="keyword">new</span></span><br><span class="line">                    LogPrinter(Log.DEBUG, <span class="string">"ActivityThread"</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// End of event ActivityThreadMain.</span></span><br><span class="line">        Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">        Looper.loop();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Main thread loop unexpectedly exited"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>再看看Looper.prepareMainLooper()的作用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Looper.java 看注释就知道是是为主线程初始化Looper，关键还是看prepare方法，再看myLooper</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Initialize the current thread as a looper, marking it as an</span></span><br><span class="line"><span class="comment">     * application's main looper. The main looper for your application</span></span><br><span class="line"><span class="comment">     * is created by the Android environment, so you should never need</span></span><br><span class="line"><span class="comment">     * to call this function yourself.  See also: &#123;<span class="doctag">@link</span> #prepare()&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepareMainLooper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        prepare(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">synchronized</span> (Looper<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (sMainLooper != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The main Looper has already been prepared."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            sMainLooper = myLooper();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// prepare方法通过sThreadLocal set了一个Looper实例，</span></span><br><span class="line"><span class="comment">// 一个Looper实例保存了MessageQueue和Thread.currentThread()</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sThreadLocal.set(<span class="keyword">new</span> Looper(quitAllowed));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// myLooper方法从sThreadLocal get到Looper，那正好对应上面prepare set的Looper，</span></span><br><span class="line"><span class="comment">// ThreadLocal的作用是可以保存线程内的变量，简而言之就是通过ThreadLocal的set和get方法</span></span><br><span class="line"><span class="comment">// 处理的变量仅属于某个线程，以Looper为例，在某个线程中有且仅有一个</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Return the Looper object associated with the current thread.  Returns</span></span><br><span class="line"><span class="comment">     * null if the calling thread is not associated with a Looper.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="meta">@Nullable</span> <span class="function">Looper <span class="title">myLooper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sThreadLocal.get();</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后调用了Looper.loop()</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Run the message queue in this thread. Be sure to call</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #quit()&#125; to end the loop.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Looper.loop()会进入一个死循环，但是这个循环并不会导致卡死，</span></span><br><span class="line">        <span class="comment">// 涉及到Linux pipe/epoll机制，简单说就是在主线程的MessageQueue没有消息时，</span></span><br><span class="line">        <span class="comment">// 便阻塞在loop的queue.next()中的nativePollOnce()方法里，此时主线程会释放CPU资源进入休眠状态，</span></span><br><span class="line">        <span class="comment">// 直到下个消息到达或者有事务发生，通过往pipe管道写端写入数据来唤醒主线程工作。</span></span><br><span class="line">        <span class="comment">// 这里采用的epoll机制，是一种IO多路复用机制，可以同时监控多个描述符，</span></span><br><span class="line">        <span class="comment">// 当某个描述符就绪(读或写就绪)，则立刻通知相应程序进行读或写操作，本质同步I/O，即读写是阻塞的。</span></span><br><span class="line">        <span class="comment">//  所以说，主线程大多数时候都是处于休眠状态，并不会消耗大量CPU资源。</span></span><br><span class="line">        <span class="comment">// 先拿到当前线程的Looper，然后拿到Looper中的MessageQueue</span></span><br><span class="line">        <span class="keyword">final</span> Looper me = myLooper();</span><br><span class="line">        <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> MessageQueue queue = me.mQueue;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="comment">// 开启循环，Android中主线程上所有的点击事件、UI绘制都是通过Message发送到MessageQueue中等待执行</span></span><br><span class="line">        <span class="comment">// 所以这里必须是死循环，因为如果跳出了这个循环说明已经无法再继续处理任何Message，那么随之而来的肯定就是</span></span><br><span class="line">        <span class="comment">// 应用崩溃或者重启Looper，但是这里的循环并不会导致卡死，理由在上面已经简要说明了</span></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="comment">// 循环的作用就是通过queue.next()不断地从MessageQueue取出Message，next方法中也是一个死循环，</span></span><br><span class="line">            <span class="comment">// 正常情况下queue.next()应该返回一个有效的Message，或者休眠不返回任何值，如果返回null，</span></span><br><span class="line">            <span class="comment">// 说明出了问题</span></span><br><span class="line">            Message msg = queue.next(); <span class="comment">// might block</span></span><br><span class="line">            <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 当取出的message为空时说明MessageQueue被终止了，因此跳出循环，执行其他操作，比如重启Looper或者崩溃？</span></span><br><span class="line">                <span class="comment">// No message indicates that the message queue is quitting.</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">            <span class="comment">// 当我们取到有效的Message后，就需要知道这个Message应该由谁来处理，即Target，从Message源码中可知，</span></span><br><span class="line">            <span class="comment">// 这个Target实际上就是Handler，最终调用的就是Handler的dispatchMessage方法，从这里我们就知道了</span></span><br><span class="line">            <span class="comment">// 只要其他线程能够将Message发送到主线程的MessageQueue中，那么这个Message就可以被主线程的Handler处理</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                msg.target.dispatchMessage(msg);</span><br><span class="line">                dispatchEnd = needEndTime ? SystemClock.uptimeMillis() : <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (traceTag != <span class="number">0</span>) &#123;</span><br><span class="line">                    Trace.traceEnd(traceTag);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">            <span class="comment">// 最后需要对Message对象进行回收</span></span><br><span class="line">            msg.recycleUnchecked();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>ActivityThread的main方法中对主线程的Looper进行初始化，同样的主线程的MessageQueue也准备好对其中的Message进行分发，这都是通过死循环实现的，相当于MessageQueue是一个等待队列，有消息来了，他就取消息并调用Message对应的Handler的dispatchMessage方法，如果没有就休眠，然后我们看看Handler的初始化以及Message的发送是如何实现的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Handler.java Handler的构造方法分为两类，一类是参数带Looper的，另一类是不带Looper</span></span><br><span class="line"><span class="comment">// 不带Looper的构造函数最终会调用到最后一个构造函数，并进行Looper的初始化；</span></span><br><span class="line"><span class="comment">// 带Looper的构造函数会直接保存参数中的Looper实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Callback callback)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(callback, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Looper looper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(looper, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Looper looper, Callback callback)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(looper, callback, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(<span class="keyword">boolean</span> async)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="keyword">null</span>, async);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Looper looper, Callback callback, <span class="keyword">boolean</span> async)</span> </span>&#123;</span><br><span class="line">        mLooper = looper;</span><br><span class="line">        mQueue = looper.mQueue;</span><br><span class="line">        mCallback = callback;</span><br><span class="line">        mAsynchronous = async;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Callback callback, <span class="keyword">boolean</span> async)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (FIND_POTENTIAL_LEAKS) &#123;</span><br><span class="line">            <span class="keyword">final</span> Class&lt;? extends Handler&gt; klass = getClass();</span><br><span class="line">            <span class="keyword">if</span> ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &amp;&amp;</span><br><span class="line">                    (klass.getModifiers() &amp; Modifier.STATIC) == <span class="number">0</span>) &#123;</span><br><span class="line">                Log.w(TAG, <span class="string">"The following Handler class should be static or leaks might occur: "</span> +</span><br><span class="line">                    klass.getCanonicalName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Looper的myLooper方法会初始化当前线程的Looper</span></span><br><span class="line">        mLooper = Looper.myLooper();</span><br><span class="line">        <span class="keyword">if</span> (mLooper == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                <span class="string">"Can't create handler inside thread "</span> + Thread.currentThread()</span><br><span class="line">                        + <span class="string">" that has not called Looper.prepare()"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mQueue = mLooper.mQueue;</span><br><span class="line">        mCallback = callback;</span><br><span class="line">        mAsynchronous = async;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>然后调用<code>handler.sendMessage(message);</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Handler.java sendMessage方法会直接调用sendMessageDelayed</span></span><br><span class="line"><span class="comment">// sendMessageDelayed就是多个延时的效果</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessage</span><span class="params">(Message msg)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sendMessageDelayed(msg, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessageDelayed</span><span class="params">(Message msg, <span class="keyword">long</span> delayMillis)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (delayMillis &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            delayMillis = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 通过加上SystemClock.uptimeMillis()可以直接得到执行的具体时间</span></span><br><span class="line">        <span class="keyword">return</span> sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendMessageAtTime</span><span class="params">(Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</span><br><span class="line">        MessageQueue queue = mQueue;</span><br><span class="line">        <span class="keyword">if</span> (queue == <span class="keyword">null</span>) &#123;</span><br><span class="line">            RuntimeException e = <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                    <span class="keyword">this</span> + <span class="string">" sendMessageAtTime() called with no mQueue"</span>);</span><br><span class="line">            Log.w(<span class="string">"Looper"</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 最终还是使用Handler的MessageQueue</span></span><br><span class="line">        <span class="keyword">return</span> enqueueMessage(queue, msg, uptimeMillis);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(MessageQueue queue, Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 注意这里将Message的target设置为当前handler</span></span><br><span class="line">        msg.target = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">if</span> (mAsynchronous) &#123;</span><br><span class="line">            msg.setAsynchronous(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 然后调用MessageQueue的enqueueMessage方法</span></span><br><span class="line">        <span class="keyword">return</span> queue.enqueueMessage(msg, uptimeMillis);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MessageQueue.java enqueueMessage将Message加入链表中</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(Message msg, <span class="keyword">long</span> when)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (msg.target == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Message must have a target."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (msg.isInUse()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(msg + <span class="string">" This message is already in use."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果MessageQueue被终止了，那么Message还需要回收</span></span><br><span class="line">            <span class="keyword">if</span> (mQuitting) &#123;</span><br><span class="line">                IllegalStateException e = <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                        msg.target + <span class="string">" sending message to a Handler on a dead thread"</span>);</span><br><span class="line">                Log.w(TAG, e.getMessage(), e);</span><br><span class="line">                msg.recycle();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            msg.markInUse();</span><br><span class="line">            msg.when = when;</span><br><span class="line">            Message p = mMessages;</span><br><span class="line">            <span class="keyword">boolean</span> needWake;</span><br><span class="line">            <span class="comment">// 根据msg.next基本可以发现Message是一个链表中的节点，也就是说MessageQueue中的mMessages</span></span><br><span class="line">            <span class="comment">// 是一种链表形式的结构，其中mMessages是表头，当执行next方法时就会将表头也就是mMessages表示的</span></span><br><span class="line">            <span class="comment">// Message返回，当我们传入的Message满足以下任意条件时，可以将此Message作为表头：</span></span><br><span class="line">            <span class="comment">// 1. 表头本身为空，很明显当没有任何Message传入的时候；</span></span><br><span class="line">            <span class="comment">// 2. 当我们传入的Message没有任何延迟，这也很显然，立即执行的Message当然要放第一个；</span></span><br><span class="line">            <span class="comment">// 3. 当我们传入的Message的执行时间在表头的执行时间之前，这也很显然，按照时间排序。</span></span><br><span class="line">            <span class="keyword">if</span> (p == <span class="keyword">null</span> || when == <span class="number">0</span> || when &lt; p.when) &#123;</span><br><span class="line">                <span class="comment">// New head, wake up the event queue if blocked.</span></span><br><span class="line">                msg.next = p;</span><br><span class="line">                mMessages = msg;</span><br><span class="line">                needWake = mBlocked;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果Message不是表头位置，那么肯定就是链表中的某个位置</span></span><br><span class="line">                <span class="comment">// Inserted within the middle of the queue.  Usually we don't have to wake</span></span><br><span class="line">                <span class="comment">// up the event queue unless there is a barrier at the head of the queue</span></span><br><span class="line">                <span class="comment">// and the message is the earliest asynchronous message in the queue.</span></span><br><span class="line">                needWake = mBlocked &amp;&amp; p.target == <span class="keyword">null</span> &amp;&amp; msg.isAsynchronous();</span><br><span class="line">                Message prev;</span><br><span class="line">                <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                    <span class="comment">// 链表的遍历，还要判断时间when</span></span><br><span class="line">                    prev = p;</span><br><span class="line">                    p = p.next;</span><br><span class="line">                    <span class="keyword">if</span> (p == <span class="keyword">null</span> || when &lt; p.when) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</span><br><span class="line">                        needWake = <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 这就很简单了，有序链表中加入某个节点，排序方式为when的值</span></span><br><span class="line">                msg.next = p; <span class="comment">// invariant: p == prev.next</span></span><br><span class="line">                prev.next = msg;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// We can assume mPtr != 0 because mQuitting is false.</span></span><br><span class="line">            <span class="keyword">if</span> (needWake) &#123;</span><br><span class="line">                nativeWake(mPtr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>到这里我们就知道了Message被Handler加到了Handler线程的MessageQueue中，而Handler线程中的Looper一直在等待Message进入MessageQueue，通过queue.next()取出Message，然后调用Handler的dispatchMessage方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Handle system messages here.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// dispatchMessage处理Message的方式也很简单</span></span><br><span class="line">    <span class="comment">// 首先判断Message是否设置了Callback，如果有</span></span><br><span class="line">    <span class="comment">// 则执行message.callback.run()</span></span><br><span class="line">    <span class="keyword">if</span> (msg.callback != <span class="keyword">null</span>) &#123;</span><br><span class="line">        handleCallback(msg);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果没有，则判断Handler是否初始化设置了Callback，</span></span><br><span class="line">        <span class="comment">// 这个和Handler的构造函数相关</span></span><br><span class="line">        <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 否则就执行handler重写的handleMessage方法，</span></span><br><span class="line">        <span class="comment">// 这个方法是在我们继承Handler时重写的，或者</span></span><br><span class="line">        <span class="comment">// 在使用Handler匿名内部类时重写的</span></span><br><span class="line">        handleMessage(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上就是完整的通过Handler从子线程发送消息到主线程并执行的过程，也解决了我的一些问题：</p>
<blockquote>
<p>1.为什么要设计Handler来传输消息？</p>
</blockquote>
<p>因为多线程的情况下并不确定子线程何时能够执行完毕获取数据，所以需要设计Handler实现一种回调机制，即当子线程数据获取完成后将数据传到主线程中，通过主线程中的回调决定如何处理传来的数据。</p>
<blockquote>
<p>2.为什么要用MessageQueue和Looper这种工具？</p>
</blockquote>
<p>我想是因为既然子线程并不确定何时结束，其次如果存在多个子线程向主线程传递消息，那干脆将这些消息都放在一个队列MessageQueue中，因为多个子线程之间的执行顺序我们也无法确定，如果放在队列中，那么根据消息附加的时间来进行排序我们就可以按照顺序读取从各个子线程发送过来的消息了，与此同时，需要一个能够不停地读取队列中消息的工具Looper，Looper可以循环取数据但是不会阻塞卡死。</p>
<h3 id="1-4-Handler进阶"><a href="#1-4-Handler进阶" class="headerlink" title="1.4 Handler进阶"></a>1.4 Handler进阶</h3><p>Handler除了可以发送Message外，还可以post Runnable，Runnable是接口，提供run方法，Thread类实现了Runnable接口，所以Thread需要实现run方法，run方法中的内容就是执行在Thread线程中，如果Runnable是通过Handler post，那么根据Message的原理，应该明白此Runnable就是运行在Handler归属的线程中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    textView = findViewById(R.id.textView);</span><br><span class="line">    <span class="comment">// handler不重写handleMessage方法</span></span><br><span class="line">    handler = <span class="keyword">new</span> Handler();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Retrofit通用代码</span></span><br><span class="line">            Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">                    .baseUrl(URL) <span class="comment">// 设置网络请求的公共Url地址</span></span><br><span class="line">                    .addConverterFactory(GsonConverterFactory.create()) <span class="comment">// 设置数据解析器</span></span><br><span class="line">                    .build();</span><br><span class="line"></span><br><span class="line">            Api api = retrofit.create(Api<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            Call&lt;WeatherEntity&gt; call = api.getNowWeather(<span class="string">"beijing"</span>, KEY);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 为了在当前子线程获取数据，这里直接使用execute</span></span><br><span class="line">                <span class="keyword">final</span> WeatherEntity result = call.execute().body();</span><br><span class="line">                <span class="comment">// 通过post直接修改textView的text</span></span><br><span class="line">                handler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        textView.setText(result.toString());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为textView只能在主线程进行设置，所以很显然handler post的Runnable是在主线程运行的，这样就不需要传递数据，而是直接处理数据了，下面看看Runnable是如何被处理的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Handler.java</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">post</span><span class="params">(Runnable r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// sendMessageDelayed之前分析过，这里是将Runnable放入Message中了</span></span><br><span class="line">       <span class="keyword">return</span>  sendMessageDelayed(getPostMessage(r), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过Message保存了这个Runnable，保存在callback，这个之前在dispatchMessage中见过</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Message <span class="title">getPostMessage</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">        Message m = Message.obtain();</span><br><span class="line">        m.callback = r;</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 之前sendMessage都是走的第二个判断，post走的就是第一个判断，</span></span><br><span class="line">        <span class="comment">// 我们的Runnable现在不为空</span></span><br><span class="line">        <span class="keyword">if</span> (msg.callback != <span class="keyword">null</span>) &#123;</span><br><span class="line">            handleCallback(msg);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            handleMessage(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 结果很明显了，就是执行了Runnable的run方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handleCallback</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        message.callback.run();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>下面演示一下多个线程向主线程发送消息会产生怎样的结果，自定义线程MessageThread用于发送Message，普通的Thread用于post Runnable</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    textView = findViewById(R.id.textView);</span><br><span class="line">    <span class="comment">// handler根据传过来的Message的what值进行不同的操作</span></span><br><span class="line">    handler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    Log.i(<span class="string">"aaaa"</span>, <span class="string">"Thread 0: "</span> + msg.obj.toString());</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    Log.i(<span class="string">"aaaa"</span>, <span class="string">"Thread 1: "</span> + msg.obj.toString());</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    Log.i(<span class="string">"aaaa"</span>, <span class="string">"Thread 2: "</span> + msg.obj.toString());</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 开启三个线程发送Message，加上延时</span></span><br><span class="line">    <span class="keyword">new</span> MessageThread(<span class="number">0</span>, <span class="string">"thread 0 hahaha"</span>, <span class="number">3000</span>).start();</span><br><span class="line">    <span class="keyword">new</span> MessageThread(<span class="number">1</span>, <span class="string">"thread 1 oooooo"</span>, <span class="number">1000</span>).start();</span><br><span class="line">    <span class="keyword">new</span> MessageThread(<span class="number">2</span>, <span class="string">"thread 2 yyyyyy"</span>, <span class="number">2000</span>).start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// post Runnable也加上延时，注意这里的postDelayed并不会阻塞主线程，</span></span><br><span class="line">    <span class="comment">// 原理同Looper.loop()，所以不会引起ANR，这个延时只会影响此Message在MessageQueue</span></span><br><span class="line">    <span class="comment">// 中的位置</span></span><br><span class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            handler.postDelayed(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    Log.i(<span class="string">"aaaa"</span>, <span class="string">"MainThread"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="number">10000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> what;</span><br><span class="line">    <span class="keyword">private</span> String text;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> delay;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MessageThread</span><span class="params">(<span class="keyword">int</span> what, String text, <span class="keyword">long</span> delay)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.what = what;</span><br><span class="line">        <span class="keyword">this</span>.text = text;</span><br><span class="line">        <span class="keyword">this</span>.delay = delay;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Message message = Message.obtain();</span><br><span class="line">        message.what = what;</span><br><span class="line">        message.obj = text;</span><br><span class="line">        handler.sendMessageDelayed(message, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>log结果为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Thread 1: thread 1 oooooo</span><br><span class="line">Thread 2: thread 2 yyyyyy</span><br><span class="line">Thread 0: thread 0 hahaha</span><br><span class="line">MainThread</span><br></pre></td></tr></table></figure>
<h2 id="2-AsyncTask"><a href="#2-AsyncTask" class="headerlink" title="2. AsyncTask"></a>2. AsyncTask</h2><p>通过Handler实现的多线程通信在使用上还是有很多不方便的地方，比如需要显示的创建子线程，每次创建子线程都是对资源的消耗，当然也可以使用线程池来减少线程资源的创建与销毁，同时需要定义Handler的处理方式，对于每一个需要处理消息的线程都需要定义其Handler，这样就显得比较乱，因此可以使用AsyncTask来替代，先看一下如何使用。</p>
<h3 id="2-1-AsyncTask简单使用"><a href="#2-1-AsyncTask简单使用" class="headerlink" title="2.1 AsyncTask简单使用"></a>2.1 AsyncTask简单使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 依然以请求和风天气数据为例，现在我们为加载数据时显示进度，为什么要显示进度呢</span></span><br><span class="line"><span class="comment">// 从设计理念来看，当我们给某些需要长时间等待的操作加上进度条时，用户对这个操作的</span></span><br><span class="line"><span class="comment">// 容忍度会增加，比如常见的进入游戏的界面，会显示进度条，这样的话就算耗时相对较长，</span></span><br><span class="line"><span class="comment">// 但是用户可以根据进度有一个心理预期，从而提升容忍度；如果你的耗时操作没有任何进度</span></span><br><span class="line"><span class="comment">// 提示，那么用户很容易觉得你的应用是不是卡死了，从而降低了体验</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY = <span class="string">"XXXXXXXXXXXX"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">"https://free-api.heweather.net/s6/weather/"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView textView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        textView = findViewById(R.id.textView);</span><br><span class="line">        MyTask task = <span class="keyword">new</span> MyTask();</span><br><span class="line">        <span class="comment">// execute的参数等价于doInBackground的参数</span></span><br><span class="line">        task.execute(<span class="string">"beijing"</span>, <span class="number">50L</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// AsyncTask是抽象类，需要自定义Task并实现doInBackground方法，除了doInBackground之外</span></span><br><span class="line"><span class="comment">// 还有几个方法用于初始化、显示进度、输出结果等功能，三个参数Object, Integer, WeatherEntity为泛型参数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Object</span>, <span class="title">Integer</span>, <span class="title">WeatherEntity</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// onPreExecute在主线程执行，用于做一些提前的初始化</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPreExecute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            textView.setText(<span class="string">"Start!!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// doInBackground在子线程执行，不需要显示地创建Thread，这里的参数params</span></span><br><span class="line">        <span class="comment">// 是一个泛型参数，也就是说可以传入多个参数，相当于参数数组，参数的传入是</span></span><br><span class="line">        <span class="comment">// task.execute传入，返回值由AsyncTask第三个泛型参数决定，同时也是</span></span><br><span class="line">        <span class="comment">// onPostExecute的输入参数</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> WeatherEntity <span class="title">doInBackground</span><span class="params">(Object... params)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 根据传入的顺序读取，location就是beijing，delay就是50L，</span></span><br><span class="line">            <span class="comment">// 为了模拟进度，这里传入一个延时，正式使用时需要根据数据实际传输的进度</span></span><br><span class="line">            <span class="comment">// 展示进度</span></span><br><span class="line">            String location = (String) params[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">long</span> delay = (<span class="keyword">long</span>) params[<span class="number">1</span>];</span><br><span class="line">            WeatherEntity result = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 先获取数据，我们知道这里取数据的速度其实是很快的</span></span><br><span class="line">                result = getData(location);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 然后显示进度，这里仅模拟</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">int</span> length = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (count &lt; <span class="number">99</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    count += length;</span><br><span class="line">                    <span class="comment">// 可调用publishProgress（）显示进度, 之后将执行onProgressUpdate（）</span></span><br><span class="line">                    publishProgress(count);</span><br><span class="line">                    <span class="comment">// 模拟耗时任务</span></span><br><span class="line">                    Thread.sleep(delay);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 最后返回取到的数据</span></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// onProgressUpdate在主线程执行，显示进度</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Integer... values)</span> </span>&#123;</span><br><span class="line">            textView.setText(String.format(Locale.CHINA, <span class="string">"加载进度：%d%%"</span>, values[<span class="number">0</span>]));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// onPostExecute在主线程执行，用于处理doInBackground返回的数据</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(WeatherEntity weatherEntity)</span> </span>&#123;</span><br><span class="line">            textView.setText(weatherEntity.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// AsyncTask可以通过调用isCancelled主动终止</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCancelled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            textView.setText(<span class="string">"Cancel!!!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> WeatherEntity <span class="title">getData</span><span class="params">(String location)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">                    .baseUrl(URL)</span><br><span class="line">                    .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">                    .build();</span><br><span class="line">            Api api = retrofit.create(Api<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            Call&lt;WeatherEntity&gt; call = api.getNowWeather(location, KEY);</span><br><span class="line">            <span class="keyword">return</span> call.execute().body();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-2-AsyncTask源码分析"><a href="#2-2-AsyncTask源码分析" class="headerlink" title="2.2 AsyncTask源码分析"></a>2.2 AsyncTask源码分析</h3><p>首先从task.execute开始</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AsyncTask.java</span></span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> AsyncTask&lt;Params, Progress, Result&gt; <span class="title">execute</span><span class="params">(Params... params)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// executeOnExecutor传入两个参数sDefaultExecutor和params，</span></span><br><span class="line">        <span class="comment">// sDefaultExecutor看名字就知道是一个Executor，Executor提供execute方法，</span></span><br><span class="line">        <span class="comment">// 用于消耗Runnable，我们先看看sDefaultExecutor是什么</span></span><br><span class="line">        <span class="keyword">return</span> executeOnExecutor(sDefaultExecutor, params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// sDefaultExecutor实际上是new SerialExecutor()，static修饰加上</span></span><br><span class="line">    <span class="comment">// synchronized修饰execute方法，保证多个Task启动execute时是按照顺序执行的</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SerialExecutor</span> <span class="keyword">implements</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">        <span class="comment">// SerialExecutor提供一个队列mTasks用于保存Runnable</span></span><br><span class="line">        <span class="comment">// mActive表示当前需要执行的Runnable</span></span><br><span class="line">        <span class="keyword">final</span> ArrayDeque&lt;Runnable&gt; mTasks = <span class="keyword">new</span> ArrayDeque&lt;Runnable&gt;();</span><br><span class="line">        Runnable mActive;</span><br><span class="line">        <span class="comment">// execute方法把传入的Runnable加入到队列中，但是不是直接加入的，</span></span><br><span class="line">        <span class="comment">// 而是通过new Runnable改造了，让其在执行了run之后会执行scheduleNext</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(<span class="keyword">final</span> Runnable r)</span> </span>&#123;</span><br><span class="line">            mTasks.offer(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        r.run();</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        scheduleNext();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">if</span> (mActive == <span class="keyword">null</span>) &#123;</span><br><span class="line">                scheduleNext();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// scheduleNext从mTasks的对头取Runnable，通过THREAD_POOL_EXECUTOR</span></span><br><span class="line">        <span class="comment">// 执行Runnable，联系SerialExecutor的execute方法，就知道了一旦调用了</span></span><br><span class="line">        <span class="comment">// SerialExecutor的execute方法，就会不断从mTasks取任务，然后交给线程池</span></span><br><span class="line">        <span class="comment">// THREAD_POOL_EXECUTOR去执行，至于线程池是如何execute暂时不解释，</span></span><br><span class="line">        <span class="comment">// 只需要知道线程池会分配空闲的线程并执行传入的mFuture的run方法即可</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">scheduleNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> ((mActive = mTasks.poll()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                THREAD_POOL_EXECUTOR.execute(mActive);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// THREAD_POOL_EXECUTOR就是传说中的线程池，THREAD_POOL_EXECUTOR.execute</span></span><br><span class="line">    <span class="comment">// 会自动使用线程池中空闲的线程完成mActive的任务</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * An &#123;<span class="doctag">@link</span> Executor&#125; that can be used to execute tasks in parallel.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor THREAD_POOL_EXECUTOR;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        ThreadPoolExecutor threadPoolExecutor = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">                CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE_SECONDS, TimeUnit.SECONDS,</span><br><span class="line">                sPoolWorkQueue, sThreadFactory);</span><br><span class="line">        threadPoolExecutor.allowCoreThreadTimeOut(<span class="keyword">true</span>);</span><br><span class="line">        THREAD_POOL_EXECUTOR = threadPoolExecutor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 明白了sDefaultExecutor本质上是线程池，接下来看executeOnExecutor怎么调用线程池</span></span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> AsyncTask&lt;Params, Progress, Result&gt; <span class="title">executeOnExecutor</span><span class="params">(Executor exec,</span></span></span><br><span class="line"><span class="function"><span class="params">            Params... params)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mStatus != Status.PENDING) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (mStatus) &#123;</span><br><span class="line">                <span class="keyword">case</span> RUNNING:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot execute task:"</span></span><br><span class="line">                            + <span class="string">" the task is already running."</span>);</span><br><span class="line">                <span class="keyword">case</span> FINISHED:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot execute task:"</span></span><br><span class="line">                            + <span class="string">" the task has already been executed "</span></span><br><span class="line">                            + <span class="string">"(a task can be executed only once)"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 首先设置了状态为RUNNING</span></span><br><span class="line">        mStatus = Status.RUNNING;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里是不是很熟悉，我们继承AsyncTask时重写的onPreExecute方法</span></span><br><span class="line">        onPreExecute();</span><br><span class="line">        <span class="comment">// 然后将参数保存在mWorker.mParams</span></span><br><span class="line">        mWorker.mParams = params;</span><br><span class="line">        <span class="comment">// 调用exec.execute，这里的exec就是上面的SerialExecutor</span></span><br><span class="line">        exec.execute(mFuture);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时我们需要明白mWorker和mFuture是什么，这里就要了解子类继承父类时，构造方法的执行了</span></span><br><span class="line"><span class="comment">// 在我们MyTask task = new MyTask();时，其实完成了父类的无参构造方法的执行，也就是AsyncTask</span></span><br><span class="line"><span class="comment">// 的无参构造方法</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new asynchronous task. This constructor must be invoked on the UI thread.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AsyncTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>((Looper) <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 也就是说mWorker和mFuture在new MyTask()时已经完成了初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AsyncTask</span><span class="params">(@Nullable Looper callbackLooper)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// callbackLooper为null，所以mHandler为getMainHandler方法的返回值，</span></span><br><span class="line">        <span class="comment">// 看名字就知道返回的是主线程的Handler，但是这个Handler有点东西</span></span><br><span class="line">        mHandler = callbackLooper == <span class="keyword">null</span> || callbackLooper == Looper.getMainLooper()</span><br><span class="line">            ? getMainHandler()</span><br><span class="line">            : <span class="keyword">new</span> Handler(callbackLooper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// mWorker提供了一个对象WorkerRunnable，WorkerRunnable实现了Callable接口的call方法</span></span><br><span class="line">        <span class="comment">// 当mWorker的call方法被执行时，我们就可以得到结果</span></span><br><span class="line">        mWorker = <span class="keyword">new</span> WorkerRunnable&lt;Params, Result&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Result <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                mTaskInvoked.set(<span class="keyword">true</span>);</span><br><span class="line">                Result result = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</span><br><span class="line">                    <span class="comment">//noinspection unchecked</span></span><br><span class="line">                    <span class="comment">// 很熟悉的doInBackground方法，传入的参数为mWorker的mParams，即我们</span></span><br><span class="line">                    <span class="comment">// 在task.execute("beijing", 50L);传入的参数</span></span><br><span class="line">                    result = doInBackground(mParams);</span><br><span class="line">                    Binder.flushPendingCommands();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable tr) &#123;</span><br><span class="line">                    mCancelled.set(<span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">throw</span> tr;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    postResult(result);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// mFuture以mWorker为参数实现了FutureTask，这里的FutureTask可以被SerialExecutor execute，</span></span><br><span class="line">        <span class="comment">// 会调用FutureTask的run方法，run方法中会执行mWorker的call方法，最终会调用FutureTask的done方法</span></span><br><span class="line">        mFuture = <span class="keyword">new</span> FutureTask&lt;Result&gt;(mWorker) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">done</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// get方法得到的是FutureTask执行run方法后得到的result</span></span><br><span class="line">                    postResultIfNotInvoked(get());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    android.util.Log.w(LOG_TAG, e);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"An error occurred while executing doInBackground()"</span>,</span><br><span class="line">                            e.getCause());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (CancellationException e) &#123;</span><br><span class="line">                    postResultIfNotInvoked(<span class="keyword">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// postResultIfNotInvoked会进一步处理结果</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postResultIfNotInvoked</span><span class="params">(Result result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> wasTaskInvoked = mTaskInvoked.get();</span><br><span class="line">        <span class="keyword">if</span> (!wasTaskInvoked) &#123;</span><br><span class="line">            postResult(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// postResult通过主线程的Handler发送了数据result，并标记MESSAGE_POST_RESULT</span></span><br><span class="line">    <span class="comment">// 表示数据已经获取完毕，应该交给主线程处理</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Result <span class="title">postResult</span><span class="params">(Result result)</span> </span>&#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT,</span><br><span class="line">                <span class="keyword">new</span> AsyncTaskResult&lt;Result&gt;(<span class="keyword">this</span>, result));</span><br><span class="line">        message.sendToTarget();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 还是记得上文介绍的Handler吗，它还有额外的功能</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InternalHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">InternalHandler</span><span class="params">(Looper looper)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(looper);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"unchecked"</span>, <span class="string">"RawUseOfParameterizedType"</span>&#125;)</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 在处理Message时，还可以判断并选择执行onProgressUpdate</span></span><br><span class="line">            AsyncTaskResult&lt;?&gt; result = (AsyncTaskResult&lt;?&gt;) msg.obj;</span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                <span class="comment">// 上面说的数据获取完毕会标记MESSAGE_POST_RESULT</span></span><br><span class="line">                <span class="keyword">case</span> MESSAGE_POST_RESULT:</span><br><span class="line">                    <span class="comment">// There is only one result</span></span><br><span class="line">                    <span class="comment">// 调用mTask，这里就是AsyncTask的finish方法</span></span><br><span class="line">                    result.mTask.finish(result.mData[<span class="number">0</span>]);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> MESSAGE_POST_PROGRESS:</span><br><span class="line">                    result.mTask.onProgressUpdate(result.mData);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 熟悉的重写isCancelled和onPostExecute</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">(Result result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isCancelled()) &#123;</span><br><span class="line">            <span class="comment">// 如果主动调用isCancelled则走onCancelled</span></span><br><span class="line">            onCancelled(result);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 或者最终回到我们重写的onPostExecute</span></span><br><span class="line">            onPostExecute(result);</span><br><span class="line">        &#125;</span><br><span class="line">        mStatus = Status.FINISHED;</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上就是正常的AsyncTask执行流程，但是别忘了我们有一个进度显示的功能</span></span><br><span class="line">    <span class="meta">@WorkerThread</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">publishProgress</span><span class="params">(Progress... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isCancelled()) &#123;</span><br><span class="line">            <span class="comment">// 通过Handler发送进度数据values</span></span><br><span class="line">            <span class="comment">// 这里就对应了上面的主线程的Handler的另一个功能，显示进度</span></span><br><span class="line">            getHandler().obtainMessage(MESSAGE_POST_PROGRESS,</span><br><span class="line">                    <span class="keyword">new</span> AsyncTaskResult&lt;Progress&gt;(<span class="keyword">this</span>, values)).sendToTarget();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>整理一下流程，很显然的是AsyncTask本质上还是基于Handler，但是在对线程的处理上采用了线程池，具体的执行过程：</p>
<ol>
<li>在<code>new MyTask()</code>时初始化了主线程的Handler和线程池，构造了FutureTask并提供了doInBackground的回调，并提供了通过sendToTarget的方式处理result和progress的方式；</li>
<li>当我们执行<code>task.execute(&quot;beijing&quot;, 50L);</code>的方法时，提供了onPreExecute的回调，并将参数传给第1步中的FutureTask，然后使用SerialExecutor execute第1步构造的的FutureTask，本质上还是线程池，只是附加了功能：连续处理队列中的所有任务；</li>
<li>最后将得到结果通过上面sendToTarget后Handler的回调handleMessage处理发送的数据</li>
</ol>
<p>仔细思考一下就会发现，AsyncTask提供了一个显示进度的方法，比较适用于上传下载文件的场景，因为下载进度与下载文件的大小是可知的，但是很多http框架比如Retrofit，可以很方便在接受Response的时候监听下载进度，导致AsyncTask无用武之处；同时对于登录注册功能来说，登录进度并不是很适合量化，所以也不适用；还有其他的场景我暂时也没有想到。这就导致了AsyncTask的作用被弱化了，除了集成doInBackground和onPostExecute方法就没有什么亮眼之处。</p>
<p>AsyncTask也提供了带Looper或者Handler参数的构造函数，此时会影响的只有postResult和publishProgress方法，即这两个方法会发送消息到Looper的线程中，但是子线程的Handler需要自定义handleMessage并自行判断msg.what，包括<code>MESSAGE_POST_RESULT</code>和<code>MESSAGE_POST_PROGRESS</code>，实现从子线程到子线程的消息传递。</p>
<h2 id="3-EventBus"><a href="#3-EventBus" class="headerlink" title="3. EventBus"></a>3. EventBus</h2><p>EventBus比上面介绍的两种方式更加强大，除了线程间通信之外，还可以在Activity间传递消息，同时兼具灵活的线程切换功能，先直接上一个简单的例子，依然是请求和风天气数据</p>
<blockquote>
<p>1.首先使用EventBus需要自定义MessageEvent，即通过EventBus传递的消息载体</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageEvent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object msg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MessageEvent</span><span class="params">(Object msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span><span class="params">(Object msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"MessageEvent&#123;"</span> + <span class="string">"msg="</span> + msg + <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>2.在需要处理消息的地方（Activity）中定义Subscribe方法，这个方法可以自动接收其他地方传来的消息</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Subscribe注解修饰处理MessageEvent的方法，有几个参数threadMode、sticky、priority</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">首先是threadMode：</span></span><br><span class="line"><span class="comment">POSTING：默认，表示事件处理函数的线程跟发布事件的线程在同一个线程。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">MAIN：表示事件处理函数的线程在主线程(UI)线程，因此在这里不能进行耗时操作。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">BACKGROUND：表示事件处理函数的线程在后台线程，因此不能进行UI操作。</span></span><br><span class="line"><span class="comment">如果发布事件的线程是主线程(UI线程)，那么事件处理函数将会开启一个后台线程，</span></span><br><span class="line"><span class="comment">如果果发布事件的线程是在后台线程，那么事件处理函数就使用该线程。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">ASYNC：表示无论事件发布的线程是哪一个，事件处理函数始终会新建一个子线程运行，同样不能进行UI操作。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">然后是sticky，sticky用于表示是否接收粘性事件</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">最后是priority，priority决定不同的Subscribe方法接收事件的优先级，数值越大越早接收，</span></span><br><span class="line"><span class="comment">先接受的Subscribe方法还可以禁止事件继续传递下去</span></span><br><span class="line"><span class="comment">1. 只有当两个订阅方法使用相同的ThreadMode参数的时候，它们的优先级才会与priority指定的值一致；</span></span><br><span class="line"><span class="comment">2. 只有当某个订阅方法的ThreadMode参数为POSTING的时候，它才能停止该事件的继续分发。</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="comment">// requestData方法用于处理发送的消息是String，其他则打印log</span></span><br><span class="line"><span class="meta">@Subscribe</span>(threadMode = ThreadMode.BACKGROUND)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestData</span><span class="params">(MessageEvent message)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (message.getMsg() <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">                .baseUrl(URL)</span><br><span class="line">                .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">                .build();</span><br><span class="line">        Api api = retrofit.create(Api<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Call&lt;WeatherEntity&gt; call = api.getNowWeather(message.getMsg().toString(), KEY);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 通过EventBus把请求得到的天气发送出去</span></span><br><span class="line">            EventBus.getDefault().post(<span class="keyword">new</span> MessageEvent(call.execute().body()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.getMsg() <span class="keyword">instanceof</span> WeatherEntity) &#123;</span><br><span class="line">        Log.i(<span class="string">"aaaa"</span>, <span class="string">"ThreadMode.BACKGROUND: "</span> + message.getMsg().toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// showMessage方法用于处理发送的消息是WeatherEntity，将其显示到TextView上，其他类型则打印log</span></span><br><span class="line"><span class="meta">@Subscribe</span>(threadMode = ThreadMode.MAIN)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showMessage</span><span class="params">(MessageEvent message)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (message.getMsg() <span class="keyword">instanceof</span> WeatherEntity) &#123;</span><br><span class="line">        textView.setText(message.getMsg().toString());</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.getMsg() <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        Log.i(<span class="string">"aaaa"</span>, <span class="string">"ThreadMode.MAIN: "</span> + message.getMsg().toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>3.在onStart和onStop中注册和取消注册</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    EventBus.getDefault().register(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">super</span>.onStart();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    EventBus.getDefault().unregister(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">super</span>.onStop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>4.发送消息</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    textView = findViewById(R.id.textView);</span><br><span class="line">    textView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 发送的消息本体是String，即请求的location</span></span><br><span class="line">            EventBus.getDefault().post(<span class="keyword">new</span> MessageEvent(<span class="string">"beijing"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当我们点击textView的时候就会发送消息<code>new MessageEvent(&quot;beijing&quot;)</code>出去，如果打断点观察消息发送的流程就会清楚：</p>
<ol>
<li>我们在主线程发送的消息会首先由<code>ThreadMode.MAIN</code>的方法处理，此时就会打印log：</li>
<li>然后消息会发送到requestData方法，而requestData方法是<code>ThreadMode.BACKGROUND</code>，所以它会在子线程中执行，我们在子线程中又发了<code>new MessageEvent(call.execute().body())</code>，因此消息会首先由<code>ThreadMode.BACKGROUND</code>的方法处理，即requestData方法自身，此时打印log；</li>
<li>最后消息又传到了showMessage方法中，而showMessage方法是<code>ThreadMode.MAIN</code>，所以可以执行在主线程，因此textView被设置了text，整个消息传递流程结束。</li>
</ol>
<p>根据上面的例子基本可以了解了EventBus发送消息的机制，类似于广播，不同的threadMode参数决定这个方法的执行线程，而消息发送时会首先发到当前线程的方法中，如果在这个方法中消息没有被取消，则会继续广播到其他线程的方法中，具体顺序可以测试一下，直到没有可以处理此消息的方法，整个消息传播的流程就结束了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以下列方法处理从主线程发送的MessageEvent，我们观察一下log的顺序</span></span><br><span class="line"><span class="meta">@Subscribe</span>(threadMode = ThreadMode.MAIN)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">broadcastMessage1</span><span class="params">(MessageEvent message)</span> </span>&#123;</span><br><span class="line">    Log.i(<span class="string">"aaaa"</span>, <span class="string">"ThreadMode.MAIN: "</span> + message.getMsg().toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Subscribe</span>(threadMode = ThreadMode.BACKGROUND)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">broadcastMessage2</span><span class="params">(MessageEvent message)</span> </span>&#123;</span><br><span class="line">    Log.i(<span class="string">"aaaa"</span>, <span class="string">"ThreadMode.BACKGROUND: "</span> + message.getMsg().toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Subscribe</span>(threadMode = ThreadMode.POSTING)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">broadcastMessage3</span><span class="params">(MessageEvent message)</span> </span>&#123;</span><br><span class="line">    Log.i(<span class="string">"aaaa"</span>, <span class="string">"ThreadMode.POSTING: "</span> + message.getMsg().toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Subscribe</span>(threadMode = ThreadMode.ASYNC)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">broadcastMessage4</span><span class="params">(MessageEvent message)</span> </span>&#123;</span><br><span class="line">    Log.i(<span class="string">"aaaa"</span>, <span class="string">"ThreadMode.ASYNC: "</span> + message.getMsg().toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>依次是MAIN -&gt; POSTING -&gt; BACKGROUND -&gt; ASYNC</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2019-07-28 20:40:38.419 28604-28604&#x2F;com.example.gsondemo I&#x2F;aaaa: ThreadMode.MAIN: beijing</span><br><span class="line">2019-07-28 20:40:38.420 28604-28604&#x2F;com.example.gsondemo I&#x2F;aaaa: ThreadMode.POSTING: beijing</span><br><span class="line">2019-07-28 20:40:38.421 28604-28765&#x2F;com.example.gsondemo I&#x2F;aaaa: ThreadMode.BACKGROUND: beijing</span><br><span class="line">2019-07-28 20:40:38.422 28604-28766&#x2F;com.example.gsondemo I&#x2F;aaaa: ThreadMode.ASYNC: beijing</span><br></pre></td></tr></table></figure>
<p>在看一下从BACKGROUND子线程发送的MessageEvent，依次是BACKGROUND -&gt; POSTING -&gt; MAIN -&gt; ASYNC</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2019-07-28 20:53:27.151 30433-30481&#x2F;com.example.gsondemo I&#x2F;aaaa: ThreadMode.BACKGROUND: shanghai</span><br><span class="line">2019-07-28 20:53:27.151 30433-30481&#x2F;com.example.gsondemo I&#x2F;aaaa: ThreadMode.POSTING: shanghai</span><br><span class="line">2019-07-28 20:53:27.152 30433-30433&#x2F;com.example.gsondemo I&#x2F;aaaa: ThreadMode.MAIN: shanghai</span><br><span class="line">2019-07-28 20:53:27.152 30433-30482&#x2F;com.example.gsondemo I&#x2F;aaaa: ThreadMode.ASYNC: shanghai</span><br></pre></td></tr></table></figure>
<p>消息广播的规则应该是首先是发送到post所在的线程，然后是POSTING，然后是其他线程，最后是ASYNC，因此我们可以在POSTING方法中取消消息的广播，那么消息就会被中断。</p>
<ul>
<li>普通事件删除</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EventBus.getDefault().cancelEventDelivery(event);</span><br></pre></td></tr></table></figure>
<ul>
<li>粘性事件删除</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指定粘性事件删除  </span></span><br><span class="line">T stickyEvent = EventBus.getDefault().getStickyEvent(eventType);  </span><br><span class="line"><span class="keyword">if</span> (stickyEvent != <span class="keyword">null</span>) &#123;</span><br><span class="line">    EventBus.getDefault().removeStickyEvent(stickyEvent);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除所有粘性事件 </span></span><br><span class="line">EventBus.getDefault().removeAllStickyEvents();</span><br></pre></td></tr></table></figure>
<p>除了普通事件之外，EventBus还可以发送粘性事件，解释起来比较复杂，简而言之就是让消息“飞一会”，在我们主动注册时才处理消息，用代码来解释</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码是类似的，只是这次不在onStart方法内注册，而是通过button点击注册</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    textView = findViewById(R.id.textView);</span><br><span class="line">    button = findViewById(R.id.button);</span><br><span class="line">    textView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// postSticky替代post</span></span><br><span class="line">            EventBus.getDefault().postSticky(<span class="keyword">new</span> MessageEvent(<span class="string">"beijing"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">            EventBus.getDefault().register(MainActivity.<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加sticky = true</span></span><br><span class="line"><span class="meta">@Subscribe</span>(threadMode = ThreadMode.BACKGROUND, sticky = <span class="keyword">true</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestData</span><span class="params">(MessageEvent message)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (message.getMsg() <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">                .baseUrl(URL)</span><br><span class="line">                .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">                .build();</span><br><span class="line">        Api api = retrofit.create(Api<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Call&lt;WeatherEntity&gt; call = api.getNowWeather(message.getMsg().toString(), KEY);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            EventBus.getDefault().post(<span class="keyword">new</span> MessageEvent(call.execute().body()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.getMsg() <span class="keyword">instanceof</span> WeatherEntity) &#123;</span><br><span class="line">        Log.i(<span class="string">"aaaa"</span>, <span class="string">"ThreadMode.BACKGROUND: "</span> + message.getMsg().toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加sticky = true</span></span><br><span class="line"><span class="meta">@Subscribe</span>(threadMode = ThreadMode.MAIN, sticky = <span class="keyword">true</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showMessage</span><span class="params">(MessageEvent message)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (message.getMsg() <span class="keyword">instanceof</span> WeatherEntity) &#123;</span><br><span class="line">        textView.setText(message.getMsg().toString());</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.getMsg() <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        Log.i(<span class="string">"aaaa"</span>, <span class="string">"ThreadMode.MAIN: "</span> + message.getMsg().toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onStart();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    EventBus.getDefault().unregister(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">super</span>.onStop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样的结果就是当我们点击textView时，事件就会发出，但是Subscribe方法没有接收，当且仅当我们点击了button时，事件才开始被接收，即我们让消息在运行时“飞了一会”，消息并不会丢失，当我们主动去注册时才开始处理，这就是粘性事件。</p>
<p>priority就不详细解释了，对于有相同threadMode的方法，priority值越大越先接收到消息。</p>
<p>EventBus源码解析暂时留个坑。</p>
<h2 id="4-RxJava"><a href="#4-RxJava" class="headerlink" title="4. RxJava"></a>4. RxJava</h2><p><code>RxJava – Reactive Extensions for the JVM – a library for composing asynchronous and event-based programs using observable sequences for the Java VM.</code></p>
<p>RxJava也是一个可以用于处理线程间通信的工具，但是功能非常强大（不仅限于线程间通信），不仅可以用于Java Web项目也可以在Android项目中使用，RxJava的使用方式与上述各种工具或者框架不太一样，它是通过流式调用的形式使用的。目前有三个版本分别是Version 1.x、Version 2.x以及最新的Version 3.x，新版本加入新的特性比如背压、Java 8等等，这里仅演示RxJava2</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">"io.reactivex.rxjava2:rxjava:2.2.8"</span> <span class="comment">// 必要rxjava2依赖</span></span><br><span class="line">implementation <span class="string">"io.reactivex.rxjava2:rxandroid:2.1.0"</span> <span class="comment">// 必要rxandrroid依赖，切线程时需要用到AndroidSchedulers.mainThread()</span></span><br></pre></td></tr></table></figure>
<h3 id="4-1-RxJava结合Retrofit"><a href="#4-1-RxJava结合Retrofit" class="headerlink" title="4.1 RxJava结合Retrofit"></a>4.1 RxJava结合Retrofit</h3><p>还是以请求和风天气数据为例，这是Retrofit与RxJava的结合使用，RxJava使用的是观察者模式，这里就不详细解释</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">        .baseUrl(URL)</span><br><span class="line">        .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">        .addCallAdapterFactory(RxJava2CallAdapterFactory.create())</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">Api api = retrofit.create(Api<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">// 这里的getNowWeather方法在Api.java中返回的是Observable</span></span><br><span class="line">api.getNowWeather(<span class="string">"beijing"</span>, KEY)</span><br><span class="line">        .subscribeOn(Schedulers.io()) <span class="comment">// subscribeOn参数为io线程，表明getNowWeather请求数据执行在io线程</span></span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread()) <span class="comment">// observeOn参数为主线程，表明请求结束传递的数据在主线程处理</span></span><br><span class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;WeatherEntity&gt;() &#123; <span class="comment">// subscribe定义上面observeOn进行的方法，RxJava2中以Consumer代理处理，一般来说有两个Consumer，一个用于处理请求成功的数据，另一个处理异常</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(WeatherEntity weatherEntity)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                textView.setText(weatherEntity.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="keyword">new</span> Consumer&lt;Throwable&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Throwable throwable)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                Log.i(<span class="string">"aaaa"</span>, throwable.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<h3 id="4-2-RxJava源码分析"><a href="#4-2-RxJava源码分析" class="headerlink" title="4.2 RxJava源码分析"></a>4.2 RxJava源码分析</h3><p>虽然上面的代码只演示了RxJava的线程切换功能，但是实际上RxJava的功能非常强大，在处理大量数据的情况下能够更加简洁有效的代码完成，同时兼具数据变换的功能，这里三言两语很难表述清除，需要实战演练就能够明白，与此同时，基于RxJava我们也可以自定义更多的工具函数，以RxJava流式调用的方式来使用。</p>
<p><strong>Observable警告：RxJava提供的各种方法比如subscribeOn、observeOn以及doOnNext等都会创建新的Observable和Observer，Observable是数据的被观察者，它保存了我们需要的数据；Observer是数据的观察者，数据如何发送、在哪个线程处理、如何处理异常等都是通过Observer处理的，一般来说每一个自定义的Observable都有一个内部类Observer，只是这个Observer是给上一级的Observable调用</strong></p>
<p>首先我们需要知道<code>retrofit.create(Api.class)</code>创建了什么，这个在Retrofit框架分析中已经做过了，在这种情况下是通过RxJava2CallAdapterFactory的RxJava2CallAdapter调用adapt方法返回的Observable</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RxJava2CallAdapter.java</span></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Object <span class="title">adapt</span><span class="params">(Call&lt;R&gt; call)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 首先是创建CallExecuteObservable</span></span><br><span class="line">    Observable&lt;Response&lt;R&gt;&gt; responseObservable = isAsync</span><br><span class="line">        ? <span class="keyword">new</span> CallEnqueueObservable&lt;&gt;(call)</span><br><span class="line">        : <span class="keyword">new</span> CallExecuteObservable&lt;&gt;(call);</span><br><span class="line"></span><br><span class="line">    Observable&lt;?&gt; observable;</span><br><span class="line">    <span class="keyword">if</span> (isResult) &#123;</span><br><span class="line">      observable = <span class="keyword">new</span> ResultObservable&lt;&gt;(responseObservable);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isBody) &#123;</span><br><span class="line">      <span class="comment">// 然后根据参数，返回的是BodyObservable</span></span><br><span class="line">      observable = <span class="keyword">new</span> BodyObservable&lt;&gt;(responseObservable);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      observable = responseObservable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (scheduler != <span class="keyword">null</span>) &#123;</span><br><span class="line">      observable = observable.subscribeOn(scheduler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isFlowable) &#123;</span><br><span class="line">      <span class="keyword">return</span> observable.toFlowable(BackpressureStrategy.LATEST);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isSingle) &#123;</span><br><span class="line">      <span class="keyword">return</span> observable.singleOrError();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isMaybe) &#123;</span><br><span class="line">      <span class="keyword">return</span> observable.singleElement();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isCompletable) &#123;</span><br><span class="line">      <span class="keyword">return</span> observable.ignoreElements();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> RxJavaPlugins.onAssembly(observable);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>而BodyObservable继承自Observable，并且有一个内部类BodyObserver</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// BodyObservable.java</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">BodyObservable</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Observable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Observable&lt;Response&lt;T&gt;&gt; upstream;</span><br><span class="line"></span><br><span class="line">  BodyObservable(Observable&lt;Response&lt;T&gt;&gt; upstream) &#123;</span><br><span class="line">    <span class="keyword">this</span>.upstream = upstream;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// subscribeActual方法会在Observable调用subscribe方法时被调用</span></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">subscribeActual</span><span class="params">(Observer&lt;? <span class="keyword">super</span> T&gt; observer)</span> </span>&#123;</span><br><span class="line">    upstream.subscribe(<span class="keyword">new</span> BodyObserver&lt;T&gt;(observer));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BodyObserver</span>&lt;<span class="title">R</span>&gt; <span class="keyword">implements</span> <span class="title">Observer</span>&lt;<span class="title">Response</span>&lt;<span class="title">R</span>&gt;&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Observer&lt;? <span class="keyword">super</span> R&gt; observer;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> terminated;</span><br><span class="line"></span><br><span class="line">    BodyObserver(Observer&lt;? <span class="keyword">super</span> R&gt; observer) &#123;</span><br><span class="line">      <span class="keyword">this</span>.observer = observer;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// BodyObserver实现了Observer的4个方法onSubscribe、onNext、onComplete、onError，</span></span><br><span class="line"><span class="comment">// 但是不是BodyObserver自己完成的，而是通过传入的observer代替完成大部分功能，而BodyObserver</span></span><br><span class="line"><span class="comment">// 只对传过来的Response进行简单判断就交给observer了</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable disposable)</span> </span>&#123;</span><br><span class="line">      observer.onSubscribe(disposable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Response&lt;R&gt; response)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (response.isSuccessful()) &#123;</span><br><span class="line">        <span class="comment">// 比如判断response是否是成功从服务器返回的，然后交给observer的onNext方法，</span></span><br><span class="line">        <span class="comment">// 此时传给observer的就是response的body了，对应我们使用的GsonConverterFactory，</span></span><br><span class="line">        <span class="comment">// 那这个body就是WeatherEntity实例</span></span><br><span class="line">        observer.onNext(response.body());</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        terminated = <span class="keyword">true</span>;</span><br><span class="line">        Throwable t = <span class="keyword">new</span> HttpException(response);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          observer.onError(t);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable inner) &#123;</span><br><span class="line">          Exceptions.throwIfFatal(inner);</span><br><span class="line">          RxJavaPlugins.onError(<span class="keyword">new</span> CompositeException(t, inner));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!terminated) &#123;</span><br><span class="line">        observer.onComplete();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!terminated) &#123;</span><br><span class="line">        observer.onError(throwable);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// This should never happen! onNext handles and forwards errors automatically.</span></span><br><span class="line">        Throwable broken = <span class="keyword">new</span> AssertionError(</span><br><span class="line">            <span class="string">"This should never happen! Report as a bug with the full stacktrace."</span>);</span><br><span class="line">        <span class="comment">//noinspection UnnecessaryInitCause Two-arg AssertionError constructor is 1.7+ only.</span></span><br><span class="line">        broken.initCause(throwable);</span><br><span class="line">        RxJavaPlugins.onError(broken);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建完Observable后紧接着是subscribeOn、observeOn以及subscribe方法，很显然这些方法都是Observable的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Observable.java</span></span><br><span class="line">    <span class="meta">@CheckReturnValue</span></span><br><span class="line">    <span class="meta">@SchedulerSupport</span>(SchedulerSupport.CUSTOM)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Observable&lt;T&gt; <span class="title">subscribeOn</span><span class="params">(Scheduler scheduler)</span> </span>&#123;</span><br><span class="line">        ObjectHelper.requireNonNull(scheduler, <span class="string">"scheduler is null"</span>);</span><br><span class="line">        <span class="keyword">return</span> RxJavaPlugins.onAssembly(<span class="keyword">new</span> ObservableSubscribeOn&lt;T&gt;(<span class="keyword">this</span>, scheduler));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Observable.java</span></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Observable&lt;T&gt; <span class="title">onAssembly</span><span class="params">(@NonNull Observable&lt;T&gt; source)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 一般来说onObservableAssembly在没有调用reset方法的情况下为空，所以这里肯定为空</span></span><br><span class="line">        Function&lt;? <span class="keyword">super</span> Observable, ? extends Observable&gt; f = onObservableAssembly;</span><br><span class="line">        <span class="keyword">if</span> (f != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> apply(f, source);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 也就是说这个onAssembly方法直接返回了source，所以上面的subscribeOn方法返回的是ObservableSubscribeOn</span></span><br><span class="line">        <span class="keyword">return</span> source;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>subscribeOn方法之后我们得到了一个新的ObservableSubscribeOn，它保存了BodyObservable以及加入的参数Schedulers.io()，接下来继续调用observeOn</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Observable.java</span></span><br><span class="line">    <span class="meta">@CheckReturnValue</span></span><br><span class="line">    <span class="meta">@SchedulerSupport</span>(SchedulerSupport.CUSTOM)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Observable&lt;T&gt; <span class="title">observeOn</span><span class="params">(Scheduler scheduler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> observeOn(scheduler, <span class="keyword">false</span>, bufferSize());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CheckReturnValue</span></span><br><span class="line">    <span class="meta">@SchedulerSupport</span>(SchedulerSupport.CUSTOM)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Observable&lt;T&gt; <span class="title">observeOn</span><span class="params">(Scheduler scheduler, <span class="keyword">boolean</span> delayError, <span class="keyword">int</span> bufferSize)</span> </span>&#123;</span><br><span class="line">        ObjectHelper.requireNonNull(scheduler, <span class="string">"scheduler is null"</span>);</span><br><span class="line">        ObjectHelper.verifyPositive(bufferSize, <span class="string">"bufferSize"</span>);</span><br><span class="line">        <span class="comment">// observeOn显然又返回了一个ObservableObserveOn</span></span><br><span class="line">        <span class="keyword">return</span> RxJavaPlugins.onAssembly(<span class="keyword">new</span> ObservableObserveOn&lt;T&gt;(<span class="keyword">this</span>, scheduler, delayError, bufferSize));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>observeOn方法之后我们得到了新的ObservableObserveOn，它保存了ObservableSubscribeOn以及参数AndroidSchedulers.mainThread()，最后调用subscribe方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Observable.java</span></span><br><span class="line">    <span class="meta">@CheckReturnValue</span></span><br><span class="line">    <span class="meta">@SchedulerSupport</span>(SchedulerSupport.NONE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Disposable <span class="title">subscribe</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; onNext, Consumer&lt;? <span class="keyword">super</span> Throwable&gt; onError)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// subscribe方法可以接受多种参数，比如我这里对应上面的两个Consumer参数，其中第一个Consumer名字是onNext，</span></span><br><span class="line">        <span class="comment">// 第二个Consumer名字是onError，看到这里基本上明白了这两个Consumer的功能，就是执行处理onNext传入的数据以及处理</span></span><br><span class="line">        <span class="comment">// onError传入的异常</span></span><br><span class="line">        <span class="keyword">return</span> subscribe(onNext, onError, Functions.EMPTY_ACTION, Functions.emptyConsumer());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CheckReturnValue</span></span><br><span class="line">    <span class="meta">@SchedulerSupport</span>(SchedulerSupport.NONE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Disposable <span class="title">subscribe</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; onNext, Consumer&lt;? <span class="keyword">super</span> Throwable&gt; onError,</span></span></span><br><span class="line"><span class="function"><span class="params">            Action onComplete, Consumer&lt;? <span class="keyword">super</span> Disposable&gt; onSubscribe)</span> </span>&#123;</span><br><span class="line">        ObjectHelper.requireNonNull(onNext, <span class="string">"onNext is null"</span>);</span><br><span class="line">        ObjectHelper.requireNonNull(onError, <span class="string">"onError is null"</span>);</span><br><span class="line">        ObjectHelper.requireNonNull(onComplete, <span class="string">"onComplete is null"</span>);</span><br><span class="line">        ObjectHelper.requireNonNull(onSubscribe, <span class="string">"onSubscribe is null"</span>);</span><br><span class="line">        <span class="comment">// 然后对onNext、onError、onComplete、onSubscribe四个Consumer进行封装，</span></span><br><span class="line">        <span class="comment">// 整合成一个LambdaObserver，也就是说，本质上我们subscribe的参数最终还是Observer</span></span><br><span class="line">        LambdaObserver&lt;T&gt; ls = <span class="keyword">new</span> LambdaObserver&lt;T&gt;(onNext, onError, onComplete, onSubscribe);</span><br><span class="line"></span><br><span class="line">        subscribe(ls);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ls;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SchedulerSupport</span>(SchedulerSupport.NONE)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(Observer&lt;? <span class="keyword">super</span> T&gt; observer)</span> </span>&#123;</span><br><span class="line">        ObjectHelper.requireNonNull(observer, <span class="string">"observer is null"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// RxJavaPlugins.onSubscribe类似上面的onAssembly方法，这里没有做任何操作</span></span><br><span class="line">            <span class="comment">// 等价于observer = observer</span></span><br><span class="line">            observer = RxJavaPlugins.onSubscribe(<span class="keyword">this</span>, observer);</span><br><span class="line"></span><br><span class="line">            ObjectHelper.requireNonNull(observer, <span class="string">"The RxJavaPlugins.onSubscribe hook returned a null Observer. Please change the handler provided to RxJavaPlugins.setOnObservableSubscribe for invalid null returns. Further reading: https://github.com/ReactiveX/RxJava/wiki/Plugins"</span>);</span><br><span class="line">            <span class="comment">// 然后调用subscribeActual，要知道ObservableObserveOn中重写了subscribeActual方法，所以我们再回到</span></span><br><span class="line">            <span class="comment">// ObservableObserveOn中，需要记住的是这个observer保存了我们定义的两个Consumer</span></span><br><span class="line">            subscribeActual(observer);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123; <span class="comment">// NOPMD</span></span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            Exceptions.throwIfFatal(e);</span><br><span class="line">            <span class="comment">// can't call onError because no way to know if a Disposable has been set or not</span></span><br><span class="line">            <span class="comment">// can't call onSubscribe because the call might have set a Subscription already</span></span><br><span class="line">            RxJavaPlugins.onError(e);</span><br><span class="line"></span><br><span class="line">            NullPointerException npe = <span class="keyword">new</span> NullPointerException(<span class="string">"Actually not, but can't throw other exceptions due to RS"</span>);</span><br><span class="line">            npe.initCause(e);</span><br><span class="line">            <span class="keyword">throw</span> npe;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>前面的构造Observable的顺序是：CallExecuteObservable -&gt; BodyObservable -&gt; ObservableSubscribeOn -&gt; ObservableObserveOn，每一级Observable都是以上一级Observable作为参数够早的，CallExecuteObservable和BodyObservable是没有设置Scheduler参数的，ObservableSubscribeOn和ObservableObserveOn有Scheduler参数，Scheduler参数决定了Observer执行的线程；当我们调用subscribe方法会自底向上依次调用Observable的subscribeActual方法，在调用subscribeActual方法是会调用上一级的subscribe方法，传入的参数就是Observer，Observer的构造顺序是：自定义Consumer -&gt; LambdaObserver -&gt; ObserveOnObserver -&gt; SubscribeOnObserver -&gt; BodyObserver，最顶层的CallExecuteObservable是没有Observer的，每一级的Observer都会以下一级的Observer作为参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ObservableObserveOn.java</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">subscribeActual</span><span class="params">(Observer&lt;? <span class="keyword">super</span> T&gt; observer)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// source就是ObservableObserveOn构造时传入的第一个参数，对应ObservableSubscribeOn，</span></span><br><span class="line">        <span class="comment">// 由于scheduler对应AndroidSchedulers.mainThread()，本质上是HandlerScheduler</span></span><br><span class="line">        <span class="keyword">if</span> (scheduler <span class="keyword">instanceof</span> TrampolineScheduler) &#123;</span><br><span class="line">            source.subscribe(observer);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 调用的是HandlerScheduler的createWorker方法,返回的是HandlerWorker，</span></span><br><span class="line">            <span class="comment">// HandlerWorker保存了两个参数，一个是Handler，另一个bool async，</span></span><br><span class="line">            <span class="comment">// 因为AndroidSchedulers.mainThread()，所以此处的Handler是new Handler(Looper.getMainLooper())，</span></span><br><span class="line">            <span class="comment">// 即主线程中的Handler，async为false</span></span><br><span class="line">            Scheduler.Worker w = scheduler.createWorker();</span><br><span class="line">            <span class="comment">// 构造新的ObserveOnObserver，传入的参数有LambdaObserver和HandlerWorker</span></span><br><span class="line">            <span class="comment">// 然后调用ObservableSubscribeOn的subscribe方法，这是一个递归调用，subscribe就是上面的，</span></span><br><span class="line">            <span class="comment">// 又因为subscribeActual，所以还是调用ObservableSubscribeOn的subscribeActual方法</span></span><br><span class="line">            source.subscribe(<span class="keyword">new</span> ObserveOnObserver&lt;T&gt;(observer, w, delayError, bufferSize));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>当我们走到了ObservableSubscribeOn的subscribeActual方法时，需要开始使用observer（上一级Observable的内部类Observer）进行预处理或者发送数据，因为RxJava的onSubscribe是最先被调用的，所以我们需要先调用onSubscribe方法，会依次向上调用Observer的onSubscribe方法，由于Observer保存了如何发送数据的方法onNext以及处理异常的方法onError以及表示已完成的onComplete，所以如果传到最上级的Observable，那么就可以在CallExecuteObservable的subscribeActual方法中调用传入的Observer的各种方法，从而对数据进行发送、处理等</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ObservableSubscribeOn.java</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribeActual</span><span class="params">(<span class="keyword">final</span> Observer&lt;? <span class="keyword">super</span> T&gt; observer)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// observer是上面构造的ObserveOnObserver，将其转换为SubscribeOnObserver</span></span><br><span class="line">        <span class="comment">// 将上一级传进来的订阅者包装为线程安全的原子变量</span></span><br><span class="line">        <span class="keyword">final</span> SubscribeOnObserver&lt;T&gt; parent = <span class="keyword">new</span> SubscribeOnObserver&lt;T&gt;(observer);</span><br><span class="line">        <span class="comment">// 然后调用ObserveOnObserver的onSubscribe，调用onSubscribe即开始预处理，onSubscribe会调用</span></span><br><span class="line">        <span class="comment">// 我们定义的Consumer（本示例未使用onSubscribe的Consumer，所以没有做任何操作）</span></span><br><span class="line">        observer.onSubscribe(parent);</span><br><span class="line">        <span class="comment">// ObservableSubscribeOn的scheduler对应Schedulers.io()，即IoScheduler</span></span><br><span class="line">        <span class="comment">// SubscribeTask会被放在BlockingQueue队列中，这里就是开始执行我们实际请求的关键转折了，</span></span><br><span class="line">        <span class="comment">// 之前都是铺垫，然后在指定的线程中执行source(上一级)的subscribe，即IO线程的工作</span></span><br><span class="line">        <span class="comment">// source.subscribe(parent)，这里的source实际就是BodyObservable</span></span><br><span class="line">        parent.setDisposable(scheduler.scheduleDirect(<span class="keyword">new</span> SubscribeTask(parent)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SubscribeTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> SubscribeOnObserver&lt;T&gt; parent;</span><br><span class="line"></span><br><span class="line">        SubscribeTask(SubscribeOnObserver&lt;T&gt; parent) &#123;</span><br><span class="line">            <span class="keyword">this</span>.parent = parent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 这里的source是BodyObservable</span></span><br><span class="line">            source.subscribe(parent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>scheduler的作用就是通过内部Worker将task交给线程池进行处理，因为ObservableSubscribeOn是通过调用subscribeOn方法生成的，因此很大程度上会运行在其他线程，也就是说SubscribeTask的run方法是执行在Worker的线程池中，即从现在开始的subscribe都是在Worker线程中而不是主线程了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Scheduler.java</span></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Disposable <span class="title">scheduleDirect</span><span class="params">(@NonNull Runnable run)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> scheduleDirect(run, <span class="number">0L</span>, TimeUnit.NANOSECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Disposable <span class="title">scheduleDirect</span><span class="params">(@NonNull Runnable run, <span class="keyword">long</span> delay, @NonNull TimeUnit unit)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这个createWorker就是IoScheduler的createWorker，返回的是EventLoopWorker，此EventLoopWorker</span></span><br><span class="line">        <span class="comment">// 运行的线程通过线程池CachedWorkerPool提供</span></span><br><span class="line">        <span class="keyword">final</span> Worker w = createWorker();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Runnable decoratedRun = RxJavaPlugins.onSchedule(run);</span><br><span class="line"></span><br><span class="line">        DisposeTask task = <span class="keyword">new</span> DisposeTask(decoratedRun, w);</span><br><span class="line">        <span class="comment">// w.schedule会在ScheduledThreadPoolExecutor中安排task被执行，task会被放在队列中</span></span><br><span class="line">        w.schedule(task, delay, unit);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> task;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>在看BodyObservable的subscribe方法前先看一下onSubscribe做了些什么</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ObservableObserveOn.java 内部类ObserveOnObserver的onSubscribe方法</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (DisposableHelper.validate(<span class="keyword">this</span>.upstream, d)) &#123;</span><br><span class="line">                <span class="keyword">this</span>.upstream = d;</span><br><span class="line">                <span class="comment">// 这里的d是SubscribeOnObserver，所以跳过</span></span><br><span class="line">                <span class="keyword">if</span> (d <span class="keyword">instanceof</span> QueueDisposable) &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                    QueueDisposable&lt;T&gt; qd = (QueueDisposable&lt;T&gt;) d;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">int</span> m = qd.requestFusion(QueueDisposable.ANY | QueueDisposable.BOUNDARY);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (m == QueueDisposable.SYNC) &#123;</span><br><span class="line">                        sourceMode = m;</span><br><span class="line">                        queue = qd;</span><br><span class="line">                        done = <span class="keyword">true</span>;</span><br><span class="line">                        downstream.onSubscribe(<span class="keyword">this</span>);</span><br><span class="line">                        schedule();</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (m == QueueDisposable.ASYNC) &#123;</span><br><span class="line">                        sourceMode = m;</span><br><span class="line">                        queue = qd;</span><br><span class="line">                        downstream.onSubscribe(<span class="keyword">this</span>);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 这个队列用于保存数据，之后会用，bufferSize大小默认是128</span></span><br><span class="line">                queue = <span class="keyword">new</span> SpscLinkedArrayQueue&lt;T&gt;(bufferSize);</span><br><span class="line">                <span class="comment">// 而downstream是ObserveOnObserver构造函数的第一个参数，即我们调用subscribe方法时</span></span><br><span class="line">                <span class="comment">// 传入的LambdaObserver（但是通过Consumer实现的）</span></span><br><span class="line">                downstream.onSubscribe(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LambdaObserver.java</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (DisposableHelper.setOnce(<span class="keyword">this</span>, d)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// onSubscribe也只是调用onSubscribe.accept，还记得上面我们的LambdaObserver构造时仅使用了</span></span><br><span class="line">                <span class="comment">// onNext和onError，所以onSubscribe其实是空的，这里没有任何作用</span></span><br><span class="line">                onSubscribe.accept(<span class="keyword">this</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                Exceptions.throwIfFatal(ex);</span><br><span class="line">                d.dispose();</span><br><span class="line">                onError(ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>回到subscribe的调用链，在子线程（线程池）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// BodyObservable.java</span></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">subscribeActual</span><span class="params">(Observer&lt;? <span class="keyword">super</span> T&gt; observer)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里的upstream是CallExecuteObservable</span></span><br><span class="line">    upstream.subscribe(<span class="keyword">new</span> BodyObserver&lt;T&gt;(observer));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>通过subscribe最终调用到了最顶层的Observable的subscribeActual方法，且传入的下一级的内部类Observer，用于提供onXXX方法传递数据，执行在子线程（线程池）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CallExecuteObservable.java</span></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">subscribeActual</span><span class="params">(Observer&lt;? <span class="keyword">super</span> Response&lt;T&gt;&gt; observer)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Since Call is a one-shot type, clone it for each new observer.</span></span><br><span class="line">    Call&lt;T&gt; call = originalCall.clone();</span><br><span class="line">    CallDisposable disposable = <span class="keyword">new</span> CallDisposable(call);</span><br><span class="line">    <span class="comment">// CallExecuteObservable是我们实际开始调用Retrofit请求数据的开始</span></span><br><span class="line">    <span class="comment">// 首先需要调用observer的onSubscribe，这里是BodyObserver，</span></span><br><span class="line">    <span class="comment">// 还记得上面的LambdaObserver的onSubscribe，</span></span><br><span class="line">    <span class="comment">// 这里其实什么事情都没有做</span></span><br><span class="line">    observer.onSubscribe(disposable);</span><br><span class="line">    <span class="keyword">if</span> (disposable.isDisposed()) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> terminated = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 然后调用call.execute()，如果记得Retrofit，那么就知道这里发出了请求，也就是说这个方法执行在IO线程</span></span><br><span class="line">      Response&lt;T&gt; response = call.execute();</span><br><span class="line">      <span class="keyword">if</span> (!disposable.isDisposed()) &#123;</span><br><span class="line">        <span class="comment">// 然后通过onNext方法将结果发射出去，这个observer就是BodyObserver</span></span><br><span class="line">        observer.onNext(response);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!disposable.isDisposed()) &#123;</span><br><span class="line">        terminated = <span class="keyword">true</span>;</span><br><span class="line">        observer.onComplete();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">      Exceptions.throwIfFatal(t);</span><br><span class="line">      <span class="keyword">if</span> (terminated) &#123;</span><br><span class="line">        RxJavaPlugins.onError(t);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!disposable.isDisposed()) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          observer.onError(t);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable inner) &#123;</span><br><span class="line">          Exceptions.throwIfFatal(inner);</span><br><span class="line">          RxJavaPlugins.onError(<span class="keyword">new</span> CompositeException(t, inner));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>onNext方法的向下一级传递</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// BodyObservable.java 内部类BodyObserver的onNext方法</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Response&lt;R&gt; response)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (response.isSuccessful()) &#123;</span><br><span class="line">        <span class="comment">// BodyObserver判断了一下请求结果response，然后将body发射出去</span></span><br><span class="line">        <span class="comment">// 这里的observer就是SubscribeOnObserver</span></span><br><span class="line">        observer.onNext(response.body());</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        terminated = <span class="keyword">true</span>;</span><br><span class="line">        Throwable t = <span class="keyword">new</span> HttpException(response);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          observer.onError(t);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable inner) &#123;</span><br><span class="line">          Exceptions.throwIfFatal(inner);</span><br><span class="line">          RxJavaPlugins.onError(<span class="keyword">new</span> CompositeException(t, inner));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ObservableSubscribeOn.java 内部类SubscribeOnObserver</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 这里的downstream是ObserveOnObserver</span></span><br><span class="line">            downstream.onNext(t);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>这里因为ObservableObserveOn是通过observeOn创建的，而这里发生了线程切换，我们的例子中是主线程，所以需要通过Handler将后续的任务切换到主线程中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ObservableObserveOn.java 内部类ObserveOnObserver</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (done) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (sourceMode != QueueDisposable.ASYNC) &#123;</span><br><span class="line">                <span class="comment">// 这里的queue是SpscLinkedArrayQueue，我们把传出来的数据保存在队列中了</span></span><br><span class="line">                queue.offer(t);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 最终调用schedule</span></span><br><span class="line">            schedule();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">schedule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (getAndIncrement() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// worker是初始化时调用observeOn传入的主线程的HandlerScheduler的内部类HandlerWorker，</span></span><br><span class="line">                <span class="comment">// 这里的schedule方法传入this，即ObserveOnObserver，与此同时ObserveOnObserver</span></span><br><span class="line">                <span class="comment">// 实现了Runnable的接口，可以作为Runnable，它的run方法会在下面被执行</span></span><br><span class="line">                worker.schedule(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HandlerScheduler.java 内部类HandlerWorker</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="meta">@SuppressLint</span>(<span class="string">"NewApi"</span>) <span class="comment">// Async will only be true when the API is available to call.</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Disposable <span class="title">schedule</span><span class="params">(Runnable run, <span class="keyword">long</span> delay, TimeUnit unit)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (run == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"run == null"</span>);</span><br><span class="line">            <span class="keyword">if</span> (unit == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"unit == null"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (disposed) &#123;</span><br><span class="line">                <span class="keyword">return</span> Disposables.disposed();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            run = RxJavaPlugins.onSchedule(run);</span><br><span class="line">            <span class="comment">// HandlerWorker的schedule方法，我们传入的run即上面的ObserveOnObserver</span></span><br><span class="line">            <span class="comment">// ScheduledRunnable也是Runnable，但是它的run方法仅仅是调用了传入的run的run方法</span></span><br><span class="line">            <span class="comment">// 也就是说如果我们执行了scheduled的run方法等价于执行了run的方法，也就是</span></span><br><span class="line">            <span class="comment">// ObserveOnObserver的run方法</span></span><br><span class="line">            ScheduledRunnable scheduled = <span class="keyword">new</span> ScheduledRunnable(handler, run);</span><br><span class="line">            <span class="comment">// scheduled的run方法执行是通过handler处理的，通过sendMessageDelayed实现的</span></span><br><span class="line">            Message message = Message.obtain(handler, scheduled);</span><br><span class="line">            message.obj = <span class="keyword">this</span>; <span class="comment">// Used as token for batch disposal of this worker's runnables.</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (async) &#123;</span><br><span class="line">                message.setAsynchronous(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 也就是在这里我们将在主线程执行ObserveOnObserver的run方法</span></span><br><span class="line">            handler.sendMessageDelayed(message, unit.toMillis(delay));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Re-check disposed state for removing in case we were racing a call to dispose().</span></span><br><span class="line">            <span class="keyword">if</span> (disposed) &#123;</span><br><span class="line">                handler.removeCallbacks(scheduled);</span><br><span class="line">                <span class="keyword">return</span> Disposables.disposed();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> scheduled;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ObservableObserveOn.java 内部类ObserveOnObserver</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (outputFused) &#123;</span><br><span class="line">                drainFused();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 这里执行的是drainNormal</span></span><br><span class="line">                drainNormal();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">drainNormal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> missed = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 还记得上面的SpscLinkedArrayQueue，之前我们在onNext方法中把传过来的数据保存在队列中</span></span><br><span class="line">            <span class="comment">// 接下来需要从队列中取出数据</span></span><br><span class="line">            <span class="keyword">final</span> SimpleQueue&lt;T&gt; q = queue;</span><br><span class="line">            <span class="comment">// downstream即LambdaObserver</span></span><br><span class="line">            <span class="keyword">final</span> Observer&lt;? <span class="keyword">super</span> T&gt; a = downstream;</span><br><span class="line">            <span class="comment">// 这里用循环是因为RxJava支持连续发送多个数据，那么最终数据都保存在队列中</span></span><br><span class="line">            <span class="comment">// 所以取数据的时候就可以通过循环来一次性获取队列中的所有数据，而SpscLinkedArrayQueue</span></span><br><span class="line">            <span class="comment">// 的最大容量，根据之前的代码我们知道是128</span></span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="keyword">if</span> (checkTerminated(done, q.isEmpty(), a)) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                    <span class="keyword">boolean</span> d = done;</span><br><span class="line">                    T v;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// q.poll从队列中取出数据</span></span><br><span class="line">                        v = q.poll();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                        Exceptions.throwIfFatal(ex);</span><br><span class="line">                        disposed = <span class="keyword">true</span>;</span><br><span class="line">                        upstream.dispose();</span><br><span class="line">                        q.clear();</span><br><span class="line">                        a.onError(ex);</span><br><span class="line">                        worker.dispose();</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">boolean</span> empty = v == <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (checkTerminated(d, empty, a)) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (empty) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// a即为LambdaObserver，v为我们从队列中取出来的数据，也是</span></span><br><span class="line">                    <span class="comment">// 我们通过handler传入的数据，通过onNext发出，而这个onNext</span></span><br><span class="line">                    <span class="comment">// 就是我们定义的第一个Consumer，通过这个Consumer的accept方法</span></span><br><span class="line">                    <span class="comment">// 在主线程实现TextView的设置</span></span><br><span class="line">                    a.onNext(v);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                missed = addAndGet(-missed);</span><br><span class="line">                <span class="keyword">if</span> (missed == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LambdaObserver.java</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isDisposed()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 我们定义的Consumer的accept方法</span></span><br><span class="line">                onNext.accept(t);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                Exceptions.throwIfFatal(e);</span><br><span class="line">                get().dispose();</span><br><span class="line">                onError(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>综上，RxJava的简单源码分析流程就完成了，整个RxJava调用流程可以分为两个阶段：构造阶段和subscribe阶段，在调用subscribe方法前的步骤我称之为构造阶段，这个过程中主要工作是创建被观察者Observable，每一次使用RxJava的方法时都会创建新的Observable，每个新的Observable都会以上一级的Observable作为参数，其中部分Observable还需要Scheduler参数，用于切换线程，构造阶段仅仅是将Observable连接起来；在调用subscribe方法时开始了subscribe阶段，这个阶段的任务是将我们自定义的Consumer（或者可以当作观察者Observer）通过Observable的subscribe方法连接起来（subscribe的过程中可能会调用onSubscribe方法进行预处理，初始化一些队列什么的，onSubscribe方法与onNext、onError、onComplete方法有点区别），当我们的subscribe方法走到最顶层时会开始启动Observer的onXXX方法传递数据或者传出异常等等，因为之前已经将Observer连接起来，所以此时onXXX方法的调用也是链式的，层层向下传递，直到调用我们自定义的Consumer（在此过程中会通过在构造阶段传入的Scheduler实现线程切换）。</p>
<p>如果完整的看过一遍分析流程就会发现其实Observable和Observer的调用链是很简单的，但是随之也有几个疑问：</p>
<blockquote>
<p>1.为什么要用Observable和Observer的形式？</p>
</blockquote>
<p>首先需要明白的是，RxJava的目的是提供一个便于进行数据处理的框架，通过流式调用实现线程切换、数据类型转换等，也就是说数据从A -&gt; B -&gt; C可以是不同类型的数据或者是在不同线程处理，最适合的模式就是观察者模式，比如我们常见的OnClickListener，它传递的是点击事件，再比如我们自定义的传递数据的接口回调，都是观察者模式。简而言之就是，A通过B提供的接口将数据传到B中进行处理，B通过C提供的接口将数传到C中进行处理，由此可以进行数据的传递，当然这只是数据传递的流程，具体的调用流程就是上面的总结。使用Observable和Observer的形式，一是便于我们自定义数据转换的Observable和Observer，二是可以实现流式调用，三是这里面实现了这种接口回调的功能。</p>
<blockquote>
<p>2.subscribeOn和observeOn是如何切换线程的？</p>
</blockquote>
<p>subscribeOn会指定我们在调用subscribeOn之前的Observable中数据处理的线程，observeOn会指定我们在调用observeOn之后的Observable中数据处理的线程。这是因为两者切换线程的位置不同，subscribeOn会在subscribeActual的方法中切换线程，导致后续所有的调用都是在subscribeOn指定的线程中，而subscribeActual方法是自底向上调用的，因此会影响subscribeOn之前的所有方法；而observeOn是在ObserveOnObserver的onNext方法中进行线程切换的，因此会影响observeOn后面数据传递的方法。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Handler</tag>
        <tag>AsyncTask</tag>
        <tag>EventBus</tag>
        <tag>RxJava</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Material组件-Snackbar</title>
    <url>/archives/d1370632.html</url>
    <content><![CDATA[<p>参考：</p>
<blockquote>
<p><a href="https://material.io/collections/developer-tutorials/" target="_blank" rel="noopener">MATERIAL DESIGN</a></p>
</blockquote>
<p>Snackbar是类似与Toast的一种信息提示控件，但是与Toast不同的是Snackbar是从界面底部弹出的且支持一个点击事件，默认情况下Snackbar内部有两个子控件分别是TextView和Button，两者水平排列，TextView用于显示信息，Button用于实现点击事件。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/snackbar1.gif" alt="snackbar1.gif"></p>
<h2 id="1-Snackbar使用"><a href="#1-Snackbar使用" class="headerlink" title="1. Snackbar使用"></a>1. Snackbar使用</h2><p>Snackbar属于Material组件中的一种，如果你的应用使用了Material Theme以及AppCompatActivity，则Snackbar会获得圆角、四周有margin空隙的效果。</p>
<p>默认情况下使用Snackbar，调用的方式也非常类似Toast</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// view是当前页面内的某个view，根据源码可知，make方法会找view的父view，</span></span><br><span class="line"><span class="comment">// 直到父view是FrameLayout或者CoordinateLayout，然后将其作为root给inflate方法调用</span></span><br><span class="line"><span class="comment">// inflate会加载默认的布局文件，这里根据是否使用Material Theme会加载不同的布局文件，</span></span><br><span class="line"><span class="comment">// 即上文我提到的效果，与此同时会将text的内容赋给布局文件中的TextView，</span></span><br><span class="line"><span class="comment">// 如果父view是CoordinateLayout，则Snackbar还支持右滑取消的功能，</span></span><br><span class="line"><span class="comment">// Snackbar.LENGTH_SHORT就类似于Toast.LENGTH_SHORT用于控制Snackbar的持续时间</span></span><br><span class="line">Snackbar snackbar = Snackbar.make(view, text, Snackbar.LENGTH_SHORT);</span><br><span class="line">snackbar.show();</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="2-Snackbar自定义Content"><a href="#2-Snackbar自定义Content" class="headerlink" title="2. Snackbar自定义Content"></a>2. Snackbar自定义Content</h2><p>显然原生的Snackbar没有提供setContentView的方法，为了能够自定义Snackbar的布局，我们需要对Snackbar的一些参数进行修改，比如如果我们需要自定义Snackbar的margin以及自定义Snackbar的内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SnackbarUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> duration;</span><br><span class="line">    <span class="keyword">private</span> View anchor;</span><br><span class="line">    <span class="keyword">private</span> ViewGroup customView;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sideMargin;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bottomMargin;</span><br><span class="line">    <span class="keyword">private</span> Snackbar delegete;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SnackbarUtil is used to create Snackbar, if you setEnableCustom(false) or in default</span></span><br><span class="line"><span class="comment">     * you will get the origin Snackbar from Snackbar.make(anchor, text, duration); if you</span></span><br><span class="line"><span class="comment">     * setEnableCustom(true) in Builder, you must add your defined customView and you can</span></span><br><span class="line"><span class="comment">     * modify the margin of the customView in Snackbar.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Your customView's layout should container 2 layer of Layout, because there is some</span></span><br><span class="line"><span class="comment">     * UI bug if you just only use 1 layer</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="comment">     * &lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"</span></span><br><span class="line"><span class="comment">     * android:layout_width="match_parent"</span></span><br><span class="line"><span class="comment">     * android:layout_height="match_parent"&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *      &lt;LinearLayout</span></span><br><span class="line"><span class="comment">     *      android:layout_width="match_parent"</span></span><br><span class="line"><span class="comment">     *      android:layout_height="wrap_content"</span></span><br><span class="line"><span class="comment">     *      android:background="<span class="doctag">@drawable</span>/radius_background"</span></span><br><span class="line"><span class="comment">     *      android:orientation="vertical"&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *          &lt;TextView</span></span><br><span class="line"><span class="comment">     *          android:layout_width="wrap_content"</span></span><br><span class="line"><span class="comment">     *          android:layout_height="wrap_content"</span></span><br><span class="line"><span class="comment">     *          android:layout_gravity="center"</span></span><br><span class="line"><span class="comment">     *          android:padding="8dp"</span></span><br><span class="line"><span class="comment">     *          android:id="@+id/textView"</span></span><br><span class="line"><span class="comment">     *          android:text="hahahahh"</span></span><br><span class="line"><span class="comment">     *          android:textColor="<span class="doctag">@color</span>/colorPrimaryDark"</span></span><br><span class="line"><span class="comment">     *          android:textSize="24sp" /&gt;</span></span><br><span class="line"><span class="comment">     *      &lt;/LinearLayout&gt;</span></span><br><span class="line"><span class="comment">     * &lt;/LinearLayout&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Usage:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * snackView is your customView, layout_snackbar is the layout above.</span></span><br><span class="line"><span class="comment">     * button is the anchor view, if your button is in CoordinatorLayout</span></span><br><span class="line"><span class="comment">     * the snackbar can be dismissed with swipe action.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * ViewGroup snackView = (ViewGroup) LayoutInflater.from(MainActivity.this).inflate(</span></span><br><span class="line"><span class="comment">     *                                      R.layout.layout_snackbar,</span></span><br><span class="line"><span class="comment">     *                                      new LinearLayout(MainActivity.this),</span></span><br><span class="line"><span class="comment">     *                                      false);</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * TextView textView = snackView.findViewById(R.id.textView);</span></span><br><span class="line"><span class="comment">     * textView.setOnClickListener(new View.OnClickListener() &#123;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> duration     Snackbar duration, default Snackbar.LENGTH_SHORT;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> anchor       must need, with anchor the Snackbar will find its root;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customView   must need if setEnableCustom(true) in Builder;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sideMargin   customView left and right margin in Snackbar;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bottomMargin customView bottom margin in Snackbar;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Override</span> public void onClick(View v) &#123;</span></span><br><span class="line"><span class="comment">     * Toast.makeText(MainActivity.this, "12121", Toast.LENGTH_LONG).show();</span></span><br><span class="line"><span class="comment">     * &#125;</span></span><br><span class="line"><span class="comment">     * &#125;);</span></span><br><span class="line"><span class="comment">     * Snackbar snackbar = new SnackbarUtil.Builder()</span></span><br><span class="line"><span class="comment">     *                  .setAnchor(button)</span></span><br><span class="line"><span class="comment">     *                  .setBottomMargin(80)</span></span><br><span class="line"><span class="comment">     *                  .setDuration(Snackbar.LENGTH_SHORT)</span></span><br><span class="line"><span class="comment">     *                  .setText("32323")</span></span><br><span class="line"><span class="comment">     *                  .setCustomView(snackView)</span></span><br><span class="line"><span class="comment">     *                  .setSideMargin(20)</span></span><br><span class="line"><span class="comment">     *                  .build();</span></span><br><span class="line"><span class="comment">     * snackbar.show();</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SnackbarUtil(<span class="keyword">int</span> duration, View anchor, ViewGroup customView, <span class="keyword">int</span> sideMargin, <span class="keyword">int</span> bottomMargin) &#123;</span><br><span class="line">        <span class="keyword">this</span>.duration = duration;</span><br><span class="line">        <span class="keyword">this</span>.anchor = anchor;</span><br><span class="line">        <span class="keyword">this</span>.customView = customView;</span><br><span class="line">        <span class="keyword">this</span>.sideMargin = sideMargin;</span><br><span class="line">        <span class="keyword">this</span>.bottomMargin = bottomMargin;</span><br><span class="line">        <span class="keyword">this</span>.delegete = Snackbar.make(anchor, <span class="string">""</span>, duration);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Snackbar <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 通过getView获取Snackbar的layout</span></span><br><span class="line">        Snackbar.SnackbarLayout layout = (Snackbar.SnackbarLayout) delegete.getView();</span><br><span class="line">        <span class="comment">// 为了自定义margin，这里需要将Snackbar的背景设置为透明，textView可以设置为INVISIBLE也可以不设置</span></span><br><span class="line">        <span class="comment">// 只要没有在make加入text即可</span></span><br><span class="line">        layout.setBackgroundColor(Color.TRANSPARENT);</span><br><span class="line">        TextView textView = layout.findViewById(com.google.android.material.R.id.snackbar_text);</span><br><span class="line">        textView.setVisibility(View.INVISIBLE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// customView为我们传入的自定义view，自定义view是如何调用inflate可以参考注释，</span></span><br><span class="line">        <span class="comment">// 但是customView必须包含两层layout这是因为UI上有bug，具体可以自行测试，</span></span><br><span class="line">        <span class="comment">// 所以我们实际设置的margin是第2层layout的margin，第2层layout有背景色，</span></span><br><span class="line">        <span class="comment">// 所以最终呈现出Snackbar有margin的效果，但是要知道实际上Snackbar的布局</span></span><br><span class="line">        <span class="comment">// 还是占据了整个底部空间</span></span><br><span class="line">        View childLayout = customView.getChildAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">final</span> ViewGroup.MarginLayoutParams params = (ViewGroup.MarginLayoutParams) childLayout.getLayoutParams();</span><br><span class="line">        <span class="comment">// MarginLayoutParams设置margin</span></span><br><span class="line">        params.setMargins(params.leftMargin + sideMargin,</span><br><span class="line">                params.topMargin,</span><br><span class="line">                params.rightMargin + sideMargin,</span><br><span class="line">                params.bottomMargin + bottomMargin);</span><br><span class="line">        childLayout.setLayoutParams(params);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add the view to the Snackbar's layout</span></span><br><span class="line">        layout.addView(customView, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// Show the Snackbar</span></span><br><span class="line">        <span class="keyword">return</span> delegete;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 由于参数较多，所以采用建造者模式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> enableCustom;</span><br><span class="line">        <span class="keyword">private</span> String text;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> duration;</span><br><span class="line">        <span class="keyword">private</span> View anchor;</span><br><span class="line">        <span class="keyword">private</span> ViewGroup customView;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> sideMargin;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> bottomMargin;</span><br><span class="line"></span><br><span class="line">        Builder(<span class="keyword">boolean</span> enableCustom) &#123;</span><br><span class="line">            <span class="keyword">this</span>.enableCustom = enableCustom;</span><br><span class="line">            <span class="keyword">this</span>.duration = Snackbar.LENGTH_SHORT;</span><br><span class="line">            <span class="keyword">this</span>.text = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">this</span>.sideMargin = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>.bottomMargin = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setEnableCustom</span><span class="params">(<span class="keyword">boolean</span> enableCustom)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.enableCustom = enableCustom;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setText</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.text = text;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setDuration</span><span class="params">(<span class="keyword">int</span> duration)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.duration = duration;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setAnchor</span><span class="params">(View anchor)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.anchor = anchor;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setCustomView</span><span class="params">(ViewGroup customView)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.customView = customView;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setSideMargin</span><span class="params">(<span class="keyword">int</span> sideMargin)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.sideMargin = sideMargin;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setBottomMargin</span><span class="params">(<span class="keyword">int</span> bottomMargin)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.bottomMargin = bottomMargin;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Snackbar <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 通过enableCustom控制是否使用自定义Content，自定义Content的点击事件需要</span></span><br><span class="line">            <span class="comment">// 在Snackbar的外面处理</span></span><br><span class="line">            <span class="keyword">if</span> (!enableCustom) &#123;</span><br><span class="line">                <span class="keyword">return</span> Snackbar.make(anchor, text, duration);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (anchor == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                        <span class="string">"No suitable parent found from the given view. Please provide a valid view."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (customView == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                        <span class="string">"No custom view found. Please provide a valid view or setEnableCustom(false)."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SnackbarUtil(duration, anchor, customView, sideMargin, bottomMargin).create();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最终效果</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/snackbar0.gif" alt="snackbar0.gif"></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Material</tag>
        <tag>Snackbar</tag>
      </tags>
  </entry>
  <entry>
    <title>Android框架-Gson</title>
    <url>/archives/b0107659.html</url>
    <content><![CDATA[<p>参考：</p>
<blockquote>
<p><a href="https://github.com/google/gson/blob/master/UserGuide.md" target="_blank" rel="noopener">Gson User Guide</a></p>
</blockquote>
<p>json是一种数据格式，类似与键值对的形式，常用于服务器与客户端之间数据传输，以键值对形式传输的数据在客户端进行解析时必然需要对不同的key寻找其对应的value，通常来说这种解析数据的过程非常繁琐，但是没有难度，所以Google推出了Gson这个工具，用于解析json数据并直接将其实例化。</p>
<a id="more"></a>
<h2 id="1-Gson使用"><a href="#1-Gson使用" class="headerlink" title="1. Gson使用"></a>1. Gson使用</h2><p>以解析和风天气的数据为例，请求返回的json数据如下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"HeWeather6"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"basic"</span>: &#123;</span><br><span class="line">                <span class="attr">"cid"</span>: <span class="string">"CN101010100"</span>,</span><br><span class="line">                <span class="attr">"location"</span>: <span class="string">"北京"</span>,</span><br><span class="line">                <span class="attr">"parent_city"</span>: <span class="string">"北京"</span>,</span><br><span class="line">                <span class="attr">"admin_area"</span>: <span class="string">"北京"</span>,</span><br><span class="line">                <span class="attr">"cnty"</span>: <span class="string">"中国"</span>,</span><br><span class="line">                <span class="attr">"lat"</span>: <span class="string">"39.90498734"</span>,</span><br><span class="line">                <span class="attr">"lon"</span>: <span class="string">"116.4052887"</span>,</span><br><span class="line">                <span class="attr">"tz"</span>: <span class="string">"+8.00"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"update"</span>: &#123;</span><br><span class="line">                <span class="attr">"loc"</span>: <span class="string">"2019-07-18 16:45"</span>,</span><br><span class="line">                <span class="attr">"utc"</span>: <span class="string">"2019-07-18 08:45"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"status"</span>: <span class="string">"ok"</span>,</span><br><span class="line">            <span class="attr">"now"</span>: &#123;</span><br><span class="line">                <span class="attr">"cloud"</span>: <span class="string">"10"</span>,</span><br><span class="line">                <span class="attr">"cond_code"</span>: <span class="string">"101"</span>,</span><br><span class="line">                <span class="attr">"cond_txt"</span>: <span class="string">"多云"</span>,</span><br><span class="line">                <span class="attr">"fl"</span>: <span class="string">"35"</span>,</span><br><span class="line">                <span class="attr">"hum"</span>: <span class="string">"54"</span>,</span><br><span class="line">                <span class="attr">"pcpn"</span>: <span class="string">"0.0"</span>,</span><br><span class="line">                <span class="attr">"pres"</span>: <span class="string">"1000"</span>,</span><br><span class="line">                <span class="attr">"tmp"</span>: <span class="string">"32"</span>,</span><br><span class="line">                <span class="attr">"vis"</span>: <span class="string">"6"</span>,</span><br><span class="line">                <span class="attr">"wind_deg"</span>: <span class="string">"279"</span>,</span><br><span class="line">                <span class="attr">"wind_dir"</span>: <span class="string">"西风"</span>,</span><br><span class="line">                <span class="attr">"wind_sc"</span>: <span class="string">"1"</span>,</span><br><span class="line">                <span class="attr">"wind_spd"</span>: <span class="string">"3"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>1.构造对应json数据的实体类，这里使用的Android Studio的插件GsonFormat，可以直接根据json数据生成代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;HeWeather6Bean&gt; HeWeather6;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;HeWeather6Bean&gt; <span class="title">getHeWeather6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HeWeather6;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeWeather6</span><span class="params">(List&lt;HeWeather6Bean&gt; HeWeather6)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.HeWeather6 = HeWeather6;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 重写以下toString方法，便于后续观察数据传输是否正确</span></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HeWeather6.get(<span class="number">0</span>).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HeWeather6Bean</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * basic : &#123;"cid":"CN101010100","location":"北京","parent_city":"北京","admin_area":"北京","cnty":"中国","lat":"39.90498734","lon":"116.4052887","tz":"+8.00"&#125;</span></span><br><span class="line"><span class="comment">         * update : &#123;"loc":"2019-07-18 16:45","utc":"2019-07-18 08:45"&#125;</span></span><br><span class="line"><span class="comment">         * status : ok</span></span><br><span class="line"><span class="comment">         * now : &#123;"cloud":"10","cond_code":"101","cond_txt":"多云","fl":"35","hum":"54","pcpn":"0.0","pres":"1000","tmp":"32","vis":"6","wind_deg":"279","wind_dir":"西风","wind_sc":"1","wind_spd":"3"&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> BasicBean basic;</span><br><span class="line">        <span class="keyword">private</span> UpdateBean update;</span><br><span class="line">        <span class="keyword">private</span> String status;</span><br><span class="line">        <span class="keyword">private</span> NowBean now;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@NonNull</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> status + <span class="string">" \n "</span> + basic.toString() + <span class="string">" \n "</span> + update.toString() + <span class="string">" \n "</span> + now.toString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> BasicBean <span class="title">getBasic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> basic;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBasic</span><span class="params">(BasicBean basic)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.basic = basic;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> UpdateBean <span class="title">getUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> update;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpdate</span><span class="params">(UpdateBean update)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.update = update;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> status;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatus</span><span class="params">(String status)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.status = status;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> NowBean <span class="title">getNow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> now;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNow</span><span class="params">(NowBean now)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.now = now;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicBean</span> </span>&#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * cid : CN101010100</span></span><br><span class="line"><span class="comment">             * location : 北京</span></span><br><span class="line"><span class="comment">             * parent_city : 北京</span></span><br><span class="line"><span class="comment">             * admin_area : 北京</span></span><br><span class="line"><span class="comment">             * cnty : 中国</span></span><br><span class="line"><span class="comment">             * lat : 39.90498734</span></span><br><span class="line"><span class="comment">             * lon : 116.4052887</span></span><br><span class="line"><span class="comment">             * tz : +8.00</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> String cid;</span><br><span class="line">            <span class="keyword">private</span> String location;</span><br><span class="line">            <span class="keyword">private</span> String parent_city;</span><br><span class="line">            <span class="keyword">private</span> String admin_area;</span><br><span class="line">            <span class="keyword">private</span> String cnty;</span><br><span class="line">            <span class="keyword">private</span> String lat;</span><br><span class="line">            <span class="keyword">private</span> String lon;</span><br><span class="line">            <span class="keyword">private</span> String tz;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@NonNull</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"cid : "</span> + cid + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"location : "</span> + location + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"parent_city : "</span> + parent_city + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"admin_area : "</span> + admin_area + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"cnty : "</span> + cnty + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"lat : "</span> + lat + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"lon : "</span> + lon + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"tz : "</span> + tz + <span class="string">"\n"</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getCid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> cid;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCid</span><span class="params">(String cid)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.cid = cid;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getLocation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> location;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocation</span><span class="params">(String location)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.location = location;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getParent_city</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> parent_city;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParent_city</span><span class="params">(String parent_city)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.parent_city = parent_city;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getAdmin_area</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> admin_area;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAdmin_area</span><span class="params">(String admin_area)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.admin_area = admin_area;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getCnty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> cnty;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCnty</span><span class="params">(String cnty)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.cnty = cnty;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getLat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> lat;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLat</span><span class="params">(String lat)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.lat = lat;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getLon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> lon;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLon</span><span class="params">(String lon)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.lon = lon;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getTz</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> tz;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTz</span><span class="params">(String tz)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.tz = tz;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdateBean</span> </span>&#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * loc : 2019-07-18 16:45</span></span><br><span class="line"><span class="comment">             * utc : 2019-07-18 08:45</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> String loc;</span><br><span class="line">            <span class="keyword">private</span> String utc;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@NonNull</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"loc : "</span> + loc + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"utc : "</span> + utc + <span class="string">"\n"</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getLoc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> loc;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoc</span><span class="params">(String loc)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.loc = loc;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getUtc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> utc;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUtc</span><span class="params">(String utc)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.utc = utc;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NowBean</span> </span>&#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * cloud : 10</span></span><br><span class="line"><span class="comment">             * cond_code : 101</span></span><br><span class="line"><span class="comment">             * cond_txt : 多云</span></span><br><span class="line"><span class="comment">             * fl : 35</span></span><br><span class="line"><span class="comment">             * hum : 54</span></span><br><span class="line"><span class="comment">             * pcpn : 0.0</span></span><br><span class="line"><span class="comment">             * pres : 1000</span></span><br><span class="line"><span class="comment">             * tmp : 32</span></span><br><span class="line"><span class="comment">             * vis : 6</span></span><br><span class="line"><span class="comment">             * wind_deg : 279</span></span><br><span class="line"><span class="comment">             * wind_dir : 西风</span></span><br><span class="line"><span class="comment">             * wind_sc : 1</span></span><br><span class="line"><span class="comment">             * wind_spd : 3</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> String cloud;</span><br><span class="line">            <span class="keyword">private</span> String cond_code;</span><br><span class="line">            <span class="keyword">private</span> String cond_txt;</span><br><span class="line">            <span class="keyword">private</span> String fl;</span><br><span class="line">            <span class="keyword">private</span> String hum;</span><br><span class="line">            <span class="keyword">private</span> String pcpn;</span><br><span class="line">            <span class="keyword">private</span> String pres;</span><br><span class="line">            <span class="keyword">private</span> String tmp;</span><br><span class="line">            <span class="keyword">private</span> String vis;</span><br><span class="line">            <span class="keyword">private</span> String wind_deg;</span><br><span class="line">            <span class="keyword">private</span> String wind_dir;</span><br><span class="line">            <span class="keyword">private</span> String wind_sc;</span><br><span class="line">            <span class="keyword">private</span> String wind_spd;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@NonNull</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"cloud : "</span> + cloud + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"cond_code : "</span> + cond_code + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"cond_txt : "</span> + cond_txt + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"fl : "</span> + fl + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"hum : "</span> + hum + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"pcpn : "</span> + pcpn + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"pres : "</span> + pres + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"tmp : "</span> + tmp + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"vis : "</span> + vis + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"wind_deg : "</span> + wind_deg + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"wind_dir : "</span> + wind_dir + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"wind_sc : "</span> + wind_sc + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"wind_spd : "</span> + wind_spd + <span class="string">"\n"</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getCloud</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> cloud;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCloud</span><span class="params">(String cloud)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.cloud = cloud;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getCond_code</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> cond_code;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCond_code</span><span class="params">(String cond_code)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.cond_code = cond_code;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getCond_txt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> cond_txt;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCond_txt</span><span class="params">(String cond_txt)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.cond_txt = cond_txt;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getFl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> fl;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFl</span><span class="params">(String fl)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.fl = fl;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getHum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> hum;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHum</span><span class="params">(String hum)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.hum = hum;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getPcpn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> pcpn;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPcpn</span><span class="params">(String pcpn)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.pcpn = pcpn;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getPres</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> pres;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPres</span><span class="params">(String pres)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.pres = pres;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getTmp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> tmp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTmp</span><span class="params">(String tmp)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.tmp = tmp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getVis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> vis;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVis</span><span class="params">(String vis)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.vis = vis;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getWind_deg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> wind_deg;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWind_deg</span><span class="params">(String wind_deg)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.wind_deg = wind_deg;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getWind_dir</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> wind_dir;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWind_dir</span><span class="params">(String wind_dir)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.wind_dir = wind_dir;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getWind_sc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> wind_sc;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWind_sc</span><span class="params">(String wind_sc)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.wind_sc = wind_sc;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getWind_spd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> wind_spd;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWind_spd</span><span class="params">(String wind_spd)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.wind_spd = wind_spd;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>2.使用OkHttp构造请求</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">        .get()</span><br><span class="line">        .url(baseUrl)</span><br><span class="line">        .build();</span><br><span class="line">Call call = client.newCall(request);</span><br><span class="line">call.enqueue(<span class="keyword">new</span> Callback() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(@NotNull Call call, @NotNull IOException e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(@NotNull Call call, @NotNull Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>3.在onResponse方法中处理请求，使用Gson对response的json数据进行实例化</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(@NotNull Call call, @NotNull Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String ret = response.body().string();</span><br><span class="line">    runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">            WeatherEntity weatherEntity = gson.fromJson(ret, WeatherEntity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            textView.setText(weatherEntity.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>只要对比一下就知道了，从ret到weatherEntity，完成了对json数据的实例化，我们不需要new一个对象再通过set方法赋值就可以得到一个实例，最后直接使用此实例即可。</p>
<h2 id="2-Gson源码分析"><a href="#2-Gson源码分析" class="headerlink" title="2. Gson源码分析"></a>2. Gson源码分析</h2><p>首先new了一个Gson对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Gson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(Excluder.DEFAULT, FieldNamingPolicy.IDENTITY,</span><br><span class="line">        Collections.&lt;Type, InstanceCreator&lt;?&gt;&gt;emptyMap(), DEFAULT_SERIALIZE_NULLS,</span><br><span class="line">        DEFAULT_COMPLEX_MAP_KEYS, DEFAULT_JSON_NON_EXECUTABLE, DEFAULT_ESCAPE_HTML,</span><br><span class="line">        DEFAULT_PRETTY_PRINT, DEFAULT_LENIENT, DEFAULT_SPECIALIZE_FLOAT_VALUES,</span><br><span class="line">        LongSerializationPolicy.DEFAULT, <span class="keyword">null</span>, DateFormat.DEFAULT, DateFormat.DEFAULT,</span><br><span class="line">        Collections.&lt;TypeAdapterFactory&gt;emptyList(), Collections.&lt;TypeAdapterFactory&gt;emptyList(),</span><br><span class="line">        Collections.&lt;TypeAdapterFactory&gt;emptyList());</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 这里很明显，比较重要的类是TypeAdapterFactory，作用稍后再说</span></span><br><span class="line">  Gson(<span class="keyword">final</span> Excluder excluder, <span class="keyword">final</span> FieldNamingStrategy fieldNamingStrategy,</span><br><span class="line">      <span class="keyword">final</span> Map&lt;Type, InstanceCreator&lt;?&gt;&gt; instanceCreators, <span class="keyword">boolean</span> serializeNulls,</span><br><span class="line">      <span class="keyword">boolean</span> complexMapKeySerialization, <span class="keyword">boolean</span> generateNonExecutableGson, <span class="keyword">boolean</span> htmlSafe,</span><br><span class="line">      <span class="keyword">boolean</span> prettyPrinting, <span class="keyword">boolean</span> lenient, <span class="keyword">boolean</span> serializeSpecialFloatingPointValues,</span><br><span class="line">      LongSerializationPolicy longSerializationPolicy, String datePattern, <span class="keyword">int</span> dateStyle,</span><br><span class="line">      <span class="keyword">int</span> timeStyle, List&lt;TypeAdapterFactory&gt; builderFactories,</span><br><span class="line">      List&lt;TypeAdapterFactory&gt; builderHierarchyFactories,</span><br><span class="line">      List&lt;TypeAdapterFactory&gt; factoriesToBeAdded) &#123;</span><br><span class="line">    <span class="keyword">this</span>.excluder = excluder;</span><br><span class="line">    <span class="keyword">this</span>.fieldNamingStrategy = fieldNamingStrategy;</span><br><span class="line">    <span class="keyword">this</span>.instanceCreators = instanceCreators;</span><br><span class="line">    <span class="keyword">this</span>.constructorConstructor = <span class="keyword">new</span> ConstructorConstructor(instanceCreators);</span><br><span class="line">    <span class="keyword">this</span>.serializeNulls = serializeNulls;</span><br><span class="line">    <span class="keyword">this</span>.complexMapKeySerialization = complexMapKeySerialization;</span><br><span class="line">    <span class="keyword">this</span>.generateNonExecutableJson = generateNonExecutableGson;</span><br><span class="line">    <span class="keyword">this</span>.htmlSafe = htmlSafe;</span><br><span class="line">    <span class="keyword">this</span>.prettyPrinting = prettyPrinting;</span><br><span class="line">    <span class="keyword">this</span>.lenient = lenient;</span><br><span class="line">    <span class="keyword">this</span>.serializeSpecialFloatingPointValues = serializeSpecialFloatingPointValues;</span><br><span class="line">    <span class="keyword">this</span>.longSerializationPolicy = longSerializationPolicy;</span><br><span class="line">    <span class="keyword">this</span>.datePattern = datePattern;</span><br><span class="line">    <span class="keyword">this</span>.dateStyle = dateStyle;</span><br><span class="line">    <span class="keyword">this</span>.timeStyle = timeStyle;</span><br><span class="line">    <span class="keyword">this</span>.builderFactories = builderFactories;</span><br><span class="line">    <span class="keyword">this</span>.builderHierarchyFactories = builderHierarchyFactories;</span><br><span class="line"></span><br><span class="line">    List&lt;TypeAdapterFactory&gt; factories = <span class="keyword">new</span> ArrayList&lt;TypeAdapterFactory&gt;();</span><br><span class="line">    <span class="comment">// 内置的TypeAdapter，比如ObjectTypeAdapter用于处理Object类型数据</span></span><br><span class="line">    <span class="comment">// built-in type adapters that cannot be overridden</span></span><br><span class="line">    factories.add(TypeAdapters.JSON_ELEMENT_FACTORY);</span><br><span class="line">    factories.add(ObjectTypeAdapter.FACTORY);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// excluder用于控制属性的是否支持序列化与反序列化，比如用@Expose修饰的属性，</span></span><br><span class="line">    <span class="comment">// 优先级必须在所有TypeAdapter之前</span></span><br><span class="line">    <span class="comment">// the excluder must precede all adapters that handle user-defined types</span></span><br><span class="line">    factories.add(excluder);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开发人员自定义的TypeAdapter，优先级相对较高</span></span><br><span class="line">    <span class="comment">// users' type adapters</span></span><br><span class="line">    factories.addAll(factoriesToBeAdded);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 基础类型数据，包括String、Integer等包装类型</span></span><br><span class="line">    <span class="comment">// type adapters for basic platform types</span></span><br><span class="line">    factories.add(TypeAdapters.STRING_FACTORY);</span><br><span class="line">    factories.add(TypeAdapters.INTEGER_FACTORY);</span><br><span class="line">    factories.add(TypeAdapters.BOOLEAN_FACTORY);</span><br><span class="line">    factories.add(TypeAdapters.BYTE_FACTORY);</span><br><span class="line">    factories.add(TypeAdapters.SHORT_FACTORY);</span><br><span class="line">    TypeAdapter&lt;Number&gt; longAdapter = longAdapter(longSerializationPolicy);</span><br><span class="line">    factories.add(TypeAdapters.newFactory(<span class="keyword">long</span><span class="class">.<span class="keyword">class</span>, <span class="title">Long</span>.<span class="title">class</span>, <span class="title">longAdapter</span>))</span>;</span><br><span class="line">    factories.add(TypeAdapters.newFactory(<span class="keyword">double</span><span class="class">.<span class="keyword">class</span>, <span class="title">Double</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">doubleAdapter</span>(<span class="title">serializeSpecialFloatingPointValues</span>)))</span>;</span><br><span class="line">    factories.add(TypeAdapters.newFactory(<span class="keyword">float</span><span class="class">.<span class="keyword">class</span>, <span class="title">Float</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">floatAdapter</span>(<span class="title">serializeSpecialFloatingPointValues</span>)))</span>;</span><br><span class="line">    factories.add(TypeAdapters.NUMBER_FACTORY);</span><br><span class="line">    factories.add(TypeAdapters.ATOMIC_INTEGER_FACTORY);</span><br><span class="line">    factories.add(TypeAdapters.ATOMIC_BOOLEAN_FACTORY);</span><br><span class="line">    factories.add(TypeAdapters.newFactory(AtomicLong<span class="class">.<span class="keyword">class</span>, <span class="title">atomicLongAdapter</span>(<span class="title">longAdapter</span>)))</span>;</span><br><span class="line">    factories.add(TypeAdapters.newFactory(AtomicLongArray<span class="class">.<span class="keyword">class</span>, <span class="title">atomicLongArrayAdapter</span>(<span class="title">longAdapter</span>)))</span>;</span><br><span class="line">    factories.add(TypeAdapters.ATOMIC_INTEGER_ARRAY_FACTORY);</span><br><span class="line">    factories.add(TypeAdapters.CHARACTER_FACTORY);</span><br><span class="line">    factories.add(TypeAdapters.STRING_BUILDER_FACTORY);</span><br><span class="line">    factories.add(TypeAdapters.STRING_BUFFER_FACTORY);</span><br><span class="line">    factories.add(TypeAdapters.newFactory(BigDecimal<span class="class">.<span class="keyword">class</span>, <span class="title">TypeAdapters</span>.<span class="title">BIG_DECIMAL</span>))</span>;</span><br><span class="line">    factories.add(TypeAdapters.newFactory(BigInteger<span class="class">.<span class="keyword">class</span>, <span class="title">TypeAdapters</span>.<span class="title">BIG_INTEGER</span>))</span>;</span><br><span class="line">    factories.add(TypeAdapters.URL_FACTORY);</span><br><span class="line">    factories.add(TypeAdapters.URI_FACTORY);</span><br><span class="line">    factories.add(TypeAdapters.UUID_FACTORY);</span><br><span class="line">    factories.add(TypeAdapters.CURRENCY_FACTORY);</span><br><span class="line">    factories.add(TypeAdapters.LOCALE_FACTORY);</span><br><span class="line">    factories.add(TypeAdapters.INET_ADDRESS_FACTORY);</span><br><span class="line">    factories.add(TypeAdapters.BIT_SET_FACTORY);</span><br><span class="line">    factories.add(DateTypeAdapter.FACTORY);</span><br><span class="line">    factories.add(TypeAdapters.CALENDAR_FACTORY);</span><br><span class="line">    factories.add(TimeTypeAdapter.FACTORY);</span><br><span class="line">    factories.add(SqlDateTypeAdapter.FACTORY);</span><br><span class="line">    factories.add(TypeAdapters.TIMESTAMP_FACTORY);</span><br><span class="line">    factories.add(ArrayTypeAdapter.FACTORY);</span><br><span class="line">    factories.add(TypeAdapters.CLASS_FACTORY);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 集合类型优先级较低，包括Map、Collection等</span></span><br><span class="line">    <span class="comment">// type adapters for composite and user-defined types</span></span><br><span class="line">    factories.add(<span class="keyword">new</span> CollectionTypeAdapterFactory(constructorConstructor));</span><br><span class="line">    factories.add(<span class="keyword">new</span> MapTypeAdapterFactory(constructorConstructor, complexMapKeySerialization));</span><br><span class="line">    <span class="keyword">this</span>.jsonAdapterFactory = <span class="keyword">new</span> JsonAdapterAnnotationTypeAdapterFactory(constructorConstructor);</span><br><span class="line">    factories.add(jsonAdapterFactory);</span><br><span class="line">    factories.add(TypeAdapters.ENUM_FACTORY);</span><br><span class="line">    <span class="comment">// 反射类型优先级最低，而这个反射类型就是我们自定义WeatherEntity的TypeAdapter</span></span><br><span class="line">    factories.add(<span class="keyword">new</span> ReflectiveTypeAdapterFactory(</span><br><span class="line">        constructorConstructor, fieldNamingStrategy, excluder, jsonAdapterFactory));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.factories = Collections.unmodifiableList(factories);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>然后直接看fromJson方法，传入的参数为String和.class，返回值为.class的实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">fromJson</span><span class="params">(String json, Class&lt;T&gt; classOfT)</span> <span class="keyword">throws</span> JsonSyntaxException </span>&#123;</span><br><span class="line">  <span class="comment">// 此处只要分析fromJson方法</span></span><br><span class="line">  Object object = fromJson(json, (Type) classOfT);</span><br><span class="line">  <span class="comment">// wrap仅仅把基础类型转为包装类型，cast用于类型转换，把Object类型转为object的实际类型</span></span><br><span class="line">  <span class="keyword">return</span> Primitives.wrap(classOfT).cast(object);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">fromJson</span><span class="params">(String json, Type typeOfT)</span> <span class="keyword">throws</span> JsonSyntaxException </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (json == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 通过StringReader将String类型的json数据转为StringReader</span></span><br><span class="line">  StringReader reader = <span class="keyword">new</span> StringReader(json);</span><br><span class="line">  <span class="comment">// 又调用fromJson方法</span></span><br><span class="line">  T target = (T) fromJson(reader, typeOfT);</span><br><span class="line">  <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">fromJson</span><span class="params">(Reader json, Type typeOfT)</span> <span class="keyword">throws</span> JsonIOException, JsonSyntaxException </span>&#123;</span><br><span class="line">  <span class="comment">// 又将StringReader转为JsonReader</span></span><br><span class="line">  JsonReader jsonReader = newJsonReader(json);</span><br><span class="line">  <span class="comment">// 继续调用fromJson</span></span><br><span class="line">  T object = (T) fromJson(jsonReader, typeOfT);</span><br><span class="line">  assertFullConsumption(object, jsonReader);</span><br><span class="line">  <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">fromJson</span><span class="params">(JsonReader reader, Type typeOfT)</span> <span class="keyword">throws</span> JsonIOException, JsonSyntaxException </span>&#123;</span><br><span class="line">  <span class="keyword">boolean</span> isEmpty = <span class="keyword">true</span>;</span><br><span class="line">  <span class="keyword">boolean</span> oldLenient = reader.isLenient();</span><br><span class="line">  reader.setLenient(<span class="keyword">true</span>);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 核心代码在try catch内，我们得到的JsonReader需要通过TypeAdapter的read方法转为Java对象</span></span><br><span class="line">    <span class="comment">// 所以接下来需要分析JsonReader的功能，以及这里默认使用的TypeAdapter的功能</span></span><br><span class="line">    reader.peek();</span><br><span class="line">    isEmpty = <span class="keyword">false</span>;</span><br><span class="line">    TypeToken&lt;T&gt; typeToken = (TypeToken&lt;T&gt;) TypeToken.get(typeOfT);</span><br><span class="line">    TypeAdapter&lt;T&gt; typeAdapter = getAdapter(typeToken);</span><br><span class="line">    T object = typeAdapter.read(reader);</span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (EOFException e) &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * For compatibility with JSON 1.5 and earlier, we return null for empty</span></span><br><span class="line"><span class="comment">     * documents instead of throwing.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (isEmpty) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> JsonSyntaxException(e);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IllegalStateException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> JsonSyntaxException(e);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    <span class="comment">// TODO(inder): Figure out whether it is indeed right to rethrow this as JsonSyntaxException</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> JsonSyntaxException(e);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (AssertionError e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(<span class="string">"AssertionError (GSON "</span> + GsonBuildConfig.VERSION + <span class="string">"): "</span> + e.getMessage(), e);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    reader.setLenient(oldLenient);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>JsonReader并不是直接通过String解析出来的，首先经过了StringReader，那么先看看StringReader的构造，StringReader继承自Reader，需要实现read方法，read方法一般是用于读取字符到buffer中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// StringReader.java 这里只保存了String的值和长度</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new string reader.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s  String providing the character stream.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StringReader</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.str = s;</span><br><span class="line">        <span class="keyword">this</span>.length = s.length();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>JsonReader并不是继承自Reader，JsonReader需要配合TypeAdapter使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Gson.java newJsonReader将StringReader转为JsonReader对象，DEFAULT_LENIENT为false，暂时不明白</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns a new JSON reader configured for the settings on this Gson instance.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> JsonReader <span class="title">newJsonReader</span><span class="params">(Reader reader)</span> </span>&#123;</span><br><span class="line">    JsonReader jsonReader = <span class="keyword">new</span> JsonReader(reader);</span><br><span class="line">    jsonReader.setLenient(lenient);</span><br><span class="line">    <span class="keyword">return</span> jsonReader;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>getAdapter方法如何获取到TypeAdapter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the type adapter for &#123;<span class="doctag">@code</span>&#125; type.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException if this GSON cannot serialize and</span></span><br><span class="line"><span class="comment"> *     deserialize &#123;<span class="doctag">@code</span> type&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">TypeAdapter&lt;T&gt; <span class="title">getAdapter</span><span class="params">(TypeToken&lt;T&gt; type)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 初始情况下typeTokenCache为空</span></span><br><span class="line">  TypeAdapter&lt;?&gt; cached = typeTokenCache.get(type == <span class="keyword">null</span> ? NULL_KEY_SURROGATE : type);</span><br><span class="line">  <span class="keyword">if</span> (cached != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (TypeAdapter&lt;T&gt;) cached;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// calls初始也为空</span></span><br><span class="line">  Map&lt;TypeToken&lt;?&gt;, FutureTypeAdapter&lt;?&gt;&gt; threadCalls = calls.get();</span><br><span class="line">  <span class="keyword">boolean</span> requiresThreadLocalCleanup = <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (threadCalls == <span class="keyword">null</span>) &#123;</span><br><span class="line">    threadCalls = <span class="keyword">new</span> HashMap&lt;TypeToken&lt;?&gt;, FutureTypeAdapter&lt;?&gt;&gt;();</span><br><span class="line">    calls.set(threadCalls);</span><br><span class="line">    requiresThreadLocalCleanup = <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ThreadLocal在这里是防止老是执行for (TypeAdapterFactory factory : factories) 递归查找，</span></span><br><span class="line">  <span class="comment">// 如果不用ThreadLocal干预的话，就会导致堆栈溢出</span></span><br><span class="line">  <span class="comment">// the key and value type parameters always agree</span></span><br><span class="line">  FutureTypeAdapter&lt;T&gt; ongoingCall = (FutureTypeAdapter&lt;T&gt;) threadCalls.get(type);</span><br><span class="line">  <span class="keyword">if</span> (ongoingCall != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> ongoingCall;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    FutureTypeAdapter&lt;T&gt; call = <span class="keyword">new</span> FutureTypeAdapter&lt;T&gt;();</span><br><span class="line">    threadCalls.put(type, call);</span><br><span class="line">    <span class="comment">// TypeAdapter是从Gson初始化的factories中按照顺序遍历得到的，</span></span><br><span class="line">    <span class="comment">// 所以接下来需要看这里使用的是哪个TypeAdapterFactory</span></span><br><span class="line">    <span class="keyword">for</span> (TypeAdapterFactory factory : factories) &#123;</span><br><span class="line">      TypeAdapter&lt;T&gt; candidate = factory.create(<span class="keyword">this</span>, type);</span><br><span class="line">      <span class="keyword">if</span> (candidate != <span class="keyword">null</span>) &#123;</span><br><span class="line">        call.setDelegate(candidate);</span><br><span class="line">        typeTokenCache.put(type, candidate);</span><br><span class="line">        <span class="keyword">return</span> candidate;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"GSON ("</span> + GsonBuildConfig.VERSION + <span class="string">") cannot handle "</span> + type);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    threadCalls.remove(type);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (requiresThreadLocalCleanup) &#123;</span><br><span class="line">      calls.remove();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ReflectiveTypeAdapterFactory的create方法得到我们处理WeatherEntity的TypeAdapter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ReflectiveTypeAdapterFactory.java create方法返回的是Adapter</span></span><br><span class="line">  <span class="meta">@Override</span> <span class="keyword">public</span> &lt;T&gt; <span class="function">TypeAdapter&lt;T&gt; <span class="title">create</span><span class="params">(Gson gson, <span class="keyword">final</span> TypeToken&lt;T&gt; type)</span> </span>&#123;</span><br><span class="line">    Class&lt;? <span class="keyword">super</span> T&gt; raw = type.getRawType();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!Object<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">raw</span>)) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// it's a primitive!</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ObjectConstructor&lt;T&gt; constructor = constructorConstructor.get(type);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Adapter&lt;T&gt;(constructor, getBoundFields(gson, type, raw));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Adapter的read方法就是返回WeatherEntity的位置</span></span><br><span class="line">    Adapter(ObjectConstructor&lt;T&gt; constructor, Map&lt;String, BoundField&gt; boundFields) &#123;</span><br><span class="line">      <span class="keyword">this</span>.constructor = constructor;</span><br><span class="line">      <span class="keyword">this</span>.boundFields = boundFields;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// read实际上是被递归调用的</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> T <span class="title">read</span><span class="params">(JsonReader in)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      <span class="comment">// JsonReader中保存了我们需要解析的字符串数据，所以也封装了一些读取的函数，</span></span><br><span class="line">      <span class="comment">// 通过peek判断JsonReader是否已经读到结尾了来结束解析的过程</span></span><br><span class="line">      <span class="keyword">if</span> (in.peek() == JsonToken.NULL) &#123;</span><br><span class="line">        in.nextNull();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 两个类ObjectConstructor和BoundField，看名字就知道了ObjectConstructor</span></span><br><span class="line">      <span class="comment">// 用于构造实例，BoundField用于指定属性</span></span><br><span class="line">      T instance = constructor.construct();</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// JsonReader有几个方法，比如beginObject和beginArray，表明要开始解析</span></span><br><span class="line">        <span class="comment">// JsonReader的数据了，beginObject表明需要解析为对象，beginArray表明需要解析为</span></span><br><span class="line">        <span class="comment">// 数组</span></span><br><span class="line">        in.beginObject();</span><br><span class="line">        <span class="comment">// hasNext表明数据是否到达结尾</span></span><br><span class="line">        <span class="keyword">while</span> (in.hasNext()) &#123;</span><br><span class="line">          <span class="comment">// nextName可以获取json数据中的key</span></span><br><span class="line">          String name = in.nextName();</span><br><span class="line">          <span class="comment">// 通过将name转为BoundField，为后续生成属性做铺垫</span></span><br><span class="line">          BoundField field = boundFields.get(name);</span><br><span class="line">          <span class="comment">// 如果不能生成此属性或者不允许反序列化，则跳过此key对应的value数据</span></span><br><span class="line">          <span class="keyword">if</span> (field == <span class="keyword">null</span> || !field.deserialized) &#123;</span><br><span class="line">            in.skipValue();</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 然后需要对属性进行赋值，因此需要看BoundField的read方法做了些什么</span></span><br><span class="line">            field.read(in, instance);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IllegalStateException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> JsonSyntaxException(e);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(e);</span><br><span class="line">      &#125;</span><br><span class="line">      in.endObject();</span><br><span class="line">      <span class="comment">// 最后返回我们的实例</span></span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BoundField来源于getBoundFields方法</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> Map&lt;String, BoundField&gt; <span class="title">getBoundFields</span><span class="params">(Gson context, TypeToken&lt;?&gt; type, Class&lt;?&gt; raw)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, BoundField&gt; result = <span class="keyword">new</span> LinkedHashMap&lt;String, BoundField&gt;();</span><br><span class="line">    <span class="keyword">if</span> (raw.isInterface()) &#123;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Type declaredType = type.getType();</span><br><span class="line">    <span class="keyword">while</span> (raw != Object<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 首先获得我们自定义WeatherEntity的属性</span></span><br><span class="line">      Field[] fields = raw.getDeclaredFields();</span><br><span class="line">      <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">        <span class="comment">// 对于每一个属性我们通过Excluder判断是否有@Expose或者其他注解修饰</span></span><br><span class="line">        <span class="comment">// 根据注解的要求保存这个属性是否支持序列化serialize和反序列化deserialize</span></span><br><span class="line">        <span class="keyword">boolean</span> serialize = excludeField(field, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">boolean</span> deserialize = excludeField(field, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (!serialize &amp;&amp; !deserialize) &#123;</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        accessor.makeAccessible(field);</span><br><span class="line">        Type fieldType = $Gson$Types.resolve(type.getType(), raw, field.getGenericType());</span><br><span class="line">        <span class="comment">// 因为Gson支持序列化时指定key的名称，所以会有一些替代名称，替代名称可以有多个，因此需要</span></span><br><span class="line">        <span class="comment">// 通过getFieldNames获取属性的所有序列化时的名称列表（第一个为属性名，其他可以是设置的替代名称）</span></span><br><span class="line">        List&lt;String&gt; fieldNames = getFieldNames(field);</span><br><span class="line">        BoundField previous = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, size = fieldNames.size(); i &lt; size; ++i) &#123;</span><br><span class="line">          String name = fieldNames.get(i);</span><br><span class="line">          <span class="keyword">if</span> (i != <span class="number">0</span>) serialize = <span class="keyword">false</span>; <span class="comment">// only serialize the default name</span></span><br><span class="line">          <span class="comment">// result的value boundField是通过createBoundField得到的，且只有第一个名称允许序列化</span></span><br><span class="line">          BoundField boundField = createBoundField(context, field, name,</span><br><span class="line">              TypeToken.get(fieldType), serialize, deserialize);</span><br><span class="line">          BoundField replaced = result.put(name, boundField);</span><br><span class="line">          <span class="keyword">if</span> (previous == <span class="keyword">null</span>) previous = replaced;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (previous != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(declaredType</span><br><span class="line">              + <span class="string">" declares multiple JSON fields named "</span> + previous.name);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      type = TypeToken.get($Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));</span><br><span class="line">      raw = type.getRawType();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// createBoundField返回我们需要的BoundField</span></span><br><span class="line">  <span class="keyword">private</span> ReflectiveTypeAdapterFactory.<span class="function">BoundField <span class="title">createBoundField</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">final</span> Gson context, <span class="keyword">final</span> Field field, <span class="keyword">final</span> String name,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">final</span> TypeToken&lt;?&gt; fieldType, <span class="keyword">boolean</span> serialize, <span class="keyword">boolean</span> deserialize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> isPrimitive = Primitives.isPrimitive(fieldType.getRawType());</span><br><span class="line">    <span class="comment">// special casing primitives here saves ~5% on Android...</span></span><br><span class="line">    JsonAdapter annotation = field.getAnnotation(JsonAdapter<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    TypeAdapter&lt;?&gt; mapped = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (annotation != <span class="keyword">null</span>) &#123;</span><br><span class="line">      mapped = jsonAdapterFactory.getTypeAdapter(</span><br><span class="line">          constructorConstructor, context, fieldType, annotation);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// mapped也是通过getAdapter获取的，但是fieldType已经改变了，变成了我们定义的实体类的下一级</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> jsonAdapterPresent = mapped != <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (mapped == <span class="keyword">null</span>) mapped = context.getAdapter(fieldType);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> TypeAdapter&lt;?&gt; typeAdapter = mapped;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) &#123;</span><br><span class="line">      <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"unchecked"</span>, <span class="string">"rawtypes"</span>&#125;) <span class="comment">// the type adapter and field type always agree</span></span><br><span class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(JsonWriter writer, Object value)</span></span></span><br><span class="line"><span class="function">          <span class="keyword">throws</span> IOException, IllegalAccessException </span>&#123;</span><br><span class="line">        Object fieldValue = field.get(value);</span><br><span class="line">        TypeAdapter t = jsonAdapterPresent ? typeAdapter</span><br><span class="line">            : <span class="keyword">new</span> TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());</span><br><span class="line">        t.write(writer, fieldValue);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 在调用read方法时就产生了递归</span></span><br><span class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(JsonReader reader, Object value)</span></span></span><br><span class="line"><span class="function">          <span class="keyword">throws</span> IOException, IllegalAccessException </span>&#123;</span><br><span class="line">        <span class="comment">// 由于属性的类型不同，此处的typeAdapter变为从factories遍历获取，</span></span><br><span class="line">        <span class="comment">// 如果我们这里的reader是String，那么typeAdapter为TypeAdapters.STRING_FACTORY</span></span><br><span class="line">        <span class="comment">// 然后按照TypeAdapters.STRING_FACTORY的逻辑读取数据</span></span><br><span class="line">        Object fieldValue = typeAdapter.read(reader);</span><br><span class="line">        <span class="keyword">if</span> (fieldValue != <span class="keyword">null</span> || !isPrimitive) &#123;</span><br><span class="line">          <span class="comment">// set方法把值fieldValue赋给对象value</span></span><br><span class="line">          field.set(value, fieldValue);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">writeField</span><span class="params">(Object value)</span> <span class="keyword">throws</span> IOException, IllegalAccessException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!serialized) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Object fieldValue = field.get(value);</span><br><span class="line">        <span class="keyword">return</span> fieldValue != value; <span class="comment">// avoid recursion for example for Throwable.cause</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>我们目前知道了属性是通过getDeclaredFields拿到的，然后通过递归的方式调用typeAdapter的read方法，然后将从JsonReader中获取到的值赋给属性，关键是属性实例是如何得到的<code>T instance = constructor.construct();</code>，默认情况下是ConstructorConstructor，通过ConstructorConstructor构造某个属性的实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ConstructorConstructor.java 默认instanceCreators为空</span></span><br><span class="line">  <span class="keyword">public</span> &lt;T&gt; <span class="function">ObjectConstructor&lt;T&gt; <span class="title">get</span><span class="params">(TypeToken&lt;T&gt; typeToken)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Type type = typeToken.getType();</span><br><span class="line">    <span class="keyword">final</span> Class&lt;? <span class="keyword">super</span> T&gt; rawType = typeToken.getRawType();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// first try an instance creator</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>) <span class="comment">// types must agree</span></span><br><span class="line">    <span class="keyword">final</span> InstanceCreator&lt;T&gt; typeCreator = (InstanceCreator&lt;T&gt;) instanceCreators.get(type);</span><br><span class="line">    <span class="keyword">if</span> (typeCreator != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ObjectConstructor&lt;T&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> T <span class="title">construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> typeCreator.createInstance(type);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Next try raw type match for instance creators</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>) <span class="comment">// types must agree</span></span><br><span class="line">    <span class="keyword">final</span> InstanceCreator&lt;T&gt; rawTypeCreator =</span><br><span class="line">        (InstanceCreator&lt;T&gt;) instanceCreators.get(rawType);</span><br><span class="line">    <span class="keyword">if</span> (rawTypeCreator != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ObjectConstructor&lt;T&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> T <span class="title">construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> rawTypeCreator.createInstance(type);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 我们构造的实例一般是通过newDefaultConstructor得到的</span></span><br><span class="line">    ObjectConstructor&lt;T&gt; defaultConstructor = newDefaultConstructor(rawType);</span><br><span class="line">    <span class="keyword">if</span> (defaultConstructor != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> defaultConstructor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// newDefaultImplementationConstructor用于构造Map和List以及它们的父类接口的实例</span></span><br><span class="line">    ObjectConstructor&lt;T&gt; defaultImplementation = newDefaultImplementationConstructor(type, rawType);</span><br><span class="line">    <span class="keyword">if</span> (defaultImplementation != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> defaultImplementation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// finally try unsafe</span></span><br><span class="line">    <span class="keyword">return</span> newUnsafeAllocator(type, rawType);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> &lt;T&gt; <span class="function">ObjectConstructor&lt;T&gt; <span class="title">newDefaultConstructor</span><span class="params">(Class&lt;? <span class="keyword">super</span> T&gt; rawType)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// getDeclaredConstructor通过反射得到目标类的构造函数</span></span><br><span class="line">      <span class="keyword">final</span> Constructor&lt;? <span class="keyword">super</span> T&gt; constructor = rawType.getDeclaredConstructor();</span><br><span class="line">      <span class="keyword">if</span> (!constructor.isAccessible()) &#123;</span><br><span class="line">        accessor.makeAccessible(constructor);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ObjectConstructor&lt;T&gt;() &#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>) <span class="comment">// T is the same raw type as is requested</span></span><br><span class="line">        <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> T <span class="title">construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            Object[] args = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// 返回初始参数都为null的实例</span></span><br><span class="line">            <span class="keyword">return</span> (T) constructor.newInstance(args);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> JsonParseException ?</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Failed to invoke "</span> + constructor + <span class="string">" with no args"</span>, e);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> don't wrap if cause is unchecked!</span></span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> JsonParseException ?</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Failed to invoke "</span> + constructor + <span class="string">" with no args"</span>,</span><br><span class="line">                e.getTargetException());</span><br><span class="line">          &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(e);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>读取json字符串的工作是由JsonReader完成的，以解析下面此json字符串为例（删减版），服务器传过来的数据可能没有换行</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"HeWeather6"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"basic"</span>: &#123;</span><br><span class="line">                <span class="attr">"cid"</span>: <span class="string">"CN101010100"</span>,</span><br><span class="line">                <span class="attr">"location"</span>: <span class="string">"北京"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"update"</span>: &#123;</span><br><span class="line">                <span class="attr">"loc"</span>: <span class="string">"2019-07-18 16:45"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"status"</span>: <span class="string">"ok"</span></span><br><span class="line">        &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根据上文代码分析我们知道解析数据的起点是ReflectiveTypeAdapterFactory中Adapter的read方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> T <span class="title">read</span><span class="params">(JsonReader in)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (in.peek() == JsonToken.NULL) &#123;</span><br><span class="line">    in.nextNull();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  T instance = constructor.construct();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 从in.beginObject开始对json数据进行解析</span></span><br><span class="line">    in.beginObject();</span><br><span class="line">    <span class="keyword">while</span> (in.hasNext()) &#123;</span><br><span class="line">      String name = in.nextName();</span><br><span class="line">      <span class="comment">// 14. 得到解析的key后构造属性</span></span><br><span class="line">      BoundField field = boundFields.get(name);</span><br><span class="line">      <span class="keyword">if</span> (field == <span class="keyword">null</span> || !field.deserialized) &#123;</span><br><span class="line">        in.skipValue();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 15. 并且递归解析后面的数据，深度优先，这里会调用CollectionTypeAdapterFactory的Adapter的read方法</span></span><br><span class="line">        <span class="comment">// CollectionTypeAdapterFactory用于处理集合类数据，这里会调用peek方法</span></span><br><span class="line">        field.read(in, instance);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IllegalStateException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> JsonSyntaxException(e);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(e);</span><br><span class="line">  &#125;</span><br><span class="line">  in.endObject();</span><br><span class="line">  <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JsonReader.java peeked是标志位，初始为PEEKED_NONE，表明还没有开始任何解析过程</span></span><br><span class="line"><span class="comment">// JsonReader解析数据的过程很有意思，它是依靠peeked标志位来决定如何处理下一个字符，</span></span><br><span class="line"><span class="comment">// peeked初始值为PEEKED_NONE，表明标志位为空所以需要读取json数据，根据读取的字符设置peeked</span></span><br><span class="line"><span class="comment">// 的值，然后再根据peeked的值决定下一个字符如何处理</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Consumes the next token from the JSON stream and asserts that it is the</span></span><br><span class="line"><span class="comment">   * beginning of a new object.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beginObject</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = peeked;</span><br><span class="line">    <span class="keyword">if</span> (p == PEEKED_NONE) &#123;</span><br><span class="line">      <span class="comment">// 初始值peeked为PEEKED_NONE，调用doPeek方法设置peeked的标志</span></span><br><span class="line">      p = doPeek();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p == PEEKED_BEGIN_OBJECT) &#123;</span><br><span class="line">      <span class="comment">// 4. 由于doPeek将p置为PEEKED_BEGIN_OBJECT，所以需要将JsonScope.EMPTY_OBJECT</span></span><br><span class="line">      <span class="comment">// 加入stack中，并peeked重置为PEEKED_NONE</span></span><br><span class="line">      push(JsonScope.EMPTY_OBJECT);</span><br><span class="line">      peeked = PEEKED_NONE;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Expected BEGIN_OBJECT but was "</span> + peek() + locationString());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// doPeek是整个解析过程中的核心代码，其他的函数都会调用到doPeek</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">doPeek</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 除了有peeked标志还有stack数组，stack数组保存解析json数据的进度，stack初始值全为0，</span></span><br><span class="line">    <span class="comment">// 初始化后将stack[0]置为JsonScope.EMPTY_DOCUMENT，表明还未开始解析</span></span><br><span class="line">    <span class="comment">// 6. 在hasNext方法中再次执行doPeek，此时peekStack为JsonScope.NONEMPTY_OBJECT</span></span><br><span class="line">    <span class="keyword">int</span> peekStack = stack[stackSize - <span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 25. stack的top被置为JsonScope.EMPTY_ARRAY，表明期望的数据是Array</span></span><br><span class="line">    <span class="keyword">if</span> (peekStack == JsonScope.EMPTY_ARRAY) &#123;</span><br><span class="line">      <span class="comment">// 继续重置stack top为JsonScope.NONEMPTY_ARRAY</span></span><br><span class="line">      stack[stackSize - <span class="number">1</span>] = JsonScope.NONEMPTY_ARRAY;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (peekStack == JsonScope.NONEMPTY_ARRAY) &#123;</span><br><span class="line">      <span class="comment">// Look for a comma before the next element.</span></span><br><span class="line">      <span class="keyword">int</span> c = nextNonWhitespace(<span class="keyword">true</span>);</span><br><span class="line">      <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">']'</span>:</span><br><span class="line">        <span class="keyword">return</span> peeked = PEEKED_END_ARRAY;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">';'</span>:</span><br><span class="line">        checkLenient(); <span class="comment">// fall-through</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">','</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> syntaxError(<span class="string">"Unterminated array"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (peekStack == JsonScope.EMPTY_OBJECT || peekStack == JsonScope.NONEMPTY_OBJECT) &#123;</span><br><span class="line">      <span class="comment">// 7. 又将stack的top置为JsonScope.DANGLING_NAME</span></span><br><span class="line">      stack[stackSize - <span class="number">1</span>] = JsonScope.DANGLING_NAME;</span><br><span class="line">      <span class="comment">// Look for a comma before the next element.</span></span><br><span class="line">      <span class="keyword">if</span> (peekStack == JsonScope.NONEMPTY_OBJECT) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = nextNonWhitespace(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'&#125;'</span>:</span><br><span class="line">          <span class="keyword">return</span> peeked = PEEKED_END_OBJECT;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">';'</span>:</span><br><span class="line">          checkLenient(); <span class="comment">// fall-through</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">','</span>:</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">throw</span> syntaxError(<span class="string">"Unterminated object"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 8. 读取下一个字符 "</span></span><br><span class="line">      <span class="keyword">int</span> c = nextNonWhitespace(<span class="keyword">true</span>);</span><br><span class="line">      <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'"'</span>:</span><br><span class="line">      <span class="comment">// 9. 显然将peeked置为PEEKED_DOUBLE_QUOTED_NAME</span></span><br><span class="line">        <span class="keyword">return</span> peeked = PEEKED_DOUBLE_QUOTED_NAME;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'\''</span>:</span><br><span class="line">        checkLenient();</span><br><span class="line">        <span class="keyword">return</span> peeked = PEEKED_SINGLE_QUOTED_NAME;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'&#125;'</span>:</span><br><span class="line">        <span class="keyword">if</span> (peekStack != JsonScope.NONEMPTY_OBJECT) &#123;</span><br><span class="line">          <span class="keyword">return</span> peeked = PEEKED_END_OBJECT;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">throw</span> syntaxError(<span class="string">"Expected name"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        checkLenient();</span><br><span class="line">        pos--; <span class="comment">// Don't consume the first character in an unquoted string.</span></span><br><span class="line">        <span class="keyword">if</span> (isLiteral((<span class="keyword">char</span>) c)) &#123;</span><br><span class="line">          <span class="keyword">return</span> peeked = PEEKED_UNQUOTED_NAME;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">throw</span> syntaxError(<span class="string">"Expected name"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (peekStack == JsonScope.DANGLING_NAME) &#123;</span><br><span class="line">      <span class="comment">// 17. 之前stack的top被置为JsonScope.DANGLING_NAME</span></span><br><span class="line">      <span class="comment">// 然后stack的top置为JsonScope.NONEMPTY_OBJECT，表明object对象还没有读取完成</span></span><br><span class="line">      stack[stackSize - <span class="number">1</span>] = JsonScope.NONEMPTY_OBJECT;</span><br><span class="line">      <span class="comment">// Look for a colon before the value.</span></span><br><span class="line">      <span class="comment">// 下一个字符是 :</span></span><br><span class="line">      <span class="keyword">int</span> c = nextNonWhitespace(<span class="keyword">true</span>);</span><br><span class="line">      <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">':'</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'='</span>:</span><br><span class="line">        checkLenient();</span><br><span class="line">        <span class="keyword">if</span> ((pos &lt; limit || fillBuffer(<span class="number">1</span>)) &amp;&amp; buffer[pos] == <span class="string">'&gt;'</span>) &#123;</span><br><span class="line">          pos++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> syntaxError(<span class="string">"Expected ':'"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (peekStack == JsonScope.EMPTY_DOCUMENT) &#123;</span><br><span class="line">      <span class="comment">// 1. peekStack初始为JsonScope.EMPTY_DOCUMENT</span></span><br><span class="line">      <span class="keyword">if</span> (lenient) &#123;</span><br><span class="line">        <span class="comment">// lenient在调用read方法之前被置为true，结束后被置为false</span></span><br><span class="line">        consumeNonExecutePrefix();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// stack[0]被置为JsonScope.NONEMPTY_DOCUMENT</span></span><br><span class="line">      stack[stackSize - <span class="number">1</span>] = JsonScope.NONEMPTY_DOCUMENT;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (peekStack == JsonScope.NONEMPTY_DOCUMENT) &#123;</span><br><span class="line">      <span class="keyword">int</span> c = nextNonWhitespace(<span class="keyword">false</span>);</span><br><span class="line">      <span class="keyword">if</span> (c == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> peeked = PEEKED_EOF;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        checkLenient();</span><br><span class="line">        pos--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (peekStack == JsonScope.CLOSED) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"JsonReader is closed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. c是第一个字符 &#123;</span></span><br><span class="line">    <span class="comment">// 18. c是 [</span></span><br><span class="line">    <span class="comment">// 26. c是 &#123;</span></span><br><span class="line">    <span class="keyword">int</span> c = nextNonWhitespace(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">']'</span>:</span><br><span class="line">      <span class="keyword">if</span> (peekStack == JsonScope.EMPTY_ARRAY) &#123;</span><br><span class="line">        <span class="keyword">return</span> peeked = PEEKED_END_ARRAY;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// fall-through to handle ",]"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">';'</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">','</span>:</span><br><span class="line">      <span class="comment">// In lenient mode, a 0-length literal in an array means 'null'.</span></span><br><span class="line">      <span class="keyword">if</span> (peekStack == JsonScope.EMPTY_ARRAY || peekStack == JsonScope.NONEMPTY_ARRAY) &#123;</span><br><span class="line">        checkLenient();</span><br><span class="line">        pos--;</span><br><span class="line">        <span class="keyword">return</span> peeked = PEEKED_NULL;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> syntaxError(<span class="string">"Unexpected value"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'\''</span>:</span><br><span class="line">      checkLenient();</span><br><span class="line">      <span class="keyword">return</span> peeked = PEEKED_SINGLE_QUOTED;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'"'</span>:</span><br><span class="line">      <span class="keyword">return</span> peeked = PEEKED_DOUBLE_QUOTED;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'['</span>:</span><br><span class="line">    <span class="comment">// 19. 将peeked置为PEEKED_BEGIN_ARRAY</span></span><br><span class="line">    <span class="comment">// 表明开始解析Array类型数据</span></span><br><span class="line">      <span class="keyword">return</span> peeked = PEEKED_BEGIN_ARRAY;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'&#123;'</span>:</span><br><span class="line">    <span class="comment">// 3. peeked被置为PEEKED_BEGIN_OBJECT</span></span><br><span class="line">    <span class="comment">// 27. peeked被置为PEEKED_BEGIN_OBJECT</span></span><br><span class="line">      <span class="keyword">return</span> peeked = PEEKED_BEGIN_OBJECT;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      pos--; <span class="comment">// Don't consume the first character in a literal value.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> result = peekKeyword();</span><br><span class="line">    <span class="keyword">if</span> (result != PEEKED_NONE) &#123;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    result = peekNumber();</span><br><span class="line">    <span class="keyword">if</span> (result != PEEKED_NONE) &#123;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!isLiteral(buffer[pos])) &#123;</span><br><span class="line">      <span class="keyword">throw</span> syntaxError(<span class="string">"Expected value"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    checkLenient();</span><br><span class="line">    <span class="keyword">return</span> peeked = PEEKED_UNQUOTED;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NON_EXECUTE_PREFIX包括")]&#125;'\n"，即如果json字符串第一个字符在NON_EXECUTE_PREFIX中</span></span><br><span class="line"><span class="comment">// 说明这个字符出了错误，buffer是1024长度的数组用于缓存json数据，pos表示我们读取数据的位置，</span></span><br><span class="line"><span class="comment">// consumeNonExecutePrefix用于</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Consumes the non-execute prefix if it exists.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">consumeNonExecutePrefix</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// fast forward through the leading whitespace</span></span><br><span class="line">    nextNonWhitespace(<span class="keyword">true</span>);</span><br><span class="line">    pos--;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pos + NON_EXECUTE_PREFIX.length &gt; limit &amp;&amp; !fillBuffer(NON_EXECUTE_PREFIX.length)) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NON_EXECUTE_PREFIX.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (buffer[pos + i] != NON_EXECUTE_PREFIX[i]) &#123;</span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">// not a security token!</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// we consumed a security token!</span></span><br><span class="line">    pos += NON_EXECUTE_PREFIX.length;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 在while循环里判断hasNext，显然peeked此时为PEEKED_NONE，所以执行doPeek</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns true if the current array or object has another element.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = peeked;</span><br><span class="line">    <span class="keyword">if</span> (p == PEEKED_NONE) &#123;</span><br><span class="line">      p = doPeek();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 10. p为PEEKED_DOUBLE_QUOTED_NAME，显然返回true</span></span><br><span class="line">    <span class="keyword">return</span> p != PEEKED_END_OBJECT &amp;&amp; p != PEEKED_END_ARRAY;</span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 11. 然后通过in.nextName()读取json数据</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns the next token, a &#123;<span class="doctag">@link</span> com.google.gson.stream.JsonToken#NAME property name&#125;, and</span></span><br><span class="line"><span class="comment">   * consumes it.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> java.io.IOException if the next token in the stream is not a property</span></span><br><span class="line"><span class="comment">   *     name.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">nextName</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 12. 此时peeked为PEEKED_DOUBLE_QUOTED_NAME</span></span><br><span class="line">    <span class="keyword">int</span> p = peeked;</span><br><span class="line">    <span class="keyword">if</span> (p == PEEKED_NONE) &#123;</span><br><span class="line">      p = doPeek();</span><br><span class="line">    &#125;</span><br><span class="line">    String result;</span><br><span class="line">    <span class="keyword">if</span> (p == PEEKED_UNQUOTED_NAME) &#123;</span><br><span class="line">      result = nextUnquotedValue();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p == PEEKED_SINGLE_QUOTED_NAME) &#123;</span><br><span class="line">      result = nextQuotedValue(<span class="string">'\''</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p == PEEKED_DOUBLE_QUOTED_NAME) &#123;</span><br><span class="line">      <span class="comment">// 13. 调用nextQuotedValue，nextQuotedValue方法读取buffer中不为 " 的字符串，</span></span><br><span class="line">      <span class="comment">// 简而言之就是在已知我们已经读取到双引号的情况下，将两个双引号之间的数据获取到，</span></span><br><span class="line">      <span class="comment">// 所以这里的result为HeWeather6</span></span><br><span class="line">      result = nextQuotedValue(<span class="string">'"'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Expected a name but was "</span> + peek() + locationString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 最后还是需要重置peeked为PEEKED_NONE</span></span><br><span class="line">    peeked = PEEKED_NONE;</span><br><span class="line">    <span class="comment">// 将result保存到pathNames中</span></span><br><span class="line">    pathNames[stackSize - <span class="number">1</span>] = result;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 16. peek继续调用doPeek</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns the type of the next token without consuming it.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> JsonToken <span class="title">peek</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = peeked;</span><br><span class="line">    <span class="keyword">if</span> (p == PEEKED_NONE) &#123;</span><br><span class="line">      p = doPeek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (p) &#123;</span><br><span class="line">    <span class="keyword">case</span> PEEKED_BEGIN_OBJECT:</span><br><span class="line">      <span class="keyword">return</span> JsonToken.BEGIN_OBJECT;</span><br><span class="line">    <span class="keyword">case</span> PEEKED_END_OBJECT:</span><br><span class="line">      <span class="keyword">return</span> JsonToken.END_OBJECT;</span><br><span class="line">    <span class="keyword">case</span> PEEKED_BEGIN_ARRAY:</span><br><span class="line">    <span class="comment">// 20. 返回JsonToken.BEGIN_ARRAY</span></span><br><span class="line">      <span class="keyword">return</span> JsonToken.BEGIN_ARRAY;</span><br><span class="line">    <span class="keyword">case</span> PEEKED_END_ARRAY:</span><br><span class="line">      <span class="keyword">return</span> JsonToken.END_ARRAY;</span><br><span class="line">    <span class="keyword">case</span> PEEKED_SINGLE_QUOTED_NAME:</span><br><span class="line">    <span class="keyword">case</span> PEEKED_DOUBLE_QUOTED_NAME:</span><br><span class="line">    <span class="keyword">case</span> PEEKED_UNQUOTED_NAME:</span><br><span class="line">      <span class="keyword">return</span> JsonToken.NAME;</span><br><span class="line">    <span class="keyword">case</span> PEEKED_TRUE:</span><br><span class="line">    <span class="keyword">case</span> PEEKED_FALSE:</span><br><span class="line">      <span class="keyword">return</span> JsonToken.BOOLEAN;</span><br><span class="line">    <span class="keyword">case</span> PEEKED_NULL:</span><br><span class="line">      <span class="keyword">return</span> JsonToken.NULL;</span><br><span class="line">    <span class="keyword">case</span> PEEKED_SINGLE_QUOTED:</span><br><span class="line">    <span class="keyword">case</span> PEEKED_DOUBLE_QUOTED:</span><br><span class="line">    <span class="keyword">case</span> PEEKED_UNQUOTED:</span><br><span class="line">    <span class="keyword">case</span> PEEKED_BUFFERED:</span><br><span class="line">      <span class="keyword">return</span> JsonToken.STRING;</span><br><span class="line">    <span class="keyword">case</span> PEEKED_LONG:</span><br><span class="line">    <span class="keyword">case</span> PEEKED_NUMBER:</span><br><span class="line">      <span class="keyword">return</span> JsonToken.NUMBER;</span><br><span class="line">    <span class="keyword">case</span> PEEKED_EOF:</span><br><span class="line">      <span class="keyword">return</span> JsonToken.END_DOCUMENT;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 23. beginArray用于解析Array类型数据</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Consumes the next token from the JSON stream and asserts that it is the</span></span><br><span class="line"><span class="comment">   * beginning of a new array.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beginArray</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = peeked;</span><br><span class="line">    <span class="keyword">if</span> (p == PEEKED_NONE) &#123;</span><br><span class="line">      p = doPeek();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 由于peeked被置为PEEKED_BEGIN_ARRAY</span></span><br><span class="line">    <span class="comment">// stack的top被置为JsonScope.EMPTY_ARRAY</span></span><br><span class="line">    <span class="keyword">if</span> (p == PEEKED_BEGIN_ARRAY) &#123;</span><br><span class="line">      push(JsonScope.EMPTY_ARRAY);</span><br><span class="line">      pathIndices[stackSize - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">      peeked = PEEKED_NONE;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Expected BEGIN_ARRAY but was "</span> + peek() + locationString());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Collection&lt;E&gt; <span class="title">read</span><span class="params">(JsonReader in)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  <span class="comment">// 21. in.peek()返回JsonToken.BEGIN_ARRAY</span></span><br><span class="line">  <span class="keyword">if</span> (in.peek() == JsonToken.NULL) &#123;</span><br><span class="line">    in.nextNull();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Collection&lt;E&gt; collection = constructor.construct();</span><br><span class="line">  <span class="comment">// 22.所以调用beginArray解析数据</span></span><br><span class="line">  in.beginArray();</span><br><span class="line">  <span class="comment">// 24. 继续判断hasNext，但是还是通过doPeek解析</span></span><br><span class="line">  <span class="keyword">while</span> (in.hasNext()) &#123;</span><br><span class="line">    <span class="comment">// 28. hasNext返回true，elementTypeAdapter是通过gson.getAdapter获取的，</span></span><br><span class="line">    <span class="comment">// 本质上还是ReflectiveTypeAdapterFactory的Adapter的read方法，那么下一个属性的实例化</span></span><br><span class="line">    <span class="comment">// 又进入了递归的模式，与此同时我们对于Array类型的属性是通过构造collection对象来加入下一级的</span></span><br><span class="line">    <span class="comment">// 对象</span></span><br><span class="line">    E instance = elementTypeAdapter.read(in);</span><br><span class="line">    collection.add(instance);</span><br><span class="line">  &#125;</span><br><span class="line">  in.endArray();</span><br><span class="line">  <span class="keyword">return</span> collection;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>JsonReader可以完成的内容非常多，基本可以解析大多数的数据，而你只需要调用其中的beginArray、endArray、beginObject、endObject、hasNext等方法就可以得到json字符串中正确的数据部分，而且不需要考虑括号、引号、分号等等，在这些方法中就已经帮你跳过了，所以你也可以自定义json解析规则，实例代码在JsonReader的注释中给出了</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">912345678901</span>,</span><br><span class="line">    <span class="attr">"text"</span>: <span class="string">"How do I read a JSON stream in Java?"</span>,</span><br><span class="line">    <span class="attr">"geo"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"user"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"json_newb"</span>,</span><br><span class="line">      <span class="attr">"followers_count"</span>: <span class="number">41</span></span><br><span class="line">     &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">912345678902</span>,</span><br><span class="line">    <span class="attr">"text"</span>: <span class="string">"@json_newb just use JsonReader!"</span>,</span><br><span class="line">    <span class="attr">"geo"</span>: [<span class="number">50.454722</span>, <span class="number">-104.606667</span>],</span><br><span class="line">    <span class="attr">"user"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"jesse"</span>,</span><br><span class="line">      <span class="attr">"followers_count"</span>: <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Message&gt; <span class="title">readJsonStream</span><span class="params">(InputStream in)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  JsonReader reader = <span class="keyword">new</span> JsonReader(<span class="keyword">new</span> InputStreamReader(in, <span class="string">"UTF-8"</span>));</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> readMessagesArray(reader);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    reader.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Message&gt; <span class="title">readMessagesArray</span><span class="params">(JsonReader reader)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  List&lt;Message&gt; messages = <span class="keyword">new</span> ArrayList&lt;Message&gt;();</span><br><span class="line"></span><br><span class="line">  reader.beginArray();</span><br><span class="line">  <span class="keyword">while</span> (reader.hasNext()) &#123;</span><br><span class="line">    messages.add(readMessage(reader));</span><br><span class="line">  &#125;</span><br><span class="line">  reader.endArray();</span><br><span class="line">  <span class="keyword">return</span> messages;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Message <span class="title">readMessage</span><span class="params">(JsonReader reader)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  <span class="keyword">long</span> id = -<span class="number">1</span>;</span><br><span class="line">  String text = <span class="keyword">null</span>;</span><br><span class="line">  User user = <span class="keyword">null</span>;</span><br><span class="line">  List&lt;Double&gt; geo = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  reader.beginObject();</span><br><span class="line">  <span class="keyword">while</span> (reader.hasNext()) &#123;</span><br><span class="line">    String name = reader.nextName();</span><br><span class="line">    <span class="keyword">if</span> (name.equals(<span class="string">"id"</span>)) &#123;</span><br><span class="line">      id = reader.nextLong();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name.equals(<span class="string">"text"</span>)) &#123;</span><br><span class="line">      text = reader.nextString();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name.equals(<span class="string">"geo"</span>) &amp;&amp; reader.peek() != JsonToken.NULL) &#123;</span><br><span class="line">      geo = readDoublesArray(reader);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name.equals(<span class="string">"user"</span>)) &#123;</span><br><span class="line">      user = readUser(reader);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      reader.skipValue();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  reader.endObject();</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Message(id, text, user, geo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Double&gt; <span class="title">readDoublesArray</span><span class="params">(JsonReader reader)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  List&lt;Double&gt; doubles = <span class="keyword">new</span> ArrayList&lt;Double&gt;();</span><br><span class="line"></span><br><span class="line">  reader.beginArray();</span><br><span class="line">  <span class="keyword">while</span> (reader.hasNext()) &#123;</span><br><span class="line">    doubles.add(reader.nextDouble());</span><br><span class="line">  &#125;</span><br><span class="line">  reader.endArray();</span><br><span class="line">  <span class="keyword">return</span> doubles;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">readUser</span><span class="params">(JsonReader reader)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  String username = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">int</span> followersCount = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  reader.beginObject();</span><br><span class="line">  <span class="keyword">while</span> (reader.hasNext()) &#123;</span><br><span class="line">    String name = reader.nextName();</span><br><span class="line">    <span class="keyword">if</span> (name.equals(<span class="string">"name"</span>)) &#123;</span><br><span class="line">      username = reader.nextString();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name.equals(<span class="string">"followers_count"</span>)) &#123;</span><br><span class="line">      followersCount = reader.nextInt();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      reader.skipValue();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  reader.endObject();</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> User(username, followersCount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上就是Gson解析json数据并实例化的过程，反之toJson将实例转为json数据也差不多。解析json数据是一个深度优先遍历的过程，同时根据各种括号、分号、引号判断数据类型以及数据的值，Gson在解析的过程中有一些非常亮眼的设计思路：</p>
<ol>
<li>TypeAdapterFactory工厂类，用于提供TypeAdapter，TypeAdapter用于将json数据转为实例，由于Java中包含大量的基础类型和自定义类型，所以Gson提供了对应的基础类型的TypeAdapterFactory工厂，这些工厂提供的Adapter可以按照设计好的方式调用JsonReader的各种方法读取数据并转为实例；同时对于自定义类型，提供了ReflectiveTypeAdapterFactory，通过反射的方式构造实例，同时根据不同的属性的类型，又可以使用TypeToken来表示便于后续查找合适的TypeAdapter；</li>
<li>JsonReader的强大功能，为了获取到json数据中的有效数据，比如属性名称、属性的值以及属性的类型，JsonReader加入了两个非常关键的参数peeked和stack，peeked用于标志当前的解析步骤是否完成，比如在调用beginObject后，peeked经历PEEKED_NONE -&gt; PEEKED_BEGIN_OBJECT -&gt; PEEKED_NONE的过程，通过doPeek完成这些步骤的转换，只要最终为PEEKED_NONE，说明前面都没有发生错误；其次是stack，stack保存了当前进行的流程，比如JsonScope.EMPTY_ARRAY、JsonScope.NONEMPTY_ARRAY、JsonScope.NONEMPTY_OBJECT等等，通过doPeek判断字符串，我们就知道了当前json数据可能是属于什么类型，从而将符号进行划分再判断，减少了需要判断的条件。</li>
</ol>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Gson</tag>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>Android框架-Retrofit与OkHttp</title>
    <url>/archives/6c51e275.html</url>
    <content><![CDATA[<p>参考：</p>
<blockquote>
<p><a href="https://www.tutorialsteacher.com/https" target="_blank" rel="noopener">HTTPS Tutorials</a><br><a href="http://www.ruanyifeng.com/blog/2016/08/http.html" target="_blank" rel="noopener">HTTP 协议入门</a><br><a href="https://square.github.io/retrofit/" target="_blank" rel="noopener">Retrofit</a><br><a href="https://square.github.io/okhttp/" target="_blank" rel="noopener">OkHttp</a><br><a href="https://juejin.im/post/5a31db566fb9a045257820b2#heading-2" target="_blank" rel="noopener">OkHttp使用详解</a><br><a href="https://www.baeldung.com/retrofit" target="_blank" rel="noopener">Introduction to Retrofit</a><br><a href="https://juejin.im/post/5c9cb008e51d455ec63f7aa6" target="_blank" rel="noopener">Android Retrofit 2.5.0使用基础详解</a><br><a href="https://juejin.im/post/5d1f2462f265da1bbc6ff5e8#heading-13" target="_blank" rel="noopener">Retrofit使用拦截器添加Cookie</a><br><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/simple_factory.html" target="_blank" rel="noopener">Factory Pattern</a></p>
</blockquote>
<p>Http，超文本传输协议，Https，更加安全的超文本传输协议，目前大量用于客户端与服务端之间的信息交流，属于应用层协议，下面有传输层TCP协议、网络层IP协议以及数据链路层为其提供保障。以登录功能为例，每一次输入账户密码后点击登录按钮就做了一次对服务器的Http请求（POST），我们收到的结果比如账号密码错误或者登录成功等信息就是服务器对Http请求的回复。Http与Https的区别在于后者采用了SSL（Secure Socket Layer安全套接层），简而言之就是对传输的数据进行了加密。具体细节可以在<a href="https://www.tutorialsteacher.com/https" target="_blank" rel="noopener">HTTPS Tutorials</a>或者其他资料中找到。</p>
<a id="more"></a>
<h2 id="1-GET和POST"><a href="#1-GET和POST" class="headerlink" title="1. GET和POST"></a>1. GET和POST</h2><p>Http协议中比较常用的请求是GET和POST请求，可以说大部分客户端与服务端之间的数据交互都是通过这两个请求方法，以GET和POST请求为例</p>
<p>GET用于请求数据，按照设计要求，GET请求不会对服务器数据进行修改，也就是说我们通过GET可以请求各种资源（静态页面等等），其中比较重要的参数包括：</p>
<p>Host：需要请求的服务器</p>
<p>User-Agent：代理，表明你的身份，一般来说浏览器发送的请求会自动添加，可以人为修改伪造身份</p>
<p>Connection：可以建立TCP长连接，属于HTTP/1.1的优化功能</p>
<p>这个GET请求的目的就是从www.wrox.com这个服务器取index.htm这个页面</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/index.htm</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: www.wrox.com</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)</span><br><span class="line">Gecko/20050225 Firefox/1.0.1</span><br><span class="line"><span class="attribute">Connection</span>: Keep-Alive</span><br></pre></td></tr></table></figure>
<p>POST请求用于修改服务器数据，按照设计的要求，可以通过POST方法可以向服务器提交数据由服务器处理后返回，这里比较重要的参数包括：</p>
<p>Content-Type：请求实体的格式</p>
<p>Content-Length：请求实体的长度</p>
<p>以及请求实体的内容，会空一行再写，比如这里的name1=value1&amp;name2=value2</p>
<p>这个POST请求的目的是向w3schools.com服务器下/test/demo_form.asp发送数据参数name1=value1&amp;name2=value2，然后服务器会返回处理后的结果</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/test/demo_form.asp</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: w3schools.com</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)</span><br><span class="line">Gecko/20050225 Firefox/1.0.1</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 40</span><br><span class="line"><span class="attribute">Connection</span>: Keep-Alive</span><br><span class="line"></span><br><span class="line">name1=value1&amp;name2=value2</span><br></pre></td></tr></table></figure>
<p>以上就是Http中GET和POST方法的简要介绍了，实际上Http协议还包括一些其他方法，以及TCP握手、SSL握手等建立连接的过程、对称与非对称加密等细节步骤，这里就不多描述，可以看其他资料。</p>
<h2 id="2-OkHttp"><a href="#2-OkHttp" class="headerlink" title="2. OkHttp"></a>2. OkHttp</h2><p>OkHttp是一个封装好的Http请求客户端，它既可用于Java项目也可以用于Android项目，通过调用构建好的http client，我们就可以发出http请求。</p>
<p><strong>Android中需要网络权限</strong><code>&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;</code></p>
<h3 id="2-1-OkHttp-GET"><a href="#2-1-OkHttp-GET" class="headerlink" title="2.1 OkHttp.GET"></a>2.1 OkHttp.GET</h3><blockquote>
<p>1.创建OkHttpClient对象</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>2.创建Request对象，URL则为我们需要的请求URL，一般来说此URL包含了Host、请求内容，比如<code>https://zhoutao822.coding.me/2019/01/03/XGBoost/0.png</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">        .url(URL)</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>3.将Request封装为Call</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Call call = client.newCall(request);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>4.调用同步或异步的请求方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是异步调用，通过enqueue方法</span></span><br><span class="line">call.enqueue(<span class="keyword">new</span> Callback() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"get failed"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String ret = response.body().string();</span><br><span class="line">        runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                textView.setText(ret);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是同步调用</span></span><br><span class="line">Response response = call.execute();</span><br></pre></td></tr></table></figure>
<p>异步调用意味着可以在主线程中调用call.enqueue方法，而同步调用方式只能在另一个线程中调用，通过handler将数据传回主线程，完整代码为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String URL = <span class="string">"https://free-api.heweather.net/s6/weather/now?location=beijing&amp;key=XXXXXXXXX"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Handler handler = <span class="keyword">new</span> Handler();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="keyword">final</span> TextView textView = findViewById(R.id.text);</span><br><span class="line"></span><br><span class="line">        OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">        Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">                .get()</span><br><span class="line">                .url(URL)</span><br><span class="line">                .build();</span><br><span class="line">        Call call = client.newCall(request);</span><br><span class="line">        call.enqueue(<span class="keyword">new</span> Callback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</span><br><span class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"get failed"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">final</span> String ret = response.body().string();</span><br><span class="line">                runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        textView.setText(ret);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面是同步调用</span></span><br><span class="line"><span class="comment">//        new Thread(new Runnable() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public void run() &#123;</span></span><br><span class="line"><span class="comment">//                OkHttpClient client = new OkHttpClient();</span></span><br><span class="line"><span class="comment">//                Request request = new Request.Builder()</span></span><br><span class="line"><span class="comment">//                        .get()</span></span><br><span class="line"><span class="comment">//                        .url(URL)</span></span><br><span class="line"><span class="comment">//                        .build();</span></span><br><span class="line"><span class="comment">//                Call call = client.newCall(request);</span></span><br><span class="line"><span class="comment">//                try &#123;</span></span><br><span class="line"><span class="comment">//                    final Response response = call.execute();</span></span><br><span class="line"><span class="comment">//                    handler.post(new Runnable() &#123;</span></span><br><span class="line"><span class="comment">//                        @Override</span></span><br><span class="line"><span class="comment">//                        public void run() &#123;</span></span><br><span class="line"><span class="comment">//                            try &#123;</span></span><br><span class="line"><span class="comment">//                                textView.setText(response.body().string());</span></span><br><span class="line"><span class="comment">//                            &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">//                                e.printStackTrace();</span></span><br><span class="line"><span class="comment">//                            &#125;</span></span><br><span class="line"><span class="comment">//                        &#125;</span></span><br><span class="line"><span class="comment">//                    &#125;);</span></span><br><span class="line"><span class="comment">//                &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">//                    e.printStackTrace();</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;).start();</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>GET请求下载文件，对于图片url，我们也可以通过GET的方式进行下载，将返回的数据转为本地图片或者直接用在ImageView上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloadImg</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">        Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">                .get()</span><br><span class="line">                .url(URL)</span><br><span class="line">                .build();</span><br><span class="line">        Call call = client.newCall(request);</span><br><span class="line">        call.enqueue(<span class="keyword">new</span> Callback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</span><br><span class="line">                Log.e(<span class="string">"aaaa"</span>, <span class="string">"onFailure: "</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">//拿到字节流</span></span><br><span class="line">                InputStream is = response.body().byteStream();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">                File file = <span class="keyword">new</span> File(Environment.getExternalStorageDirectory(), <span class="string">"image.png"</span>);</span><br><span class="line">                FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">                <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">128</span>];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> ((len = is.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    fos.write(buf, <span class="number">0</span>, len);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                fos.flush();</span><br><span class="line">                <span class="comment">//关闭流</span></span><br><span class="line">                fos.close();</span><br><span class="line">                is.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面是直接把图片放到ImageView上                </span></span><br><span class="line"><span class="comment">//                final Bitmap bitmap = BitmapFactory.decodeStream(is);</span></span><br><span class="line"><span class="comment">//                runOnUiThread(new Runnable() &#123;</span></span><br><span class="line"><span class="comment">//                    @Override</span></span><br><span class="line"><span class="comment">//                    public void run() &#123;</span></span><br><span class="line"><span class="comment">//                        imageView.setImageBitmap(bitmap);</span></span><br><span class="line"><span class="comment">//                    &#125;</span></span><br><span class="line"><span class="comment">//                &#125;);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                is.close();</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>GET请求下载文件的同时我们可以计算出下载进度，通过<code>response.body().contentLength()</code>拿到文件总大小，只需要修改上面的<code>onResponse</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//拿到字节流</span></span><br><span class="line">    InputStream is = response.body().byteStream();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> sum = <span class="number">0L</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> total = response.body().contentLength();</span><br><span class="line"></span><br><span class="line">    File file = <span class="keyword">new</span> File(Environment.getExternalStorageDirectory(), <span class="string">"image.png"</span>);</span><br><span class="line">    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">    <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">128</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((len = is.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        fos.write(buf, <span class="number">0</span>, len);</span><br><span class="line">        sum += len;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> finalSum = sum;</span><br><span class="line">        Log.i(<span class="string">"aaaa"</span>, <span class="string">"onResponse: "</span> + finalSum + <span class="string">"/"</span> + total);</span><br><span class="line">        runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//将进度设置到TextView中</span></span><br><span class="line">                textView.setText(finalSum + <span class="string">"/"</span> + total);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fos.flush();</span><br><span class="line">    <span class="comment">//关闭流</span></span><br><span class="line">    fos.close();</span><br><span class="line">    is.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-2-OkHttp-POST"><a href="#2-2-OkHttp-POST" class="headerlink" title="2.2 OkHttp.POST"></a>2.2 OkHttp.POST</h3><p>POST与GET非常类似，以传入键值对数据为例</p>
<blockquote>
<p>1.创建OkHttpClient对象</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>2.构建FormBody，传入参数</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FormBody formBody = <span class="keyword">new</span> FormBody.Builder()</span><br><span class="line">                .add(<span class="string">"username"</span>, <span class="string">"admin"</span>)</span><br><span class="line">                .add(<span class="string">"password"</span>, <span class="string">"admin"</span>)</span><br><span class="line">                .build();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>3.创建Request对象，URL则为我们需要的请求URL，一般将此URL作为BaseUrl，比如<code>https://www.wanandroid.com/user/login</code>，我们就知道通过这个URL可以发送登录请求，根据API文档直到传入的参数包括<code>username</code>和<code>password</code>，因此需要FormBody</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">        .url(URL)</span><br><span class="line">        .post(formBody)</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>4.将Request封装为Call</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Call call = client.newCall(request);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>5.调用异步的请求方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">call.enqueue(<span class="keyword">new</span> Callback() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</span><br><span class="line">        Log.e(<span class="string">"aaaa"</span>, <span class="string">"onFailure: "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String res = response.body().string();</span><br><span class="line">        runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                textView.setText(res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>POST除了可以发送键值对FormBody形式的请求外，还可以发送json字符串，将FormBody替换为RequestBody</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RequestBody requestBody = RequestBody.create(MediaType.parse(<span class="string">"text/plain;charset=utf-8"</span>), <span class="string">"&#123;username:admin;password:admin&#125;"</span>);</span><br></pre></td></tr></table></figure>
<p>除了以上两种形式的数据之外，Http还可以接受表单形式的数据请求，这也是正常情况下登录流程中发送账号密码的要求，通过表单保存这些数据，再发送到服务器上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File file = <span class="keyword">new</span> File(Environment.getExternalStorageDirectory(), <span class="string">"image.png"</span>);</span><br><span class="line"><span class="keyword">if</span> (!file.exists())&#123;</span><br><span class="line">    Toast.makeText(<span class="keyword">this</span>, <span class="string">"文件不存在"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">RequestBody muiltipartBody = <span class="keyword">new</span> MultipartBody.Builder()</span><br><span class="line">        <span class="comment">//一定要设置这句</span></span><br><span class="line">        .setType(MultipartBody.FORM)</span><br><span class="line">        .addFormDataPart(<span class="string">"username"</span>, <span class="string">"admin"</span>)</span><br><span class="line">        .addFormDataPart(<span class="string">"password"</span>, <span class="string">"admin"</span>)</span><br><span class="line">        .addFormDataPart(<span class="string">"myfile"</span>, <span class="string">"image.png"</span>, RequestBody.create(MediaType.parse(<span class="string">"application/octet-stream"</span>), file))</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure>
<p>在发送表单请求时，除了字符串还可以添加二进制文件，比如这里将图片转为二进制加入到了表单中。</p>
<p>除了在表单中上传文件之外，还可以直接发送二进制文件，需要存储权限<code>&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;/&gt;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File file = <span class="keyword">new</span> File(Environment.getExternalStorageDirectory(), <span class="string">"image.png"</span>);</span><br><span class="line"><span class="keyword">if</span> (!file.exists())&#123;</span><br><span class="line">    Toast.makeText(<span class="keyword">this</span>, <span class="string">"文件不存在"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    RequestBody requestBody2 = RequestBody.create(MediaType.parse(<span class="string">"application/octet-stream"</span>), file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>POST也可以显示上传进度，但是需要自定义接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountingRequestBody</span> <span class="keyword">extends</span> <span class="title">RequestBody</span> </span>&#123;</span><br><span class="line">    <span class="comment">//实际起作用的RequestBody</span></span><br><span class="line">    <span class="keyword">private</span> RequestBody delegate;</span><br><span class="line">    <span class="comment">//回调监听</span></span><br><span class="line">    <span class="keyword">private</span> Listener listener;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CountingSink countingSink;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数初始化成员变量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delegate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> listener</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CountingRequestBody</span><span class="params">(RequestBody delegate, Listener listener)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.delegate = delegate;</span><br><span class="line">        <span class="keyword">this</span>.listener = listener;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MediaType <span class="title">contentType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> delegate.contentType();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeTo</span><span class="params">(BufferedSink sink)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        countingSink = <span class="keyword">new</span> CountingSink(sink);</span><br><span class="line">        <span class="comment">//将CountingSink转化为BufferedSink供writeTo()使用</span></span><br><span class="line">        BufferedSink bufferedSink = Okio.buffer(countingSink);</span><br><span class="line">        delegate.writeTo(bufferedSink);</span><br><span class="line">        bufferedSink.flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CountingSink</span> <span class="keyword">extends</span> <span class="title">ForwardingSink</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">long</span> byteWritten;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CountingSink</span><span class="params">(Sink delegate)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(delegate);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 上传时调用该方法,在其中调用回调函数将上传进度暴露出去,该方法提供了缓冲区的自己大小</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> source</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> byteCount</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(Buffer source, <span class="keyword">long</span> byteCount)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.write(source, byteCount);</span><br><span class="line">            byteWritten += byteCount;</span><br><span class="line">            listener.onRequestProgress(byteWritten, contentLength());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回文件总的字节大小</span></span><br><span class="line"><span class="comment">     * 如果文件大小获取失败则返回-1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">contentLength</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> delegate.contentLength();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 回调监听接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">interface</span> <span class="title">Listener</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 暴露出上传进度</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> byteWritted  已经上传的字节大小</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> contentLength 文件的总字节大小</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onRequestProgress</span><span class="params">(<span class="keyword">long</span> byteWritted, <span class="keyword">long</span> contentLength)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File file = <span class="keyword">new</span> File(Environment.getExternalStorageDirectory(), <span class="string">"image.png"</span>);</span><br><span class="line"><span class="keyword">if</span> (!file.exists())&#123;</span><br><span class="line">    Toast.makeText(<span class="keyword">this</span>, <span class="string">"文件不存在"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    RequestBody requestBody2 = RequestBody.create(MediaType.parse(<span class="string">"application/octet-stream"</span>), file);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用我们自己封装的类</span></span><br><span class="line">CountingRequestBody countingRequestBody = <span class="keyword">new</span> CountingRequestBody(requestBody2, <span class="keyword">new</span> CountingRequestBody.Listener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestProgress</span><span class="params">(<span class="keyword">long</span> byteWritted, <span class="keyword">long</span> contentLength)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//打印进度</span></span><br><span class="line">        Log.d(<span class="string">"aaaa"</span>, <span class="string">"进度 ："</span> + byteWritted + <span class="string">"/"</span> + contentLength);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="2-3-OkHttp源码分析"><a href="#2-3-OkHttp源码分析" class="headerlink" title="2.3 OkHttp源码分析"></a>2.3 OkHttp源码分析</h3><p>以发送表单数据请求为例，大致有4步：OkHttpClient构建 -&gt; RequestBody构建 -&gt; Request构建 -&gt; Call构建并调用</p>
<p>首先看一下OkHttpClient到底是个什么东西，从注释中可以知道OkHttpClient时Call的工厂，具体发送HTTP请求以及接收服务器响应都是通过Call来实现的。</p>
<p>OkHttpClient还包括以下几个特性：</p>
<ol>
<li>OkHttpClient应该用单例模式，这样是为了复用减少内存消耗；</li>
<li>每一个OkHttpClient都持有独立的连接池和线程池；</li>
<li>直接new出来的OkHttpClient是默认配置的；</li>
<li><code>new OkHttpClient.Builder()</code>可以对Client进行配置；</li>
<li>通过<code>client.newBuilder()</code>可以得到一个与client共享连接池和线程池的OkHttpClient，仅在特殊情形下需要；</li>
<li>OkHttpClient不是必须主动关闭，client持有的线程和连接在空闲的情况下会被自动回收；</li>
<li>如果需要主动回收，<code>client.dispatcher().executorService().shutdown()</code>可以回收执行的Service，但会导致之后的call被拒绝；</li>
<li><code>client.connectionPool().evictAll()</code>会回收连接池；</li>
<li><code>client.cache().close()</code>会回收Client的缓存（如果在第4步中配置了的话）。</li>
</ol>
<p>调用默认构造方法话，则默认参数为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    dispatcher = <span class="keyword">new</span> Dispatcher(); <span class="comment">// Dispatcher持有ExecutorService，通过ExecutorService调用call</span></span><br><span class="line">    protocols = DEFAULT_PROTOCOLS; <span class="comment">// 默认支持HTTP/2和HTTP/1.1</span></span><br><span class="line">    connectionSpecs = DEFAULT_CONNECTION_SPECS; <span class="comment">// 默认连接配置，支持TLS加密的https和普通的不加密http</span></span><br><span class="line">    eventListenerFactory = EventListener.factory(EventListener.NONE); <span class="comment">// 提供监听各种Event的Listener，通常需要继承EventListener并实现其方法</span></span><br><span class="line">    proxySelector = ProxySelector.getDefault(); <span class="comment">// 设置代理，默认是获取系统范围的代理</span></span><br><span class="line">    <span class="keyword">if</span> (proxySelector == <span class="keyword">null</span>) &#123;</span><br><span class="line">    proxySelector = <span class="keyword">new</span> NullProxySelector(); <span class="comment">// 如果系统没有设置代理则将proxySelector设置为NullProxySelector</span></span><br><span class="line">    &#125;</span><br><span class="line">    cookieJar = CookieJar.NO_COOKIES; <span class="comment">// CookieJar是一个接口，实现这个接口的方法可以保存Cookies，也可以在发送请求时加上Cookies</span></span><br><span class="line">    socketFactory = SocketFactory.getDefault(); <span class="comment">// SocketFactory用于构建socket，默认返回DefaultSocketFactory，通过DefaultSocketFactory可以创建Socket</span></span><br><span class="line">    hostnameVerifier = OkHostnameVerifier.INSTANCE; <span class="comment">// 用于在握手期间验证URL主机名和server的身份信息是否相同</span></span><br><span class="line">    certificatePinner = CertificatePinner.DEFAULT; <span class="comment">// CertificatePinner用于在发送请求的过程中嵌入证书（Certificate Pinning），可以防止连接到危险的服务器</span></span><br><span class="line">    proxyAuthenticator = Authenticator.NONE; <span class="comment">// 代理服务器需要身份验证的时候需要用到，默认不需要身份验证</span></span><br><span class="line">    authenticator = Authenticator.NONE; </span><br><span class="line">    connectionPool = <span class="keyword">new</span> ConnectionPool(); <span class="comment">// 默认连接池允许最大5个空闲连接，超过5分钟空闲会被回收</span></span><br><span class="line">    dns = Dns.SYSTEM; <span class="comment">// DNS服务，默认使用系统的DNS服务</span></span><br><span class="line">    followSslRedirects = <span class="keyword">true</span>; <span class="comment">// 重定向到https域名，下面都是一些简单配置参数</span></span><br><span class="line">    followRedirects = <span class="keyword">true</span>;</span><br><span class="line">    retryOnConnectionFailure = <span class="keyword">true</span>;</span><br><span class="line">    callTimeout = <span class="number">0</span>;</span><br><span class="line">    connectTimeout = <span class="number">10_000</span>;</span><br><span class="line">    readTimeout = <span class="number">10_000</span>;</span><br><span class="line">    writeTimeout = <span class="number">10_000</span>;</span><br><span class="line">    pingInterval = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>client只在后面构建Call的时候用到，那先看一下RequestBody，RequestBody是个抽象类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果需要自定义RequestBody，则需要继承RequestBody并实现两个抽象方法contentType和writeTo，</span></span><br><span class="line"><span class="comment">// 一般来说contentType返回此RequestBody的Content-Type，contentLength返回Content的大小，</span></span><br><span class="line"><span class="comment">// 重写writeTo方法实际上是调用BufferedSink的write(content)方法</span></span><br><span class="line"><span class="comment">// RequestBody包含几个默认的create，如果只是发送简单请求，Content的内容不太复杂可以直接使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestBody</span> </span>&#123;</span><br><span class="line">  <span class="comment">/** Returns the Content-Type header for this body. */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="meta">@Nullable</span> <span class="function">MediaType <span class="title">contentType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns the number of bytes that will be written to &#123;<span class="doctag">@code</span> sink&#125; in a call to &#123;<span class="doctag">@link</span> #writeTo&#125;,</span></span><br><span class="line"><span class="comment">   * or -1 if that count is unknown.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">contentLength</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Writes the content of this request to &#123;<span class="doctag">@code</span> sink&#125;. */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">writeTo</span><span class="params">(BufferedSink sink)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns a new request body that transmits &#123;<span class="doctag">@code</span> content&#125;. If &#123;<span class="doctag">@code</span> contentType&#125; is non-null</span></span><br><span class="line"><span class="comment">   * and lacks a charset, this will use UTF-8.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RequestBody <span class="title">create</span><span class="params">(@Nullable MediaType contentType, String content)</span> </span>&#123;</span><br><span class="line">    Charset charset = Util.UTF_8;</span><br><span class="line">    <span class="keyword">if</span> (contentType != <span class="keyword">null</span>) &#123;</span><br><span class="line">      charset = contentType.charset();</span><br><span class="line">      <span class="keyword">if</span> (charset == <span class="keyword">null</span>) &#123;</span><br><span class="line">        charset = Util.UTF_8;</span><br><span class="line">        contentType = MediaType.parse(contentType + <span class="string">"; charset=utf-8"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">byte</span>[] bytes = content.getBytes(charset);</span><br><span class="line">    <span class="keyword">return</span> create(contentType, bytes);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Returns a new request body that transmits &#123;<span class="doctag">@code</span> content&#125;. */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RequestBody <span class="title">create</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">final</span> @Nullable MediaType contentType, <span class="keyword">final</span> ByteString content)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RequestBody() &#123;</span><br><span class="line">      <span class="meta">@Override</span> <span class="keyword">public</span> <span class="meta">@Nullable</span> <span class="function">MediaType <span class="title">contentType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> contentType;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">contentLength</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content.size();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeTo</span><span class="params">(BufferedSink sink)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        sink.write(content);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Returns a new request body that transmits &#123;<span class="doctag">@code</span> content&#125;. */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RequestBody <span class="title">create</span><span class="params">(<span class="keyword">final</span> @Nullable MediaType contentType, <span class="keyword">final</span> <span class="keyword">byte</span>[] content)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> create(contentType, content, <span class="number">0</span>, content.length);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Returns a new request body that transmits &#123;<span class="doctag">@code</span> content&#125;. */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RequestBody <span class="title">create</span><span class="params">(<span class="keyword">final</span> @Nullable MediaType contentType, <span class="keyword">final</span> <span class="keyword">byte</span>[] content,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">final</span> <span class="keyword">int</span> offset, <span class="keyword">final</span> <span class="keyword">int</span> byteCount)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (content == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"content == null"</span>);</span><br><span class="line">    Util.checkOffsetAndCount(content.length, offset, byteCount);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RequestBody() &#123;</span><br><span class="line">      <span class="meta">@Override</span> <span class="keyword">public</span> <span class="meta">@Nullable</span> <span class="function">MediaType <span class="title">contentType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> contentType;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">contentLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> byteCount;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeTo</span><span class="params">(BufferedSink sink)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        sink.write(content, offset, byteCount);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Returns a new request body that transmits the content of &#123;<span class="doctag">@code</span> file&#125;. */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RequestBody <span class="title">create</span><span class="params">(<span class="keyword">final</span> @Nullable MediaType contentType, <span class="keyword">final</span> File file)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"file == null"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RequestBody() &#123;</span><br><span class="line">      <span class="meta">@Override</span> <span class="keyword">public</span> <span class="meta">@Nullable</span> <span class="function">MediaType <span class="title">contentType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> contentType;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">contentLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> file.length();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeTo</span><span class="params">(BufferedSink sink)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Source source = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          source = Okio.source(file);</span><br><span class="line">          sink.writeAll(source);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          Util.closeQuietly(source);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>MultipartBody继承自RequestBody，通过MultipartBody构建RequestBody可以发送更加复杂的数据，比如<code>multipart/form-data</code>表单数据，通过MultipartBody的内部类Builder可以对MultipartBody进行配置（建造者模式）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Builder有几个重要的方法</span></span><br><span class="line"><span class="comment">// setType：设置MultipartBody请求的Content-Type，如果是表单数据则为MultipartBody.FORM；</span></span><br><span class="line"><span class="comment">// addPart：因为HTTP请求包括Header和Body，因此通过内部类Part封装号Header和Body，</span></span><br><span class="line"><span class="comment">// 将Part保存到RequestBody的List&lt;Part&gt;中，可能是为了一次发送多个请求；</span></span><br><span class="line"><span class="comment">// addFormDataPart：通过Part构造表单请求；</span></span><br><span class="line"><span class="comment">// build：最后通过build方法创建MultipartBody实例，参数来源于前面三个方法</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ByteString boundary;</span><br><span class="line">    <span class="keyword">private</span> MediaType type = MIXED;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Part&gt; parts = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 初始化一个随机的boundary，暂时还不知道有什么用</span></span><br><span class="line">      <span class="keyword">this</span>(UUID.randomUUID().toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(String boundary)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.boundary = ByteString.encodeUtf8(boundary);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Set the MIME type. Expected values for &#123;<span class="doctag">@code</span> type&#125; are &#123;<span class="doctag">@link</span> #MIXED&#125; (the default), &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment">     * #ALTERNATIVE&#125;, &#123;<span class="doctag">@link</span> #DIGEST&#125;, &#123;<span class="doctag">@link</span> #PARALLEL&#125; and &#123;<span class="doctag">@link</span> #FORM&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">setType</span><span class="params">(MediaType type)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (type == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"type == null"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!type.type().equals(<span class="string">"multipart"</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"multipart != "</span> + type);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.type = type;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Add a part to the body. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">addPart</span><span class="params">(RequestBody body)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> addPart(Part.create(body));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Add a part to the body. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">addPart</span><span class="params">(@Nullable Headers headers, RequestBody body)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> addPart(Part.create(headers, body));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Add a form data part to the body. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">addFormDataPart</span><span class="params">(String name, String value)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> addPart(Part.createFormData(name, value));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Add a form data part to the body. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">addFormDataPart</span><span class="params">(String name, @Nullable String filename, RequestBody body)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> addPart(Part.createFormData(name, filename, body));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Add a part to the body. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">addPart</span><span class="params">(Part part)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (part == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"part == null"</span>);</span><br><span class="line">      parts.add(part);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Assemble the specified parts into a request body. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MultipartBody <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (parts.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Multipart body must have at least one part."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> MultipartBody(boundary, type, parts);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Part用于构造包含Header和RequestBody的实例，简单来说就是用Header封装好要发送请求的首部参数，</span></span><br><span class="line"><span class="comment">// 用RequestBody封装要发送请求的请求数据</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Part</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Part <span class="title">create</span><span class="params">(RequestBody body)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> create(<span class="keyword">null</span>, body);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Part <span class="title">create</span><span class="params">(@Nullable Headers headers, RequestBody body)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (body == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"body == null"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (headers != <span class="keyword">null</span> &amp;&amp; headers.get(<span class="string">"Content-Type"</span>) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unexpected header: Content-Type"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (headers != <span class="keyword">null</span> &amp;&amp; headers.get(<span class="string">"Content-Length"</span>) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unexpected header: Content-Length"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Part(headers, body);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Part <span class="title">createFormData</span><span class="params">(String name, String value)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> createFormData(name, <span class="keyword">null</span>, RequestBody.create(<span class="keyword">null</span>, value));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Part <span class="title">createFormData</span><span class="params">(String name, @Nullable String filename, RequestBody body)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"name == null"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      StringBuilder disposition = <span class="keyword">new</span> StringBuilder(<span class="string">"form-data; name="</span>);</span><br><span class="line">      appendQuotedString(disposition, name);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (filename != <span class="keyword">null</span>) &#123;</span><br><span class="line">        disposition.append(<span class="string">"; filename="</span>);</span><br><span class="line">        appendQuotedString(disposition, filename);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> create(Headers.of(<span class="string">"Content-Disposition"</span>, disposition.toString()), body);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="meta">@Nullable</span> Headers headers;</span><br><span class="line">    <span class="keyword">final</span> RequestBody body;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Part</span><span class="params">(@Nullable Headers headers, RequestBody body)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.headers = headers;</span><br><span class="line">      <span class="keyword">this</span>.body = body;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@Nullable</span> <span class="function">Headers <span class="title">headers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> headers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RequestBody <span class="title">body</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> body;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>RequestBody包含了请求首部参数以及请求数据，接下来需要分析Request，Request连接了请求的主机url和RequestBody</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Request默认构造的是GET请求</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.method = <span class="string">"GET"</span>;</span><br><span class="line">      <span class="keyword">this</span>.headers = <span class="keyword">new</span> Headers.Builder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过url方法设置请求的主机名，如果直接传入的是HttpUrl也可以，传入String也可以，</span></span><br><span class="line"><span class="comment">// 但是会进行格式验证，会把ws:开头和wss:开头的主机名转换为http:和https:</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">url</span><span class="params">(HttpUrl url)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (url == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"url == null"</span>);</span><br><span class="line">      <span class="keyword">this</span>.url = url;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets the URL target of this request.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if &#123;<span class="doctag">@code</span> url&#125; is not a valid HTTP or HTTPS URL. Avoid this</span></span><br><span class="line"><span class="comment">     * exception by calling &#123;<span class="doctag">@link</span> HttpUrl#parse&#125;; it returns null for invalid URLs.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">url</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (url == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"url == null"</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Silently replace web socket URLs with HTTP URLs.</span></span><br><span class="line">      <span class="keyword">if</span> (url.regionMatches(<span class="keyword">true</span>, <span class="number">0</span>, <span class="string">"ws:"</span>, <span class="number">0</span>, <span class="number">3</span>)) &#123;</span><br><span class="line">        url = <span class="string">"http:"</span> + url.substring(<span class="number">3</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url.regionMatches(<span class="keyword">true</span>, <span class="number">0</span>, <span class="string">"wss:"</span>, <span class="number">0</span>, <span class="number">4</span>)) &#123;</span><br><span class="line">        url = <span class="string">"https:"</span> + url.substring(<span class="number">4</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> url(HttpUrl.get(url));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// post以及其他方法都是通过传入字符POST或者其他方式调用method</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> method(<span class="string">"GET"</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">head</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> method(<span class="string">"HEAD"</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">post</span><span class="params">(RequestBody body)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> method(<span class="string">"POST"</span>, body);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">delete</span><span class="params">(@Nullable RequestBody body)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> method(<span class="string">"DELETE"</span>, body);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> delete(Util.EMPTY_REQUEST);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">put</span><span class="params">(RequestBody body)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> method(<span class="string">"PUT"</span>, body);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">patch</span><span class="params">(RequestBody body)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> method(<span class="string">"PATCH"</span>, body);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// method方法还是将Request的属性设为method传入的值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">method</span><span class="params">(String method, @Nullable RequestBody body)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (method == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"method == null"</span>);</span><br><span class="line">      <span class="keyword">if</span> (method.length() == <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"method.length() == 0"</span>);</span><br><span class="line">      <span class="keyword">if</span> (body != <span class="keyword">null</span> &amp;&amp; !HttpMethod.permitsRequestBody(method)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"method "</span> + method + <span class="string">" must not have a request body."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (body == <span class="keyword">null</span> &amp;&amp; HttpMethod.requiresRequestBody(method)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"method "</span> + method + <span class="string">" must have a request body."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.method = method;</span><br><span class="line">      <span class="keyword">this</span>.body = body;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line"><span class="comment">// build()方法返回Request对象，并且传入了上面设置的属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Request <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (url == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"url == null"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Request(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其实Request对象也没有什么具体的功能，也是类似RequestBody封装了HTTP请求的一些参数，包括url请求主机名，method请求的方法，</span></span><br><span class="line"><span class="comment">// headers这里也有headers，也就是说我们可以在RequestBody中加入请求首部参数，也可以在Request中加入请求参数，而且Request会覆盖</span></span><br><span class="line"><span class="comment">// RequestBody的参数，在两个地方都封装Header，我觉得应该是为了复用，有些时候Header对于一些请求来说都是相同的，区别只是Body不同</span></span><br><span class="line"><span class="comment">// 因此在Request中设置Header能减少冗余的代码</span></span><br><span class="line">  Request(Builder builder) &#123;</span><br><span class="line">    <span class="keyword">this</span>.url = builder.url;</span><br><span class="line">    <span class="keyword">this</span>.method = builder.method;</span><br><span class="line">    <span class="keyword">this</span>.headers = builder.headers.build();</span><br><span class="line">    <span class="keyword">this</span>.body = builder.body;</span><br><span class="line">    <span class="keyword">this</span>.tags = Util.immutableMap(builder.tags);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>以上的RequestBody和Request实际上并没有任何复杂的功能，都是对一个完整的HTTP请求参数的封装，利用了建造者模式，同时将请求数据与请求首部参数以及请求方法和主机名进行解耦，使得开发人员可以灵活的使用各个模块组建一个完整的Request，如何发送这个Request，并接收回调则是在Call中进行的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// OkHttpClient.java 之前说过OkHttpClient是Call的工厂类，通过newCall方法传入上面构造的Request实例，</span></span><br><span class="line"><span class="comment">// 得到一个Call实例，具体的实现是通过RealCall.newRealCall方法</span></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Call <span class="title">newCall</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> RealCall.newRealCall(<span class="keyword">this</span>, request, <span class="keyword">false</span> <span class="comment">/* for web socket */</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>在看RealCall.newRealCall之前首先看一下Call</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据注释说明，我们直到Call是一个接口，Call接口的实现类能够完成具体的HTTP请求发送，且包含request/response对，</span></span><br><span class="line"><span class="comment">// 也就意味着可以通过Call的回调获取到服务器返回的数据，一个call不能被执行两次</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A call is a request that has been prepared for execution. A call can be canceled. As this object</span></span><br><span class="line"><span class="comment"> * represents a single request/response pair (stream), it cannot be executed twice.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Call</span> <span class="keyword">extends</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">  <span class="comment">/** Returns the original request that initiated this call. */</span></span><br><span class="line">  <span class="function">Request <span class="title">request</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// execute方法执行时会阻塞当前线程，直到处理完response</span></span><br><span class="line">  <span class="function">Response <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"><span class="comment">// enqueue方法会通过dispatcher安排request进入队列等待执行，执行完毕后通过Callback回调</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Callback responseCallback)</span></span>;</span><br><span class="line"><span class="comment">// 调用cancel方法可以取消request</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 判断call是否已经在执行，比如调用了execute或者enqueue方法</span></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">isExecuted</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 判断call是否被取消</span></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">isCanceled</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 返回整个call执行期间的耗时，包括DNS寻址、连接、写入request body、服务器处理、读取response body等过程</span></span><br><span class="line">  <span class="function">Timeout <span class="title">timeout</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 复制此call，利用clone得到的call可以继续执行</span></span><br><span class="line">  <span class="function">Call <span class="title">clone</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">interface</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="function">Call <span class="title">newCall</span><span class="params">(Request request)</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>RealCall实现了Call的接口，所以上面用到的方法都是在RealCall中实现的，首先看RealCall.newRealCall</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">RealCall</span><span class="params">(OkHttpClient client, Request originalRequest, <span class="keyword">boolean</span> forWebSocket)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.client = client;</span><br><span class="line">    <span class="keyword">this</span>.originalRequest = originalRequest;</span><br><span class="line">    <span class="keyword">this</span>.forWebSocket = forWebSocket;</span><br><span class="line">    <span class="keyword">this</span>.retryAndFollowUpInterceptor = <span class="keyword">new</span> RetryAndFollowUpInterceptor(client, forWebSocket);</span><br><span class="line">    <span class="keyword">this</span>.timeout = <span class="keyword">new</span> AsyncTimeout() &#123;</span><br><span class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">timedOut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cancel();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.timeout.timeout(client.callTimeoutMillis(), MILLISECONDS);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// newRealCall方法也是仅仅只做了参数传递的工作，最主要的参数是client和originalRequest</span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> RealCall <span class="title">newRealCall</span><span class="params">(OkHttpClient client, Request originalRequest, <span class="keyword">boolean</span> forWebSocket)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Safely publish the Call instance to the EventListener.</span></span><br><span class="line">    RealCall call = <span class="keyword">new</span> RealCall(client, originalRequest, forWebSocket);</span><br><span class="line">    call.eventListener = client.eventListenerFactory().create(call);</span><br><span class="line">    <span class="keyword">return</span> call;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>当我们调用call.execute方法时</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Response <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  <span class="comment">// synchronized锁，确保同一个Call不会被执行两次</span></span><br><span class="line">  <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (executed) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Already Executed"</span>);</span><br><span class="line">    executed = <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// captureCallStackTrace跟踪call执行的堆栈</span></span><br><span class="line">  captureCallStackTrace();</span><br><span class="line">  <span class="comment">// timeout.enter开始记录timeout</span></span><br><span class="line">  timeout.enter();</span><br><span class="line">  <span class="comment">// 将Call Start事件传递出去，通过自定义eventListenerFactory可以对事件进行处理</span></span><br><span class="line">  eventListener.callStart(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//  通过dispatcher调用executed执行请求发送，实际上只是把call加到一个队列中，并没有执行发送请求</span></span><br><span class="line">    client.dispatcher().executed(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">// 通过getResponseWithInterceptorChain获取服务器返回的response，这里才是真正的call被发送出去</span></span><br><span class="line">    Response result = getResponseWithInterceptorChain();</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Canceled"</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e = timeoutExit(e);</span><br><span class="line">    eventListener.callFailed(<span class="keyword">this</span>, e);</span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    client.dispatcher().finished(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Dispatcher.java client.dispatcher().executed(this);</span></span><br><span class="line">  <span class="comment">/** Used by &#123;<span class="doctag">@code</span> Call#execute&#125; to signal it is in-flight. */</span></span><br><span class="line">  <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">executed</span><span class="params">(RealCall call)</span> </span>&#123;</span><br><span class="line">    runningSyncCalls.add(call);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Interceptor也是一个接口，实现Interceptor接口的类可以对Request进行拦截，也就是通过</span></span><br><span class="line"><span class="comment">// 各种Interceptor来实现HTTP请求，比如这里的BridgeInterceptor、CacheInterceptor、</span></span><br><span class="line"><span class="comment">// ConnectInterceptor等等</span></span><br><span class="line">  <span class="function">Response <span class="title">getResponseWithInterceptorChain</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// Build a full stack of interceptors.</span></span><br><span class="line">    <span class="comment">// 注意默认构造的client.interceptors()为空</span></span><br><span class="line">    List&lt;Interceptor&gt; interceptors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    interceptors.addAll(client.interceptors());</span><br><span class="line">    interceptors.add(retryAndFollowUpInterceptor);</span><br><span class="line">    interceptors.add(<span class="keyword">new</span> BridgeInterceptor(client.cookieJar()));</span><br><span class="line">    interceptors.add(<span class="keyword">new</span> CacheInterceptor(client.internalCache()));</span><br><span class="line">    interceptors.add(<span class="keyword">new</span> ConnectInterceptor(client));</span><br><span class="line">    <span class="keyword">if</span> (!forWebSocket) &#123;</span><br><span class="line">      interceptors.addAll(client.networkInterceptors());</span><br><span class="line">    &#125;</span><br><span class="line">    interceptors.add(<span class="keyword">new</span> CallServerInterceptor(forWebSocket));</span><br><span class="line"><span class="comment">// 这里调用的时候，注意index为0，而RealInterceptorChain调用proceed方法</span></span><br><span class="line">    Interceptor.Chain chain = <span class="keyword">new</span> RealInterceptorChain(interceptors, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">0</span>,</span><br><span class="line">        originalRequest, <span class="keyword">this</span>, eventListener, client.connectTimeoutMillis(),</span><br><span class="line">        client.readTimeoutMillis(), client.writeTimeoutMillis());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> chain.proceed(originalRequest);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RealInterceptorChain.java chain.proceed(originalRequest)的位置，这里的index为0</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Response <span class="title">proceed</span><span class="params">(Request request, StreamAllocation streamAllocation, HttpCodec httpCodec,</span></span></span><br><span class="line"><span class="function"><span class="params">      RealConnection connection)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= interceptors.size()) <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line"></span><br><span class="line">    calls++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we already have a stream, confirm that the incoming request will use it.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.httpCodec != <span class="keyword">null</span> &amp;&amp; !<span class="keyword">this</span>.connection.supportsUrl(request.url())) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"network interceptor "</span> + interceptors.get(index - <span class="number">1</span>)</span><br><span class="line">          + <span class="string">" must retain the same host and port"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we already have a stream, confirm that this is the only call to chain.proceed().</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.httpCodec != <span class="keyword">null</span> &amp;&amp; calls &gt; <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"network interceptor "</span> + interceptors.get(index - <span class="number">1</span>)</span><br><span class="line">          + <span class="string">" must call proceed() exactly once"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 注意这里，创建了next RealInterceptorChain，index为1，而interceptors.get(index)拿的就是上文对应的retryAndFollowUpInterceptor</span></span><br><span class="line">    <span class="comment">// Call the next interceptor in the chain.</span></span><br><span class="line">    RealInterceptorChain next = <span class="keyword">new</span> RealInterceptorChain(interceptors, streamAllocation, httpCodec,</span><br><span class="line">        connection, index + <span class="number">1</span>, request, call, eventListener, connectTimeout, readTimeout,</span><br><span class="line">        writeTimeout);</span><br><span class="line">    Interceptor interceptor = interceptors.get(index);</span><br><span class="line">    <span class="comment">// 即response时通过BridgeInterceptor的intercept方法得到的</span></span><br><span class="line">    Response response = interceptor.intercept(next);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Confirm that the next interceptor made its required call to chain.proceed().</span></span><br><span class="line">    <span class="keyword">if</span> (httpCodec != <span class="keyword">null</span> &amp;&amp; index + <span class="number">1</span> &lt; interceptors.size() &amp;&amp; next.calls != <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"network interceptor "</span> + interceptor</span><br><span class="line">          + <span class="string">" must call proceed() exactly once"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Confirm that the intercepted response isn't null.</span></span><br><span class="line">    <span class="keyword">if</span> (response == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"interceptor "</span> + interceptor + <span class="string">" returned null"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (response.body() == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">          <span class="string">"interceptor "</span> + interceptor + <span class="string">" returned a response with no body"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RetryAndFollowUpInterceptor.java RetryAndFollowUpInterceptor用于请求重连，通过connectionPool</span></span><br><span class="line"><span class="comment">// 构建StreamAllocation，StreamAllocation用于管理连接、数据流以及Calls</span></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Request request = chain.request();</span><br><span class="line">    RealInterceptorChain realChain = (RealInterceptorChain) chain;</span><br><span class="line">    Call call = realChain.call();</span><br><span class="line">    EventListener eventListener = realChain.eventListener();</span><br><span class="line"></span><br><span class="line">    StreamAllocation streamAllocation = <span class="keyword">new</span> StreamAllocation(client.connectionPool(),</span><br><span class="line">        createAddress(request.url()), call, eventListener, callStackTrace);</span><br><span class="line">    <span class="keyword">this</span>.streamAllocation = streamAllocation;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> followUpCount = <span class="number">0</span>;</span><br><span class="line">    Response priorResponse = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 通过while死循环发送request</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (canceled) &#123;</span><br><span class="line">        streamAllocation.release();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Canceled"</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      Response response;</span><br><span class="line">      <span class="keyword">boolean</span> releaseConnection = <span class="keyword">true</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 这里的realChain交接给BridgeInterceptor</span></span><br><span class="line">        response = realChain.proceed(request, streamAllocation, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        releaseConnection = <span class="keyword">false</span>;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (RouteException e) &#123;</span><br><span class="line">        <span class="comment">// The attempt to connect via a route failed. The request will not have been sent.</span></span><br><span class="line">        <span class="keyword">if</span> (!recover(e.getLastConnectException(), streamAllocation, <span class="keyword">false</span>, request)) &#123;</span><br><span class="line">          <span class="keyword">throw</span> e.getFirstConnectException();</span><br><span class="line">        &#125;</span><br><span class="line">        releaseConnection = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="comment">// An attempt to communicate with a server failed. The request may have been sent.</span></span><br><span class="line">        <span class="keyword">boolean</span> requestSendStarted = !(e <span class="keyword">instanceof</span> ConnectionShutdownException);</span><br><span class="line">        <span class="keyword">if</span> (!recover(e, streamAllocation, requestSendStarted, request)) <span class="keyword">throw</span> e;</span><br><span class="line">        releaseConnection = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// We're throwing an unchecked exception. Release any resources.</span></span><br><span class="line">        <span class="keyword">if</span> (releaseConnection) &#123;</span><br><span class="line">          streamAllocation.streamFailed(<span class="keyword">null</span>);</span><br><span class="line">          streamAllocation.release();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Attach the prior response if it exists. Such responses never have a body.</span></span><br><span class="line">      <span class="keyword">if</span> (priorResponse != <span class="keyword">null</span>) &#123;</span><br><span class="line">        response = response.newBuilder()</span><br><span class="line">            .priorResponse(priorResponse.newBuilder()</span><br><span class="line">                    .body(<span class="keyword">null</span>)</span><br><span class="line">                    .build())</span><br><span class="line">            .build();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 仅仅在发送请求后接收到response，并且没有后续的request时返回，返回值为response</span></span><br><span class="line">      Request followUp;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        followUp = followUpRequest(response, streamAllocation.route());</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        streamAllocation.release();</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (followUp == <span class="keyword">null</span>) &#123;</span><br><span class="line">        streamAllocation.release();</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      closeQuietly(response.body());</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (++followUpCount &gt; MAX_FOLLOW_UPS) &#123;</span><br><span class="line">        streamAllocation.release();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ProtocolException(<span class="string">"Too many follow-up requests: "</span> + followUpCount);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (followUp.body() <span class="keyword">instanceof</span> UnrepeatableRequestBody) &#123;</span><br><span class="line">        streamAllocation.release();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> HttpRetryException(<span class="string">"Cannot retry streamed HTTP body"</span>, response.code());</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!sameConnection(response, followUp.url())) &#123;</span><br><span class="line">        streamAllocation.release();</span><br><span class="line">        streamAllocation = <span class="keyword">new</span> StreamAllocation(client.connectionPool(),</span><br><span class="line">            createAddress(followUp.url()), call, eventListener, callStackTrace);</span><br><span class="line">        <span class="keyword">this</span>.streamAllocation = streamAllocation;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (streamAllocation.codec() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Closing the body of "</span> + response</span><br><span class="line">            + <span class="string">" didn't close its backing stream. Bad interceptor?"</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      request = followUp;</span><br><span class="line">      priorResponse = response;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// BridgeInterceptor.java</span></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 通过chain得到request</span></span><br><span class="line">    Request userRequest = chain.request();</span><br><span class="line">    Request.Builder requestBuilder = userRequest.newBuilder();</span><br><span class="line">    <span class="comment">// 拿到body</span></span><br><span class="line">    RequestBody body = userRequest.body();</span><br><span class="line">    <span class="keyword">if</span> (body != <span class="keyword">null</span>) &#123;</span><br><span class="line">      MediaType contentType = body.contentType();</span><br><span class="line">      <span class="keyword">if</span> (contentType != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 重新构造header</span></span><br><span class="line">        requestBuilder.header(<span class="string">"Content-Type"</span>, contentType.toString());</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">long</span> contentLength = body.contentLength();</span><br><span class="line">      <span class="keyword">if</span> (contentLength != -<span class="number">1</span>) &#123;</span><br><span class="line">        requestBuilder.header(<span class="string">"Content-Length"</span>, Long.toString(contentLength));</span><br><span class="line">        requestBuilder.removeHeader(<span class="string">"Transfer-Encoding"</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        requestBuilder.header(<span class="string">"Transfer-Encoding"</span>, <span class="string">"chunked"</span>);</span><br><span class="line">        requestBuilder.removeHeader(<span class="string">"Content-Length"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (userRequest.header(<span class="string">"Host"</span>) == <span class="keyword">null</span>) &#123;</span><br><span class="line">      requestBuilder.header(<span class="string">"Host"</span>, hostHeader(userRequest.url(), <span class="keyword">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (userRequest.header(<span class="string">"Connection"</span>) == <span class="keyword">null</span>) &#123;</span><br><span class="line">      requestBuilder.header(<span class="string">"Connection"</span>, <span class="string">"Keep-Alive"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we add an "Accept-Encoding: gzip" header field we're responsible for also decompressing</span></span><br><span class="line">    <span class="comment">// the transfer stream.</span></span><br><span class="line">    <span class="keyword">boolean</span> transparentGzip = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (userRequest.header(<span class="string">"Accept-Encoding"</span>) == <span class="keyword">null</span> &amp;&amp; userRequest.header(<span class="string">"Range"</span>) == <span class="keyword">null</span>) &#123;</span><br><span class="line">      transparentGzip = <span class="keyword">true</span>;</span><br><span class="line">      requestBuilder.header(<span class="string">"Accept-Encoding"</span>, <span class="string">"gzip"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 构造带Cookies的header，默认Cookies为空</span></span><br><span class="line">    List&lt;Cookie&gt; cookies = cookieJar.loadForRequest(userRequest.url());</span><br><span class="line">    <span class="keyword">if</span> (!cookies.isEmpty()) &#123;</span><br><span class="line">      requestBuilder.header(<span class="string">"Cookie"</span>, cookieHeader(cookies));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (userRequest.header(<span class="string">"User-Agent"</span>) == <span class="keyword">null</span>) &#123;</span><br><span class="line">      requestBuilder.header(<span class="string">"User-Agent"</span>, Version.userAgent());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 注意这里的chain的index为1，所以再次调用chain.proceed会使index为2，即CacheInterceptor</span></span><br><span class="line">    Response networkResponse = chain.proceed(requestBuilder.build());</span><br><span class="line"></span><br><span class="line">    HttpHeaders.receiveHeaders(cookieJar, userRequest.url(), networkResponse.headers());</span><br><span class="line"></span><br><span class="line">    Response.Builder responseBuilder = networkResponse.newBuilder()</span><br><span class="line">        .request(userRequest);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (transparentGzip</span><br><span class="line">        &amp;&amp; <span class="string">"gzip"</span>.equalsIgnoreCase(networkResponse.header(<span class="string">"Content-Encoding"</span>))</span><br><span class="line">        &amp;&amp; HttpHeaders.hasBody(networkResponse)) &#123;</span><br><span class="line">      GzipSource responseBody = <span class="keyword">new</span> GzipSource(networkResponse.body().source());</span><br><span class="line">      Headers strippedHeaders = networkResponse.headers().newBuilder()</span><br><span class="line">          .removeAll(<span class="string">"Content-Encoding"</span>)</span><br><span class="line">          .removeAll(<span class="string">"Content-Length"</span>)</span><br><span class="line">          .build();</span><br><span class="line">      responseBuilder.headers(strippedHeaders);</span><br><span class="line">      String contentType = networkResponse.header(<span class="string">"Content-Type"</span>);</span><br><span class="line">      responseBuilder.body(<span class="keyword">new</span> RealResponseBody(contentType, -<span class="number">1L</span>, Okio.buffer(responseBody)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> responseBuilder.build();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CacheInterceptor.java CacheInterceptor用于从cache中取request以及向cache中写入response</span></span><br><span class="line"><span class="comment">// 如果cache中保存了相同request的response，那么可以实现断网也可以获取response</span></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Response cacheCandidate = cache != <span class="keyword">null</span></span><br><span class="line">        ? cache.get(chain.request())</span><br><span class="line">        : <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> now = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    CacheStrategy strategy = <span class="keyword">new</span> CacheStrategy.Factory(now, chain.request(), cacheCandidate).get();</span><br><span class="line">    Request networkRequest = strategy.networkRequest;</span><br><span class="line">    Response cacheResponse = strategy.cacheResponse;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cache != <span class="keyword">null</span>) &#123;</span><br><span class="line">      cache.trackResponse(strategy);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cacheCandidate != <span class="keyword">null</span> &amp;&amp; cacheResponse == <span class="keyword">null</span>) &#123;</span><br><span class="line">      closeQuietly(cacheCandidate.body()); <span class="comment">// The cache candidate wasn't applicable. Close it.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we're forbidden from using the network and the cache is insufficient, fail.</span></span><br><span class="line">    <span class="keyword">if</span> (networkRequest == <span class="keyword">null</span> &amp;&amp; cacheResponse == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Response.Builder()</span><br><span class="line">          .request(chain.request())</span><br><span class="line">          .protocol(Protocol.HTTP_1_1)</span><br><span class="line">          .code(<span class="number">504</span>)</span><br><span class="line">          .message(<span class="string">"Unsatisfiable Request (only-if-cached)"</span>)</span><br><span class="line">          .body(Util.EMPTY_RESPONSE)</span><br><span class="line">          .sentRequestAtMillis(-<span class="number">1L</span>)</span><br><span class="line">          .receivedResponseAtMillis(System.currentTimeMillis())</span><br><span class="line">          .build();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 没有网络则从cache中取对应的response</span></span><br><span class="line">    <span class="comment">// If we don't need the network, we're done.</span></span><br><span class="line">    <span class="keyword">if</span> (networkRequest == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> cacheResponse.newBuilder()</span><br><span class="line">          .cacheResponse(stripBody(cacheResponse))</span><br><span class="line">          .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Response networkResponse = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 注意这里同理chain交接给下一个ConnectInterceptor</span></span><br><span class="line">      networkResponse = chain.proceed(networkRequest);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="comment">// If we're crashing on I/O or otherwise, don't leak the cache body.</span></span><br><span class="line">      <span class="keyword">if</span> (networkResponse == <span class="keyword">null</span> &amp;&amp; cacheCandidate != <span class="keyword">null</span>) &#123;</span><br><span class="line">        closeQuietly(cacheCandidate.body());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we have a cache response too, then we're doing a conditional get.</span></span><br><span class="line">    <span class="keyword">if</span> (cacheResponse != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (networkResponse.code() == HTTP_NOT_MODIFIED) &#123;</span><br><span class="line">        Response response = cacheResponse.newBuilder()</span><br><span class="line">            .headers(combine(cacheResponse.headers(), networkResponse.headers()))</span><br><span class="line">            .sentRequestAtMillis(networkResponse.sentRequestAtMillis())</span><br><span class="line">            .receivedResponseAtMillis(networkResponse.receivedResponseAtMillis())</span><br><span class="line">            .cacheResponse(stripBody(cacheResponse))</span><br><span class="line">            .networkResponse(stripBody(networkResponse))</span><br><span class="line">            .build();</span><br><span class="line">        networkResponse.body().close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update the cache after combining headers but before stripping the</span></span><br><span class="line">        <span class="comment">// Content-Encoding header (as performed by initContentStream()).</span></span><br><span class="line">        cache.trackConditionalCacheHit();</span><br><span class="line">        cache.update(cacheResponse, response);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        closeQuietly(cacheResponse.body());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Response response = networkResponse.newBuilder()</span><br><span class="line">        .cacheResponse(stripBody(cacheResponse))</span><br><span class="line">        .networkResponse(stripBody(networkResponse))</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cache != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (HttpHeaders.hasBody(response) &amp;&amp; CacheStrategy.isCacheable(response, networkRequest)) &#123;</span><br><span class="line">        <span class="comment">// Offer this request to the cache.</span></span><br><span class="line">        CacheRequest cacheRequest = cache.put(response);</span><br><span class="line">        <span class="keyword">return</span> cacheWritingResponse(cacheRequest, response);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (HttpMethod.invalidatesCache(networkRequest.method())) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          cache.remove(networkRequest);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ignored) &#123;</span><br><span class="line">          <span class="comment">// The cache cannot be written.</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ConnectInterceptor.java StreamAllocation在RetryAndFollowUpInterceptor中被构造用于管理连接</span></span><br><span class="line"><span class="comment">// 因此ConnectInterceptor用于创建真实的HTTP连接RealConnection</span></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    RealInterceptorChain realChain = (RealInterceptorChain) chain;</span><br><span class="line">    Request request = realChain.request();</span><br><span class="line">    StreamAllocation streamAllocation = realChain.streamAllocation();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We need the network to satisfy this request. Possibly for validating a conditional GET.</span></span><br><span class="line">    <span class="keyword">boolean</span> doExtensiveHealthChecks = !request.method().equals(<span class="string">"GET"</span>);</span><br><span class="line">    HttpCodec httpCodec = streamAllocation.newStream(client, chain, doExtensiveHealthChecks);</span><br><span class="line">    RealConnection connection = streamAllocation.connection();</span><br><span class="line"><span class="comment">// 同理下一任是CallServerInterceptor，因为networkInterceptors为空</span></span><br><span class="line">    <span class="keyword">return</span> realChain.proceed(request, streamAllocation, httpCodec, connection);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CallServerInterceptor.java CallServerInterceptor是最后一任Interceptor，它的功能是发送网络Call到服务器</span></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    RealInterceptorChain realChain = (RealInterceptorChain) chain;</span><br><span class="line">    HttpCodec httpCodec = realChain.httpStream();</span><br><span class="line">    StreamAllocation streamAllocation = realChain.streamAllocation();</span><br><span class="line">    RealConnection connection = (RealConnection) realChain.connection();</span><br><span class="line">    Request request = realChain.request();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> sentRequestMillis = System.currentTimeMillis();</span><br><span class="line"><span class="comment">// 将HeadersStart和HeadersEnd通过eventListener传出去</span></span><br><span class="line">    realChain.eventListener().requestHeadersStart(realChain.call());</span><br><span class="line">    <span class="comment">// 发送请求的方式是通过httpCodec数据流，首先传出去request</span></span><br><span class="line">    httpCodec.writeRequestHeaders(request);</span><br><span class="line">    realChain.eventListener().requestHeadersEnd(realChain.call(), request);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后通过httpCodec读取response，其中涉及到request的首部是否包含Expect: 100-continue，不过问题不大</span></span><br><span class="line">    Response.Builder responseBuilder = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (HttpMethod.permitsRequestBody(request.method()) &amp;&amp; request.body() != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">// If there's a "Expect: 100-continue" header on the request, wait for a "HTTP/1.1 100</span></span><br><span class="line">      <span class="comment">// Continue" response before transmitting the request body. If we don't get that, return</span></span><br><span class="line">      <span class="comment">// what we did get (such as a 4xx response) without ever transmitting the request body.</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="string">"100-continue"</span>.equalsIgnoreCase(request.header(<span class="string">"Expect"</span>))) &#123;</span><br><span class="line">        <span class="comment">// 如果request的首部包含Expect: 100-continue参数，responseBuilder会被置为null</span></span><br><span class="line">        httpCodec.flushRequest();</span><br><span class="line">        realChain.eventListener().responseHeadersStart(realChain.call());</span><br><span class="line">        responseBuilder = httpCodec.readResponseHeaders(<span class="keyword">true</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (responseBuilder == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Write the request body if the "Expect: 100-continue" expectation was met.</span></span><br><span class="line">        realChain.eventListener().requestBodyStart(realChain.call());</span><br><span class="line">        <span class="keyword">long</span> contentLength = request.body().contentLength();</span><br><span class="line">        <span class="comment">// 通过httpCodec创建request数据流，可以通过CountingSink监控数据传输</span></span><br><span class="line">        CountingSink requestBodyOut =</span><br><span class="line">            <span class="keyword">new</span> CountingSink(httpCodec.createRequestBody(request, contentLength));</span><br><span class="line">        BufferedSink bufferedRequestBody = Okio.buffer(requestBodyOut);</span><br><span class="line"></span><br><span class="line">        request.body().writeTo(bufferedRequestBody);</span><br><span class="line">        bufferedRequestBody.close();</span><br><span class="line">        realChain.eventListener()</span><br><span class="line">            .requestBodyEnd(realChain.call(), requestBodyOut.successfulCount);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!connection.isMultiplexed()) &#123;</span><br><span class="line">        <span class="comment">// If the "Expect: 100-continue" expectation wasn't met, prevent the HTTP/1 connection</span></span><br><span class="line">        <span class="comment">// from being reused. Otherwise we're still obligated to transmit the request body to</span></span><br><span class="line">        <span class="comment">// leave the connection in a consistent state.</span></span><br><span class="line">        streamAllocation.noNewStreams();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    httpCodec.finishRequest();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (responseBuilder == <span class="keyword">null</span>) &#123;</span><br><span class="line">      realChain.eventListener().responseHeadersStart(realChain.call());</span><br><span class="line">      <span class="comment">// 通过httpCodec的readResponseHeaders读取response的header信息，此时responseBuilder不为空</span></span><br><span class="line">      responseBuilder = httpCodec.readResponseHeaders(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 通过responseBuilder构建完整的response</span></span><br><span class="line">    Response response = responseBuilder</span><br><span class="line">        .request(request)</span><br><span class="line">        .handshake(streamAllocation.connection().handshake())</span><br><span class="line">        .sentRequestAtMillis(sentRequestMillis)</span><br><span class="line">        .receivedResponseAtMillis(System.currentTimeMillis())</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> code = response.code();</span><br><span class="line">    <span class="keyword">if</span> (code == <span class="number">100</span>) &#123;</span><br><span class="line">      <span class="comment">// server sent a 100-continue even though we did not request one.</span></span><br><span class="line">      <span class="comment">// try again to read the actual response</span></span><br><span class="line">      responseBuilder = httpCodec.readResponseHeaders(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">      response = responseBuilder</span><br><span class="line">              .request(request)</span><br><span class="line">              .handshake(streamAllocation.connection().handshake())</span><br><span class="line">              .sentRequestAtMillis(sentRequestMillis)</span><br><span class="line">              .receivedResponseAtMillis(System.currentTimeMillis())</span><br><span class="line">              .build();</span><br><span class="line"></span><br><span class="line">      code = response.code();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    realChain.eventListener()</span><br><span class="line">            .responseHeadersEnd(realChain.call(), response);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (forWebSocket &amp;&amp; code == <span class="number">101</span>) &#123;</span><br><span class="line">      <span class="comment">// Connection is upgrading, but we need to ensure interceptors see a non-null response body.</span></span><br><span class="line">      response = response.newBuilder()</span><br><span class="line">          .body(Util.EMPTY_RESPONSE)</span><br><span class="line">          .build();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 通过httpCodec的openResponseBody创建读取response的body的数据流</span></span><br><span class="line">      response = response.newBuilder()</span><br><span class="line">          .body(httpCodec.openResponseBody(response))</span><br><span class="line">          .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"close"</span>.equalsIgnoreCase(response.request().header(<span class="string">"Connection"</span>))</span><br><span class="line">        || <span class="string">"close"</span>.equalsIgnoreCase(response.header(<span class="string">"Connection"</span>))) &#123;</span><br><span class="line">      streamAllocation.noNewStreams();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((code == <span class="number">204</span> || code == <span class="number">205</span>) &amp;&amp; response.body().contentLength() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ProtocolException(</span><br><span class="line">          <span class="string">"HTTP "</span> + code + <span class="string">" had non-zero Content-Length: "</span> + response.body().contentLength());</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 最后返回构建好的response</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>以上就是通过call.execute返回response的流程，这里可以发现并没有使用到Service或者多线程，因此在等待服务器响应的过程中会阻塞当前线程，因此Android中不宜直接使用execute方法。</p>
<blockquote>
<p>当我们调用call.enqueue方法时</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Callback responseCallback)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (executed) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Already Executed"</span>);</span><br><span class="line">    executed = <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  captureCallStackTrace();</span><br><span class="line">  eventListener.callStart(<span class="keyword">this</span>);</span><br><span class="line">  <span class="comment">// 通过dispatcher将responseCallback入队</span></span><br><span class="line">  client.dispatcher().enqueue(<span class="keyword">new</span> AsyncCall(responseCallback));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Dispatcher.java</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(AsyncCall call)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">      readyAsyncCalls.add(call);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用promoteAndExecute执行发送请求</span></span><br><span class="line">    promoteAndExecute();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Promotes eligible calls from &#123;<span class="doctag">@link</span> #readyAsyncCalls&#125; to &#123;<span class="doctag">@link</span> #runningAsyncCalls&#125; and runs</span></span><br><span class="line"><span class="comment">   * them on the executor service. Must not be called with synchronization because executing calls</span></span><br><span class="line"><span class="comment">   * can call into user code.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> true if the dispatcher is currently running calls.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">promoteAndExecute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">assert</span> (!Thread.holdsLock(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">    List&lt;AsyncCall&gt; executableCalls = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">boolean</span> isRunning;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">      <span class="comment">// 将readyAsyncCalls中的Call加入到executableCalls中</span></span><br><span class="line">      <span class="keyword">for</span> (Iterator&lt;AsyncCall&gt; i = readyAsyncCalls.iterator(); i.hasNext(); ) &#123;</span><br><span class="line">        AsyncCall asyncCall = i.next();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (runningAsyncCalls.size() &gt;= maxRequests) <span class="keyword">break</span>; <span class="comment">// Max capacity.</span></span><br><span class="line">        <span class="keyword">if</span> (runningCallsForHost(asyncCall) &gt;= maxRequestsPerHost) <span class="keyword">continue</span>; <span class="comment">// Host max capacity.</span></span><br><span class="line"></span><br><span class="line">        i.remove();</span><br><span class="line">        executableCalls.add(asyncCall);</span><br><span class="line">        runningAsyncCalls.add(asyncCall);</span><br><span class="line">      &#125;</span><br><span class="line">      isRunning = runningCallsCount() &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, size = executableCalls.size(); i &lt; size; i++) &#123;</span><br><span class="line">      AsyncCall asyncCall = executableCalls.get(i);</span><br><span class="line">      <span class="comment">// 通过遍历executableCalls，调用每一个Call的executeOn方法，其中使用到了初始化过程中引入的线程池executorService</span></span><br><span class="line">      asyncCall.executeOn(executorService());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> isRunning;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> ExecutorService <span class="title">executorService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (executorService == <span class="keyword">null</span>) &#123;</span><br><span class="line">      executorService = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE, <span class="number">60</span>, TimeUnit.SECONDS,</span><br><span class="line">          <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;(), Util.threadFactory(<span class="string">"OkHttp Dispatcher"</span>, <span class="keyword">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> executorService;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Attempt to enqueue this async call on &#123;<span class="doctag">@code</span> executorService&#125;. This will attempt to clean up</span></span><br><span class="line"><span class="comment">     * if the executor has been shut down by reporting the call as failed.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">executeOn</span><span class="params">(ExecutorService executorService)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">assert</span> (!Thread.holdsLock(client.dispatcher()));</span><br><span class="line">      <span class="keyword">boolean</span> success = <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 关键代码通过线程池executorService执行此Call，又因为AsyncCall继承自NamedRunnable，因此，调用</span></span><br><span class="line">        <span class="comment">// AsyncCall的run方法时，执行的是NamedRunnable的run</span></span><br><span class="line">        executorService.execute(<span class="keyword">this</span>);</span><br><span class="line">        success = <span class="keyword">true</span>;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (RejectedExecutionException e) &#123;</span><br><span class="line">        InterruptedIOException ioException = <span class="keyword">new</span> InterruptedIOException(<span class="string">"executor rejected"</span>);</span><br><span class="line">        ioException.initCause(e);</span><br><span class="line">        eventListener.callFailed(RealCall.<span class="keyword">this</span>, ioException);</span><br><span class="line">        responseCallback.onFailure(RealCall.<span class="keyword">this</span>, ioException);</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">          client.dispatcher().finished(<span class="keyword">this</span>); <span class="comment">// This call is no longer running!</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Runnable implementation which always sets its thread name.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">NamedRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">NamedRunnable</span><span class="params">(String format, Object... args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = Util.format(format, args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String oldName = Thread.currentThread().getName();</span><br><span class="line">    Thread.currentThread().setName(name);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 这里的execute由AsyncCall实现</span></span><br><span class="line">      execute();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      Thread.currentThread().setName(oldName);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> signalledCallback = <span class="keyword">false</span>;</span><br><span class="line">    timeout.enter();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 最终又回到了getResponseWithInterceptorChain方法，后面的不用多说</span></span><br><span class="line">      Response response = getResponseWithInterceptorChain();</span><br><span class="line">      <span class="keyword">if</span> (retryAndFollowUpInterceptor.isCanceled()) &#123;</span><br><span class="line">        signalledCallback = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// 与此同时我们通过responseCallback.onFailure将事件回调出去</span></span><br><span class="line">        responseCallback.onFailure(RealCall.<span class="keyword">this</span>, <span class="keyword">new</span> IOException(<span class="string">"Canceled"</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        signalledCallback = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// 同上</span></span><br><span class="line">        responseCallback.onResponse(RealCall.<span class="keyword">this</span>, response);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      e = timeoutExit(e);</span><br><span class="line">      <span class="keyword">if</span> (signalledCallback) &#123;</span><br><span class="line">        <span class="comment">// Do not signal the callback twice!</span></span><br><span class="line">        Platform.get().log(INFO, <span class="string">"Callback failure for "</span> + toLoggableString(), e);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        eventListener.callFailed(RealCall.<span class="keyword">this</span>, e);</span><br><span class="line">        responseCallback.onFailure(RealCall.<span class="keyword">this</span>, e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      client.dispatcher().finished(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>综上，OkHttp的源码中采用了非常多的有意思的设计模式，比如建造者模式，对于HTTP请求来说，我们需要一些公用的资源比如线程池、连接池等，将这些公共资源设置在OkHttpClient中，然后通过单例模式引用，节省了很多资源消耗；</p>
<p>对于RequestBody以及Request这种参数设置非常多的实体，通过建造者模式保存其参数；</p>
<p>在构建请求实体Call的时候采用了OkHttpClient工厂类，同时发送request的过程中利用了链式传递的方式，既增加了开发人员自定义的Interceptor，又可以利用原本定义好的Interceptor。</p>
<h2 id="3-Retrofit"><a href="#3-Retrofit" class="headerlink" title="3. Retrofit"></a>3. Retrofit</h2><p>Retrofit也是一个网络请求框架，且Retrofit是基于OkHttp的，实际网络请求的功能由OkHttp来实现，但是Retrofit实现了额外的功能，比如利用Gson进行数据实体化、兼容RxJava等等，是一个比较流行的网络请求工具。</p>
<h3 id="3-1-Retrofit使用"><a href="#3-1-Retrofit使用" class="headerlink" title="3.1 Retrofit使用"></a>3.1 Retrofit使用</h3><p>需要<code>implementation &#39;com.squareup.retrofit2:retrofit:2.6.0&#39;</code></p>
<p>以请求和风天气数据为例，通过GET请求，加上location参数和key参数，服务器返回json数据，我们将json数据实体化，首先看一下返回的json格式</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"HeWeather6"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"basic"</span>: &#123;</span><br><span class="line">                <span class="attr">"cid"</span>: <span class="string">"CN101010100"</span>,</span><br><span class="line">                <span class="attr">"location"</span>: <span class="string">"北京"</span>,</span><br><span class="line">                <span class="attr">"parent_city"</span>: <span class="string">"北京"</span>,</span><br><span class="line">                <span class="attr">"admin_area"</span>: <span class="string">"北京"</span>,</span><br><span class="line">                <span class="attr">"cnty"</span>: <span class="string">"中国"</span>,</span><br><span class="line">                <span class="attr">"lat"</span>: <span class="string">"39.90498734"</span>,</span><br><span class="line">                <span class="attr">"lon"</span>: <span class="string">"116.4052887"</span>,</span><br><span class="line">                <span class="attr">"tz"</span>: <span class="string">"+8.00"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"update"</span>: &#123;</span><br><span class="line">                <span class="attr">"loc"</span>: <span class="string">"2019-07-18 16:45"</span>,</span><br><span class="line">                <span class="attr">"utc"</span>: <span class="string">"2019-07-18 08:45"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"status"</span>: <span class="string">"ok"</span>,</span><br><span class="line">            <span class="attr">"now"</span>: &#123;</span><br><span class="line">                <span class="attr">"cloud"</span>: <span class="string">"10"</span>,</span><br><span class="line">                <span class="attr">"cond_code"</span>: <span class="string">"101"</span>,</span><br><span class="line">                <span class="attr">"cond_txt"</span>: <span class="string">"多云"</span>,</span><br><span class="line">                <span class="attr">"fl"</span>: <span class="string">"35"</span>,</span><br><span class="line">                <span class="attr">"hum"</span>: <span class="string">"54"</span>,</span><br><span class="line">                <span class="attr">"pcpn"</span>: <span class="string">"0.0"</span>,</span><br><span class="line">                <span class="attr">"pres"</span>: <span class="string">"1000"</span>,</span><br><span class="line">                <span class="attr">"tmp"</span>: <span class="string">"32"</span>,</span><br><span class="line">                <span class="attr">"vis"</span>: <span class="string">"6"</span>,</span><br><span class="line">                <span class="attr">"wind_deg"</span>: <span class="string">"279"</span>,</span><br><span class="line">                <span class="attr">"wind_dir"</span>: <span class="string">"西风"</span>,</span><br><span class="line">                <span class="attr">"wind_sc"</span>: <span class="string">"1"</span>,</span><br><span class="line">                <span class="attr">"wind_spd"</span>: <span class="string">"3"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>1.根据json数据构建我们的实体类WeatherEntity，这里使用的Android Studio的插件GsonFormat，可以直接根据json数据生成代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;HeWeather6Bean&gt; HeWeather6;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;HeWeather6Bean&gt; <span class="title">getHeWeather6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HeWeather6;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeWeather6</span><span class="params">(List&lt;HeWeather6Bean&gt; HeWeather6)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.HeWeather6 = HeWeather6;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 重写以下toString方法，便于后续观察数据传输是否正确</span></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HeWeather6.get(<span class="number">0</span>).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HeWeather6Bean</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * basic : &#123;"cid":"CN101010100","location":"北京","parent_city":"北京","admin_area":"北京","cnty":"中国","lat":"39.90498734","lon":"116.4052887","tz":"+8.00"&#125;</span></span><br><span class="line"><span class="comment">         * update : &#123;"loc":"2019-07-18 16:45","utc":"2019-07-18 08:45"&#125;</span></span><br><span class="line"><span class="comment">         * status : ok</span></span><br><span class="line"><span class="comment">         * now : &#123;"cloud":"10","cond_code":"101","cond_txt":"多云","fl":"35","hum":"54","pcpn":"0.0","pres":"1000","tmp":"32","vis":"6","wind_deg":"279","wind_dir":"西风","wind_sc":"1","wind_spd":"3"&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> BasicBean basic;</span><br><span class="line">        <span class="keyword">private</span> UpdateBean update;</span><br><span class="line">        <span class="keyword">private</span> String status;</span><br><span class="line">        <span class="keyword">private</span> NowBean now;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@NonNull</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> status + <span class="string">" \n "</span> + basic.toString() + <span class="string">" \n "</span> + update.toString() + <span class="string">" \n "</span> + now.toString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> BasicBean <span class="title">getBasic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> basic;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBasic</span><span class="params">(BasicBean basic)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.basic = basic;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> UpdateBean <span class="title">getUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> update;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpdate</span><span class="params">(UpdateBean update)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.update = update;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> status;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatus</span><span class="params">(String status)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.status = status;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> NowBean <span class="title">getNow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> now;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNow</span><span class="params">(NowBean now)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.now = now;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicBean</span> </span>&#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * cid : CN101010100</span></span><br><span class="line"><span class="comment">             * location : 北京</span></span><br><span class="line"><span class="comment">             * parent_city : 北京</span></span><br><span class="line"><span class="comment">             * admin_area : 北京</span></span><br><span class="line"><span class="comment">             * cnty : 中国</span></span><br><span class="line"><span class="comment">             * lat : 39.90498734</span></span><br><span class="line"><span class="comment">             * lon : 116.4052887</span></span><br><span class="line"><span class="comment">             * tz : +8.00</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> String cid;</span><br><span class="line">            <span class="keyword">private</span> String location;</span><br><span class="line">            <span class="keyword">private</span> String parent_city;</span><br><span class="line">            <span class="keyword">private</span> String admin_area;</span><br><span class="line">            <span class="keyword">private</span> String cnty;</span><br><span class="line">            <span class="keyword">private</span> String lat;</span><br><span class="line">            <span class="keyword">private</span> String lon;</span><br><span class="line">            <span class="keyword">private</span> String tz;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@NonNull</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"cid : "</span> + cid + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"location : "</span> + location + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"parent_city : "</span> + parent_city + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"admin_area : "</span> + admin_area + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"cnty : "</span> + cnty + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"lat : "</span> + lat + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"lon : "</span> + lon + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"tz : "</span> + tz + <span class="string">"\n"</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getCid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> cid;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCid</span><span class="params">(String cid)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.cid = cid;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getLocation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> location;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocation</span><span class="params">(String location)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.location = location;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getParent_city</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> parent_city;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParent_city</span><span class="params">(String parent_city)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.parent_city = parent_city;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getAdmin_area</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> admin_area;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAdmin_area</span><span class="params">(String admin_area)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.admin_area = admin_area;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getCnty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> cnty;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCnty</span><span class="params">(String cnty)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.cnty = cnty;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getLat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> lat;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLat</span><span class="params">(String lat)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.lat = lat;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getLon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> lon;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLon</span><span class="params">(String lon)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.lon = lon;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getTz</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> tz;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTz</span><span class="params">(String tz)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.tz = tz;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdateBean</span> </span>&#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * loc : 2019-07-18 16:45</span></span><br><span class="line"><span class="comment">             * utc : 2019-07-18 08:45</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> String loc;</span><br><span class="line">            <span class="keyword">private</span> String utc;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@NonNull</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"loc : "</span> + loc + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"utc : "</span> + utc + <span class="string">"\n"</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getLoc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> loc;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoc</span><span class="params">(String loc)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.loc = loc;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getUtc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> utc;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUtc</span><span class="params">(String utc)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.utc = utc;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NowBean</span> </span>&#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * cloud : 10</span></span><br><span class="line"><span class="comment">             * cond_code : 101</span></span><br><span class="line"><span class="comment">             * cond_txt : 多云</span></span><br><span class="line"><span class="comment">             * fl : 35</span></span><br><span class="line"><span class="comment">             * hum : 54</span></span><br><span class="line"><span class="comment">             * pcpn : 0.0</span></span><br><span class="line"><span class="comment">             * pres : 1000</span></span><br><span class="line"><span class="comment">             * tmp : 32</span></span><br><span class="line"><span class="comment">             * vis : 6</span></span><br><span class="line"><span class="comment">             * wind_deg : 279</span></span><br><span class="line"><span class="comment">             * wind_dir : 西风</span></span><br><span class="line"><span class="comment">             * wind_sc : 1</span></span><br><span class="line"><span class="comment">             * wind_spd : 3</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> String cloud;</span><br><span class="line">            <span class="keyword">private</span> String cond_code;</span><br><span class="line">            <span class="keyword">private</span> String cond_txt;</span><br><span class="line">            <span class="keyword">private</span> String fl;</span><br><span class="line">            <span class="keyword">private</span> String hum;</span><br><span class="line">            <span class="keyword">private</span> String pcpn;</span><br><span class="line">            <span class="keyword">private</span> String pres;</span><br><span class="line">            <span class="keyword">private</span> String tmp;</span><br><span class="line">            <span class="keyword">private</span> String vis;</span><br><span class="line">            <span class="keyword">private</span> String wind_deg;</span><br><span class="line">            <span class="keyword">private</span> String wind_dir;</span><br><span class="line">            <span class="keyword">private</span> String wind_sc;</span><br><span class="line">            <span class="keyword">private</span> String wind_spd;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@NonNull</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"cloud : "</span> + cloud + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"cond_code : "</span> + cond_code + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"cond_txt : "</span> + cond_txt + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"fl : "</span> + fl + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"hum : "</span> + hum + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"pcpn : "</span> + pcpn + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"pres : "</span> + pres + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"tmp : "</span> + tmp + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"vis : "</span> + vis + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"wind_deg : "</span> + wind_deg + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"wind_dir : "</span> + wind_dir + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"wind_sc : "</span> + wind_sc + <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"wind_spd : "</span> + wind_spd + <span class="string">"\n"</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getCloud</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> cloud;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCloud</span><span class="params">(String cloud)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.cloud = cloud;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getCond_code</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> cond_code;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCond_code</span><span class="params">(String cond_code)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.cond_code = cond_code;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getCond_txt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> cond_txt;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCond_txt</span><span class="params">(String cond_txt)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.cond_txt = cond_txt;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getFl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> fl;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFl</span><span class="params">(String fl)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.fl = fl;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getHum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> hum;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHum</span><span class="params">(String hum)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.hum = hum;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getPcpn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> pcpn;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPcpn</span><span class="params">(String pcpn)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.pcpn = pcpn;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getPres</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> pres;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPres</span><span class="params">(String pres)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.pres = pres;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getTmp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> tmp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTmp</span><span class="params">(String tmp)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.tmp = tmp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getVis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> vis;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVis</span><span class="params">(String vis)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.vis = vis;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getWind_deg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> wind_deg;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWind_deg</span><span class="params">(String wind_deg)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.wind_deg = wind_deg;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getWind_dir</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> wind_dir;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWind_dir</span><span class="params">(String wind_dir)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.wind_dir = wind_dir;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getWind_sc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> wind_sc;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWind_sc</span><span class="params">(String wind_sc)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.wind_sc = wind_sc;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getWind_spd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> wind_spd;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWind_spd</span><span class="params">(String wind_spd)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.wind_spd = wind_spd;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>2.构建请求Api，请求url格式为<code>https://free-api.heweather.net/s6/weather/now?location=beijing&amp;key=xxx</code>，因此将<code>https://free-api.heweather.net/s6/weather/</code>作为baseUrl（baseUrl必须以<code>/</code>结尾），<code>now?</code>作为请求url主体，后面的两个作为参数通过<code>@Query</code>加入</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Api</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 通过@Query("location")的方式可以自动将location=location连接到我们的请求url后面</span></span><br><span class="line">    <span class="meta">@GET</span>(<span class="string">"now?"</span>)</span><br><span class="line">    <span class="function">Call&lt;WeatherEntity&gt; <span class="title">getNowWeather</span><span class="params">(@Query(<span class="string">"location"</span>)</span> String location, @<span class="title">Query</span><span class="params">(<span class="string">"key"</span>)</span> String key)</span>;</span><br><span class="line">    <span class="comment">// 如果需要使用RxJava，需要修改返回类型为Observable</span></span><br><span class="line">    <span class="comment">// @GET("now?")</span></span><br><span class="line">    <span class="comment">// Observable&lt;WeatherEntity&gt; getNowWeather(@Query("location") String location, @Query("key") String key);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>3.构建Retrofit实体，需要<code>implementation &#39;com.squareup.retrofit2:converter-gson:2.6.0&#39;</code>，这里的版本号和Retrofit相同即可，如果需要RxJava2，则添加<code>implementation &#39;com.squareup.retrofit2:adapter-rxjava2:2.6.0&#39;</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">        .baseUrl(URL) <span class="comment">// 设置网络请求的公共Url地址</span></span><br><span class="line">        .addConverterFactory(GsonConverterFactory.create()) <span class="comment">// 设置数据解析器Gson</span></span><br><span class="line"><span class="comment">//      .addCallAdapterFactory(RxJava2CallAdapterFactory.create())   // 如果需要使用RxJava2     </span></span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>4.构造接口实体</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Api api = retrofit.create(Api<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>5.构造Call，这里的Call是retrofit2的Call，与okHttp的Call还是不一样的，如果是使用RxJava2，则为Observable</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">retrofit2.Call&lt;WeatherEntity&gt; call = api.getNowWeather(<span class="string">"beijing"</span>, KEY);</span><br><span class="line"><span class="comment">// Observable&lt;WeatherEntity&gt; observable = api.getNowWeather("beijing", KEY);</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>6.调用call.enqueue发送请求</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">call.enqueue(<span class="keyword">new</span> retrofit2.Callback&lt;WeatherEntity&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(retrofit2.Call&lt;WeatherEntity&gt; call, retrofit2.Response&lt;WeatherEntity&gt; response)</span> </span>&#123;</span><br><span class="line">        WeatherEntity entity = response.body();</span><br><span class="line">        textView.setText(entity.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(retrofit2.Call&lt;WeatherEntity&gt; call, Throwable t)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 如果是RxJava则按照设计在io线程请求数据，在mainThread主线程显示结果</span></span><br><span class="line"><span class="comment">// observable.subscribeOn(Schedulers.io())</span></span><br><span class="line"><span class="comment">//         .observeOn(AndroidSchedulers.mainThread())</span></span><br><span class="line"><span class="comment">//         .subscribe(new Consumer&lt;WeatherEntity&gt;() &#123;</span></span><br><span class="line"><span class="comment">//             @Override</span></span><br><span class="line"><span class="comment">//             public void accept(WeatherEntity weatherEntity) throws Exception &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//         &#125;, new Consumer&lt;Throwable&gt;() &#123;</span></span><br><span class="line"><span class="comment">//             @Override</span></span><br><span class="line"><span class="comment">//             public void accept(Throwable throwable) throws Exception &#123;</span></span><br><span class="line">                </span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//         &#125;);</span></span><br></pre></td></tr></table></figure>
<h3 id="3-2-Retrofit源码分析"><a href="#3-2-Retrofit源码分析" class="headerlink" title="3.2 Retrofit源码分析"></a>3.2 Retrofit源码分析</h3><p>Retrofit也采用了建造者模式，通过<code>new Retrofit.Builder()</code>初始化Retrofit对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Retrofit.java 这里初始化Retrofit对象的时候需要参数Platform，看来是和平台相关</span></span><br><span class="line"><span class="comment">// 我们直到OkHttp是Java和Android相同都可以使用的，但是OkHttp没有做平台判断，</span></span><br><span class="line"><span class="comment">// Retrofit需要平台判断应该是与后面一些功能相关</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>(Platform.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Platform.java</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Platform PLATFORM = findPlatform();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">static</span> Platform <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> PLATFORM;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 通过findPlatform获取平台信息</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Platform <span class="title">findPlatform</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 判断的方式简单粗暴，直接通过Class.forName找系统的类，通过抛出异常终止，妙啊妙啊</span></span><br><span class="line">      Class.forName(<span class="string">"android.os.Build"</span>);</span><br><span class="line">      <span class="keyword">if</span> (Build.VERSION.SDK_INT != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 这里只看Android类</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Android();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException ignored) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 同理对Java平台</span></span><br><span class="line">      Class.forName(<span class="string">"java.util.Optional"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Java8();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException ignored) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Platform();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Android继承自Platform</span></span><br><span class="line">  <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Android</span> <span class="keyword">extends</span> <span class="title">Platform</span> </span>&#123;</span><br><span class="line">    <span class="meta">@IgnoreJRERequirement</span> <span class="comment">// Guarded by API check.</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isDefaultMethod</span><span class="params">(Method method)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (Build.VERSION.SDK_INT &lt; <span class="number">24</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> method.isDefault();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// defaultCallbackExecutor返回了MainThreadExecutor，Executor是一个接口，</span></span><br><span class="line">    <span class="comment">// 实现此接口的类需要完成execute方法，通过execute方法可以运行Runnable对象</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Executor <span class="title">defaultCallbackExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> MainThreadExecutor();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 两个关键的类CallAdapter和Converter，CallAdapter用于转换Call的类型，以RxJava2CallAdapterFactory为例，</span></span><br><span class="line">    <span class="comment">// 如果在构造Retrofit对象时加上了addCallAdapterFactory(RxJava2CallAdapterFactory.create())，</span></span><br><span class="line">    <span class="comment">// 则需要对Api类中的方法返回值类型进行修改，改为RxJava支持的Observable类型，然后就可以通过RxJava的方式发送请求；</span></span><br><span class="line">    <span class="comment">// Converter用于对Response的Body进行格式转换，以GsonConverterFactory为例，可以将Response的Body中的json数据实体化，</span></span><br><span class="line">    <span class="comment">// 直接转换为我们定义的对象。</span></span><br><span class="line">    <span class="meta">@Override</span> List&lt;? extends CallAdapter.Factory&gt; defaultCallAdapterFactories(</span><br><span class="line">        <span class="meta">@Nullable</span> Executor callbackExecutor) &#123;</span><br><span class="line">      <span class="keyword">if</span> (callbackExecutor == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line">      <span class="comment">// 根据BuildSDKVersion决定用DefaultCallAdapterFactory还是CompletableFutureCallAdapterFactory</span></span><br><span class="line">      <span class="comment">// 暂时用不到，稍后再分析</span></span><br><span class="line">      DefaultCallAdapterFactory executorFactory = <span class="keyword">new</span> DefaultCallAdapterFactory(callbackExecutor);</span><br><span class="line">      <span class="keyword">return</span> Build.VERSION.SDK_INT &gt;= <span class="number">24</span></span><br><span class="line">        ? asList(CompletableFutureCallAdapterFactory.INSTANCE, executorFactory)</span><br><span class="line">        : singletonList(executorFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">int</span> <span class="title">defaultCallAdapterFactoriesSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> Build.VERSION.SDK_INT &gt;= <span class="number">24</span> ? <span class="number">2</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> List&lt;? extends Converter.Factory&gt; defaultConverterFactories() &#123;</span><br><span class="line">      <span class="comment">// 同CallAdapter</span></span><br><span class="line">      <span class="keyword">return</span> Build.VERSION.SDK_INT &gt;= <span class="number">24</span></span><br><span class="line">          ? singletonList(OptionalConverterFactory.INSTANCE)</span><br><span class="line">          : Collections.&lt;Converter.Factory&gt;emptyList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">int</span> <span class="title">defaultConverterFactoriesSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> Build.VERSION.SDK_INT &gt;= <span class="number">24</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// MainThreadExecutor实现了Executor接口，通过主线程的Handler运行Runnable对象</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MainThreadExecutor</span> <span class="keyword">implements</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">final</span> Handler handler = <span class="keyword">new</span> Handler(Looper.getMainLooper());</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">        handler.post(r);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Retrofit.java Retrofit初始化仅保存了平台信息</span></span><br><span class="line">    Builder(Platform platform) &#123;</span><br><span class="line">      <span class="keyword">this</span>.platform = platform;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后是baseUrl方法</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Set the API base URL.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #baseUrl(HttpUrl)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">baseUrl</span><span class="params">(String baseUrl)</span> </span>&#123;</span><br><span class="line">      checkNotNull(baseUrl, <span class="string">"baseUrl == null"</span>);</span><br><span class="line">      <span class="keyword">return</span> baseUrl(HttpUrl.get(baseUrl));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 对baseUrl的格式进行判断，必须以 / 结尾，否则抛出异常</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">baseUrl</span><span class="params">(HttpUrl baseUrl)</span> </span>&#123;</span><br><span class="line">      checkNotNull(baseUrl, <span class="string">"baseUrl == null"</span>);</span><br><span class="line">      List&lt;String&gt; pathSegments = baseUrl.pathSegments();</span><br><span class="line">      <span class="keyword">if</span> (!<span class="string">""</span>.equals(pathSegments.get(pathSegments.size() - <span class="number">1</span>))) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"baseUrl must end in /: "</span> + baseUrl);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.baseUrl = baseUrl;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接下来是addConverterFactory方法，看起没有什么复杂的功能，只是将Converter.Factory的实现加入了list中，</span></span><br><span class="line"><span class="comment">// 我们稍后再看GsonConverterFactory的源码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Converter.Factory&gt; converterFactories = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Add converter factory for serialization and deserialization of objects. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">addConverterFactory</span><span class="params">(Converter.Factory factory)</span> </span>&#123;</span><br><span class="line">      converterFactories.add(checkNotNull(factory, <span class="string">"factory == null"</span>));</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后是build方法</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create the &#123;<span class="doctag">@link</span> Retrofit&#125; instance using the configured values.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Note: If neither &#123;<span class="doctag">@link</span> #client&#125; nor &#123;<span class="doctag">@link</span> #callFactory&#125; is called a default &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment">     * OkHttpClient&#125; will be created and used.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Retrofit <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (baseUrl == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Base URL required."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 注意这里初始化了一个OkHttpClient对象</span></span><br><span class="line">      okhttp3.Call.Factory callFactory = <span class="keyword">this</span>.callFactory;</span><br><span class="line">      <span class="keyword">if</span> (callFactory == <span class="keyword">null</span>) &#123;</span><br><span class="line">        callFactory = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      Executor callbackExecutor = <span class="keyword">this</span>.callbackExecutor;</span><br><span class="line">      <span class="keyword">if</span> (callbackExecutor == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 我们知道默认情况下，在Android平台，这个callbackExecutor是主线程的Executor</span></span><br><span class="line">        callbackExecutor = platform.defaultCallbackExecutor();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Make a defensive copy of the adapters and add the default Call adapter.</span></span><br><span class="line">      <span class="comment">// callAdapterFactories包括通过Retrofit初始化调用addCallAdapterFactory加入的CallAdapter.Factory，</span></span><br><span class="line">      <span class="comment">// 还包括Android平台默认的platform.defaultCallAdapterFactories</span></span><br><span class="line">      List&lt;CallAdapter.Factory&gt; callAdapterFactories = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="keyword">this</span>.callAdapterFactories);</span><br><span class="line">      callAdapterFactories.addAll(platform.defaultCallAdapterFactories(callbackExecutor));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Make a defensive copy of the converters.</span></span><br><span class="line">      <span class="comment">// converterFactories同理，但是多一个BuiltInConverters，暂时不去管不同的Converter的具体实现</span></span><br><span class="line">      List&lt;Converter.Factory&gt; converterFactories = <span class="keyword">new</span> ArrayList&lt;&gt;(</span><br><span class="line">          <span class="number">1</span> + <span class="keyword">this</span>.converterFactories.size() + platform.defaultConverterFactoriesSize());</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Add the built-in converter factory first. This prevents overriding its behavior but also</span></span><br><span class="line">      <span class="comment">// ensures correct behavior when using converters that consume all types.</span></span><br><span class="line">      converterFactories.add(<span class="keyword">new</span> BuiltInConverters());</span><br><span class="line">      converterFactories.addAll(<span class="keyword">this</span>.converterFactories);</span><br><span class="line">      converterFactories.addAll(platform.defaultConverterFactories());</span><br><span class="line">      <span class="comment">// 最后完成了Retrofit对象的初始化，引入了几个参数，包括OkHttpClient对象，baseUrl，CallAdapter，</span></span><br><span class="line">      <span class="comment">// Converter以及Executor，validateEagerly默认为false</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Retrofit(callFactory, baseUrl, unmodifiableList(converterFactories),</span><br><span class="line">          unmodifiableList(callAdapterFactories), callbackExecutor, validateEagerly);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>接下来是<code>Api api = retrofit.create(Api.class);</code>，Retrofit通过调用create方法将接口类实例化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>) <span class="comment">// Single-interface proxy creation guarded by parameter safety.</span></span><br><span class="line">  <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">create</span><span class="params">(<span class="keyword">final</span> Class&lt;T&gt; service)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// validateServiceInterface主要判断service是否为接口且没有继承自其他接口</span></span><br><span class="line">    Utils.validateServiceInterface(service);</span><br><span class="line">    <span class="comment">// validateEagerly为false</span></span><br><span class="line">    <span class="keyword">if</span> (validateEagerly) &#123;</span><br><span class="line">      eagerlyValidateMethods(service);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过代理的方式反射接口，将其实例化</span></span><br><span class="line">    <span class="keyword">return</span> (T) Proxy.newProxyInstance(service.getClassLoader(), <span class="keyword">new</span> Class&lt;?&gt;[] &#123; service &#125;,</span><br><span class="line">        <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">          <span class="comment">// 这里不同的平台有不同的方式</span></span><br><span class="line">          <span class="keyword">private</span> <span class="keyword">final</span> Platform platform = Platform.get();</span><br><span class="line">          <span class="keyword">private</span> <span class="keyword">final</span> Object[] emptyArgs = <span class="keyword">new</span> Object[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">          <span class="meta">@Override</span> <span class="keyword">public</span> <span class="meta">@Nullable</span> <span class="function">Object <span class="title">invoke</span><span class="params">(Object proxy, Method method,</span></span></span><br><span class="line"><span class="function"><span class="params">              @Nullable Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">            <span class="comment">// If the method is a method from Object then defer to normal invocation.</span></span><br><span class="line">            <span class="comment">// 这里的invoke，Object方法都走这里，比如equals、toString、hashCode什么的</span></span><br><span class="line">            <span class="keyword">if</span> (method.getDeclaringClass() == Object<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> method.invoke(<span class="keyword">this</span>, args);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果是Java Web项目则通过platform.invokeDefaultMethod</span></span><br><span class="line">            <span class="keyword">if</span> (platform.isDefaultMethod(method)) &#123;</span><br><span class="line">              <span class="keyword">return</span> platform.invokeDefaultMethod(method, service, proxy, args);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果是Android则通过loadServiceMethod</span></span><br><span class="line">            <span class="keyword">return</span> loadServiceMethod(method).invoke(args != <span class="keyword">null</span> ? args : emptyArgs);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">eagerlyValidateMethods</span><span class="params">(Class&lt;?&gt; service)</span> </span>&#123;</span><br><span class="line">    Platform platform = Platform.get();</span><br><span class="line">    <span class="keyword">for</span> (Method method : service.getDeclaredMethods()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!platform.isDefaultMethod(method) &amp;&amp; !Modifier.isStatic(method.getModifiers())) &#123;</span><br><span class="line">        loadServiceMethod(method);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ServiceMethod&lt;?&gt; loadServiceMethod(Method method) &#123;</span><br><span class="line">    ServiceMethod&lt;?&gt; result = serviceMethodCache.get(method);</span><br><span class="line">    <span class="keyword">if</span> (result != <span class="keyword">null</span>) <span class="keyword">return</span> result;</span><br><span class="line">    <span class="comment">// 默认result为空，通过单例模式取result，简而言之就是得到接口里面定义的方法</span></span><br><span class="line">    <span class="comment">// 并且在方法被调用的时候将参数传入，从而得到结果</span></span><br><span class="line">    <span class="keyword">synchronized</span> (serviceMethodCache) &#123;</span><br><span class="line">      result = serviceMethodCache.get(method);</span><br><span class="line">      <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// </span></span><br><span class="line">        result = ServiceMethod.parseAnnotations(<span class="keyword">this</span>, method);</span><br><span class="line">        serviceMethodCache.put(method, result);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ServiceMethod.java</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceMethod</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// parseAnnotations还是通过RequestFactory解析接口的方法，因为我们定义的方法是包含注解的，所以必定需要通过</span></span><br><span class="line">  <span class="comment">// 解析注解的值来控制方法的参数</span></span><br><span class="line">  <span class="keyword">static</span> &lt;T&gt; <span class="function">ServiceMethod&lt;T&gt; <span class="title">parseAnnotations</span><span class="params">(Retrofit retrofit, Method method)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// RequestFactory看名字就知道应该和构建HTTP请求相关，应该是将retrofit定义的baseUrl等信息以及接口定义的方法，</span></span><br><span class="line">    <span class="comment">// 包括注解里的信息整合</span></span><br><span class="line">    RequestFactory requestFactory = RequestFactory.parseAnnotations(retrofit, method);</span><br><span class="line"></span><br><span class="line">    Type returnType = method.getGenericReturnType();</span><br><span class="line">    <span class="keyword">if</span> (Utils.hasUnresolvableType(returnType)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> methodError(method,</span><br><span class="line">          <span class="string">"Method return type must not include a type variable or wildcard: %s"</span>, returnType);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (returnType == <span class="keyword">void</span><span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">throw</span> methodError(method, <span class="string">"Service methods cannot return void."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// HttpServiceMethod继承自ServiceMethod，实现invoke方法，即最终我们调用接口中的方式时将参数传入</span></span><br><span class="line">    <span class="keyword">return</span> HttpServiceMethod.parseAnnotations(retrofit, method, requestFactory);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">abstract</span> <span class="meta">@Nullable</span> <span class="function">T <span class="title">invoke</span><span class="params">(Object[] args)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// RequestFactory.java</span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> RequestFactory <span class="title">parseAnnotations</span><span class="params">(Retrofit retrofit, Method method)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Builder(retrofit, method).build();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// build方法构建的实例</span></span><br><span class="line">    <span class="function">RequestFactory <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (Annotation annotation : methodAnnotations) &#123;</span><br><span class="line">        <span class="comment">// 在parseMethodAnnotation中处理接口方法的注解，这里仅保存了请求方法以及</span></span><br><span class="line">        <span class="comment">// 方法注解中的value</span></span><br><span class="line">        parseMethodAnnotation(annotation);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (httpMethod == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> methodError(method, <span class="string">"HTTP method annotation is required (e.g., @GET, @POST, etc.)."</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!hasBody) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isMultipart) &#123;</span><br><span class="line">          <span class="keyword">throw</span> methodError(method,</span><br><span class="line">              <span class="string">"Multipart can only be specified on HTTP methods with request body (e.g., @POST)."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isFormEncoded) &#123;</span><br><span class="line">          <span class="keyword">throw</span> methodError(method, <span class="string">"FormUrlEncoded can only be specified on HTTP methods with "</span></span><br><span class="line">              + <span class="string">"request body (e.g., @POST)."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// parameterAnnotationsArray是通过Method传过来的，简单来说就是方法的参数注解，</span></span><br><span class="line">      <span class="comment">// 即我们使用的@Query("location")和@Query("key")</span></span><br><span class="line">      <span class="keyword">int</span> parameterCount = parameterAnnotationsArray.length;</span><br><span class="line">      parameterHandlers = <span class="keyword">new</span> ParameterHandler&lt;?&gt;[parameterCount];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>, lastParameter = parameterCount - <span class="number">1</span>; p &lt; parameterCount; p++) &#123;</span><br><span class="line">        <span class="comment">// 通过parseParameter方法处理参数注解，并保存在parameterHandlers中</span></span><br><span class="line">        parameterHandlers[p] =</span><br><span class="line">            parseParameter(p, parameterTypes[p], parameterAnnotationsArray[p], p == lastParameter);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (relativeUrl == <span class="keyword">null</span> &amp;&amp; !gotUrl) &#123;</span><br><span class="line">        <span class="keyword">throw</span> methodError(method, <span class="string">"Missing either @%s URL or @Url parameter."</span>, httpMethod);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!isFormEncoded &amp;&amp; !isMultipart &amp;&amp; !hasBody &amp;&amp; gotBody) &#123;</span><br><span class="line">        <span class="keyword">throw</span> methodError(method, <span class="string">"Non-body HTTP method cannot contain @Body."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (isFormEncoded &amp;&amp; !gotField) &#123;</span><br><span class="line">        <span class="keyword">throw</span> methodError(method, <span class="string">"Form-encoded method must contain at least one @Field."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (isMultipart &amp;&amp; !gotPart) &#123;</span><br><span class="line">        <span class="keyword">throw</span> methodError(method, <span class="string">"Multipart method must contain at least one @Part."</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> RequestFactory(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// parseMethodAnnotation处理的是方法注解即 @GET("now?") ，now?作为value</span></span><br><span class="line">    <span class="comment">// 根据不同的注解类型，构造不同的请求方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseMethodAnnotation</span><span class="params">(Annotation annotation)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (annotation <span class="keyword">instanceof</span> DELETE) &#123;</span><br><span class="line">        parseHttpMethodAndPath(<span class="string">"DELETE"</span>, ((DELETE) annotation).value(), <span class="keyword">false</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (annotation <span class="keyword">instanceof</span> GET) &#123;</span><br><span class="line">        parseHttpMethodAndPath(<span class="string">"GET"</span>, ((GET) annotation).value(), <span class="keyword">false</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (annotation <span class="keyword">instanceof</span> HEAD) &#123;</span><br><span class="line">        parseHttpMethodAndPath(<span class="string">"HEAD"</span>, ((HEAD) annotation).value(), <span class="keyword">false</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (annotation <span class="keyword">instanceof</span> PATCH) &#123;</span><br><span class="line">        parseHttpMethodAndPath(<span class="string">"PATCH"</span>, ((PATCH) annotation).value(), <span class="keyword">true</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (annotation <span class="keyword">instanceof</span> POST) &#123;</span><br><span class="line">        parseHttpMethodAndPath(<span class="string">"POST"</span>, ((POST) annotation).value(), <span class="keyword">true</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (annotation <span class="keyword">instanceof</span> PUT) &#123;</span><br><span class="line">        parseHttpMethodAndPath(<span class="string">"PUT"</span>, ((PUT) annotation).value(), <span class="keyword">true</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (annotation <span class="keyword">instanceof</span> OPTIONS) &#123;</span><br><span class="line">        parseHttpMethodAndPath(<span class="string">"OPTIONS"</span>, ((OPTIONS) annotation).value(), <span class="keyword">false</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (annotation <span class="keyword">instanceof</span> HTTP) &#123;</span><br><span class="line">        HTTP http = (HTTP) annotation;</span><br><span class="line">        parseHttpMethodAndPath(http.method(), http.path(), http.hasBody());</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (annotation <span class="keyword">instanceof</span> retrofit2.http.Headers) &#123;</span><br><span class="line">        String[] headersToParse = ((retrofit2.http.Headers) annotation).value();</span><br><span class="line">        <span class="keyword">if</span> (headersToParse.length == <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> methodError(method, <span class="string">"@Headers annotation is empty."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        headers = parseHeaders(headersToParse);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (annotation <span class="keyword">instanceof</span> Multipart) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isFormEncoded) &#123;</span><br><span class="line">          <span class="keyword">throw</span> methodError(method, <span class="string">"Only one encoding annotation is allowed."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        isMultipart = <span class="keyword">true</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (annotation <span class="keyword">instanceof</span> FormUrlEncoded) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isMultipart) &#123;</span><br><span class="line">          <span class="keyword">throw</span> methodError(method, <span class="string">"Only one encoding annotation is allowed."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        isFormEncoded = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseHttpMethodAndPath</span><span class="params">(String httpMethod, String value, <span class="keyword">boolean</span> hasBody)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.httpMethod != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> methodError(method, <span class="string">"Only one HTTP method is allowed. Found: %s and %s."</span>,</span><br><span class="line">            <span class="keyword">this</span>.httpMethod, httpMethod);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 保存了请求方法</span></span><br><span class="line">      <span class="keyword">this</span>.httpMethod = httpMethod;</span><br><span class="line">      <span class="keyword">this</span>.hasBody = hasBody;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (value.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Get the relative URL path and existing query string, if present.</span></span><br><span class="line">      <span class="comment">// 这里的判断是确保@GET("now?location=&#123;location&#125;&amp;key=&#123;key&#125;")其中的location=&#123;location&#125;&amp;key=&#123;key&#125;不会出现，</span></span><br><span class="line">      <span class="comment">// 因为需要通过@Query注解构建，所以这里不允许使用</span></span><br><span class="line">      <span class="keyword">int</span> question = value.indexOf(<span class="string">'?'</span>);</span><br><span class="line">      <span class="keyword">if</span> (question != -<span class="number">1</span> &amp;&amp; question &lt; value.length() - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// Ensure the query string does not have any named parameters.</span></span><br><span class="line">        String queryParams = value.substring(question + <span class="number">1</span>);</span><br><span class="line">        Matcher queryParamMatcher = PARAM_URL_REGEX.matcher(queryParams);</span><br><span class="line">        <span class="keyword">if</span> (queryParamMatcher.find()) &#123;</span><br><span class="line">          <span class="keyword">throw</span> methodError(method, <span class="string">"URL query string \"%s\" must not have replace block. "</span></span><br><span class="line">              + <span class="string">"For dynamic query parameters use @Query."</span>, queryParams);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.relativeUrl = value;</span><br><span class="line">      <span class="keyword">this</span>.relativeUrlParamNames = parsePathParameters(value);</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line"><span class="comment">// parseParameter方法，对于同一个参数似乎可以使用多个参数注解Annotation[] annotations</span></span><br><span class="line">    <span class="keyword">private</span> <span class="meta">@Nullable</span> ParameterHandler&lt;?&gt; parseParameter(</span><br><span class="line">        <span class="keyword">int</span> p, Type parameterType, <span class="meta">@Nullable</span> Annotation[] annotations, <span class="keyword">boolean</span> allowContinuation) &#123;</span><br><span class="line">      ParameterHandler&lt;?&gt; result = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">if</span> (annotations != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Annotation annotation : annotations) &#123;</span><br><span class="line">          <span class="comment">// 调用parseParameterAnnotation对参数注解进行处理，其中还包括传入的参数类型parameterType</span></span><br><span class="line">          ParameterHandler&lt;?&gt; annotationAction =</span><br><span class="line">              parseParameterAnnotation(p, parameterType, annotations, annotation);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (annotationAction == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> parameterError(method, p,</span><br><span class="line">                <span class="string">"Multiple Retrofit annotations found, only one allowed."</span>);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          result = annotationAction;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (allowContinuation) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (Utils.getRawType(parameterType) == Continuation<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">              isKotlinSuspendFunction = <span class="keyword">true</span>;</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">catch</span> (NoClassDefFoundError ignored) &#123;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> parameterError(method, p, <span class="string">"No Retrofit annotation found."</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// parseParameterAnnotation方法，这里判断参数注解的类型，我们只看@Query</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">private</span> ParameterHandler&lt;?&gt; parseParameterAnnotation(</span><br><span class="line">        <span class="keyword">int</span> p, Type type, Annotation[] annotations, Annotation annotation) &#123;</span><br><span class="line">      <span class="keyword">if</span> (annotation <span class="keyword">instanceof</span> Url) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (annotation <span class="keyword">instanceof</span> Path) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (annotation <span class="keyword">instanceof</span> Query) &#123;</span><br><span class="line">        validateResolvableType(p, type);</span><br><span class="line">        Query query = (Query) annotation;</span><br><span class="line">        String name = query.value();</span><br><span class="line">        <span class="keyword">boolean</span> encoded = query.encoded();</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; rawParameterType = Utils.getRawType(type);</span><br><span class="line">        gotQuery = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// 判断参数类型是否为可迭代类或者Array类，目前我们的参数是String，所以直接到最后一个条件</span></span><br><span class="line">        <span class="keyword">if</span> (Iterable<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">rawParameterType</span>)) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (!(type <span class="keyword">instanceof</span> ParameterizedType)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> parameterError(method, p, rawParameterType.getSimpleName()</span><br><span class="line">                + <span class="string">" must include generic type (e.g., "</span></span><br><span class="line">                + rawParameterType.getSimpleName()</span><br><span class="line">                + <span class="string">"&lt;String&gt;)"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          ParameterizedType parameterizedType = (ParameterizedType) type;</span><br><span class="line">          Type iterableType = Utils.getParameterUpperBound(<span class="number">0</span>, parameterizedType);</span><br><span class="line">          Converter&lt;?, String&gt; converter =</span><br><span class="line">              retrofit.stringConverter(iterableType, annotations);</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> ParameterHandler.Query&lt;&gt;(name, converter, encoded).iterable();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rawParameterType.isArray()) &#123;</span><br><span class="line">          Class&lt;?&gt; arrayComponentType = boxIfPrimitive(rawParameterType.getComponentType());</span><br><span class="line">          Converter&lt;?, String&gt; converter =</span><br><span class="line">              retrofit.stringConverter(arrayComponentType, annotations);</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> ParameterHandler.Query&lt;&gt;(name, converter, encoded).array();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 这里调用了retrofit.stringConverter方法，将参数类型和注解进行处理，</span></span><br><span class="line">          <span class="comment">// 这里ParameterHandler.Query&lt;&gt;保存了参数注解的value、Converter以及参数注解的编码方式</span></span><br><span class="line">          Converter&lt;?, String&gt; converter =</span><br><span class="line">              retrofit.stringConverter(type, annotations);</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> ParameterHandler.Query&lt;&gt;(name, converter, encoded);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125; </span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// Not a Retrofit annotation.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Retrofit.java stringConverter通过遍历converterFactories，调用它们的stringConverter方法，</span></span><br><span class="line"><span class="comment">// 看谁能够处理并返回一个Converter&lt;T, String&gt;，如果都没有则调用BuiltInConverters，</span></span><br><span class="line"><span class="comment">// 而Converter是用于构造HTTP请求</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns a &#123;<span class="doctag">@link</span> Converter&#125; for &#123;<span class="doctag">@code</span> type&#125; to &#123;<span class="doctag">@link</span> String&#125; from the available</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@linkplain</span> #converterFactories() factories&#125;.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> &lt;T&gt; <span class="function">Converter&lt;T, String&gt; <span class="title">stringConverter</span><span class="params">(Type type, Annotation[] annotations)</span> </span>&#123;</span><br><span class="line">    checkNotNull(type, <span class="string">"type == null"</span>);</span><br><span class="line">    checkNotNull(annotations, <span class="string">"annotations == null"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, count = converterFactories.size(); i &lt; count; i++) &#123;</span><br><span class="line">      Converter&lt;?, String&gt; converter =</span><br><span class="line">          converterFactories.get(i).stringConverter(type, annotations, <span class="keyword">this</span>);</span><br><span class="line">      <span class="keyword">if</span> (converter != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//noinspection unchecked</span></span><br><span class="line">        <span class="keyword">return</span> (Converter&lt;T, String&gt;) converter;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Nothing matched. Resort to default converter which just calls toString().</span></span><br><span class="line">    <span class="comment">//noinspection unchecked</span></span><br><span class="line">    <span class="keyword">return</span> (Converter&lt;T, String&gt;) BuiltInConverters.ToStringConverter.INSTANCE;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>以上的代码完成了RequestFactory的构建，也就是说，这个RequestFactory包含了HTTP请求的部分信息，比如请求方法、请求url的参数、参数类型以及参数的位置，通过<code>HttpServiceMethod.parseAnnotations(retrofit, method, requestFactory);</code>对请求进行适配，包括通过Converter对返回的Response body数据处理以及通过CallAdapter修改Call类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HttpServiceMethod.java HttpServiceMethod继承自ServiceMethod</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Inspects the annotations on an interface method to construct a reusable service method that</span></span><br><span class="line"><span class="comment">   * speaks HTTP. This requires potentially-expensive reflection so it is best to build each service</span></span><br><span class="line"><span class="comment">   * method only once and reuse it.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">static</span> &lt;ResponseT, ReturnT&gt; <span class="function">HttpServiceMethod&lt;ResponseT, ReturnT&gt; <span class="title">parseAnnotations</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      Retrofit retrofit, Method method, RequestFactory requestFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> isKotlinSuspendFunction = requestFactory.isKotlinSuspendFunction;</span><br><span class="line">    <span class="keyword">boolean</span> continuationWantsResponse = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> continuationBodyNullable = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    Annotation[] annotations = method.getAnnotations();</span><br><span class="line">    Type adapterType;</span><br><span class="line">    <span class="keyword">if</span> (isKotlinSuspendFunction) &#123;</span><br><span class="line">      Type[] parameterTypes = method.getGenericParameterTypes();</span><br><span class="line">      Type responseType = Utils.getParameterLowerBound(<span class="number">0</span>,</span><br><span class="line">          (ParameterizedType) parameterTypes[parameterTypes.length - <span class="number">1</span>]);</span><br><span class="line">      <span class="keyword">if</span> (getRawType(responseType) == Response<span class="class">.<span class="keyword">class</span> &amp;&amp; <span class="title">responseType</span> <span class="title">instanceof</span> <span class="title">ParameterizedType</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Unwrap the actual body type from Response&lt;T&gt;.</span></span><br><span class="line">        responseType = Utils.getParameterUpperBound(<span class="number">0</span>, (ParameterizedType) responseType);</span><br><span class="line">        continuationWantsResponse = <span class="keyword">true</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// TODO figure out if type is nullable or not</span></span><br><span class="line">        <span class="comment">// Metadata metadata = method.getDeclaringClass().getAnnotation(Metadata.class)</span></span><br><span class="line">        <span class="comment">// Find the entry for method</span></span><br><span class="line">        <span class="comment">// Determine if return type is nullable or not</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      adapterType = <span class="keyword">new</span> Utils.ParameterizedTypeImpl(<span class="keyword">null</span>, Call<span class="class">.<span class="keyword">class</span>, <span class="title">responseType</span>)</span>;</span><br><span class="line">      annotations = SkipCallbackExecutorImpl.ensurePresent(annotations);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      adapterType = method.getGenericReturnType();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    CallAdapter&lt;ResponseT, ReturnT&gt; callAdapter =</span><br><span class="line">        createCallAdapter(retrofit, method, adapterType, annotations);</span><br><span class="line">    Type responseType = callAdapter.responseType();</span><br><span class="line">    <span class="keyword">if</span> (responseType == okhttp3.Response<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">throw</span> methodError(method, <span class="string">"'"</span></span><br><span class="line">          + getRawType(responseType).getName()</span><br><span class="line">          + <span class="string">"' is not a valid response body type. Did you mean ResponseBody?"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (responseType == Response<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">throw</span> methodError(method, <span class="string">"Response must include generic type (e.g., Response&lt;String&gt;)"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// TODO support Unit for Kotlin?</span></span><br><span class="line">    <span class="keyword">if</span> (requestFactory.httpMethod.equals(<span class="string">"HEAD"</span>) &amp;&amp; !Void<span class="class">.<span class="keyword">class</span>.<span class="title">equals</span>(<span class="title">responseType</span>)) </span>&#123;</span><br><span class="line">      <span class="keyword">throw</span> methodError(method, <span class="string">"HEAD method must use Void as response type."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Converter&lt;ResponseBody, ResponseT&gt; responseConverter =</span><br><span class="line">        createResponseConverter(retrofit, method, responseType);</span><br><span class="line"></span><br><span class="line">    okhttp3.Call.Factory callFactory = retrofit.callFactory;</span><br><span class="line">    <span class="comment">// isKotlinSuspendFunction和continuationWantsResponse默认为false，所以返回的是SuspendForBody</span></span><br><span class="line">    <span class="keyword">if</span> (!isKotlinSuspendFunction) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> CallAdapted&lt;&gt;(requestFactory, callFactory, responseConverter, callAdapter);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (continuationWantsResponse) &#123;</span><br><span class="line">      <span class="comment">//noinspection unchecked Kotlin compiler guarantees ReturnT to be Object.</span></span><br><span class="line">      <span class="keyword">return</span> (HttpServiceMethod&lt;ResponseT, ReturnT&gt;) <span class="keyword">new</span> SuspendForResponse&lt;&gt;(requestFactory,</span><br><span class="line">          callFactory, responseConverter, (CallAdapter&lt;ResponseT, Call&lt;ResponseT&gt;&gt;) callAdapter);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//noinspection unchecked Kotlin compiler guarantees ReturnT to be Object.</span></span><br><span class="line">      <span class="keyword">return</span> (HttpServiceMethod&lt;ResponseT, ReturnT&gt;) <span class="keyword">new</span> SuspendForBody&lt;&gt;(requestFactory,</span><br><span class="line">          callFactory, responseConverter, (CallAdapter&lt;ResponseT, Call&lt;ResponseT&gt;&gt;) callAdapter,</span><br><span class="line">          continuationBodyNullable);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Retrofit的create方法调用了loadServiceMethod(method).invoke(args != null ? args : emptyArgs);</span></span><br><span class="line"><span class="comment">// 此处的invoke即HttpServiceMethod的invoke方法，这里创建了OkHttpCall，</span></span><br><span class="line"><span class="comment">// 此处的adapt即SuspendForBody的adapt方法，而SuspendForBody的adapt方法调用了callAdapter的adapt方法，</span></span><br><span class="line"><span class="comment">// 最终回到了我们在Retrofit初始化时使用的DefaultCallAdapterFactory的adapt方法，如果我们使用其他callAdapter，</span></span><br><span class="line"><span class="comment">// 比如RxJava2CallAdapterFactory，那么返回值就是RxJava2CallAdapterFactory的adapt方法的返回值</span></span><br><span class="line">  <span class="meta">@Override</span> <span class="keyword">final</span> <span class="meta">@Nullable</span> <span class="function">ReturnT <span class="title">invoke</span><span class="params">(Object[] args)</span> </span>&#123;</span><br><span class="line">    Call&lt;ResponseT&gt; call = <span class="keyword">new</span> OkHttpCall&lt;&gt;(requestFactory, args, callFactory, responseConverter);</span><br><span class="line">    <span class="keyword">return</span> adapt(call, args);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DefaultCallAdapterFactory.java 返回了一个Call ExecutorCallbackCall</span></span><br><span class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Call&lt;Object&gt; <span class="title">adapt</span><span class="params">(Call&lt;Object&gt; call)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> executor == <span class="keyword">null</span></span><br><span class="line">            ? call</span><br><span class="line">            : <span class="keyword">new</span> ExecutorCallbackCall&lt;&gt;(executor, call);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecutorCallbackCall</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Call</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Executor callbackExecutor;</span><br><span class="line">    <span class="keyword">final</span> Call&lt;T&gt; delegate;</span><br><span class="line"></span><br><span class="line">    ExecutorCallbackCall(Executor callbackExecutor, Call&lt;T&gt; delegate) &#123;</span><br><span class="line">      <span class="keyword">this</span>.callbackExecutor = callbackExecutor;</span><br><span class="line">      <span class="keyword">this</span>.delegate = delegate;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// ExecutorCallbackCall是通过callbackExecutor执行Runnable，还记得在Platform类中的Android内部类的默认Executor吗，</span></span><br><span class="line"><span class="comment">// MainThreadExecutor，所以后续调用call.enqueue时都是在这里处理的，而且delegate为OkHttpCall，OkHttpCall执行enqueue</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(<span class="keyword">final</span> Callback&lt;T&gt; callback)</span> </span>&#123;</span><br><span class="line">      checkNotNull(callback, <span class="string">"callback == null"</span>);</span><br><span class="line"></span><br><span class="line">      delegate.enqueue(<span class="keyword">new</span> Callback&lt;T&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call&lt;T&gt; call, <span class="keyword">final</span> Response&lt;T&gt; response)</span> </span>&#123;</span><br><span class="line">          callbackExecutor.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">              <span class="keyword">if</span> (delegate.isCanceled()) &#123;</span><br><span class="line">                <span class="comment">// Emulate OkHttp's behavior of throwing/delivering an IOException on cancellation.</span></span><br><span class="line">                callback.onFailure(ExecutorCallbackCall.<span class="keyword">this</span>, <span class="keyword">new</span> IOException(<span class="string">"Canceled"</span>));</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                callback.onResponse(ExecutorCallbackCall.<span class="keyword">this</span>, response);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call&lt;T&gt; call, <span class="keyword">final</span> Throwable t)</span> </span>&#123;</span><br><span class="line">          callbackExecutor.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">              callback.onFailure(ExecutorCallbackCall.<span class="keyword">this</span>, t);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isExecuted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> delegate.isExecuted();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Response&lt;T&gt; <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> delegate.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      delegate.cancel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCanceled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> delegate.isCanceled();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"CloneDoesntCallSuperClone"</span>) <span class="comment">// Performing deep clone.</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Call&lt;T&gt; <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ExecutorCallbackCall&lt;&gt;(callbackExecutor, delegate.clone());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Request <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> delegate.request();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>通过上述代码，<code>Api api = retrofit.create(Api.class);</code>主要还是通过代理反射创建了Api接口的实例，后续直接调用<code>api.getNowWeather(&quot;beijing&quot;, KEY);</code>就可以构造一个Call对象；在retrofit.create的过程中需要通过ServiceMethod以及初始化的Retrofit对象对Method的注解进行解析，转换为HttpServiceMethod对象进行请求适配，包括处理response body数据以及修改Call类型等等，然后构建OkHttpCall，返回ExecutorCallbackCall，所以后续OkHttpCall的enqueue方法可以进行回调。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// OkHttpCall.java 继承自Call，这里执行的代码非常类似OkHttp的RealCall类</span></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(<span class="keyword">final</span> Callback&lt;T&gt; callback)</span> </span>&#123;</span><br><span class="line">    checkNotNull(callback, <span class="string">"callback == null"</span>);</span><br><span class="line"></span><br><span class="line">    okhttp3.Call call;</span><br><span class="line">    Throwable failure;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (executed) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Already executed."</span>);</span><br><span class="line">      executed = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">      call = rawCall;</span><br><span class="line">      failure = creationFailure;</span><br><span class="line">      <span class="keyword">if</span> (call == <span class="keyword">null</span> &amp;&amp; failure == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 我们需要把this，也就是OkHttpCall转换为OkHttpClient接受的Call，所以需要OkHttp的callFactory</span></span><br><span class="line">          call = rawCall = createRawCall();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">          throwIfFatal(t);</span><br><span class="line">          failure = creationFailure = t;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (failure != <span class="keyword">null</span>) &#123;</span><br><span class="line">      callback.onFailure(<span class="keyword">this</span>, failure);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (canceled) &#123;</span><br><span class="line">      call.cancel();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 这里就直接使用了OkHttp的enqueue方法，然后再onResponse中处理rawResponse，</span></span><br><span class="line"><span class="comment">// 通过parseResponse将返回的response body转为我们定义的数据，比如json-&gt;WeatherEntity</span></span><br><span class="line"><span class="comment">// 所以回调函数的结果包括Response&lt;WeatherEntity&gt;</span></span><br><span class="line">    call.enqueue(<span class="keyword">new</span> okhttp3.Callback() &#123;</span><br><span class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(okhttp3.Call call, okhttp3.Response rawResponse)</span> </span>&#123;</span><br><span class="line">        Response&lt;T&gt; response;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          response = parseResponse(rawResponse);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">          throwIfFatal(e);</span><br><span class="line">          callFailure(e);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 回调函数传出去</span></span><br><span class="line">          callback.onResponse(OkHttpCall.<span class="keyword">this</span>, response);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">          throwIfFatal(t);</span><br><span class="line">          t.printStackTrace(); <span class="comment">// TODO this is not great</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(okhttp3.Call call, IOException e)</span> </span>&#123;</span><br><span class="line">        callFailure(e);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">callFailure</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          callback.onFailure(OkHttpCall.<span class="keyword">this</span>, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">          throwIfFatal(t);</span><br><span class="line">          t.printStackTrace(); <span class="comment">// TODO this is not great</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将Call转换为OkHttp的Call，requestFactory.create(args)会构造RequestBuilder，</span></span><br><span class="line"><span class="comment">// RequestBuilder就是将我们之前保存在各种对象中的参数拿出来组建出一个Http请求，</span></span><br><span class="line"><span class="comment">// callFactory就是OkHttpClient对象</span></span><br><span class="line">  <span class="keyword">private</span> okhttp3.<span class="function">Call <span class="title">createRawCall</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    okhttp3.Call call = callFactory.newCall(requestFactory.create(args));</span><br><span class="line">    <span class="keyword">if</span> (call == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Call.Factory returned null."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> call;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function">Response&lt;T&gt; <span class="title">parseResponse</span><span class="params">(okhttp3.Response rawResponse)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    ResponseBody rawBody = rawResponse.body();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remove the body's source (the only stateful object) so we can pass the response along.</span></span><br><span class="line">    rawResponse = rawResponse.newBuilder()</span><br><span class="line">        .body(<span class="keyword">new</span> NoContentResponseBody(rawBody.contentType(), rawBody.contentLength()))</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> code = rawResponse.code();</span><br><span class="line">    <span class="keyword">if</span> (code &lt; <span class="number">200</span> || code &gt;= <span class="number">300</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// Buffer the entire body to avoid future I/O.</span></span><br><span class="line">        ResponseBody bufferedBody = Utils.buffer(rawBody);</span><br><span class="line">        <span class="keyword">return</span> Response.error(bufferedBody, rawResponse);</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        rawBody.close();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (code == <span class="number">204</span> || code == <span class="number">205</span>) &#123;</span><br><span class="line">      rawBody.close();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> Response.success(<span class="keyword">null</span>, rawResponse);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 一般来说数据请求正确，返回code为200，因此走这条路，注意responseConverter.convert，也就是我们使用的</span></span><br><span class="line"><span class="comment">// 再Retrofit初始化的converterFactories，包括我们加入的GsonConverterFactory，最终Response的body被转换为</span></span><br><span class="line"><span class="comment">// WeatherEntity</span></span><br><span class="line">    ExceptionCatchingResponseBody catchingBody = <span class="keyword">new</span> ExceptionCatchingResponseBody(rawBody);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      T body = responseConverter.convert(catchingBody);</span><br><span class="line">      <span class="keyword">return</span> Response.success(body, rawResponse);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">      <span class="comment">// If the underlying source threw an exception, propagate that rather than indicating it was</span></span><br><span class="line">      <span class="comment">// a runtime exception.</span></span><br><span class="line">      catchingBody.throwIfCaught();</span><br><span class="line">      <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// --------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// GsonConverterFactory.java 提供GsonResponseBodyConverter给Retrofit对Response进行数据转换</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">GsonConverterFactory</span> <span class="keyword">extends</span> <span class="title">Converter</span>.<span class="title">Factory</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Create an instance using a default &#123;<span class="doctag">@link</span> Gson&#125; instance for conversion. Encoding to JSON and</span></span><br><span class="line"><span class="comment">   * decoding from JSON (when no charset is specified by a header) will use UTF-8.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GsonConverterFactory <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> create(<span class="keyword">new</span> Gson());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Create an instance using &#123;<span class="doctag">@code</span> gson&#125; for conversion. Encoding to JSON and</span></span><br><span class="line"><span class="comment">   * decoding from JSON (when no charset is specified by a header) will use UTF-8.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@SuppressWarnings</span>(<span class="string">"ConstantConditions"</span>) <span class="comment">// Guarding public API nullability.</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GsonConverterFactory <span class="title">create</span><span class="params">(Gson gson)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (gson == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"gson == null"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> GsonConverterFactory(gson);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Gson gson;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">GsonConverterFactory</span><span class="params">(Gson gson)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.gson = gson;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// responseBodyConverter被调用的位置是HttpServiceMethod的createResponseConverter</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Converter&lt;ResponseBody, ?&gt; responseBodyConverter(Type type, Annotation[] annotations,</span><br><span class="line">      Retrofit retrofit) &#123;</span><br><span class="line">    TypeAdapter&lt;?&gt; adapter = gson.getAdapter(TypeToken.get(type));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> GsonResponseBodyConverter&lt;&gt;(gson, adapter);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// requestBodyConverter被调用的位置在RequestFactory的parseParameterAnnotation</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Converter&lt;?, RequestBody&gt; requestBodyConverter(Type type,</span><br><span class="line">      Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) &#123;</span><br><span class="line">    TypeAdapter&lt;?&gt; adapter = gson.getAdapter(TypeToken.get(type));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> GsonRequestBodyConverter&lt;&gt;(gson, adapter);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GsonResponseBodyConverter.java </span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">GsonResponseBodyConverter</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">ResponseBody</span>, <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Gson gson;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> TypeAdapter&lt;T&gt; adapter;</span><br><span class="line"></span><br><span class="line">  GsonResponseBodyConverter(Gson gson, TypeAdapter&lt;T&gt; adapter) &#123;</span><br><span class="line">    <span class="keyword">this</span>.gson = gson;</span><br><span class="line">    <span class="keyword">this</span>.adapter = adapter;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// convert方法被执行的位置，也就是说通过TypeAdapter读取json数据并转换为java对象，这个具体实现需要分析Gson的源码</span></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> T <span class="title">convert</span><span class="params">(ResponseBody value)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    JsonReader jsonReader = gson.newJsonReader(value.charStream());</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      T result = adapter.read(jsonReader);</span><br><span class="line">      <span class="keyword">if</span> (jsonReader.peek() != JsonToken.END_DOCUMENT) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> JsonIOException(<span class="string">"JSON document was not fully consumed."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      value.close();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>除了GsonConverterFactory，还可以分析一下RxJava2CallAdapterFactory，我们知道HttpServiceMethod的invoke返回的对象即为我们调用<code>api.getNowWeather(&quot;beijing&quot;, KEY);</code>得到的对象，而这个对象是通过callAdapter调用adapt方法返回的，默认情况下是DefaultCallAdapterFactory，如果我们在Retrofit初始化时通过addCallAdapterFactory增加了其他的CallAdapterFactory比如RxJava2CallAdapterFactory，那么会通过RxJava2CallAdapterFactory调用RxJava2CallAdapter的adapt方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RxJava2CallAdapterFactory.java RxJava2CallAdapterFactory的get方法必定返回RxJava2CallAdapter对象</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RxJava2CallAdapterFactory <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RxJava2CallAdapterFactory(<span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">RxJava2CallAdapterFactory</span><span class="params">(@Nullable Scheduler scheduler, <span class="keyword">boolean</span> isAsync)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.scheduler = scheduler;</span><br><span class="line">    <span class="keyword">this</span>.isAsync = isAsync;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RxJava2CallAdapter.java 所以具体的adapt方法由RxJava2CallAdapter实现</span></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Object <span class="title">adapt</span><span class="params">(Call&lt;R&gt; call)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 主要请求的完成过程在CallEnqueueObservable中，异步的</span></span><br><span class="line">    Observable&lt;Response&lt;R&gt;&gt; responseObservable = isAsync</span><br><span class="line">        ? <span class="keyword">new</span> CallEnqueueObservable&lt;&gt;(call)</span><br><span class="line">        : <span class="keyword">new</span> CallExecuteObservable&lt;&gt;(call);</span><br><span class="line"></span><br><span class="line">    Observable&lt;?&gt; observable;</span><br><span class="line">    <span class="comment">// ResultObservable和BodyObservable都是继承自Observable，用于返回结果</span></span><br><span class="line">    <span class="keyword">if</span> (isResult) &#123;</span><br><span class="line">      observable = <span class="keyword">new</span> ResultObservable&lt;&gt;(responseObservable);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isBody) &#123;</span><br><span class="line">      observable = <span class="keyword">new</span> BodyObservable&lt;&gt;(responseObservable);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      observable = responseObservable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (scheduler != <span class="keyword">null</span>) &#123;</span><br><span class="line">      observable = observable.subscribeOn(scheduler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isFlowable) &#123;</span><br><span class="line">      <span class="keyword">return</span> observable.toFlowable(BackpressureStrategy.LATEST);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isSingle) &#123;</span><br><span class="line">      <span class="keyword">return</span> observable.singleOrError();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isMaybe) &#123;</span><br><span class="line">      <span class="keyword">return</span> observable.singleElement();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isCompletable) &#123;</span><br><span class="line">      <span class="keyword">return</span> observable.ignoreElements();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> RxJavaPlugins.onAssembly(observable);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CallEnqueueObservable.java 当我们得到的observable执行subscribe方法时</span></span><br><span class="line"><span class="comment">// 实际调用了subscribeActual方法，对应上面的CallEnqueueObservable</span></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">subscribeActual</span><span class="params">(Observer&lt;? <span class="keyword">super</span> Response&lt;T&gt;&gt; observer)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Since Call is a one-shot type, clone it for each new observer.</span></span><br><span class="line">    Call&lt;T&gt; call = originalCall.clone();</span><br><span class="line">    CallCallback&lt;T&gt; callback = <span class="keyword">new</span> CallCallback&lt;&gt;(call, observer);</span><br><span class="line">    observer.onSubscribe(callback);</span><br><span class="line">    <span class="keyword">if</span> (!callback.isDisposed()) &#123;</span><br><span class="line">      <span class="comment">// 这个call是在HttpServiceMethod中构建的OkHttpCall，OkHttpCall调用enqueue不必多说了吧</span></span><br><span class="line">      call.enqueue(callback);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>综上所述，Retrofit是一个比较灵活的网络请求框架，从设计上就是为了便于增加其他组件而设计的，首先是Api接口的设计，为了更加方便控制请求参数，通过接口加注解设计请求的url，而同时我们又不必实现此接口，通过代理反射的方式对接口实体化，相当于解耦了请求url与Retrofit实例；</p>
<p>其次是CallAdapter的设计，我们可以灵活的设计自己的CallAdapter用于同步或异步请求，因为在HttpServiceMethod被调用的时候是通过获取Retrofit初始化时设置的CallAdapter来实现返回，所以只需要自定义CallAdapter，我们就可以按照自己的需求处理请求的过程并拿到返回值；</p>
<p>然后是与Gson的联动，在拿到返回Response的时候，对json数据进行转换，并且将实体通过回调传出来，都是为了灵活使用而设计的；</p>
<p>最后是Retrofit与OkHttp的结合，Retrofit本质上还是调用OkHttp的请求，但是通过上述方式增加其灵活性，而且由于OkHttpCall的连接，我们一方面可以直接使用OkHttpClient，另一方面返回的Response可以直接处理，其中又包括非常多的泛型，这种设计思路真是妙啊妙啊。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Http</tag>
        <tag>Https</tag>
        <tag>Retrofit</tag>
        <tag>OkHttp</tag>
        <tag>工厂模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Android框架-Dagger2</title>
    <url>/archives/51b2fcf0.html</url>
    <content><![CDATA[<p>参考：</p>
<blockquote>
<p><a href="https://www.jianshu.com/p/2ec39d8b7e98" target="_blank" rel="noopener">Android开发之dagger.android—Activity</a><br><a href="https://dagger.dev/" target="_blank" rel="noopener">Dagger</a><br><a href="https://www.jianshu.com/p/24af4c102f62?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation" target="_blank" rel="noopener">Dagger2 最清晰的使用教程</a><br><a href="https://blog.mindorks.com/the-new-dagger-2-android-injector-cbe7d55afa6a" target="_blank" rel="noopener">The New Dagger2</a><br><a href="https://www.jianshu.com/p/2ac2f39cb25f" target="_blank" rel="noopener">Dagger 2 完全解析</a></p>
</blockquote>
<p>Dagger2框架是一个依赖注入框架，它既可以用于Java Web项目也可以用于Android项目，依赖注入是什么意思呢</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dependent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Dependency dependency;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 属性注入 </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dependent</span><span class="params">(Dependency dependency)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dependency = dependency;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// public Dependent()&#123;</span></span><br><span class="line">    <span class="comment">//     this.dependency = new Dependency();</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法注入</span></span><br><span class="line">    <span class="comment">// public void setDependency(Dependency dependency)&#123;</span></span><br><span class="line">    <span class="comment">//     this.dependency = dependency;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看名字知含义，在上面的代码中Dependent类的构造始终需要Dependency类，那么我们就称Dependency为依赖，将其引入Dependent中的过程称为注入，上述代码在构造函数中引入，当然也可以通过set方法注入，无论是哪种方式都会面临一个问题就是当我们后续如果需要修改Dependency的构造函数时，需要在所有包含<code>new Dependency()</code>的代码中进行修改，显然这是非常痛苦的事情，而且不符合依赖倒置原则，本文所涉及到的是通过注解的方式进行依赖注入可以解决这种问题。</p>
<a id="more"></a>
<h2 id="1-Dagger2框架入门"><a href="#1-Dagger2框架入门" class="headerlink" title="1. Dagger2框架入门"></a>1. Dagger2框架入门</h2><p>Dagger2框架最终的概念是注解，注解有什么用呢，我觉得是一种标记，这是由于Dagger2框架最终是通过根据不同的注解自动生成代码来实现的依赖注入，因此不同的注解表示通过不同的逻辑生成代码以实现其功能。</p>
<p>从最简单最基础的注解开始，一步一步深入，了解其生成的源码的作用。</p>
<h3 id="1-1-Inject和-Component"><a href="#1-1-Inject和-Component" class="headerlink" title="1.1 @Inject和@Component"></a>1.1 @Inject和@Component</h3><p>比如我们需要一个Utils类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Utils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Utils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"This is Utils"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在MainActivity中使用showMessage方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = MainActivity<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Utils utils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里需要new一个对象出来才能调用showMessage方法</span></span><br><span class="line">        utils = <span class="keyword">new</span> Utils();</span><br><span class="line">        Log.i(TAG, utils.showMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果需要在其他Activity中继续使用Utils的showMessage方法，那么就需要重复在每一个Activity中new一个Utils对象，这时候产品经理来了跟你说在使用Utils的时候还需要使用ToastUtils，而且需要修改Utils的构造函数，将ToastUtils传进去</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToastUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ToastUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"This is ToastUtils"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Utils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ToastUtils toastUtils;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Utils</span><span class="params">(ToastUtils toastUtils)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.toastUtils = toastUtils;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> toastUtils.showMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时，你是不是要疯了，需要在所有调用<code>new Utils()</code>的位置进行修改，也就意味着每一次修改构造函数都需要全部重新修改一次。</p>
<p>通过dagger2框架是如何实现依赖注入的呢？</p>
<ul>
<li>首先是在依赖的构造函数上加上<code>@Inject</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Utils</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Utils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"This is Utils"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>然后新建一个接口<code>MainActivityComponent</code>，要加上<code>@Component</code>，声明<code>inject</code>方法，参数为依赖被注入的类，这个接口向dagger2框架表明了需要注入的目标，即依赖者dependent</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MainActivityComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity activity)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>最后在MainActivity中使用，直接在依赖上增加注解<code>@Inject</code>，在onCreate方法中调用<code>DaggerMainActivityComponent.create().inject(this);</code>，然后utils就被实例化了，可以直接使用，这里并没有看见new对象的操作</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = MainActivity<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Utils utils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="comment">// 在调用DaggerMainActivityComponent.create().inject(this)方法前先build一下，</span></span><br><span class="line">        <span class="comment">// 会自动生成一些代码，其中包括DaggerMainActivityComponent类，否则无法使用</span></span><br><span class="line">        DaggerMainActivityComponent.create().inject(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        Log.i(TAG, utils.showMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们来看一下生成代码实现了哪些功能吧，主要包括三个类<code>DaggerMainActivityComponent.java</code>、<code>MainActivity_MembersInjector.java</code>、<code>Utils_Factory.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DaggerMainActivityComponent.java</span></span><br><span class="line"><span class="comment">// DaggerMainActivityComponent是根据MainActivityComponent生成的，按照执行顺序分析</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DaggerMainActivityComponent</span> <span class="keyword">implements</span> <span class="title">MainActivityComponent</span> </span>&#123;</span><br><span class="line"><span class="comment">// 3. DaggerMainActivityComponent构造函数    </span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">DaggerMainActivityComponent</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Builder();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 1. create方法返回Builder().build()方法返回的对象</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MainActivityComponent <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Builder().build();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 调用inject方法</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity activity)</span> </span>&#123;</span><br><span class="line">    injectMainActivity(activity);&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. inject方法实际执行的方法injectMainActivity</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> MainActivity <span class="title">injectMainActivity</span><span class="params">(MainActivity instance)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 6. 调用MainActivity_MembersInjector.injectUtils(instance, new Utils())，这里出现了new出来的实例</span></span><br><span class="line">    <span class="comment">// 接下来看MainActivity_MembersInjector类做了些什么</span></span><br><span class="line">    MainActivity_MembersInjector.injectUtils(instance, <span class="keyword">new</span> Utils());</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 2. Builder().build()返回的对象是DaggerMainActivityComponent</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MainActivityComponent <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> DaggerMainActivityComponent();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MainActivity_MembersInjector.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity_MembersInjector</span> <span class="keyword">implements</span> <span class="title">MembersInjector</span>&lt;<span class="title">MainActivity</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Provider&lt;Utils&gt; utilsProvider;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MainActivity_MembersInjector</span><span class="params">(Provider&lt;Utils&gt; utilsProvider)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.utilsProvider = utilsProvider;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MembersInjector&lt;MainActivity&gt; <span class="title">create</span><span class="params">(Provider&lt;Utils&gt; utilsProvider)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MainActivity_MembersInjector(utilsProvider);&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">injectMembers</span><span class="params">(MainActivity instance)</span> </span>&#123;</span><br><span class="line">    injectUtils(instance, utilsProvider.get());</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 7. 接上面的执行，这就很明显了instance.utils = utils 等价于 MainActivity.utils = new Utils()</span></span><br><span class="line"><span class="comment">// 也就是说到这里，其实依赖注入的功能就完成了，其他的代码并没有用到，但是不代表是无用的</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">injectUtils</span><span class="params">(MainActivity instance, Utils utils)</span> </span>&#123;</span><br><span class="line">    instance.utils = utils;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>按照增加ToastUtils的方式进行依赖注入是怎样的呢，需要修改如下代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToastUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ToastUtils被Utils依赖，所以需要在构造函数上加上@Inject</span></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ToastUtils</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"This is ToastUtils"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Utils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ToastUtils toastUtils;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Utils的含参构造函数上加上@Inject</span></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Utils</span><span class="params">(ToastUtils toastUtils)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.toastUtils = toastUtils;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> toastUtils.showMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>MainActivityComponent.java</code>和<code>MainActivity.java</code>不用修改任何代码，那不就意味着我们解决了前面注入产生的修改代码的问题吗，因为没有new对象的代码；而且ToastUtils在Utils中也不是通过new对象产生的，而是层层注解注入的。</p>
<p>此时再次看一下生成的代码文件：</p>
<p><code>DaggerMainActivityComponent.java</code></p>
<p><code>MainActivity_MembersInjector.java</code></p>
<p><code>Utils_Factory.java</code></p>
<p><code>ToastUtils_Factory.java</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DaggerMainActivityComponent</span> <span class="keyword">implements</span> <span class="title">MainActivityComponent</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">DaggerMainActivityComponent</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Builder();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MainActivityComponent <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Builder().build();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// getUtils()即返回了我们需要的带参Utils对象</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> Utils <span class="title">getUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Utils(<span class="keyword">new</span> ToastUtils());&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity activity)</span> </span>&#123;</span><br><span class="line">    injectMainActivity(activity);&#125;</span><br><span class="line"><span class="comment">// 这次直接看核心代码，MainActivity_MembersInjector.injectUtils(instance, getUtils())</span></span><br><span class="line"><span class="comment">// MainActivity_MembersInjector.injectUtils方法也很熟悉了，效果同上文</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> MainActivity <span class="title">injectMainActivity</span><span class="params">(MainActivity instance)</span> </span>&#123;</span><br><span class="line">    MainActivity_MembersInjector.injectUtils(instance, getUtils());</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MainActivityComponent <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> DaggerMainActivityComponent();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根据上文的分析，我们知道了我们需要的对象的实例其实是在生成的代码<code>DaggerMainActivityComponent.java</code>中new出来的，但是这个过程并不需要我们干预而是自动生成的，所以解决了部分依赖注入产生的问题。</p>
<p>结合源码分析可知</p>
<blockquote>
<p>1.<code>@Inject</code>标注在构造器上的含义包括：</p>
</blockquote>
<ul>
<li>告诉Dagger2可以使用这个构造器构建对象。如ToastUtils类</li>
<li>注入构造器所需要的参数的依赖。 如Utils类，构造上的ToastUtils会被注入。</li>
</ul>
<p>构造器注入的局限：如果有多个构造器，我们只能标注其中一个，无法标注多个。</p>
<blockquote>
<p>2.<code>@Component</code>一般有两种方式定义方法</p>
</blockquote>
<ul>
<li><code>void inject(目标类 obj);</code>Dagger2会从目标类开始查找<code>@Inject</code>注解，自动生成依赖注入的代码，调用inject可完成依赖的注入。</li>
<li><code>Object getObj();</code> 如：<code>Utils getUtils();</code><br>Dagger2会到Utils类中找被<code>@Inject</code>注解标注的构造器，自动生成提供Utils依赖的代码，这种方式一般为其他Component提供依赖。（一个Component可以依赖另一个Component，后面会说）</li>
</ul>
<p>Components所依赖的所有module里不能有重复的@Provides方法（重载，或者同返回类型的），这里还包括后面讲到的依赖的其他的Component也不能有重复的，因为Dagger无法判断你究竟想要那个作为依赖（也就是依赖迷失）</p>
<p>使用接口定义，并且<code>@Component</code>注解。命名方式推荐为：目标类名+Component，在编译后Dagger2就会为我们生成DaggerXXXComponent这个类，它是我们定义的xxxComponent的实现，在目标类中使用它就可以实现依赖注入了。</p>
<h3 id="1-2-Module和-Provides"><a href="#1-2-Module和-Provides" class="headerlink" title="1.2 @Module和@Provides"></a>1.2 @Module和@Provides</h3><p>使用<code>@Inject</code>标记构造器提供依赖是有局限性的，比如说我们需要注入的对象是第三方库提供的，我们无法在第三方库的构造器上加上<code>@Inject</code>注解。<br>或者，我们使用依赖倒置的时候，因为需要注入的对象是抽象的，<code>@Inject</code>也无法使用，因为抽象的类并不能实例化，比如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">showMessage</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBUtils</span> <span class="keyword">extends</span> <span class="title">AbstractUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DBUtils() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"This is DBUtils"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiUtils</span> <span class="keyword">extends</span> <span class="title">AbstractUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    ApiUtils() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"This is ApiUtils"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AbstractUtils abstractUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DataUtils</span><span class="params">(AbstractUtils abstractUtils)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.abstractUtils = abstractUtils;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> abstractUtils.showMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>MainActivityComponent.java</code>不变，如果在MainActivity中引入DataUtils会报错，此时需要修改代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBUtils</span> <span class="keyword">extends</span> <span class="title">AbstractUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"This is DBUtils"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiUtils</span> <span class="keyword">extends</span> <span class="title">AbstractUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"This is ApiUtils"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要新建一个Module类，用于提供需要的实例，这里返回的是DBUtils对象，@Provodes标记在方法上，表示可以通过这个方法获取依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractUtilsModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function">AbstractUtils <span class="title">provideDataUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DBUtils();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改Component代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(modules = AbstractUtilsModule<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">MainActivityComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity activity)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后在MainActivity中引入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = MainActivity<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DataUtils dataUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        DaggerMainActivityComponent.create().inject(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// 很显然，这里引入的是DBUtils对象</span></span><br><span class="line">        Log.i(TAG, dataUtils.show());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过修改<code>AbstractUtilsModule</code>中<code>provideDataUtils</code>方法返回的对象，我们可以控制抽象类的具体子类是DBUtils还是ApiUtils，而主体代码不需要改动。</p>
<p>生成代码分析包括：</p>
<p><code>DaggerMainActivityComponent.java</code></p>
<p><code>AbstractUtilsModule_ProvideDataUtilsFactory.java</code></p>
<p><code>MainActivity_MembersInjector.java</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DaggerMainActivityComponent</span> <span class="keyword">implements</span> <span class="title">MainActivityComponent</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> AbstractUtilsModule AbstractUtilsModule;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">DaggerMainActivityComponent</span><span class="params">(AbstractUtilsModule abstractUtilsModuleParam)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.AbstractUtilsModule = abstractUtilsModuleParam;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Builder();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MainActivityComponent <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Builder().build();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 2. getDataUtils()返回的是</span></span><br><span class="line"><span class="comment">// new DataUtils(AbstractUtilsModule_ProvideDataUtilsFactory.provideDataUtils(AbstractUtilsModule))</span></span><br><span class="line"><span class="comment">// 构造函数的参数为AbstractUtilsModule_ProvideDataUtilsFactory.provideDataUtils(AbstractUtilsModule)</span></span><br><span class="line"><span class="comment">// 接下来看这个方法provideDataUtils的返回值</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> DataUtils <span class="title">getDataUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DataUtils(AbstractUtilsModule_ProvideDataUtilsFactory.provideDataUtils(AbstractUtilsModule));&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity activity)</span> </span>&#123;</span><br><span class="line">    injectMainActivity(activity);&#125;</span><br><span class="line"><span class="comment">// 1. 直接看核心代码，MainActivity_MembersInjector.injectDataUtils(instance, getDataUtils())</span></span><br><span class="line"><span class="comment">// 根据getDataUtils方法的返回值可知，其返回的是DataUtils实例</span></span><br><span class="line"><span class="comment">// MainActivity_MembersInjector.injectDataUtils方法也是很熟悉，同上</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> MainActivity <span class="title">injectMainActivity</span><span class="params">(MainActivity instance)</span> </span>&#123;</span><br><span class="line">    MainActivity_MembersInjector.injectDataUtils(instance, getDataUtils());</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AbstractUtilsModule AbstractUtilsModule;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">AbstractUtilsModule</span><span class="params">(AbstractUtilsModule AbstractUtilsModule)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.AbstractUtilsModule = Preconditions.checkNotNull(AbstractUtilsModule);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MainActivityComponent <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (AbstractUtilsModule == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.AbstractUtilsModule = <span class="keyword">new</span> AbstractUtilsModule();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> DaggerMainActivityComponent(AbstractUtilsModule);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractUtilsModule_ProvideDataUtilsFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span>&lt;<span class="title">AbstractUtils</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> AbstractUtilsModule <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">AbstractUtilsModule_ProvideDataUtilsFactory</span><span class="params">(AbstractUtilsModule <span class="keyword">module</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.<span class="keyword">module</span> = <span class="keyword">module</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> AbstractUtils <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> provideDataUtils(<span class="keyword">module</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AbstractUtilsModule_ProvideDataUtilsFactory <span class="title">create</span><span class="params">(AbstractUtilsModule <span class="keyword">module</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AbstractUtilsModule_ProvideDataUtilsFactory(<span class="keyword">module</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 3. 上述代码直接调用的是下面这个方法，返回的是AbstractUtilsModule.provideDataUtils()</span></span><br><span class="line"><span class="comment">// AbstractUtilsModule根据我们定义的时候可知，provideDataUtils返回的是new DBUtils()对象</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AbstractUtils <span class="title">provideDataUtils</span><span class="params">(AbstractUtilsModule instance)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Preconditions.checkNotNull(instance.provideDataUtils(), <span class="string">"Cannot return null from a non-@Nullable @Provides method"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>@Module</code>的含义是 通知Component，可以从我这里获取到构造好的对象；</p>
<p><code>@Provide</code>通常是在标记了<code>@Module</code>的类中用于标记返回实例的方法，根据我们的使用以及代码分析来看，实例的注入是根据类型自动判断的，也就是说，从MainActivity到Module的实例传递过程中，同一Module中同一类型的provide方法只能存在一个，否则就会报错，比如我们如果在AbstractUtilsModule中再加入一个provideDataUtils2方法，同样返回类型为AbstractUtils，那么MainActivity中的dataUtils就会遇到<code>依赖迷失</code>的问题，这两个方法返回一样，那该用哪一个，于是报错，此时可以通过<code>限定符</code>，也就是下文介绍的<code>@Qualifier</code>和<code>@Named</code>来区分。</p>
<h3 id="1-3-Qualifier和-Named"><a href="#1-3-Qualifier和-Named" class="headerlink" title="1.3 @Qualifier和@Named"></a>1.3 @Qualifier和@Named</h3><p>直接上代码，首先是AbstractUtilsModule，通过添加<code>@Named</code>并指定一个字符来区别不同的实例，这里两个provide方法分别返回之前的两个AbstractUtils的子类DBUtils和ApiUtils。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractUtilsModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@Named</span>(<span class="string">"DBUtils"</span>)</span><br><span class="line">    <span class="function">AbstractUtils <span class="title">provideDBUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DBUtils();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@Named</span>(<span class="string">"ApiUtils"</span>)</span><br><span class="line">    <span class="function">AbstractUtils <span class="title">provideApiUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiUtils();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同时，需要修改DataUtils类，因为AbstractUtilsModule表示我们可以提供两种AbstractUtils，你到底要哪个的实例，此时需要在DataUtils构造函数的参数中加上<code>@Named</code>注解，与上面对应，表示我需要哪一种AbstractUtils</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AbstractUtils abstractUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DataUtils</span><span class="params">(@Named(<span class="string">"ApiUtils"</span>)</span> AbstractUtils abstractUtils) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.abstractUtils = abstractUtils;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> abstractUtils.showMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其他代码不用修改，此时MainActivity中<code>dataUtils.show()</code>自然用的是ApiUtils。</p>
<p><code>@Qualifier</code>的作用与<code>@Named</code>的作用差不多，但是不需要自定义字符串，使用<code>@Qualifier</code>时不是直接用，而是通过<code>@Qualifier</code>自定义限定符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Qualifier</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> DBDataUtils &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Qualifier</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ApiDataUtils &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>RetentionPolicy.RUNTIME</code>代表注解会保存在.class文件，虚拟机会在运行时保留，具体有什么区别，暂时还不清楚。</p>
<p>需要修改的地方有两处，一是AbstractUtilsModule，二是DataUtils，都是将<code>@Named</code>注解修改为自定义的限定符注解，此时Log结果变为DBUtils</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractUtilsModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@DBDataUtils</span></span><br><span class="line">    <span class="function">AbstractUtils <span class="title">provideDBUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DBUtils();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@ApiDataUtils</span></span><br><span class="line">    <span class="function">AbstractUtils <span class="title">provideApiUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiUtils();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AbstractUtils abstractUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DataUtils</span><span class="params">(@DBDataUtils AbstractUtils abstractUtils)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.abstractUtils = abstractUtils;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> abstractUtils.showMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的代码中我们对DataUtils的构造方法进行Inject注解，这样的操作不是很合适，因为需要尽量少对实体类进行额外的修改，所以我们同样可以通过Module的方式provide一个DataUtils的对象，并在Module中对DataUtils的构造进行约束</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删掉Inject注解和限定符注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AbstractUtils abstractUtils;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DataUtils</span><span class="params">(AbstractUtils abstractUtils)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.abstractUtils = abstractUtils;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> abstractUtils.showMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新建一个DataUtilsModule用于提供DataUtils对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataUtilsModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function">DataUtils <span class="title">provideDataUtils</span><span class="params">(@ApiDataUtils AbstractUtils abstractUtils)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataUtils(abstractUtils);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改MainActivityComponent的modules参数，增加DataUtilsModule.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(modules = &#123;AbstractUtilsModule<span class="class">.<span class="keyword">class</span>, <span class="title">DataUtilsModule</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">MainActivityComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity activity)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后编译运行，log结果是ApiUtils，根据上述代码的运行，我们能够总结出一些运行的规则：</p>
<ol>
<li>首先当我们在MainActivity中调用inject方法时，其实是通过MainActivityComponent询问，可以去哪里找到我们需要的实例；</li>
<li>MainActivityComponent定义了<code>modules = {AbstractUtilsModule.class, DataUtilsModule.class}</code>，告诉系统去这两个类中找；</li>
<li>AbstractUtilsModule告诉系统我这里只能提供限定类型的AbstractUtils，DataUtilsModule告诉系统我这里可以提供DataUtils，这各类型恰好与MainActivity需要的实例类型相同，于是系统到DataUtilsModule的provide方法去找；</li>
<li>此时系统发现DataUtilsModule的provide方法是带参数AbstractUtils的，而且还有限定符，那么同样需要能够提供AbstractUtils的Module，这不是恰好与第3步的AbstractUtilsModule相同吗，那么就按照参数限定符找到AbstractUtilsModule的对应provide方法，结果发现它可以直接返回new ApiUtils()对象，正合我心，且不需要继续走下去，那么实例化完成。</li>
</ol>
<p>在寻找实例的路线中需要用到的Module都必须加在Component中的modules参数中，否则这条路线走不通（DataUtilsModule -&gt; AbstractUtilsModule），存在的问题是你需要知道所有路线上的Module并且将其加入到Component中，显然对于多级依赖产生的多个Module这是不合适的。</p>
<h3 id="1-4-Component的dependence和-SubComponent"><a href="#1-4-Component的dependence和-SubComponent" class="headerlink" title="1.4 @Component的dependence和@SubComponent"></a>1.4 @Component的dependence和@SubComponent</h3><p>Component除了可以提供inject方法以外还可以像Module一样提供实例，这样便于解决多级依赖导致的Module增加问题。</p>
<p>首先创建提供ApiUtils和DBUtils实例的Component，其<code>modules = AbstractUtilsModule.class</code>，表明最终方法获取实例还是从Module拿到的，我Component只是交接一下，向外提供接口getDBUtils和getApiUtils</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 同理这里的两个方法也需要限定符注解，表明需要从AbstractUtilsModule拿哪种实例，一般命名get+XXXEntity</span></span><br><span class="line"><span class="meta">@Component</span>(modules = AbstractUtilsModule<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">AbstractUtilsComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DBDataUtils</span></span><br><span class="line">    <span class="function">AbstractUtils <span class="title">getDBUtils</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiDataUtils</span></span><br><span class="line">    <span class="function">AbstractUtils <span class="title">getApiUtils</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后我们的MainActivity是需要DataUtils的实例，那么我们也需要提供DataUtils的Component</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// modules = DataUtilsModule.class表明实例来源于DataUtilsModule</span></span><br><span class="line"><span class="comment">// dependencies = AbstractUtilsComponent.class表明我们可能需要AbstractUtilsComponent提供的实例</span></span><br><span class="line"><span class="comment">// 逻辑上也是对应的DataUtilsModule返回实例需要限定AbstractUtils，AbstractUtilsComponent恰好可以提供</span></span><br><span class="line"><span class="comment">// 根据1.3的最后部分我们知道这里的dependencies = AbstractUtilsComponent.class可以替换为AbstractUtilsModule，</span></span><br><span class="line"><span class="comment">// 但是这样会失去依赖的层层分离的特点</span></span><br><span class="line"><span class="meta">@Component</span>(modules = DataUtilsModule<span class="class">.<span class="keyword">class</span>, <span class="title">dependencies</span> </span>= AbstractUtilsComponent<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">DataUtilsComponent</span> </span>&#123;</span><br><span class="line">    <span class="function">DataUtils <span class="title">getDataUtils</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其次需要修改MainActivityComponent的参数，这里可以发现不再使用modules参数而是dependencies</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dependencies = DataUtilsComponent.class表明可能需要DataUtilsComponent提供的实例，</span></span><br><span class="line"><span class="comment">// 通过上面定义的getDataUtils方法得到</span></span><br><span class="line"><span class="meta">@Component</span>(dependencies = DataUtilsComponent<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">MainActivityComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity activity)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后需要修改MainActivity调用inject的流程，其他代码不变</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = MainActivity<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DataUtils dataUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="comment">// 可以发现调用流程变复杂了，而且恰好在Component加入了dependencies的位置</span></span><br><span class="line">        <span class="comment">// 需要调用dataUtilsComponent或者abstractUtilsComponent来进行初始化，</span></span><br><span class="line">        <span class="comment">// 有人会说了，这不是把流程变复杂了吗，之前都不需要额外的参数，现在需要将生成的Component带入</span></span><br><span class="line">        <span class="comment">// 到初始化的过程，非也非也，此处可以使用DaggerDataUtilsComponent，那当然可以使用继承自DataUtilsComponent</span></span><br><span class="line">        <span class="comment">// 的其他Component，也就是说我们增加了注入的依赖范围，变为可以动态修改的了，注入过程更加灵活</span></span><br><span class="line">        DaggerMainActivityComponent</span><br><span class="line">                .builder()</span><br><span class="line">                .dataUtilsComponent(DaggerDataUtilsComponent</span><br><span class="line">                        .builder()</span><br><span class="line">                        .abstractUtilsComponent(DaggerAbstractUtilsComponent.create())</span><br><span class="line">                        .build())</span><br><span class="line">                .build()</span><br><span class="line">                .inject(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 很显然，这里引入的是ApiUtils对象</span></span><br><span class="line">        Log.i(TAG, dataUtils.show());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面展示一下为什么说注入的方式变得灵活了，产品经理突然告诉你需要新增一个Utils叫做ExtraUtils，在MainActivity中需要使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtraUtils</span> <span class="keyword">extends</span> <span class="title">AbstractUtils</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"This is ExtraUtils"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在不修改上述的大部分代码的条件下，如何将ExtraUtils注入，首先新建一个ExtraDataUtilsModule用于提供通过ExtraUtils构造的DataUtils</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里没有用带参的构造方法，也没有用抽象类，直接实例化，便于演示</span></span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtraDataUtilsModule</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function">DataUtils <span class="title">provideDataUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataUtils(<span class="keyword">new</span> ExtraUtils());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后新建一个ExtraDataUtilsComponent用于提供DataUtils实例，是不是和DataUtilsComponent功能很像，没错，这里可以用继承，并且由于MainActivityComponent的<code>dependencies = DataUtilsComponent.class</code>不变，我用继承来实现即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里的modules = ExtraDataUtilsModule.class变成了我们自己新定义的Module，它是直接返回new DataUtils(new ExtraUtils())，</span></span><br><span class="line"><span class="comment">// 所以实际上后面的dependencies = AbstractUtilsComponent.class不需要，但是这里保留是为了减少修改MainActivity的代码，当然也可以去掉</span></span><br><span class="line"><span class="meta">@Component</span>(modules = ExtraDataUtilsModule<span class="class">.<span class="keyword">class</span>, <span class="title">dependencies</span> </span>= AbstractUtilsComponent<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">ExtraDataUtilsComponent</span> <span class="keyword">extends</span> <span class="title">DataUtilsComponent</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后修改MainActivity中的inject流程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = MainActivity<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DataUtils dataUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="comment">// 注意这里是DaggerExtraDataUtilsComponent，即新创建的Component</span></span><br><span class="line">        <span class="comment">// 而且abstractUtilsComponent是可以去掉的，同理ExtraDataUtilsComponent的dependencies也需要去掉</span></span><br><span class="line">        DaggerMainActivityComponent</span><br><span class="line">                .builder()</span><br><span class="line">                .dataUtilsComponent(DaggerExtraDataUtilsComponent</span><br><span class="line">                        .builder()</span><br><span class="line">                        .abstractUtilsComponent(DaggerAbstractUtilsComponent.create())</span><br><span class="line">                        .build())</span><br><span class="line">                .build()</span><br><span class="line">                .inject(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 很显然，这里引入的是ExtraUtils对象</span></span><br><span class="line">        Log.i(TAG, dataUtils.show());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过这样的方式进行额外的依赖注入，就可以避免大部分代码的重构，而仅仅是增加代码，且注入的方式变得灵活</p>
<p>从源码中也可以看到dependencies的作用，以MainActivityComponent为代表</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DaggerMainActivityComponent</span> <span class="keyword">implements</span> <span class="title">MainActivityComponent</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> DataUtilsComponent dataUtilsComponent;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">DaggerMainActivityComponent</span><span class="params">(DataUtilsComponent dataUtilsComponentParam)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.dataUtilsComponent = dataUtilsComponentParam;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Builder();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity activity)</span> </span>&#123;</span><br><span class="line">    injectMainActivity(activity);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们可以调用DataUtilsComponent的getDataUtils()方法了</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> MainActivity <span class="title">injectMainActivity</span><span class="params">(MainActivity instance)</span> </span>&#123;</span><br><span class="line">    MainActivity_MembersInjector.injectDataUtils(</span><br><span class="line">        instance,</span><br><span class="line">        Preconditions.checkNotNull(</span><br><span class="line">            dataUtilsComponent.getDataUtils(),</span><br><span class="line">            <span class="string">"Cannot return null from a non-@Nullable component method"</span>));</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> DataUtilsComponent dataUtilsComponent;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 此处为区别，初始化的过程中增加了dataUtilsComponent方法，用于引入DataUtilsComponent</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">dataUtilsComponent</span><span class="params">(DataUtilsComponent dataUtilsComponent)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.dataUtilsComponent = Preconditions.checkNotNull(dataUtilsComponent);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MainActivityComponent <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      Preconditions.checkBuilderRequirement(dataUtilsComponent, DataUtilsComponent<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> DaggerMainActivityComponent(dataUtilsComponent);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上就是<code>@Component</code>的部分使用，包括dependencies参数的意义，与之相似的有<code>@Subcomponent</code>注解，让我们回到加入ExtraUtils之前的场景，用<code>@Subcomponent</code>实现Componet的的层层依赖。</p>
<p>首先修改AbstractUtilsComponent，增加它的上一级Component的plus方法，参数为上一级Component的Module</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(modules = AbstractUtilsModule<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">AbstractUtilsComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @DBDataUtils</span></span><br><span class="line"><span class="comment">//    AbstractUtils getDBUtils();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    @ApiDataUtils</span></span><br><span class="line"><span class="comment">//    AbstractUtils getApiUtils();</span></span><br><span class="line"></span><br><span class="line">    <span class="function">DataUtilsComponent <span class="title">plus</span><span class="params">(DataUtilsModule dataUtilsModule)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后修改DataUtilsComponent，同理，但是修改注解为<code>@Subcomponent</code>，且删除了dependencies参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Subcomponent</span>(modules = DataUtilsModule<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">DataUtilsComponent</span> </span>&#123;</span><br><span class="line">    <span class="comment">//    DataUtils getDataUtils();</span></span><br><span class="line">    <span class="function">MainActivityComponent <span class="title">plus</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其次是MainActivityComponent，同理，修改注解为<code>@Subcomponent</code>，且删除了dependencies参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Subcomponent</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MainActivityComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity activity)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后修改MainActivity</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = MainActivity<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DataUtils dataUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="comment">// 此处的注入调用的流程发生了很大的变化</span></span><br><span class="line">        <span class="comment">// 之前是从MainActivityComponent -&gt; DataUtilsComponent -&gt; AbstractUtilsComponent</span></span><br><span class="line">        <span class="comment">// 现在是AbstractUtilsComponent -&gt; DataUtilsComponent -&gt; MainActivityComponent</span></span><br><span class="line">        <span class="comment">// 并且传入的参数变成了Module，这里也增加了注入的灵活性</span></span><br><span class="line">        DaggerAbstractUtilsComponent</span><br><span class="line">                .create()</span><br><span class="line">                .plus(<span class="keyword">new</span> DataUtilsModule())</span><br><span class="line">                .plus()</span><br><span class="line">                .inject(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 很显然，这里引入的是ApiUtils对象</span></span><br><span class="line">        Log.i(TAG, dataUtils.show());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从生成的代码不难发现，这次只有一个Component生成文件<code>DaggerAbstractUtilsComponent.java</code>，我们看看为什么会这样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 还是按照执行顺序分析</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DaggerAbstractUtilsComponent</span> <span class="keyword">implements</span> <span class="title">AbstractUtilsComponent</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> AbstractUtilsModule abstractUtilsModule;</span><br><span class="line"><span class="comment">// 3. 构造函数初始化完成</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">DaggerAbstractUtilsComponent</span><span class="params">(AbstractUtilsModule abstractUtilsModuleParam)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.abstractUtilsModule = abstractUtilsModuleParam;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Builder();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 1. 返回Builder().build()</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AbstractUtilsComponent <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Builder().build();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 4. 执行plus(new DataUtilsModule())方法，返回DataUtilsComponentImpl(dataUtilsModule)</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> DataUtilsComponent <span class="title">plus</span><span class="params">(DataUtilsModule dataUtilsModule)</span> </span>&#123;</span><br><span class="line">    Preconditions.checkNotNull(dataUtilsModule);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DataUtilsComponentImpl(dataUtilsModule);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AbstractUtilsModule abstractUtilsModule;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">abstractUtilsModule</span><span class="params">(AbstractUtilsModule abstractUtilsModule)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.abstractUtilsModule = Preconditions.checkNotNull(abstractUtilsModule);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 2. 初始化了abstractUtilsModule为AbstractUtilsModule，这肯定是AbstractUtilsComponent指定了modules参数</span></span><br><span class="line"><span class="comment">// 导致，然后返回DaggerAbstractUtilsComponent的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AbstractUtilsComponent <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (abstractUtilsModule == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.abstractUtilsModule = <span class="keyword">new</span> AbstractUtilsModule();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> DaggerAbstractUtilsComponent(abstractUtilsModule);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DataUtilsComponentImpl</span> <span class="keyword">implements</span> <span class="title">DataUtilsComponent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DataUtilsModule dataUtilsModule;</span><br><span class="line"><span class="comment">// 5. 初始化DataUtilsComponentImpl</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DataUtilsComponentImpl</span><span class="params">(DataUtilsModule dataUtilsModuleParam)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.dataUtilsModule = dataUtilsModuleParam;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 10. DataUtilsModule_ProvideDataUtilsFactory.provideDataUtils，接下来看DataUtilsModule_ProvideDataUtilsFactory</span></span><br><span class="line"><span class="comment">// 和AbstractUtilsModule_ProvideApiUtilsFactory</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> DataUtils <span class="title">getDataUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> DataUtilsModule_ProvideDataUtilsFactory.provideDataUtils(</span><br><span class="line">          dataUtilsModule,</span><br><span class="line">          AbstractUtilsModule_ProvideApiUtilsFactory.provideApiUtils(</span><br><span class="line">              DaggerAbstractUtilsComponent.<span class="keyword">this</span>.abstractUtilsModule));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 6. 调用plus()方法，返回的是MainActivityComponentImpl</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MainActivityComponent <span class="title">plus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> MainActivityComponentImpl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivityComponentImpl</span> <span class="keyword">implements</span> <span class="title">MainActivityComponent</span> </span>&#123;</span><br><span class="line"><span class="comment">// 7. MainActivityComponentImpl()构造</span></span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="title">MainActivityComponentImpl</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 8. 调用inject方法</span></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity activity)</span> </span>&#123;</span><br><span class="line">        injectMainActivity(activity);</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">// 9. 最终调用的位置injectDataUtils，这个很熟悉了，instance.dataUtils = DataUtilsComponentImpl.this.getDataUtils()</span></span><br><span class="line"><span class="comment">// getDataUtils返回值是什么呢，看10</span></span><br><span class="line">      <span class="function"><span class="keyword">private</span> MainActivity <span class="title">injectMainActivity</span><span class="params">(MainActivity instance)</span> </span>&#123;</span><br><span class="line">        MainActivity_MembersInjector.injectDataUtils(</span><br><span class="line">            instance, DataUtilsComponentImpl.<span class="keyword">this</span>.getDataUtils());</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DataUtilsModule_ProvideDataUtilsFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span>&lt;<span class="title">DataUtils</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> DataUtilsModule <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Provider&lt;AbstractUtils&gt; abstractUtilsProvider;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">DataUtilsModule_ProvideDataUtilsFactory</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      DataUtilsModule <span class="keyword">module</span>, Provider&lt;AbstractUtils&gt; abstractUtilsProvider)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.<span class="keyword">module</span> = <span class="keyword">module</span>;</span><br><span class="line">    <span class="keyword">this</span>.abstractUtilsProvider = abstractUtilsProvider;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> DataUtils <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> provideDataUtils(<span class="keyword">module</span>, abstractUtilsProvider.get());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataUtilsModule_ProvideDataUtilsFactory <span class="title">create</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      DataUtilsModule <span class="keyword">module</span>, Provider&lt;AbstractUtils&gt; abstractUtilsProvider)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DataUtilsModule_ProvideDataUtilsFactory(<span class="keyword">module</span>, abstractUtilsProvider);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 11-1. 接上文10，instance.provideDataUtils即我们定义的DataUtilsModule.provideDataUtils，返回DataUtils实例</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataUtils <span class="title">provideDataUtils</span><span class="params">(DataUtilsModule instance, AbstractUtils abstractUtils)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Preconditions.checkNotNull(</span><br><span class="line">        instance.provideDataUtils(abstractUtils),</span><br><span class="line">        <span class="string">"Cannot return null from a non-@Nullable @Provides method"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractUtilsModule_ProvideApiUtilsFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span>&lt;<span class="title">AbstractUtils</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> AbstractUtilsModule <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">AbstractUtilsModule_ProvideApiUtilsFactory</span><span class="params">(AbstractUtilsModule <span class="keyword">module</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.<span class="keyword">module</span> = <span class="keyword">module</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> AbstractUtils <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> provideApiUtils(<span class="keyword">module</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AbstractUtilsModule_ProvideApiUtilsFactory <span class="title">create</span><span class="params">(AbstractUtilsModule <span class="keyword">module</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AbstractUtilsModule_ProvideApiUtilsFactory(<span class="keyword">module</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 11-2. 接上文10，instance.provideApiUtils即我们定义的AbstractUtilsModule.provideApiUtils，返回ApiUtils实例</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AbstractUtils <span class="title">provideApiUtils</span><span class="params">(AbstractUtilsModule instance)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Preconditions.checkNotNull(</span><br><span class="line">        instance.provideApiUtils(), <span class="string">"Cannot return null from a non-@Nullable @Provides method"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分析两种调用方式的逻辑可以知道：</p>
<ol>
<li>dependencies方式从最上级的Component一级一级往下调用，获取需要的实例；Subcomponent方式最下级的Component通过一步一步构造出上级Component来调用，在每一步的plus方法中中加入Module提供需要的实例；</li>
<li>dependencies方式适用于需要在某个类中注入非常多的其他实例，通过dependencies参数加深；Subcomponent方式适用于将某一个实例提供给其他实例注入，比如将Application context给其他例如ToastUtils、SharedpreferencesUtils使用，Application context作为Component，其他作为Subcomponent；</li>
<li>Component dependencies 能单独使用，而Subcomponent必须由Component调用方法获取；</li>
<li>Component dependencies 可以很清楚的得知他依赖哪个Component， 而Subcomponent不知道它自己的谁的孩子。</li>
</ol>
<p><strong>Component dependencies和Subcomponent使用上的总结</strong></p>
<p>Component Dependencies：</p>
<ol>
<li>你想保留独立的想个组件（DataUtils可以单独使用注入，DBUtils也可以）</li>
<li>要明确的显示该组件所使用的其他依赖</li>
</ol>
<p>Subcomponent：</p>
<ol>
<li>两个组件之间的关系紧密</li>
<li>你只关心Component，而Subcomponent只是作为Component的拓展，可以通过Component.xxx调用。</li>
</ol>
<h3 id="1-5-Scope和-Singleton"><a href="#1-5-Scope和-Singleton" class="headerlink" title="1.5 @Scope和@Singleton"></a>1.5 @Scope和@Singleton</h3><p><code>@Scope</code>是用来管理依赖的生命周期的。它和<code>@Qualifier</code>一样是用来自定义注解的，而<code>@Singleton</code>则是<code>@Scope</code>的默认实现。</p>
<p>在没有引入<code>@Scope</code>时，我们在MainActivity中初始化另一个DataUtils会是什么情况，这两个DataUtils会是相同的吗</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = MainActivity<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"><span class="comment">// 这里直接inject第二个dataUtils2</span></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DataUtils dataUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DataUtils dataUtils2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        TextView textView = findViewById(R.id.text);</span><br><span class="line"></span><br><span class="line">        DaggerMainActivityComponent</span><br><span class="line">                .builder()</span><br><span class="line">                .dataUtilsComponent(DaggerDataUtilsComponent</span><br><span class="line">                        .builder()</span><br><span class="line">                        .abstractUtilsComponent(DaggerAbstractUtilsComponent.create())</span><br><span class="line">                        .build())</span><br><span class="line">                .build()</span><br><span class="line">                .inject(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 然后在Log中打印这两个DataUtils对象，结果是这两个对象是不同的，相当于重新new一个</span></span><br><span class="line">        Log.i(TAG, dataUtils.toString() + dataUtils2.toString());</span><br><span class="line"></span><br><span class="line">        textView.setText(dataUtils.show());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一般而言，我们希望这种工具类Utils是单例模式，比如读写数据库的时候，如果不是单例，那么可能存在“读后写”等问题导致数据不同步，那么单例模式，特别是全局单例就显得非常好用了。</p>
<p>怎样在dagger框架中使用单例，很显然，必定是通过注解来实现<code>@Singleton</code>，在上面的代码中，我们需要的单例是DataUtils，那么从DataUtils的注入过程开始，首先是DataUtilsModule</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在provide方法上加上@Singleton</span></span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataUtilsModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="function">DataUtils <span class="title">provideDataUtils</span><span class="params">(@ApiDataUtils AbstractUtils abstractUtils)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataUtils(abstractUtils);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以及需要使用此module的Component也需要加上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="meta">@Component</span>(modules = DataUtilsModule<span class="class">.<span class="keyword">class</span>, <span class="title">dependencies</span> </span>= AbstractUtilsComponent<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">DataUtilsComponent</span> </span>&#123;</span><br><span class="line">    <span class="function">DataUtils <span class="title">getDataUtils</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>dagger2还有一项规定，如果一个Component被加上了<code>@Scope</code>注解，类似<code>@Singleton</code>，那么依赖这个Component的Component也需要加上<code>@Scope</code>注解，比如这里的MainActivityComponent，但是如果直接在MainActivityComponent上加上<code>@Singleton</code>会报错<code>error: This @Singleton component cannot depend on scoped components: @Singleton com.example.daggerdemo.di.component.DataUtilsComponent</code>，即单例不能依赖于单例，这是因为单例只能由自己产生，如果DataUtils在其他地方被注入了，那么MainActivityComponent将无法再进行注入，因为其依赖DataUtils是单例模式，显然这不是很符合面向对象的设计原则，因为我们可能并不知道MainActivityComponent会依赖哪些单例，所以MainActivityComponent的<code>@Scope</code>可以使用自定义的注解，自定义<code>@Scope</code>与<code>@Singleton</code>有说明区别呢，<code>@Singleton</code>相当于告诉系统，这个对象或者这个方法必定是全局单例，你看着办；而自定义<code>@Scope</code>相当于告诉系统在这个注解标注过的地方，我提供的对象是唯一的。</p>
<p>因此代码如下，自定义ActivityScope表明我们需要在Activity生命周期内实现单例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scope</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ActivityScope &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>MainActivityComponent注解加上<code>@ActivityScope</code>，其他地方的<code>@Singleton</code>不变</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ActivityScope</span></span><br><span class="line"><span class="meta">@Component</span>(dependencies = DataUtilsComponent<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">MainActivityComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity activity)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后运行代码可以发现MainActivity中的两个DataUtils对象是相同的，也就是在MainActivity中是单例的，但是它是不是全局单例呢，我们在创建一个SecondActivity，同样注入DataUtils</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = MainActivity<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DataUtils dataUtils3;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_second);</span><br><span class="line">        TextView textView = findViewById(R.id.text);</span><br><span class="line"></span><br><span class="line">        DaggerSecondActivityComponent</span><br><span class="line">                .builder()</span><br><span class="line">                .dataUtilsComponent(DaggerDataUtilsComponent</span><br><span class="line">                        .builder()</span><br><span class="line">                        .abstractUtilsComponent(DaggerAbstractUtilsComponent.create())</span><br><span class="line">                        .build())</span><br><span class="line">                .build()</span><br><span class="line">                .inject(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// 此时dataUtils3与dataUtils并不相同，也就说dataUtils仅在MainActivity中是单例</span></span><br><span class="line">        Log.i(TAG, dataUtils3.toString());</span><br><span class="line"></span><br><span class="line">        textView.setText(dataUtils3.show());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同理需要一个SecondActivityComponent</span></span><br><span class="line"><span class="meta">@ActivityScope</span></span><br><span class="line"><span class="meta">@Component</span>(dependencies = DataUtilsComponent<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">SecondActivityComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(SecondActivity activity)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>@Scope</code>是需要成对存在的，在Module的Provide方法中使用了<code>@Scope</code>，那么对应的Component中也必须使用<code>@Scope</code>注解，当两边的<code>@Scope</code>名字一样时（比如同为<code>@Singleton</code>）, 那么该Provide方法提供的依赖将会在Component中保持“局部单例”。<br>而在Component中标注<code>@Scope</code>，provide方法没有标注，那么这个<code>@Scope</code>就不会起作用，而Component上的<code>@Scope</code>的作用也只是为了能顺利通过编译，就像我刚刚定义的ActivityScope一样。</p>
<p><code>@Singleton</code>也是一个自定义<code>@Scope</code>，它的作用就像上面说的一样。但由于它是Dagger2中默认定义的，所以它比我们自定义Scope对了一个功能，就是编译检测，防止我们不规范的使用Scope注解，仅此而已。</p>
<p>如何使用Dagger2实现单例呢：</p>
<ol>
<li>依赖在Component中是单例的（供该依赖的provide方法和对应的Component类使用同一个Scope注解。）</li>
<li>对应的Component在App中只初始化一次，每次注入依赖都使用这个Component对象。（在Application中创建该Component）</li>
</ol>
<p>最直接的就是在自定义Application中将Component先初始化了，在通过这个Component去注入我们需要的对象，由于Component是单例的，因此通过它注入的对象也就是单例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"><span class="comment">// 注意我们之前定义的DataUtilsComponent有@Singleton注解，DataUtilsModule的provide方法有@Singleton注解</span></span><br><span class="line"><span class="comment">// 因此在Application中初始化的是DataUtilsComponent，这里简单使用DaggerDataUtilsComponent构造，当然也可以通过dagger注入</span></span><br><span class="line">    <span class="keyword">private</span> DataUtilsComponent dataUtilsComponent;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        dataUtilsComponent = DaggerDataUtilsComponent</span><br><span class="line">                .builder()</span><br><span class="line">                .abstractUtilsComponent(DaggerAbstractUtilsComponent.create())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataUtilsComponent <span class="title">getDataUtilsComponent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataUtilsComponent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后修改MainActivity和SecondActivity中inject的流程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MainActivity.java，dataUtilsComponent的参数是Application中初始化的</span></span><br><span class="line">        DaggerMainActivityComponent</span><br><span class="line">                .builder()</span><br><span class="line">                .dataUtilsComponent(((MyApp) getApplication()).getDataUtilsComponent())</span><br><span class="line">                .build()</span><br><span class="line">                .inject(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">// SecondActivity.java</span></span><br><span class="line">        DaggerSecondActivityComponent</span><br><span class="line">                .builder()</span><br><span class="line">                .dataUtilsComponent(((MyApp) getApplication()).getDataUtilsComponent())</span><br><span class="line">                .build()</span><br><span class="line">                .inject(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure>
<p>然后我们看到在MainActivity和SecondActivity中的三个DataUtils都是相同的了。</p>
<p><code>@Scope</code>是用来给开发者管理依赖的生命周期的，它可以让某个依赖在Component中保持 “局部单例”（唯一），如果将Component保存在Application中复用，则可以让该依赖在app中保持单例。 我们可以通过自定义不同的Scope注解来标记这个依赖的生命周期，所以命名是需要慎重考虑的。</p>
<ul>
<li><code>@Singleton</code>告诉我们这个依赖是单例的</li>
<li><code>@ActivityScope</code>告诉我们这个依赖的生命周期和Activity相同</li>
<li><code>@FragmentScope</code>告诉我们这个依赖的生命周期和Fragment相同</li>
<li><code>@xxxxScope</code> ……</li>
</ul>
<p>以上就是如何使用自定义<code>@Scope</code>实现单例的过程，那么如果在Application中使用注入会是什么情况呢，我们将DataUtilsComponent注入到MyApp中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 虽然这样的注入过程不是很合适，但是基本流程与在Activity中相同，首先是Module，提供对象实例</span></span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataUtilsComponentModule</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function">DataUtilsComponent <span class="title">provideDataUtilsComponent</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DaggerDataUtilsComponent</span><br><span class="line">                .builder()</span><br><span class="line">                .abstractUtilsComponent(DaggerAbstractUtilsComponent.create())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后是Component，提供注入的方法以及被注入的位置</span></span><br><span class="line"><span class="meta">@Component</span>(modules = DataUtilsComponentModule<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">ApplicationComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MyApp myApp)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DataUtilsComponent dataUtilsComponent;</span><br><span class="line"><span class="comment">// 最后是在Application的onCreate方法中注入</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        DaggerApplicationComponent</span><br><span class="line">                .create()</span><br><span class="line">                .inject(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataUtilsComponent <span class="title">getDataUtilsComponent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataUtilsComponent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-6-MapKey和-Lazy"><a href="#1-6-MapKey和-Lazy" class="headerlink" title="1.6 @MapKey和@Lazy"></a>1.6 @MapKey和@Lazy</h3><p><code>@MapKey</code>用于定义一些依赖集合（比如Map和Set），它的使用很简单，可以看代码注释</p>
<p>首先需要定义key注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UtilsMapKey作为后续使用的注解，String代表这个注解的接受的类型为String</span></span><br><span class="line"><span class="comment">// unwrapValue如果为true，则此注解可接受的key类型有基本类型包装类、String、classes</span></span><br><span class="line"><span class="comment">// unwrapValue如果为false，则此注解可接受的key类型为其本身，这个例子可以在源码注释中找到</span></span><br><span class="line"><span class="meta">@MapKey</span>(unwrapValue = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> UtilsMapKey &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后是提供Map的value数据的module</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UtilsMapModule</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 这里首先是Provides注解，然后是IntoMap注解，最后是前面定义的MapKey注解，同时传入了Map的key值为thisiskey</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@IntoMap</span></span><br><span class="line">    <span class="meta">@UtilsMapKey</span>(<span class="string">"thisiskey"</span>)</span><br><span class="line">    <span class="function">Integer <span class="title">provideUtilsMapValue</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="comment">// 返回值即为value，虽然返回值为value，但实际上注入时传入的是整个Map&lt;String, Integer&gt;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">11</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其次是MainActivityComponent加上我们定义的module</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ActivityScope</span></span><br><span class="line"><span class="meta">@Component</span>(dependencies = DataUtilsComponent<span class="class">.<span class="keyword">class</span>, <span class="title">modules</span> </span>= UtilsMapModule<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">MainActivityComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity activity)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后直接在MainActivity中使用即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = MainActivity<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DataUtils dataUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DataUtils dataUtils2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Map&lt;String, Integer&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        TextView textView = findViewById(R.id.text);</span><br><span class="line"></span><br><span class="line">        DaggerMainActivityComponent</span><br><span class="line">                .builder()</span><br><span class="line">                .dataUtilsComponent(((MyApp) getApplication()).getDataUtilsComponent())</span><br><span class="line">                .build()</span><br><span class="line">                .inject(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 很显然，这里引入的是ApiUtils对象</span></span><br><span class="line">        Log.i(TAG, dataUtils.toString() + dataUtils2.toString());</span><br><span class="line">        Log.i(TAG, String.valueOf(dataUtils.equals(dataUtils2)));</span><br><span class="line">        <span class="comment">// 这里TextView中显示的就是 &#123;thisiskey=11&#125;</span></span><br><span class="line">        textView.setText(map.toString());</span><br><span class="line">        textView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                startActivity(<span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, SecondActivity<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>@Lazy</code>，这个并不是作为注解使用的，而是作为wrapper类型使用，比如下面这样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Inject</span></span><br><span class="line">Lazy&lt;DataUtils&gt; dataUtils;</span><br></pre></td></tr></table></figure>
<p>使用Lazy修饰的类型不会在注入的时候初始化，只能通过get方法获取实例，下面的Log日志显示了未初始化的dataUtils是什么类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = MainActivity<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Lazy&lt;DataUtils&gt; dataUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        DaggerMainActivityComponent</span><br><span class="line">                .builder()</span><br><span class="line">                .dataUtilsComponent(((MyApp) getApplication()).getDataUtilsComponent())</span><br><span class="line">                .build()</span><br><span class="line">                .inject(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// dataUtils是dagger.internal.DoubleCheck@3050053</span></span><br><span class="line">        Log.i(TAG, dataUtils.toString());</span><br><span class="line"></span><br><span class="line">        DataUtils utils = dataUtils.get();</span><br><span class="line">        <span class="comment">// utils是com.example.daggerdemo.di.model.DataUtils@26c9d90</span></span><br><span class="line">        Log.i(TAG, utils.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-7-Binds和-Multibinds"><a href="#1-7-Binds和-Multibinds" class="headerlink" title="1.7 @Binds和@Multibinds"></a>1.7 @Binds和@Multibinds</h3><p><code>@Binds</code>注解与<code>@Provides</code>有异曲同工之妙，其修饰的方法都是为了提供实例，但是具体使用起来又有区别，<code>@Binds</code>只能在抽象类Module中使用，并且修饰抽象方法，为了使用<code>@Binds</code>注解，我们首先构造一个抽象类DBUtilsModule用于提供DBUtils，LocalDBUtils继承自DBUtils，我们希望不直接用到LocalDBUtils的构造方法而去生成它。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 首先这是一个Module，而且是抽象的，其次provideLocalDBUtils方法也是抽象的，用@Binds修饰，方法的参数即返回的实例</span></span><br><span class="line"><span class="comment">// 为了对比，加上了一个普通的Provides修饰的方法</span></span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">DBUtilsModule</span> </span>&#123;</span><br><span class="line">  <span class="comment">// provideLocalDBUtils看似返回的是DBUtils，但实际返回的是LocalDBUtils的实例</span></span><br><span class="line">    <span class="meta">@Binds</span></span><br><span class="line">    <span class="meta">@LocalDBDataUtils</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> DBUtils <span class="title">provideLocalDBUtils</span><span class="params">(LocalDBUtils localDBUtils)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> DBUtils <span class="title">provideDBUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DBUtils();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 因为使用provideLocalDBUtils方法，所以需要通过inject的方法提供LocalDBUtils实例，这里使用最简单的构造函数注入，</span></span><br><span class="line"><span class="comment">// 当然也可以使用Module提供LocalDBUtils实例，这里仅作演示</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalDBUtils</span> <span class="keyword">extends</span> <span class="title">DBUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LocalDBUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"This is LocalDBDataUtils"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 增加一个限定符注解，为了区分provideDBUtils和provideLocalDBUtils</span></span><br><span class="line"><span class="meta">@Qualifier</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> LocalDBDataUtils &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 同理需要定义一个Component来提供实例方法，也可以不用这个Component，具体区别稍后再点明</span></span><br><span class="line"><span class="meta">@Component</span>(modules = DBUtilsModule<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">DBUtilsComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LocalDBDataUtils</span></span><br><span class="line">    <span class="function">DBUtils <span class="title">getLocalDBUtils</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">DBUtils <span class="title">getDBUtils</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果加了上面的DBUtilsComponent，则ActivityComponent需要用dependencies</span></span><br><span class="line"><span class="meta">@Component</span>(dependencies = DBUtilsComponent<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">SecondActivityComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(SecondActivity secondActivity)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果不加上面的DBUtilsComponent，则ActivityComponent需要用modules</span></span><br><span class="line"><span class="meta">@Component</span>(modules = DBUtilsModule<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">SecondActivityComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(SecondActivity secondActivity)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后再SecondActivity中使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取实例可以通过限定符注解的方法获取指定的实例</span></span><br><span class="line">    <span class="comment">// 比如这里@LocalDBDataUtils表明需要provideLocalDBUtils方法返回的实例</span></span><br><span class="line">    <span class="comment">// 如果这里不加@LocalDBDataUtils，则代表provideDBUtils返回的实例</span></span><br><span class="line">    <span class="meta">@LocalDBDataUtils</span></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DBUtils dbUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_second);</span><br><span class="line">        <span class="comment">// 如果加了上面的DBUtilsComponent</span></span><br><span class="line">        DaggerSecondActivityComponent</span><br><span class="line">                .builder()</span><br><span class="line">                .dBUtilsComponent(DaggerDBUtilsComponent.create())</span><br><span class="line">                .build()</span><br><span class="line">                .inject(<span class="keyword">this</span>);        </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果不加上面的DBUtilsComponent</span></span><br><span class="line">        DaggerSecondActivityComponent</span><br><span class="line">                .create()</span><br><span class="line">                .inject(<span class="keyword">this</span>);</span><br><span class="line">        Log.i(<span class="string">"MainActivity2"</span>, dbUtils.showMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过<code>@Binds</code>修饰抽象方法会有什么区别呢，我们在加了上面的DBUtilsComponent的情况下看一下源码DaggerDBUtilsComponent</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DaggerDBUtilsComponent</span> <span class="keyword">implements</span> <span class="title">DBUtilsComponent</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">DaggerDBUtilsComponent</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Builder();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DBUtilsComponent <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Builder().build();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// Binds修饰抽象方法会导致实例在DaggerDBUtilsComponent直接构造生成</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> DBUtils <span class="title">getLocalDBUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LocalDBUtils();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 普通的Provides修饰是通过DBUtilsModule_ProvideDBUtilsFactory工厂类生成</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> DBUtils <span class="title">getDBUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> DBUtilsModule_ProvideDBUtilsFactory.provideDBUtils();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DBUtilsComponent <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> DaggerDBUtilsComponent();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简而言之，<code>@Binds</code>注解的作用还是修饰提供实例的方法，但是其修饰的方法的参数即返回的实例，我们不需要显示地调用需要地实例地构造函数，因为在生成地代码中为我们完成了这些工作，与此同时，它地效率可能会高一些，因为是直接在Component中生成的。</p>
<p><code>@BindsInstance</code>比较适合与<code>@Component.Builder</code>方法一起说明，直接看代码，我们这里需要注入Application的Context，虽然显得很奇怪</p>
<p>首先是AppComponent，最后需要用这个调用inject方法注入到Application中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单例模式，以及modules参数不解释</span></span><br><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="meta">@Component</span>(modules = AppModule<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">AppComponent</span> </span>&#123;</span><br><span class="line"><span class="comment">// 这里出现了@Component.Builder注解，它的作用是提供自定义的方式构造此Component，根据注释要求</span></span><br><span class="line"><span class="comment">// 1. 必须有一个返回此Component的build方法 AppComponent build();</span></span><br><span class="line"><span class="comment">// 2. 可以有抽象方法作为setter方法</span></span><br><span class="line"><span class="comment">// 3. setter方法必须有一个参数，并且返回void、builder、builder的父类</span></span><br><span class="line"><span class="comment">// 4. 必须有一个setter方法用于设置dependencies（如果有的话）</span></span><br><span class="line"><span class="comment">// 5. 必须有setter方法用于设置modules里面有非抽象方法的非抽象module</span></span><br><span class="line"><span class="comment">// 6. 可以有setter方法初始化modules</span></span><br><span class="line"><span class="comment">// 7. 可以有@BindsInstance修饰的方法将绑定的实例传递给此Component</span></span><br><span class="line"><span class="comment">// 8. 可以有非抽象方法，但是如果与builder生成相关则会被忽略</span></span><br><span class="line"><span class="comment">// 注释说的并不是很清楚，需要自行测试其功能，此处仅演示</span></span><br><span class="line">    <span class="meta">@Component</span>.Builder</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里两个方法setApplication和setDBName暴露出去，在调用inject方法时初始化</span></span><br><span class="line">        <span class="comment">// 且这两个方法的参数application和name会被传入到AppModule的provide方法的参数中</span></span><br><span class="line">        <span class="comment">// 即我们实现了在外部对Component进行初始化参数设置的功能</span></span><br><span class="line">        <span class="meta">@BindsInstance</span></span><br><span class="line">        <span class="function">Builder <span class="title">setApplication</span><span class="params">(Application application)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@BindsInstance</span></span><br><span class="line">        <span class="function">Builder <span class="title">setDBName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function">AppComponent <span class="title">build</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MyApp app)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来是AppModule，提供两个方法用于提供实例，注入的对象分别是Context和Integer（Context是上下文，后续会介绍；Integer是演示，没有意义）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里传入的两个参数application和name来自于AppComponent的Builder方法中的setApplication和setDBName</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="function">Context <span class="title">provideContext</span><span class="params">(Application application)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> application;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="function">Integer <span class="title">provideDBName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后在自定义的Application中注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Context context;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Integer dbName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        <span class="comment">// 传入的参数包括this和hello.db</span></span><br><span class="line">        <span class="comment">// 这样就把传入的参数通过Component转换并注入到MyApp中了</span></span><br><span class="line">        <span class="comment">// 虽然这种方式没有意义，但是后续有用，这里仅演示BindsInstance的功能</span></span><br><span class="line">        DaggerAppComponent</span><br><span class="line">                .builder()</span><br><span class="line">                .setApplication(<span class="keyword">this</span>)</span><br><span class="line">                .setDBName(<span class="string">"hello.db"</span>)</span><br><span class="line">                .build()</span><br><span class="line">                .inject(<span class="keyword">this</span>);</span><br><span class="line">        Log.i(<span class="string">"MyApp"</span>, context.toString());</span><br><span class="line">        Log.i(<span class="string">"MyApp"</span>, dbName.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>@MultiBinds</code>顾名思义，肯定与注入多个对象相关，假如我们需要在Module里提供了很多相同类型的 对象，如果我们不使用<code>@Qualifer</code>，就会导致同一类型重复绑定的错误。但是如果我们确实需要在一个Module里包含这些对象的创建，又不想创建N多的<code>@Qualifer</code>，我们就可以使用<code>@MultiBind</code>机制来达到我们的目的。</p>
<p>MultiBind机制允许我们为这些对象创建一个集合，这个集合必须是Set或者Map，这样在Component中，我们就可以暴露这个集合，通过集合来获取不同的对象。这个集合的创建有三种方法</p>
<p>1.使用<code>@IntoSet</code>或者<code>@IntoMap</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 还记得上面提到的@MapKey注解吗</span></span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UtilsMapModule</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 这里首先是Provides注解，然后是IntoMap注解，最后是前面定义的MapKey注解，同时传入了Map的key值为thisiskey</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@IntoMap</span></span><br><span class="line">    <span class="meta">@UtilsMapKey</span>(<span class="string">"thisiskey1"</span>)</span><br><span class="line">    <span class="function">Integer <span class="title">provideUtilsMapValue1</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="comment">// 返回值即为value，虽然返回值为value，但实际上注入时传入的是整个Map</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">11</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 下面加的代码没有测试过，仅演示</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@IntoMap</span></span><br><span class="line">    <span class="meta">@UtilsMapKey</span>(<span class="string">"thisiskey2"</span>)</span><br><span class="line">    <span class="function">Integer <span class="title">provideUtilsMapValue2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">12</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@IntoSet</span></span><br><span class="line">    <span class="function">Integer <span class="title">provideUtilsSetValue1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">111</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@IntoSet</span></span><br><span class="line">    <span class="function">Integer <span class="title">provideUtilsSetValue2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">222</span>;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.直接提供Set或者Map类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UtilsMapModule</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function">Set&lt;String&gt; <span class="title">provideUtilsSet</span><span class="params">()</span></span>&#123;</span><br><span class="line">      Set&lt;String&gt; utils = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">      utils.add(<span class="string">"utils1"</span>);</span><br><span class="line">      utils.add(<span class="string">"utils2"</span>);</span><br><span class="line">      <span class="keyword">return</span> utils;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function">Map&lt;String, Integer&gt; <span class="title">provideUtilsMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">      Map&lt;String, Integer&gt; utils = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">      utils.put(<span class="string">"utils-key1"</span>, <span class="number">111</span>);</span><br><span class="line">      utils.put(<span class="string">"utils-key2"</span>, <span class="number">222</span>);</span><br><span class="line">      <span class="keyword">return</span> utils;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3.使用<code>@MultiBinds</code>注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">UtilsBindModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Multibinds</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> Set&lt;String&gt; <span class="title">utilsSet</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Multibinds</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> Map&lt;String, Integer&gt; <span class="title">utilsMap</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>MultiBinds只能用于标注抽象方法，它仅仅是告诉Component我有这么一种提供类型，让我们Component可以在Component中暴露Set或者Map类型的接口，但是不能包含具体的元素。Multibinds注解是可以和第一种集合定义混用的。</p>
<p>如果将UtilsBindModule单独加在某个Component的modules参数时，它并不能提供实例，而是提供一个空的实例，如果将它和另一个可以提供具体实例的Module一起加在某个Component的modules参数时，会自动获取非空实例，此时UtilsBindModule没有作用。</p>
<h2 id="2-dagger-android进阶"><a href="#2-dagger-android进阶" class="headerlink" title="2. dagger.android进阶"></a>2. dagger.android进阶</h2><p>dagger框架可以用于Java Web项目同时也可以用于Android项目，但是在Android项目中，最重要最常用的几个组件比如Activity，如果需要进行依赖注入，那会是一个什么样的情形呢。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XXXActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    XXXEntity entity;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        DaggerXXXActivityComponent.create().inject(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="keyword">module</span> = XXXEntityModule<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">XXXActivityComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(XXXActivity activity)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XXXEntityModule</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function">XXXEntity <span class="title">provideXXXEntity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> XXXEntity();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以最简单的单个对象XXXEntity注入，我们需要在每一个Activity中加上<code>DaggerXXXActivityComponent.create().inject(this);</code>，每一个XXXActivityComponent又需要指定其module，这样就会产生很多重复的代码，且会引起结构混乱；</p>
<p>有人可能会说，那直接用一个ActivityComponent不行吗，把所有的Activity需要的XXXEntity的module都加进去，那就会产生一个module参数非常长的ActivityComponent，显然这也是不合理的；</p>
<p>还有人说，将那些需要相同XXXEntity的Activity使用相同的XXXActivityComponent，不就可以减少很多代码了，显然，项目的复杂度决定了这样的操作依然会产生很多重复代码。</p>
<p>所以我们的目的是在Activity中使用inject方法时不需要知道是哪个XXXActivityComponent，也就是说用一个通用方法<code>AndroidInjection.inject(this)</code>替换<code>DaggerXXXActivityComponent.create().inject(this)</code>，这样就可以在BaseActivity中加入这个方法，那么继承自BaseActivity的Activity就不需要再重复写了。</p>
<p>与此同时，如果XXXActivityComponent也能简化或者集成，那就非常完美了，最终我们需要的是自定义XXXEntityModule，用于提供不同Activity需要的注入对象。</p>
<p>那么首先需要回顾一下<code>DaggerXXXActivityComponent.create().inject(this)</code>，详情请往上翻，本质上相当于调用<code>this.XXXEntity = new XXXEntity()</code>，但是初始化过程Avtivity并不需要知道，都是通过dagger生成的代码执行的结果。</p>
<h3 id="2-1-Injecting-Activity-objects"><a href="#2-1-Injecting-Activity-objects" class="headerlink" title="2.1 Injecting Activity objects"></a>2.1 Injecting Activity objects</h3><p>官网给出了在Activity中进行依赖注入的步骤，首先过一遍流程，然后再根据代码分析原理：</p>
<blockquote>
<p>1.实现一个Component在自定义Application中注入</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AppComponent.java</span></span><br><span class="line"><span class="comment">// 这里的module参数必须添加AndroidInjectionModule.class，后面的MainActivityModule.class和AppModule.class有其他作用</span></span><br><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="meta">@Component</span>(modules = &#123;AndroidInjectionModule<span class="class">.<span class="keyword">class</span>, <span class="title">MainActivityModule</span>.<span class="title">class</span>, <span class="title">AppModule</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">AppComponent</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里inject的参数是自定义MyApplication，也说明了这个需要在MyApplication中调用</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MyApplication application)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>2.实现一个Subcomponent与需要注入的Activity关联</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MainActivitySubComponent.java</span></span><br><span class="line"><span class="comment">// 这里接口继承自AndroidInjector&lt;YourActivity&gt;，</span></span><br><span class="line"><span class="comment">// 同时需要一个Subcomponent.Factory工厂类继承自AndroidInjector.Factory&lt;YourActivity&gt;</span></span><br><span class="line"><span class="comment">// 现在你可能一脸懵逼，这是啥，为什么要这么写，但是没关系，后面肯定会用到</span></span><br><span class="line"><span class="meta">@Subcomponent</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MainActivitySubComponent</span> <span class="keyword">extends</span> <span class="title">AndroidInjector</span>&lt;<span class="title">MainActivity</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Subcomponent</span>.Factory</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Factory</span> <span class="keyword">extends</span> <span class="title">AndroidInjector</span>.<span class="title">Factory</span>&lt;<span class="title">MainActivity</span>&gt; </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>3.实现module为你的XXXActivity提供其需要的对象，这一步还有优化的可能，后面介绍</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MainActivityModule.java</span></span><br><span class="line"><span class="comment">// 这里的subcomponents需要上一步定义的MainActivitySubComponent.class，而且这是一个抽象类</span></span><br><span class="line"><span class="meta">@Module</span>(subcomponents = MainActivitySubComponent<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">abstract</span> <span class="title">class</span> <span class="title">MainActivityModule</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 还记得上面提到的@Binds注解吗，这里表示MainActivityModule可以提供MainActivitySubComponent.Factory对象</span></span><br><span class="line">    <span class="comment">// 前提是key为MainActivity.class</span></span><br><span class="line">    <span class="meta">@Binds</span></span><br><span class="line">    <span class="meta">@IntoMap</span></span><br><span class="line">    <span class="meta">@ClassKey</span>(MainActivity<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">abstract</span> <span class="title">AndroidInjector</span>.<span class="title">Factory</span>&lt;?&gt;</span></span><br><span class="line"><span class="class">    <span class="title">bindMainActivityAndroidInjectorFactory</span>(<span class="title">MainActivitySubComponent</span>.<span class="title">Factory</span> <span class="title">factory</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 然后需要一个提供对象的provide方法，这个Entity也就是最终我们需要在MainActivity中用到的对象</span></span><br><span class="line">    <span class="comment">// Singleton注解会导致局部单例而不是全局单例，因为只能在MainActivity中使用</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Entity <span class="title">provideEntity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Entity();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>4.自定义Application实现HasAndroidInjector接口，并且进行注入</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MyApplication.java</span></span><br><span class="line"><span class="comment">// extends Application implements HasActivityInjector</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> <span class="keyword">implements</span> <span class="title">HasActivityInjector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 需要DispatchingAndroidInjector对象，并且在activityInjector()方法中返回</span></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DispatchingAndroidInjector&lt;Activity&gt; dispatchingActivityInjector;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        <span class="comment">// 使用第一步定义的Component进行注入</span></span><br><span class="line">        DaggerAppComponent.create()</span><br><span class="line">                .inject(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AndroidInjector&lt;Activity&gt; <span class="title">activityInjector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dispatchingActivityInjector;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>5.最终在Activity中的onCreate方法中调用<code>AndroidInjection.inject(this)</code>，在super.onCreate()之前</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MainActivity.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 首先是Entity对象，它是在MainActivityModule中引入的</span></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Entity entity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其次是String对象，它是在AppModule中引入的</span></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    String info;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        AndroidInjection.inject(<span class="keyword">this</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        </span><br><span class="line">        TextView textView = findViewById(R.id.text);</span><br><span class="line">        <span class="comment">// 这里就可以直接使用entity的方法showMessage()，以及info对象的值</span></span><br><span class="line">        String text = entity.showMessage() + <span class="string">" - "</span> + info;</span><br><span class="line">        textView.setText(text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Entity.java</span></span><br><span class="line"><span class="comment">// MainActivity中需要的对象，仅作演示</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Entity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg = <span class="string">"Dagger inject"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Entity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AppModule.java</span></span><br><span class="line"><span class="comment">// AppModule用于提供全局需要的对象，比如Context，或者一些全局设置比如SharedPreferences、数据库名称等等</span></span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里增加了一个String字符，仅作演示</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="function">String <span class="title">provideGlobalInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"This is global info"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-2-Injecting-Activity-objects源码分析"><a href="#2-2-Injecting-Activity-objects源码分析" class="headerlink" title="2.2 Injecting Activity objects源码分析"></a>2.2 Injecting Activity objects源码分析</h3><p>需要分析源码才能知道问什么上面我们需要定义各种Factory接口以及为什么要在Application中进行注入</p>
<p>那么首先从Activity中开始，这是使用dagger依赖注入的终点，MainActivity中仅有一处与dagger相关<code>AndroidInjection.inject(this);</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AndroidInjection.java</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Injects &#123;<span class="doctag">@code</span> activity&#125; if an associated &#123;<span class="doctag">@link</span> AndroidInjector&#125; implementation can be found,</span></span><br><span class="line"><span class="comment">   * otherwise throws an &#123;<span class="doctag">@link</span> IllegalArgumentException&#125;.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> RuntimeException if the &#123;<span class="doctag">@link</span> Application&#125; doesn't implement &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment">   *     HasActivityInjector&#125;.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">    checkNotNull(activity, <span class="string">"activity"</span>);</span><br><span class="line">    Application application = activity.getApplication();</span><br><span class="line">    <span class="comment">// 这里对application进行了判断，如果没有实现HasActivityInjector，那么会报错</span></span><br><span class="line">    <span class="comment">// 这也是为什么我们自定义的Application需要实现HasActivityInjector接口</span></span><br><span class="line">    <span class="keyword">if</span> (!(application <span class="keyword">instanceof</span> HasActivityInjector)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">          String.format(</span><br><span class="line">              <span class="string">"%s does not implement %s"</span>,</span><br><span class="line">              application.getClass().getCanonicalName(),</span><br><span class="line">              HasActivityInjector<span class="class">.<span class="keyword">class</span>.<span class="title">getCanonicalName</span>()))</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 这里调用了application的activityInjector()方法，得到了一个AndroidInjector&lt;Activity&gt;对象</span></span><br><span class="line">    AndroidInjector&lt;Activity&gt; activityInjector =</span><br><span class="line">        ((HasActivityInjector) application).activityInjector();</span><br><span class="line">    checkNotNull(activityInjector, <span class="string">"%s.activityInjector() returned null"</span>, application.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 然后通过AndroidInjector&lt;Activity&gt;对象，调用其inject方法对当前的activity进行注入</span></span><br><span class="line">    activityInjector.inject(activity);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>与MainActivity中的<code>AndroidInjection.inject(this);</code>相关联的是自定义的MyApplication，且调用了它的<code>activityInjector()</code>方法，这也是为什么我们需要在自定义Application中实现<code>activityInjector()</code>方法，且返回了一个DispatchingAndroidInjector<Activity>对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MyApplication.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> <span class="keyword">implements</span> <span class="title">HasActivityInjector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据上文的分析，我们知道了在MainActivity中调用的inject方法其实是调用了dispatchingActivityInjector的inject方法</span></span><br><span class="line">    <span class="comment">// 而这个DispatchingAndroidInjector&lt;Activity&gt;对象竟然也是通过注入的方式获取的，它的来源DaggerAppComponent.create().inject(this);</span></span><br><span class="line">    <span class="comment">// 因此我们需要到AppComponent中找到DispatchingAndroidInjector&lt;Activity&gt;是怎么来的</span></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DispatchingAndroidInjector&lt;Activity&gt; dispatchingActivityInjector;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line"></span><br><span class="line">        DaggerAppComponent.create().inject(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AndroidInjector&lt;Activity&gt; <span class="title">activityInjector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dispatchingActivityInjector;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在分析AppComponent先看看<code>DaggerAppComponent.create().inject(this);</code>做了些什么工作，这里代码都比较多，关联了很多其他类，<br>这里可以按照记号按顺序分析<code>DaggerAppComponent.create().inject(this)</code>的调用过程，显然这里有建造者模式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DaggerAppComponent</span> <span class="keyword">implements</span> <span class="title">AppComponent</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Provider&lt;MainActivitySubComponent.Factory&gt; mainActivitySubComponentFactoryProvider;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Provider&lt;Entity&gt; provideEntityProvider;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Provider&lt;String&gt; provideGlobalInfoProvider;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. Builder().build()返回了DaggerAppComponent对象</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">DaggerAppComponent</span><span class="params">(AppModule appModuleParam)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    initialize(appModuleParam);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Builder();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 调用静态方法create，返回了Builder().build()</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AppComponent <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Builder().build();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 11. getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf方法返回的是SingletonMap，key是MainActivity.class</span></span><br><span class="line"><span class="comment">// value是mainActivitySubComponentFactoryProvider，简而言之还是一个map，然后需要看10中DispatchingAndroidInjector_Factory</span></span><br><span class="line"><span class="comment">// 的实例是如何构造的</span></span><br><span class="line">  <span class="keyword">private</span> Map&lt;Class&lt;?&gt;, Provider&lt;AndroidInjector.Factory&lt;?&gt;&gt;&gt;</span><br><span class="line">      getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf() &#123;</span><br><span class="line">    <span class="keyword">return</span> Collections.&lt;Class&lt;?&gt;, Provider&lt;AndroidInjector.Factory&lt;?&gt;&gt;&gt;singletonMap(</span><br><span class="line">        MainActivity<span class="class">.<span class="keyword">class</span>, (<span class="title">Provider</span>) <span class="title">mainActivitySubComponentFactoryProvider</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 10. getDispatchingAndroidInjectorOfActivity返回的是DispatchingAndroidInjector_Factory的实例</span></span><br><span class="line"><span class="comment">// 带入了参数getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf()以及一个emptyMap，对的就是空map，仅包含了key和value的类型</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> DispatchingAndroidInjector&lt;Activity&gt; <span class="title">getDispatchingAndroidInjectorOfActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> DispatchingAndroidInjector_Factory.newInstance(</span><br><span class="line">        getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),</span><br><span class="line">        Collections.&lt;String, Provider&lt;AndroidInjector.Factory&lt;?&gt;&gt;&gt;emptyMap());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. DaggerAppComponent构造方法里执行了initialize方法，这个initialize对DaggerAppComponent类里面的私有变量进行了初始化</span></span><br><span class="line">  <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(<span class="keyword">final</span> AppModule appModuleParam)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 4.1 首先是mainActivitySubComponentFactoryProvider，返回了一个Provider对象，</span></span><br><span class="line">    <span class="comment">// 根据注释可以知道Provider用于提供一个已经构造好的用于注入的对象实例，如果调用这个Provider的get方法，</span></span><br><span class="line">    <span class="comment">// 我们就可以得到MainActivitySubComponentFactory对象</span></span><br><span class="line">    <span class="keyword">this</span>.mainActivitySubComponentFactoryProvider =</span><br><span class="line">        <span class="keyword">new</span> Provider&lt;MainActivitySubComponent.Factory&gt;() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="keyword">public</span> MainActivitySubComponent.<span class="function">Factory <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MainActivitySubComponentFactory();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    <span class="comment">// 4.2 provideEntityProvider被赋值为MainActivityModule_ProvideEntityFactory.create()</span></span><br><span class="line">    <span class="comment">// 使用DoubleCheck是因为Entity在provide方法中标注了Singleton，</span></span><br><span class="line">    <span class="comment">// MainActivityModule_ProvideEntityFactory的作用将在下面继续介绍</span></span><br><span class="line">    <span class="keyword">this</span>.provideEntityProvider =</span><br><span class="line">        DoubleCheck.provider(MainActivityModule_ProvideEntityFactory.create());</span><br><span class="line">    <span class="comment">// 4.3 provideGlobalInfoProvider同理，但是AppModule_ProvideGlobalInfoFactory.create(appModuleParam)</span></span><br><span class="line">    <span class="comment">// 多了一个参数，AppModule_ProvideGlobalInfoFactory的作用将在下面继续介绍</span></span><br><span class="line">    <span class="keyword">this</span>.provideGlobalInfoProvider =</span><br><span class="line">        DoubleCheck.provider(AppModule_ProvideGlobalInfoFactory.create(appModuleParam));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 8. DaggerAppComponent.create().inject(this)的最后一步，实际调用injectMyApplication</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(MyApplication application)</span> </span>&#123;</span><br><span class="line">    injectMyApplication(application);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 9. 两个关键，MyApplication_MembersInjector类以及本地的getDispatchingAndroidInjectorOfActivity()方法</span></span><br><span class="line"><span class="comment">// MyApplication_MembersInjector类后续再介绍，但是本质上injectDispatchingActivityInjector方法等价于</span></span><br><span class="line"><span class="comment">// instance.DispatchingActivityInjector = getDispatchingAndroidInjectorOfActivity()</span></span><br><span class="line"><span class="comment">// 先看getDispatchingAndroidInjectorOfActivity()方法</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> MyApplication <span class="title">injectMyApplication</span><span class="params">(MyApplication instance)</span> </span>&#123;</span><br><span class="line">    MyApplication_MembersInjector.injectDispatchingActivityInjector(</span><br><span class="line">        instance, getDispatchingAndroidInjectorOfActivity());</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AppModule appModule;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">appModule</span><span class="params">(AppModule appModule)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.appModule = Preconditions.checkNotNull(appModule);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Builder().build() new了一个AppModule对象，然后返回了DaggerAppComponent(appModule)的对象，</span></span><br><span class="line"><span class="comment">// 还记得AppModule类的功能吗，提供全局对象，其中有一个String provideGlobalInfo()方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AppComponent <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (appModule == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.appModule = <span class="keyword">new</span> AppModule();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> DaggerAppComponent(appModule);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. MainActivitySubComponentFactory类实现了MainActivitySubComponent.Factory接口的create方法，</span></span><br><span class="line"><span class="comment">// 最终还是返回了MainActivitySubComponentImpl对象</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivitySubComponentFactory</span> <span class="keyword">implements</span> <span class="title">MainActivitySubComponent</span>.<span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MainActivitySubComponent <span class="title">create</span><span class="params">(MainActivity arg0)</span> </span>&#123;</span><br><span class="line">      Preconditions.checkNotNull(arg0);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> MainActivitySubComponentImpl(arg0);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. MainActivitySubComponentImpl对象实现了MainActivitySubComponent接口的inject方法，</span></span><br><span class="line"><span class="comment">// 这是由于MainActivitySubComponent继承自AndroidInjector&lt;MainActivity&gt;</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivitySubComponentImpl</span> <span class="keyword">implements</span> <span class="title">MainActivitySubComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MainActivitySubComponentImpl</span><span class="params">(MainActivity arg0)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity arg0)</span> </span>&#123;</span><br><span class="line">      injectMainActivity(arg0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. 最终调用inject方法时，我们看到了inject(MainActivity arg0)参数为MainActivity，</span></span><br><span class="line"><span class="comment">// 想必此时你应该猜到了在MainActivity中的一句话AndroidInjection.inject(this)竟然能在异国他乡被实现</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> MainActivity <span class="title">injectMainActivity</span><span class="params">(MainActivity instance)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 这里的两个方法injectEntity和injectInfo分别对应了我们在MainActivity中注入的两个对象，instance是MainActivity，</span></span><br><span class="line">      <span class="comment">// provideEntityProvider.get()和provideGlobalInfoProvider.get()方法对应上面initialize方法初始化的私有变量，</span></span><br><span class="line">      <span class="comment">// 看这个方法的样子就知道这是对MainActivity进行注入的实际方法，MainActivity_MembersInjector的作用将在下面继续介绍</span></span><br><span class="line">      MainActivity_MembersInjector.injectEntity(</span><br><span class="line">          instance, DaggerAppComponent.<span class="keyword">this</span>.provideEntityProvider.get());</span><br><span class="line">      MainActivity_MembersInjector.injectInfo(</span><br><span class="line">          instance, DaggerAppComponent.<span class="keyword">this</span>.provideGlobalInfoProvider.get());</span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MainActivityModule_ProvideEntityFactory.java</span></span><br><span class="line"><span class="comment">// 接上文4.2</span></span><br><span class="line"><span class="comment">// Factory&lt;Entity&gt;继承自Provider，Provider之前提到过用于提供构造好的实例，通过get方法返回</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivityModule_ProvideEntityFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span>&lt;<span class="title">Entity</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MainActivityModule_ProvideEntityFactory INSTANCE =</span><br><span class="line">      <span class="keyword">new</span> MainActivityModule_ProvideEntityFactory();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Entity <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> provideEntity();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 4.2-1 首先是create方法返回实例，这是饿汉式单例模式，在类初始化时，已经自行实例化</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MainActivityModule_ProvideEntityFactory <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> INSTANCE;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 接上文7-1，provideEntity方法返回的是MainActivityModule.provideEntity()，而MainActivityModule</span></span><br><span class="line"><span class="comment">// 是我们定义的，MainActivityModule.provideEntity()返回new Entity()，所以我们最终得到了new出来的对象</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Entity <span class="title">provideEntity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Preconditions.checkNotNull(</span><br><span class="line">        MainActivityModule.provideEntity(),</span><br><span class="line">        <span class="string">"Cannot return null from a non-@Nullable @Provides method"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AppModule_ProvideGlobalInfoFactory.java</span></span><br><span class="line"><span class="comment">// 接上文4.3</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule_ProvideGlobalInfoFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> AppModule <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">AppModule_ProvideGlobalInfoFactory</span><span class="params">(AppModule <span class="keyword">module</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.<span class="keyword">module</span> = <span class="keyword">module</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> provideGlobalInfo(<span class="keyword">module</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 4.3-1 首先也是create方法，观察一下与MainActivityModule_ProvideEntityFactory的create方法的不同之处</span></span><br><span class="line"><span class="comment">// 这里通过构造方法返回了实例，而不是单例模式，要知道AppModule和MainActivityModule中都是加入了Singleton注解</span></span><br><span class="line"><span class="comment">// todo 这可能是因为需要传入参数create(AppModule module)的原因，而且AppModule是一个类而MainActivityModule</span></span><br><span class="line"><span class="comment">// 是一个抽象类</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AppModule_ProvideGlobalInfoFactory <span class="title">create</span><span class="params">(AppModule <span class="keyword">module</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AppModule_ProvideGlobalInfoFactory(<span class="keyword">module</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 接上文7-1，provideGlobalInfo返回的就是我们在AppModule定义的String "This is global info"</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">provideGlobalInfo</span><span class="params">(AppModule instance)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Preconditions.checkNotNull(</span><br><span class="line">        instance.provideGlobalInfo(), <span class="string">"Cannot return null from a non-@Nullable @Provides method"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DispatchingAndroidInjector_Factory.java</span></span><br><span class="line"><span class="comment">// 接上文10，我们传入的参数是两个map，一个为空，另一个与MainActivity相关</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatchingAndroidInjector_Factory</span>&lt;<span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Factory</span>&lt;<span class="title">DispatchingAndroidInjector</span>&lt;<span class="title">T</span>&gt;&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Provider&lt;Map&lt;Class&lt;?&gt;, Provider&lt;AndroidInjector.Factory&lt;?&gt;&gt;&gt;&gt;</span><br><span class="line">      injectorFactoriesWithClassKeysProvider;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Provider&lt;Map&lt;String, Provider&lt;AndroidInjector.Factory&lt;?&gt;&gt;&gt;&gt;</span><br><span class="line">      injectorFactoriesWithStringKeysProvider;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">DispatchingAndroidInjector_Factory</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      Provider&lt;Map&lt;Class&lt;?&gt;, Provider&lt;AndroidInjector.Factory&lt;?&gt;&gt;&gt;&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">          injectorFactoriesWithClassKeysProvider,</span></span></span><br><span class="line"><span class="function"><span class="params">      Provider&lt;Map&lt;String, Provider&lt;AndroidInjector.Factory&lt;?&gt;&gt;&gt;&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">          injectorFactoriesWithStringKeysProvider)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.injectorFactoriesWithClassKeysProvider = injectorFactoriesWithClassKeysProvider;</span><br><span class="line">    <span class="keyword">this</span>.injectorFactoriesWithStringKeysProvider = injectorFactoriesWithStringKeysProvider;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> DispatchingAndroidInjector&lt;T&gt; <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DispatchingAndroidInjector&lt;T&gt;(</span><br><span class="line">        injectorFactoriesWithClassKeysProvider.get(),</span><br><span class="line">        injectorFactoriesWithStringKeysProvider.get());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">DispatchingAndroidInjector_Factory&lt;T&gt; <span class="title">create</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      Provider&lt;Map&lt;Class&lt;?&gt;, Provider&lt;AndroidInjector.Factory&lt;?&gt;&gt;&gt;&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">          injectorFactoriesWithClassKeysProvider,</span></span></span><br><span class="line"><span class="function"><span class="params">      Provider&lt;Map&lt;String, Provider&lt;AndroidInjector.Factory&lt;?&gt;&gt;&gt;&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">          injectorFactoriesWithStringKeysProvider)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DispatchingAndroidInjector_Factory&lt;T&gt;(</span><br><span class="line">        injectorFactoriesWithClassKeysProvider, injectorFactoriesWithStringKeysProvider);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 10-1 newInstance返回的是DispatchingAndroidInjector，先简单说明一下这个类的作用</span></span><br><span class="line"><span class="comment">// DispatchingAndroidInjector类是一个完成对Activity或Fragment进行依赖注入的类，因为传入的参数包括</span></span><br><span class="line"><span class="comment">// injectorFactoriesWithClassKeys，这个Map根据前面的分析可知它的key就是Activity.class或者Fragment.class</span></span><br><span class="line"><span class="comment">// 即依赖注入的位置，它的value是一个Provider，这个Provider提供inject方法，专门用于将依赖实例注入到</span></span><br><span class="line"><span class="comment">// key对应的Activity或Fragment中</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">DispatchingAndroidInjector&lt;T&gt; <span class="title">newInstance</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      Map&lt;Class&lt;?&gt;, Provider&lt;AndroidInjector.Factory&lt;?&gt;&gt;&gt; injectorFactoriesWithClassKeys,</span></span></span><br><span class="line"><span class="function"><span class="params">      Map&lt;String, Provider&lt;AndroidInjector.Factory&lt;?&gt;&gt;&gt; injectorFactoriesWithStringKeys)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DispatchingAndroidInjector&lt;T&gt;(</span><br><span class="line">        injectorFactoriesWithClassKeys, injectorFactoriesWithStringKeys);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>详细分析DispatchingAndroidInjector类的功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注释已经说的很清楚了，DispatchingAndroidInjector类是一个完成对Activity或Fragment进行依赖注入的类</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Performs members-injection on instances of core Android types (e.g. &#123;<span class="doctag">@link</span> Activity&#125;, &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * Fragment&#125;) that are constructed by the Android framework and not by Dagger. This class relies on</span></span><br><span class="line"><span class="comment"> * an injected mapping from each concrete class to an &#123;<span class="doctag">@link</span> AndroidInjector.Factory&#125; for an &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * AndroidInjector&#125; of that class. Each concrete class must have its own entry in the map, even if</span></span><br><span class="line"><span class="comment"> * it extends another class which is already present in the map. Calls &#123;<span class="doctag">@link</span> Object#getClass()&#125; on</span></span><br><span class="line"><span class="comment"> * the instance in order to find the appropriate &#123;<span class="doctag">@link</span> AndroidInjector.Factory&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; the core Android type to be injected</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Beta</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatchingAndroidInjector</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">AndroidInjector</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NO_SUPERTYPES_BOUND_FORMAT =</span><br><span class="line">      <span class="string">"No injector factory bound for Class&lt;%s&gt;"</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SUPERTYPES_BOUND_FORMAT =</span><br><span class="line">      <span class="string">"No injector factory bound for Class&lt;%1$s&gt;. Injector factories were bound for supertypes "</span></span><br><span class="line">          + <span class="string">"of %1$s: %2$s. Did you mean to bind an injector factory for the subtype?"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Provider&lt;AndroidInjector.Factory&lt;?&gt;&gt;&gt; injectorFactories;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接上文10-1，这里就是初始化的位置，调用了merge方法</span></span><br><span class="line">  <span class="meta">@Inject</span></span><br><span class="line">  DispatchingAndroidInjector(</span><br><span class="line">      Map&lt;Class&lt;?&gt;, Provider&lt;AndroidInjector.Factory&lt;?&gt;&gt;&gt; injectorFactoriesWithClassKeys,</span><br><span class="line">      Map&lt;String, Provider&lt;AndroidInjector.Factory&lt;?&gt;&gt;&gt; injectorFactoriesWithStringKeys) &#123;</span><br><span class="line">    <span class="keyword">this</span>.injectorFactories = merge(injectorFactoriesWithClassKeys, injectorFactoriesWithStringKeys);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// merge方法注释也说明了，就是将classKeyedMap的key从Class改为Class.getName的形式</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Merges the two maps into one by transforming the values of the &#123;<span class="doctag">@code</span> classKeyedMap&#125; with</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@link</span> Class#getName()&#125;.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * &lt;p&gt;An SPI plugin verifies the logical uniqueness of the keysets of these two maps so we're</span></span><br><span class="line"><span class="comment">   * assured there's no overlap.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * &lt;p&gt;Ideally we could achieve this with a generic &#123;<span class="doctag">@code</span> <span class="doctag">@Provides</span>&#125; method, but we'd need to have</span></span><br><span class="line"><span class="comment">   * &lt;i&gt;N&lt;/i&gt; modules that each extend one base module.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> &lt;C, V&gt; Map&lt;String, Provider&lt;AndroidInjector.Factory&lt;?&gt;&gt;&gt; merge(</span><br><span class="line">      Map&lt;Class&lt;? extends C&gt;, V&gt; classKeyedMap, Map&lt;String, V&gt; stringKeyedMap) &#123;</span><br><span class="line">    <span class="keyword">if</span> (classKeyedMap.isEmpty()) &#123;</span><br><span class="line">      <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"unchecked"</span>, <span class="string">"rawtypes"</span>&#125;)</span><br><span class="line">      Map&lt;String, Provider&lt;AndroidInjector.Factory&lt;?&gt;&gt;&gt; safeCast = (Map) stringKeyedMap;</span><br><span class="line">      <span class="keyword">return</span> safeCast;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, V&gt; merged =</span><br><span class="line">        newLinkedHashMapWithExpectedSize(classKeyedMap.size() + stringKeyedMap.size());</span><br><span class="line">    merged.putAll(stringKeyedMap);</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;Class&lt;? extends C&gt;, V&gt; entry : classKeyedMap.entrySet()) &#123;</span><br><span class="line">      <span class="comment">// put的位置，key是entry.getKey().getName()即Class.getName()，value为entry.getValue()</span></span><br><span class="line">      <span class="comment">// 即与classKeyedMap的value相同</span></span><br><span class="line">      merged.put(entry.getKey().getName(), entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"unchecked"</span>, <span class="string">"rawtypes"</span>&#125;)</span><br><span class="line">    Map&lt;String, Provider&lt;AndroidInjector.Factory&lt;?&gt;&gt;&gt; safeCast = (Map) merged;</span><br><span class="line">    <span class="keyword">return</span> Collections.unmodifiableMap(safeCast);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// maybeInject方法即最终调用的位置，instance可以是Activity或者Fragment，如果对应我们之前的代码</span></span><br><span class="line"><span class="comment">// 此处应该是instance为MainActivity</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Attempts to perform members-injection on &#123;<span class="doctag">@code</span> instance&#125;, returning &#123;<span class="doctag">@code</span> true&#125; if</span></span><br><span class="line"><span class="comment">   * successful, &#123;<span class="doctag">@code</span> false&#125; otherwise.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> InvalidInjectorBindingException if the injector factory bound for a class does not</span></span><br><span class="line"><span class="comment">   *     inject instances of that class</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@CanIgnoreReturnValue</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">maybeInject</span><span class="params">(T instance)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// injectorFactories为merge方法初始化得到的map，通过get(instance.getClass().getName())</span></span><br><span class="line">    <span class="comment">// 得到Provider，那么对应我们的代码，这个factoryProvider是DaggerAppComponent.java中的mainActivitySubComponentFactoryProvider，</span></span><br><span class="line">    <span class="comment">// 如果调用mainActivitySubComponentFactoryProvider.inject(instance)即完成依赖注入</span></span><br><span class="line">    Provider&lt;AndroidInjector.Factory&lt;?&gt;&gt; factoryProvider =</span><br><span class="line">        injectorFactories.get(instance.getClass().getName());</span><br><span class="line">    <span class="keyword">if</span> (factoryProvider == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// factory = factoryProvider.get()，这里获取到了mainActivitySubComponentFactoryProvider</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    AndroidInjector.Factory&lt;T&gt; factory = (AndroidInjector.Factory&lt;T&gt;) factoryProvider.get();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// injector = factory.create(instance)，即返回了DaggerAppComponent.java中的MainActivitySubComponentImpl实例</span></span><br><span class="line">      AndroidInjector&lt;T&gt; injector =</span><br><span class="line">          checkNotNull(</span><br><span class="line">              factory.create(instance), <span class="string">"%s.create(I) should not return null."</span>, factory.getClass());</span><br><span class="line">      <span class="comment">// injector.inject(instance)，熟悉的味道，这里就是调用MainActivitySubComponentImpl.inject方法的最终位置</span></span><br><span class="line">      <span class="comment">// 在这里完成了实际的依赖注入，前提是需要调用DispatchingAndroidInjector的inject方法(此处预留伏笔)</span></span><br><span class="line">      injector.inject(instance);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassCastException e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> InvalidInjectorBindingException(</span><br><span class="line">          String.format(</span><br><span class="line">              <span class="string">"%s does not implement AndroidInjector.Factory&lt;%s&gt;"</span>,</span><br><span class="line">              factory.getClass().getCanonicalName(), instance.getClass().getCanonicalName()),</span><br><span class="line">          e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 倘若我们需要调用DispatchingAndroidInjector.inject方法，那么就执行了对instance的注入</span></span><br><span class="line"><span class="comment">// 实际调用的是maybeInject方法</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Performs members-injection on &#123;<span class="doctag">@code</span> instance&#125;.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> InvalidInjectorBindingException if the injector factory bound for a class does not</span></span><br><span class="line"><span class="comment">   *     inject instances of that class</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> IllegalArgumentException if no &#123;<span class="doctag">@link</span> AndroidInjector.Factory&#125; is bound for &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment">   *     instance&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(T instance)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> wasInjected = maybeInject(instance);</span><br><span class="line">    <span class="keyword">if</span> (!wasInjected) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(errorMessageSuggestions(instance));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Exception thrown if an incorrect binding is made for a &#123;<span class="doctag">@link</span> AndroidInjector.Factory&#125;. If you</span></span><br><span class="line"><span class="comment">   * see this exception, make sure the value in your &#123;<span class="doctag">@code</span> <span class="doctag">@ActivityKey</span>(YourActivity.class)&#125; or</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@code</span> <span class="doctag">@FragmentKey</span>(YourFragment.class)&#125; matches the type argument of the injector factory.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Beta</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">InvalidInjectorBindingException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">    InvalidInjectorBindingException(String message, ClassCastException cause) &#123;</span><br><span class="line">      <span class="keyword">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Returns an error message with the class names that are supertypes of &#123;<span class="doctag">@code</span> instance&#125;. */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> String <span class="title">errorMessageSuggestions</span><span class="params">(T instance)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; suggestions = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Class&lt;?&gt; clazz = instance.getClass(); clazz != <span class="keyword">null</span>; clazz = clazz.getSuperclass()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (injectorFactories.containsKey(clazz.getCanonicalName())) &#123;</span><br><span class="line">        suggestions.add(clazz.getCanonicalName());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> suggestions.isEmpty()</span><br><span class="line">        ? String.format(NO_SUPERTYPES_BOUND_FORMAT, instance.getClass().getCanonicalName())</span><br><span class="line">        : String.format(</span><br><span class="line">            SUPERTYPES_BOUND_FORMAT, instance.getClass().getCanonicalName(), suggestions);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接上文9</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication_MembersInjector</span> <span class="keyword">implements</span> <span class="title">MembersInjector</span>&lt;<span class="title">MyApplication</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Provider&lt;DispatchingAndroidInjector&lt;Activity&gt;&gt; dispatchingActivityInjectorProvider;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyApplication_MembersInjector</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      Provider&lt;DispatchingAndroidInjector&lt;Activity&gt;&gt; dispatchingActivityInjectorProvider)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.dispatchingActivityInjectorProvider = dispatchingActivityInjectorProvider;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MembersInjector&lt;MyApplication&gt; <span class="title">create</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      Provider&lt;DispatchingAndroidInjector&lt;Activity&gt;&gt; dispatchingActivityInjectorProvider)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyApplication_MembersInjector(dispatchingActivityInjectorProvider);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">injectMembers</span><span class="params">(MyApplication instance)</span> </span>&#123;</span><br><span class="line">    injectDispatchingActivityInjector(instance, dispatchingActivityInjectorProvider.get());</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 9-1 调用injectDispatchingActivityInjector将DispatchingAndroidInjector注入到MyApplication中</span></span><br><span class="line"><span class="comment">// 然后需要找到DispatchingAndroidInjector的inject方法是在哪里在什么时候被执行的，还记得最初的起点吗</span></span><br><span class="line"><span class="comment">// MainActivity中的AndroidInjection.inject(this)，没错，我们回来了</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">injectDispatchingActivityInjector</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      MyApplication instance, DispatchingAndroidInjector&lt;Activity&gt; dispatchingActivityInjector)</span> </span>&#123;</span><br><span class="line">    instance.dispatchingActivityInjector = dispatchingActivityInjector;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AndroidInjection.java</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">    checkNotNull(activity, <span class="string">"activity"</span>);</span><br><span class="line">    Application application = activity.getApplication();</span><br><span class="line">    <span class="keyword">if</span> (!(application <span class="keyword">instanceof</span> HasActivityInjector)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">          String.format(</span><br><span class="line">              <span class="string">"%s does not implement %s"</span>,</span><br><span class="line">              application.getClass().getCanonicalName(),</span><br><span class="line">              HasActivityInjector<span class="class">.<span class="keyword">class</span>.<span class="title">getCanonicalName</span>()))</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AndroidInjector&lt;Activity&gt; activityInjector =</span><br><span class="line">        ((HasActivityInjector) application).activityInjector();</span><br><span class="line">    checkNotNull(activityInjector, <span class="string">"%s.activityInjector() returned null"</span>, application.getClass());</span><br><span class="line"><span class="comment">// 之前我们一直没有明白为什么有AndroidInjector类，为什么要调用activityInjector.inject(activity)方法</span></span><br><span class="line"><span class="comment">// 以及为什么需要HasActivityInjector接口,现在一切都清楚了</span></span><br><span class="line"><span class="comment">// activityInjector即DispatchingAndroidInjector_Factory.newInstance方法返回的DispatchingAndroidInjector实例</span></span><br><span class="line"><span class="comment">// 调用DispatchingAndroidInjector.inject会将DispatchingAndroidInjector_Factory.newInstance传入的Map的value中的</span></span><br><span class="line"><span class="comment">// 实例注入到activity中</span></span><br><span class="line">    activityInjector.inject(activity);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>上述代码过程比较长，下面重新整理一下inject的流程：</p>
<ol>
<li>将<code>DispatchingAndroidInjector&lt;Activity&gt;</code>注入到Application中，注入的时候会将AppComponent中的各个module所能提供的实例用Provider初始化，与此同时也会根据带有subcomponent和抽象方法的module生成MainActivitySubComponent.Factory的Provider，为注入到指定Activity提供接口；</li>
<li>在MainActivity中执行<code>AndroidInjection.inject(this);</code>即可获取<code>@Inject</code>修饰的实例，这是由于<code>AndroidInjection.inject(this);</code>实际上调用的是Application中的<code>DispatchingAndroidInjector&lt;Activity&gt;.inject</code>方法，<code>DispatchingAndroidInjector&lt;Activity&gt;</code>可以获取到在DaggerAppComponent初始化的实例的Provider以及对应MainActivity的MainActivitySubComponent.Factory的Provider，这个MainActivitySubComponent.Factory可以提供将实例注入到MainActivity中的inject方法，所以<code>DispatchingAndroidInjector&lt;Activity&gt;.inject</code>方法实际上是执行MainActivitySubComponent.Factory提供的inject方法，也就完成了注入。</li>
</ol>
<p>至此，与依赖注入相关的自动生成的代码已经分析完毕了，整个注入的流程也明白了，但是还遗留了几个问题：</p>
<ol>
<li>为什么要在自定义Application进行注入，以及为什么要实现接口HasActivityInjector？</li>
<li>AppComponent的module为什么必须包含AndroidInjectionModule.class？</li>
<li>MainActivitySubComponent为什么要继承AndroidInjector<MainActivity>，为什么要定义Factory继承AndroidInjector.Factory<MainActivity>？</li>
<li>MainActivityModule的subcomponents为什么是MainActivitySubComponent.class，以及为什么要定义抽象方法bindMainActivityAndroidInjectorFactory？</li>
</ol>
<blockquote>
<p>1.为什么要在自定义Application进行注入，以及为什么要实现接口HasActivityInjector？</p>
</blockquote>
<p>仔细看AndroidInjection.inject(this)的源码不难知道，activityInjector是来自于application的，为什么要依靠application，<br>因为当我们获取activityInjector时需要一个全局的类，其他Activity或者Fragment也能访问到，而且必须先于Activity或者Fragment被实例化，<br>在整个应用启动过程中只有application符合。</p>
<p>为什么需要实现HasActivityInjector，这是因为application目前只负责Activity的注入，需要DispatchingAndroidInjector<Activity>实例，<br>而activityInjector方法可以返回这个实例，<code>DaggerAppComponent.create().inject(this);</code>会将DispatchingAndroidInjector实例注入到application中。</p>
<blockquote>
<p>2.AppComponent的module为什么必须包含AndroidInjectionModule.class？</p>
</blockquote>
<p>首先看看AndroidInjectionModule的内容，抽象类加上<code>@Multibinds</code>标注的抽象方法，但是看classKeyedInjectorFactories和stringKeyedInjectorFactories两个名字就知道了，在上面的代码DispatchingAndroidInjector.java中出现过。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Contains bindings to ensure the usability of &#123;<span class="doctag">@code</span> dagger.android&#125; framework classes. This</span></span><br><span class="line"><span class="comment"> * module should be installed in the component that is used to inject the &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * android.app.Application&#125; class.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Beta</span></span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AndroidInjectionModule</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Multibinds</span></span><br><span class="line">  <span class="keyword">abstract</span> Map&lt;Class&lt;?&gt;, AndroidInjector.Factory&lt;?&gt;&gt; classKeyedInjectorFactories();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Multibinds</span></span><br><span class="line">  <span class="keyword">abstract</span> Map&lt;String, AndroidInjector.Factory&lt;?&gt;&gt; stringKeyedInjectorFactories();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">AndroidInjectionModule</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>MultiBinds只能用于标注抽象方法，它仅仅是告诉Component我有这么一种提供类型，让我们Component可以在Component中暴露Set或者Map类型的接口，但是不能包含具体的元素。</p>
<p>再看DispatchingAndroidInjector的构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Inject</span></span><br><span class="line">DispatchingAndroidInjector(</span><br><span class="line">    Map&lt;Class&lt;?&gt;, Provider&lt;AndroidInjector.Factory&lt;?&gt;&gt;&gt; injectorFactoriesWithClassKeys,</span><br><span class="line">    Map&lt;String, Provider&lt;AndroidInjector.Factory&lt;?&gt;&gt;&gt; injectorFactoriesWithStringKeys) &#123;</span><br><span class="line">  <span class="keyword">this</span>.injectorFactories = merge(injectorFactoriesWithClassKeys, injectorFactoriesWithStringKeys);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>DispatchingAndroidInjector的构造方法也是通过Inject方式，所以它的参数也必须由Component中的Module来提供，而且其参数是后续初始化过程确定的，所以需要用抽象类来实现，通过抽象类占位保证编译成功。</p>
<blockquote>
<p>3.MainActivitySubComponent为什么要继承AndroidInjector<MainActivity>，为什么要定义Factory继承AndroidInjector.Factory<MainActivity>？</p>
</blockquote>
<p>我们需要在DaggerAppComponent提供能将实例注入到指定Activity的Provider—-比如mainActivitySubComponentFactoryProvider，这个Provider需要能够提供Factory实现create方法，create方法能够返回MainActivitySubComponentImpl实现inject方法，这两个方法都是与MainActivity关联的，所以需要自定义MainActivitySubComponent，其继承的接口AndroidInjector<MainActivity>包括create方法，而且内部接口AndroidInjector.Factory<MainActivity>包括inject方法。</p>
<blockquote>
<p>4.MainActivityModule的subcomponents为什么是MainActivitySubComponent.class，以及为什么要定义抽象方法bindMainActivityAndroidInjectorFactory？</p>
</blockquote>
<p>抽象方法bindMainActivityAndroidInjectorFactory被<code>@Binds</code>修饰，提供的是这个方法的参数实例；<br>AppComponent依赖MainActivityModule，作为父Component；MainActivitySubComponent作为子Component，用<code>@Subcomponent</code>标注；在父Component依赖的MainActivityModule的subcomponents参数加上MainActivitySubComponent，然后就可以在父ComponentAppComponent中请求SubComponent.Factory。此时SubComponent编译时不会生成 DaggerXXComponent，需要通过 父Component 的获取 SubComponent.Factory 方法获取 SubComponent 实例。</p>
<p>以上过程中，如果要增加SecondActivity，那么同样需要增加SecondActivityModule和SecondActivitySubComponent，并且加在AppComponent的modules参数中，显然AppComponent的参数会很多，解决方法是</p>
<p><strong>如果您的subcomponent 及其构建器没有第2步中提到的其他方法或超类型，您可以使用@ContributesAndroidInjector为您生成它们。我们就不需要步骤2和3，取而代之的是添加一个抽象模块方法，该方法返回您的activity，使用@ContributesAndroidInjector对其进行注解，并指定要安装到子组件中的模块。 如果子组件需要scopes，则也可以用@scopes注解到该方法。</strong></p>
<p>代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ActivityScope</span></span><br><span class="line"><span class="meta">@ContributesAndroidInjector</span>(modules = &#123; <span class="comment">/* modules to install into the subcomponent */</span> &#125;)</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> YourActivity <span class="title">contributeYourActivityInjector</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>1.首先将Activity依赖的module都集中在一个module中ActivityBuilder</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ContributesAndroidInjector</span>(modules = &#123;</span><br><span class="line">            MainActivityModule<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">    <span class="title">abstract</span> <span class="title">MainActivity</span> <span class="title">bindMainActivity</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ContributesAndroidInjector</span>(modules = &#123;</span><br><span class="line">            SecondActivityModule<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">    <span class="title">abstract</span> <span class="title">SecondActivity</span> <span class="title">bindSecondActivity</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>2.修改AppComponent的modules参数，删掉之前对应Activity的module，增加ActivityBuilder，增加内部接口实现将Application context传出</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="meta">@Component</span>(modules = &#123;AndroidInjectionModule<span class="class">.<span class="keyword">class</span>, <span class="title">ActivityBuilder</span>.<span class="title">class</span>, <span class="title">AppModule</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">AppComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span>.Builder</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@BindsInstance</span></span><br><span class="line">        <span class="function">Builder <span class="title">application</span><span class="params">(Application application)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function">AppComponent <span class="title">build</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MyApplication application)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>3.修改MainActivityModule，非抽象类，删掉抽象方法，删掉subcomponents参数，同理对SecondActivityModule；修改AppModule，增加Context的provide方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivityModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function">Entity <span class="title">provideEntity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Entity();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondActivityModule</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function">Integer <span class="title">provideInteger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="function">String <span class="title">provideGlobalInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"This is global info"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="function">Context <span class="title">provideContext</span><span class="params">(Application application)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> application;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>4.在Activity中注入，Application不变</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Entity entity;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    String info;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Context context;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        AndroidInjection.inject(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        String text = entity.showMessage() + <span class="string">" - "</span> + info;</span><br><span class="line">        Log.i(<span class="string">"aaaa"</span>, text);</span><br><span class="line">        Log.i(<span class="string">"aaaa"</span>, context.toString());</span><br><span class="line">        startActivity(<span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, SecondActivity<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    String info;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Integer num;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Context context;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        AndroidInjection.inject(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_second);</span><br><span class="line">        Log.i(<span class="string">"aaaa"</span>, info + num);</span><br><span class="line">        Log.i(<span class="string">"aaaa"</span>, context.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> <span class="keyword">implements</span> <span class="title">HasActivityInjector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DispatchingAndroidInjector&lt;Activity&gt; dispatchingActivityInjector;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        DaggerAppComponent</span><br><span class="line">                .builder()</span><br><span class="line">                .application(<span class="keyword">this</span>)</span><br><span class="line">                .build()</span><br><span class="line">                .inject(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AndroidInjector&lt;Activity&gt; <span class="title">activityInjector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dispatchingActivityInjector;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样我们就可以通过依赖注入的方式将全局Context注入到所有的Activity中，看log也可以发现两个context是相同的。</p>
<h3 id="2-3-Injecting-Fragment-objects"><a href="#2-3-Injecting-Fragment-objects" class="headerlink" title="2.3 Injecting Fragment objects"></a>2.3 Injecting Fragment objects</h3><p>为Fragment注入对象，需要在Fragment的onAttach()方法中执行<code>AndroidSupportInjection.inject(this);</code></p>
<p>提供Fragment实例的Component可以是其他Fragment的Component的Subcomponent，也可以是Activity的Component的Subcomponent，同样也可以是Application的Component的Subcomponent，具体情况具体分析，看你的Fragment生命周期要求。比如这里我们在SecondActivity中增加一个Fragment，Fragment显示的内容是Entity的列表</p>
<p>以基于Activity为例，首先需要对宿主Activity进行处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">HasSupportFragmentInjector</span> </span>&#123;</span><br><span class="line"><span class="comment">// 以基于SecondActivity的方式对从SecondActivity启动的Fragment进行注入，则需要实现HasSupportFragmentInjector接口</span></span><br><span class="line"><span class="comment">// 这个接口的方法非常类似Application中的，功能基本相同，不过此处说明生命周期与SecondActivity相同，如果SecondActivity不存在</span></span><br><span class="line"><span class="comment">// 那么EntityFragment也无法注入</span></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DispatchingAndroidInjector&lt;Fragment&gt; fragmentDispatchingAndroidInjector;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    String info;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Integer num;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        AndroidInjection.inject(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_second);</span><br><span class="line">        Log.i(<span class="string">"aaaa"</span>, info + num);</span><br><span class="line">        <span class="comment">// 加载EntityFragment</span></span><br><span class="line">        getSupportFragmentManager()</span><br><span class="line">                .beginTransaction()</span><br><span class="line">                .disallowAddToBackStack()</span><br><span class="line">                .add(R.id.container, EntityFragment.newInstance(), EntityFragment.TAG)</span><br><span class="line">                .commit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AndroidInjector&lt;Fragment&gt; <span class="title">supportFragmentInjector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fragmentDispatchingAndroidInjector;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后是定义的EntityFragment</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EntityFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = EntityFragment<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"><span class="comment">// 仔细思考Fragment+RecyclerView需要注入哪些对象，很显然常见的是LinearLayoutManager和RecyclerView.Adapter</span></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    LinearLayoutManager mLayoutManager;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    EntityListAdapter mEntityListAdapter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RecyclerView recyclerView;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> EntityFragment <span class="title">newInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Bundle args = <span class="keyword">new</span> Bundle();</span><br><span class="line">        EntityFragment fragment = <span class="keyword">new</span> EntityFragment();</span><br><span class="line">        fragment.setArguments(args);</span><br><span class="line">        <span class="keyword">return</span> fragment;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 在onAttach中注入</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttach</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        AndroidSupportInjection.inject(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">super</span>.onAttach(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        View view = inflater.inflate(R.layout.fragment_item_list, container, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Entity&gt; data = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            data.add(<span class="keyword">new</span> Entity());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 这里就可以直接用</span></span><br><span class="line">        mEntityListAdapter.addItems(data);</span><br><span class="line">        recyclerView = view.findViewById(R.id.list);</span><br><span class="line">        recyclerView.setLayoutManager(mLayoutManager);</span><br><span class="line">        recyclerView.setAdapter(mEntityListAdapter);</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>与EntityFragment相关的注入的对象有LinearLayoutManager和EntityListAdapter，因此需要module提供这两者的实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// EntityFragment依赖EntityFragmentModule提供的实例</span></span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EntityFragmentModule</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function">LinearLayoutManager <span class="title">provideLinearLayoutManager</span><span class="params">(EntityFragment fragment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LinearLayoutManager(fragment.getActivity());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function">EntityListAdapter <span class="title">provideEntityListAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EntityListAdapter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根据2.2最后一部分的内容做一个优化，将module绑定到另一个集成module中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">EntityFragmentProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ContributesAndroidInjector</span>(modules = EntityFragmentModule<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">abstract</span> <span class="title">EntityFragment</span> <span class="title">provideEntityFragmentFactory</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改ActivityBuilder，将EntityFragmentProvider加入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ContributesAndroidInjector</span>(modules = &#123;</span><br><span class="line">            MainActivityModule<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">    <span class="title">abstract</span> <span class="title">MainActivity</span> <span class="title">bindMainActivity</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ContributesAndroidInjector</span>(modules = &#123;</span><br><span class="line">            SecondActivityModule<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">EntityFragmentProvider</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class">    <span class="title">abstract</span> <span class="title">SecondActivity</span> <span class="title">bindSecondActivity</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后看一下EntityListAdapter的实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EntityListAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">EntityListAdapter</span>.<span class="title">MyViewHolder</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Entity&gt; data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EntityListAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addItems</span><span class="params">(List&lt;Entity&gt; list)</span> </span>&#123;</span><br><span class="line">        data.addAll(list);</span><br><span class="line">        notifyDataSetChanged();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyViewHolder <span class="title">onCreateViewHolder</span><span class="params">(@NonNull ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.fragment_item, parent, <span class="keyword">false</span>);</span><br><span class="line">        MyViewHolder viewHolder = <span class="keyword">new</span> MyViewHolder(view);</span><br><span class="line">        <span class="keyword">return</span> viewHolder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(@NonNull MyViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        Entity entity = data.get(position);</span><br><span class="line">        holder.number.setText(String.valueOf(position));</span><br><span class="line">        holder.content.setText(entity.showMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line">        TextView number;</span><br><span class="line">        TextView content;</span><br><span class="line"></span><br><span class="line">        MyViewHolder(<span class="meta">@NonNull</span> View itemView) &#123;</span><br><span class="line">            <span class="keyword">super</span>(itemView);</span><br><span class="line">            number = itemView.findViewById(R.id.item_number);</span><br><span class="line">            content = itemView.findViewById(R.id.content);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Dagger2</tag>
        <tag>DI</tag>
        <tag>依赖注入</tag>
      </tags>
  </entry>
  <entry>
    <title>Material组件-Menu</title>
    <url>/archives/e182bde6.html</url>
    <content><![CDATA[<p>参考：</p>
<blockquote>
<p><a href="https://developer.android.com/guide/topics/ui/menus" target="_blank" rel="noopener">菜单</a><br><a href="https://developer.android.com/reference/android/view/Menu" target="_blank" rel="noopener">Menu api</a><br><a href="https://www.jianshu.com/p/e99b5e8bd67b" target="_blank" rel="noopener">图解 Android 事件分发机制</a><br><a href="https://blog.csdn.net/carson_ho/article/details/54136311" target="_blank" rel="noopener">Android事件分发机制 详解攻略</a><br><a href="https://juejin.im/entry/596329686fb9a06bc903b6fd" target="_blank" rel="noopener">Activity、View、Window的理解一篇文章就够了</a><br><a href="https://www.jianshu.com/p/2aeb2d10a831" target="_blank" rel="noopener">ViewPager 与 HorizontalScrollView 滑动冲突问题</a></p>
</blockquote>
<p>Menu，不同于Button、TextView之类的控件，它不需要在布局文件中指定位置，它是用于提供给用户额外的操作选择，因此不必局限于某一个固定位置，它可以搭配任何控件。</p>
<p>常见的Menu可以分为三种：</p>
<ol>
<li>ToolBar上的选项菜单，这是固定的设计，配合ToolBar实现很简单；</li>
<li>上下文菜单ContextMenu，与某一个控件关联，可以实现在点击（长按）的位置出现菜单选项的效果；</li>
<li>弹出菜单PopupMenu，动态生成，作为一个点击事件触发，出现的位置与被点击的控件位置绑定（上方或下方），与上下文菜单不同。</li>
</ol>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/1.jpg" alt="1.jpg"></p>
<a id="more"></a>
<h2 id="1-菜单选项数据来源"><a href="#1-菜单选项数据来源" class="headerlink" title="1. 菜单选项数据来源"></a>1. 菜单选项数据来源</h2><p>如上图所示，展开的就是菜单Menu，菜单中包含一个一个的MenuItem，前面已经说了Menu不同于Button之类的控件，它的使用也是非常不同，最重要的部分其实是如何定义这些MenuItem，推荐的做法是使用<code>xml</code>资源文件定义MenuItem的文字内容以及Icon等等，然后在activity或fragment中处理点击事件；当然还有动态添加的方式可以使用。</p>
<h3 id="1-1-使用xml定义菜单"><a href="#1-1-使用xml定义菜单" class="headerlink" title="1.1 使用xml定义菜单"></a>1.1 使用xml定义菜单</h3><p>这里先不必考虑如何使用Menu，只是定义菜单选项，需要在<code>res/menu/</code>目录下建一个<code>xml</code>文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- menu_main.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/action_add_a_contact"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_add_black_24dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"Add a Contact"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:showAsAction</span>=<span class="string">"always"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/action_create_a_contact_group"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_create_black_24dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"Create a Contact Group"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:showAsAction</span>=<span class="string">"never"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/action_add_a_app"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"Add a App"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:showAsAction</span>=<span class="string">"always"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/submenu"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"Submenu"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">menu</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/action_create_a_channel"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_create_new_folder_black_24dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:title</span>=<span class="string">"Create a Channel"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">app:showAsAction</span>=<span class="string">"never"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/action_join_a_channel"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_adjust_black_24dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:title</span>=<span class="string">"Join a Channel"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">app:showAsAction</span>=<span class="string">"never"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面的布局文件产生的效果如下图所示</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/2.jpg" alt="2.jpg"></p>
<p>有几个特点：</p>
<ol>
<li>如果Item设置了Icon，那么如果出现在ToolBar上就是Icon，如果没有设置Icon，则显示大写文字；</li>
<li>Icon在折叠的Menu中不显示，但是在二级菜单中可以显示；</li>
<li>Item的顺序会被showAsAction参数影响。</li>
</ol>
<h3 id="1-2-在Activity中使用Menu"><a href="#1-2-在Activity中使用Menu" class="headerlink" title="1.2 在Activity中使用Menu"></a>1.2 在Activity中使用Menu</h3><p>只需要在activity中重写<code>onCreateOptionsMenu()</code>方法即可，将上面定义的xml资源文件加载，前提是有ToolBar</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreateOptionsMenu(menu);</span><br><span class="line">    getMenuInflater().inflate(R.menu.menu_main, menu);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>点击事件处理，只需要在activity中重写<code>onOptionsItemSelected()</code>方法即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (item.getItemId()) &#123;</span><br><span class="line">        <span class="keyword">case</span> R.id.action_add_a_contact:</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"action_add_a_contact"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">case</span> R.id.action_create_a_channel:</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"action_create_a_channel"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">case</span> R.id.action_create_a_contact_group:</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"action_create_a_contact_group"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">case</span> R.id.action_add_a_app:</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"action_add_a_app"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">case</span> R.id.action_join_a_channel:</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"action_join_a_channel"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果需要在运行时修改MenuItem的状态，可以重写<code>onPrepareOptionsMenu()</code>方法（每点击一次都会执行一次），比如可以在这里进行状态判断以禁用某些选项</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 首先需要一个flag控制</span></span><br><span class="line"><span class="keyword">private</span> Boolean flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其次在需要动态修改Menu状态的位置修改flag值，然后调用invalidateOptionsMenu()，</span></span><br><span class="line"><span class="comment">// 这个方法会调用onPrepareOptionsMenu()方法，从而实现Menu的状态变化</span></span><br><span class="line">button.setOnClickListener(v -&gt; &#123;</span><br><span class="line">    flag = <span class="keyword">true</span>;</span><br><span class="line">    invalidateOptionsMenu();  <span class="comment">//  Android 3.0 及更高版本中必须调用invalidateOptionsMenu</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onPrepareOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        menu.findItem(R.id.action_create_a_contact_group).setVisible(<span class="keyword">false</span>);</span><br><span class="line">        menu.findItem(R.id.action_join_a_channel).setVisible(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onPrepareOptionsMenu(menu);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-3-修改默认的ToolBar-Menu图标以及点击背景色"><a href="#1-3-修改默认的ToolBar-Menu图标以及点击背景色" class="headerlink" title="1.3 修改默认的ToolBar Menu图标以及点击背景色"></a>1.3 修改默认的ToolBar Menu图标以及点击背景色</h3><p>默认为三个点，可以在<code>styles.xml</code>中进行修改</p>
<p>比如ToolBar在布局文件中如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">androidx.appcompat.widget.Toolbar</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/my_toolbar"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:elevation</span>=<span class="string">"4dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:theme</span>=<span class="string">"@style/ToolbarBase"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:popupTheme</span>=<span class="string">"@style/OverflowMenu"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.appcompat.widget.Toolbar</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>两个参数</p>
<ul>
<li>theme：为整个ToolBar的主题，actionOverflowButtonStyle可以修改默认图标</li>
<li>popupTheme：为弹出的Menu的主题，colorControlHighlight可以修改点击背景色</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"ToolbarBase"</span> <span class="attr">parent</span>=<span class="string">"ThemeOverlay.AppCompat.ActionBar"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"actionOverflowButtonStyle"</span>&gt;</span>@style/OverflowButtonStyle<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--&lt;item name="actionOverflowMenuStyle"&gt;@style/OverflowMenu&lt;/item&gt;--&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"OverflowButtonStyle"</span> <span class="attr">parent</span>=<span class="string">"@android:style/Widget.ActionButton.Overflow"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:src"</span>&gt;</span>@drawable/ic_add_circle_outline_black_24dp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"overlapAnchor"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"OverflowMenu"</span> <span class="attr">parent</span>=<span class="string">"ThemeOverlay.AppCompat.Light"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--遮挡属性--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"overlapAnchor"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--MenuItem选中背景颜色--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorControlHighlight"</span>&gt;</span>@color/holo_blue_light<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-上下文菜单"><a href="#2-上下文菜单" class="headerlink" title="2. 上下文菜单"></a>2. 上下文菜单</h2><p>ContextMenu可以用在非常多的控件上，这里仅简单使用Button和RecyclerView，通常来说，触发ContextMenu的方式是长按，因此与该控件的OnLongClick事件冲突，<br>如果在onLongClick()方法中返回<strong>true</strong>，则代表点击事件被消耗，不再继续传递，那么ContextMenu不会触发；反之返回<strong>false</strong>，则ContextMenu被触发。由此可知，onLongClick()的优先级在ContextMenu之上，具体会在<strong>Android事件传递中分析</strong>。</p>
<p>ContextMenu可以在一个Activity中有多个，甚至可以在RecyclerView中使用，但是仅需要重写两个方法即可判断ContextMenu的来源。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/3.jpg" alt="3.jpg"></p>
<p>如上图所示，<code>Upload</code>后面跟的是该控件的<code>ItemId</code>，三个Menu各不相同，所以显然我们可以根据控件的不同生成不同的ContextMenu，点击事件同理。</p>
<p>使用ContextMenu的三个步骤：</p>
<blockquote>
<p>1.注册，更确切的说法是关联，即指定需要生成ContextMenu的控件，一句话解决</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">registerForContextMenu(recyclerView); <span class="comment">// 对RecyclerView也是一样，但是这里我用的是自定义RecyclerView，稍后解释</span></span><br><span class="line">registerForContextMenu(button); <span class="comment">// 直接在onCreate中注册即可，有几个控件就注册几次</span></span><br><span class="line">registerForContextMenu(button1);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>2.重写onCreateContextMenu方法，生成Menu</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreateContextMenu</span><span class="params">(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreateContextMenu(menu, v, menuInfo);</span><br><span class="line">    <span class="comment">// 这里实现了根据Id不同生成不同的Menu</span></span><br><span class="line">    <span class="keyword">switch</span> (v.getId()) &#123;</span><br><span class="line">        <span class="keyword">case</span> R.id.first_button:</span><br><span class="line">            addMenu(menu, v);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> R.id.second_button:</span><br><span class="line">            addMenu(menu, v);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> R.id.recycler_view:</span><br><span class="line">            addMenu(menu, v);</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addMenu</span><span class="params">(ContextMenu menu, View v)</span> </span>&#123;</span><br><span class="line">    menu.setHeaderTitle(<span class="string">"Context Menu"</span>);</span><br><span class="line">    menu.add(<span class="number">0</span>, v.getId(), <span class="number">0</span>, <span class="string">"Upload"</span> + v.getId());</span><br><span class="line">    menu.add(<span class="number">0</span>, v.getId(), <span class="number">0</span>, <span class="string">"Search"</span>);</span><br><span class="line">    menu.add(<span class="number">1</span>, v.getId(), <span class="number">0</span>, <span class="string">"Share"</span>);</span><br><span class="line">    menu.add(<span class="number">1</span>, v.getId(), <span class="number">0</span>, <span class="string">"Bookmark"</span>);</span><br><span class="line">    <span class="comment">// 同时可以通过groupId来禁用某些选项，这是额外的功能</span></span><br><span class="line">    menu.setGroupEnabled(<span class="number">1</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>3.重写onContextItemSelected方法，点击事件响应</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onContextItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里需要注意，因为RecyclerView需要传入Item的Position属性，所以需要自定义RecyclerView</span></span><br><span class="line">    RecyclerViewWithContextMenu.RecyclerViewContextInfo info = (RecyclerViewWithContextMenu.RecyclerViewContextInfo) item.getMenuInfo();</span><br><span class="line">    Log.d(TAG, <span class="string">"onCreateContextMenu position = "</span> + (info != <span class="keyword">null</span> ? info.getPosition() : <span class="string">"-1"</span>));</span><br><span class="line">    <span class="comment">// 通过判断点击的Item是否存在getMenuInfo获得的值，可以判断点击事件的来源，RecyclerView还是Button</span></span><br><span class="line">    <span class="keyword">if</span> (info != <span class="keyword">null</span> &amp;&amp; info.getPosition() != -<span class="number">1</span>) &#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"Selected Item: "</span> + item.getTitle() + <span class="string">" data: "</span> + data.get(info.getPosition()), Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"Selected Item: "</span> + item.getTitle(), Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<ol>
<li><strong>自定义的RecyclerViewWithContextMenu</strong></li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecyclerViewWithContextMenu</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = RecyclerViewWithContextMenu<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RecyclerViewContextInfo mContextInfo = <span class="keyword">new</span> RecyclerViewContextInfo();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RecyclerViewWithContextMenu</span><span class="params">(@NonNull Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RecyclerViewWithContextMenu</span><span class="params">(@NonNull Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RecyclerViewWithContextMenu</span><span class="params">(@NonNull Context context, @Nullable AttributeSet attrs, <span class="keyword">int</span> defStyle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关键方法，重写showContextMenuForChild，将position属性传出去</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">showContextMenuForChild</span><span class="params">(View originalView)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> longPressPosition = getChildAdapterPosition(originalView);</span><br><span class="line">        <span class="keyword">if</span> (longPressPosition &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            mContextInfo.mPosition = longPressPosition;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.showContextMenuForChild(originalView);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> ContextMenu.<span class="function">ContextMenuInfo <span class="title">getContextMenuInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mContextInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过自定义的ContextMenuInfo保存position的值，并提供调用的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RecyclerViewContextInfo</span> <span class="keyword">implements</span> <span class="title">ContextMenu</span>.<span class="title">ContextMenuInfo</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> mPosition = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPosition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> mPosition;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-弹出菜单"><a href="#3-弹出菜单" class="headerlink" title="3. 弹出菜单"></a>3. 弹出菜单</h2><p>PopupMenu是使用上最简单的，它的效果与ContextMenu类似但不完全相同，主要是位置是相对固定的，但是PopupMenu可以动态调用，与整体的布局无关</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">PopupMenu</span>.<span class="title">OnMenuItemClickListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = MainActivity<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="comment">// PopupMenu通过onClick事件创建</span></span><br><span class="line">        findViewById(R.id.pop_button).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                showPopupMenu(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showPopupMenu</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// new一个对象，同样可以使用xml加载选项</span></span><br><span class="line">        PopupMenu popup = <span class="keyword">new</span> PopupMenu(<span class="keyword">this</span>, v);</span><br><span class="line">        popup.inflate(R.menu.menu_main);</span><br><span class="line">        popup.show();</span><br><span class="line">        <span class="comment">// 这里需要继承PopupMenu.OnMenuItemClickListener接口</span></span><br><span class="line">        popup.setOnMenuItemClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onMenuItemClick</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 点击事件响应</span></span><br><span class="line">        <span class="keyword">switch</span> (item.getItemId()) &#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.action_add_a_contact:</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">"action_add_a_contact"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.action_create_a_channel:</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">"action_create_a_channel"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.action_create_a_contact_group:</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">"action_create_a_contact_group"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.action_add_a_app:</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">"action_add_a_app"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.action_join_a_channel:</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">"action_join_a_channel"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-Android事件分发机制"><a href="#4-Android事件分发机制" class="headerlink" title="4. Android事件分发机制"></a>4. Android事件分发机制</h2><p>之所以会想到Android事件分发机制，主要是在ContextMenu的使用上发现长按事件的处理以及冲突，从而对长按事件优先级有一点思考，结合一些参考的文章，写一下自己的理解。</p>
<p>在使用ContextMenu中会产生以下几个问题，根据这些问题，可以尝试在源码里找结果。</p>
<ul>
<li>为什么ContextMenu只需要注册就可以使用，而不是new一个对象出来，类似于PopupMenu？</li>
</ul>
<p>首先看与ContextMenu相关的几个方法：</p>
<p><code>registerForContextMenu</code></p>
<p><code>onCreateContextMenu</code></p>
<p><code>onContextItemSelected</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Activity.java registerForContextMenu这个方法仅仅是对view进行了注册listener</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Registers a context menu to be shown for the given view (multiple views</span></span><br><span class="line"><span class="comment">     * can show the context menu). This method will set the</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> OnCreateContextMenuListener&#125; on the view to this activity, so</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #onCreateContextMenu(ContextMenu, View, ContextMenuInfo)&#125; will be</span></span><br><span class="line"><span class="comment">     * called when it is time to show the context menu.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #unregisterForContextMenu(View)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> view The view that should show a context menu.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerForContextMenu</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        view.setOnCreateContextMenuListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// View.java 注册的过程中通过setLongClickable强制让此控件可以被long click，同时传递listener</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Register a callback to be invoked when the context menu for this view is</span></span><br><span class="line"><span class="comment">     * being built. If this view is not long clickable, it becomes long clickable.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> l The callback that will run</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnCreateContextMenuListener</span><span class="params">(OnCreateContextMenuListener l)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isLongClickable()) &#123;</span><br><span class="line">            setLongClickable(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        getListenerInfo().mOnCreateContextMenuListener = l;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * Listener used to build the context menu.</span></span><br><span class="line"><span class="comment">        * This field should be made private, so it is hidden from the SDK.</span></span><br><span class="line"><span class="comment">        * &#123;<span class="doctag">@hide</span>&#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="keyword">protected</span> OnCreateContextMenuListener mOnCreateContextMenuListener;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这个listener的作用就是通过li.mOnCreateContextMenuListener.onCreateContextMenu(menu, this, menuInfo)</span></span><br><span class="line">    <span class="comment">// 将menu和menuInfo传出去，也就是说，我们在调用super.onCreateContextMenu(menu, v, menuInfo)后即可得到menu的实例，</span></span><br><span class="line">    <span class="comment">// 然后对menu实例进行处理，比如menu.add增加选项、menu.setGroupEnabled设置可点击的选项等等，</span></span><br><span class="line">    <span class="comment">// 此处暂不讨论createContextMenu是在哪里调用的，因为涉及到PhoneWindow和DecorView。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Show the context menu for this view. It is not safe to hold on to the</span></span><br><span class="line"><span class="comment">     * menu after returning from this method.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * You should normally not overload this method. Overload</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #onCreateContextMenu(ContextMenu)&#125; or define an</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> OnCreateContextMenuListener&#125; to add items to the context menu.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> menu The context menu to populate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createContextMenu</span><span class="params">(ContextMenu menu)</span> </span>&#123;</span><br><span class="line">        ContextMenuInfo menuInfo = getContextMenuInfo();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Sets the current menu info so all items added to menu will have</span></span><br><span class="line">        <span class="comment">// my extra info set.</span></span><br><span class="line">        ((MenuBuilder)menu).setCurrentMenuInfo(menuInfo);</span><br><span class="line"></span><br><span class="line">        onCreateContextMenu(menu);</span><br><span class="line">        ListenerInfo li = mListenerInfo;</span><br><span class="line">        <span class="keyword">if</span> (li != <span class="keyword">null</span> &amp;&amp; li.mOnCreateContextMenuListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">            li.mOnCreateContextMenuListener.onCreateContextMenu(menu, <span class="keyword">this</span>, menuInfo);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Clear the extra information so subsequent items that aren't mine don't</span></span><br><span class="line">        <span class="comment">// have my extra info.</span></span><br><span class="line">        ((MenuBuilder)menu).setCurrentMenuInfo(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mParent != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mParent.createContextMenu(menu);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line"><span class="comment">// --------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Activity.java Item点击事件响应，除了ContextMenu，可以发现普通的ToolBar上的Menu的点击（onOptionsItemSelected）</span></span><br><span class="line"><span class="comment">// 也是在这里响应的。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Default implementation of</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> android.view.Window.Callback#onMenuItemSelected&#125;</span></span><br><span class="line"><span class="comment">     * for activities.  This calls through to the new</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #onOptionsItemSelected&#125; method for the</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> android.view.Window#FEATURE_OPTIONS_PANEL&#125;</span></span><br><span class="line"><span class="comment">     * panel, so that subclasses of</span></span><br><span class="line"><span class="comment">     * Activity don't need to deal with feature codes.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onMenuItemSelected</span><span class="params">(<span class="keyword">int</span> featureId, MenuItem item)</span> </span>&#123;</span><br><span class="line">        CharSequence titleCondensed = item.getTitleCondensed();</span><br><span class="line">        <span class="comment">// 通过featureId参数判断是来自ToolBar的Menu还是ContextMenu，显然这个参数来自于onMenuItemSelected方法被调用的地方</span></span><br><span class="line">        <span class="comment">// 可以在ToolbarWidgetWrapper.java和PhoneWindow.java中找到</span></span><br><span class="line">        <span class="keyword">switch</span> (featureId) &#123;</span><br><span class="line">            <span class="keyword">case</span> Window.FEATURE_OPTIONS_PANEL:</span><br><span class="line">                <span class="comment">// Put event logging here so it gets called even if subclass</span></span><br><span class="line">                <span class="comment">// doesn't call through to superclass's implmeentation of each</span></span><br><span class="line">                <span class="comment">// of these methods below</span></span><br><span class="line">                <span class="keyword">if</span>(titleCondensed != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    EventLog.writeEvent(<span class="number">50000</span>, <span class="number">0</span>, titleCondensed.toString());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 在这里可以看到如果onOptionsItemSelected返回false，点击事件会继续传递下去，所以我们在重写onOptionsItemSelected</span></span><br><span class="line">                <span class="comment">// 方法时会在执行对应选项的点击事件后返回true以消耗点击事件</span></span><br><span class="line">                <span class="keyword">if</span> (onOptionsItemSelected(item)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (mFragments.dispatchOptionsItemSelected(item)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (item.getItemId() == android.R.id.home &amp;&amp; mActionBar != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                        (mActionBar.getDisplayOptions() &amp; ActionBar.DISPLAY_HOME_AS_UP) != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (mParent == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> onNavigateUp();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> mParent.onNavigateUpFromChild(<span class="keyword">this</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> Window.FEATURE_CONTEXT_MENU:</span><br><span class="line">                <span class="keyword">if</span>(titleCondensed != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    EventLog.writeEvent(<span class="number">50000</span>, <span class="number">1</span>, titleCondensed.toString());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 同上</span></span><br><span class="line">                <span class="keyword">if</span> (onContextItemSelected(item)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> mFragments.dispatchContextItemSelected(item);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>综上所述，ContextMenu其实是一个比较深层次的控件，它的创建过程被更复杂的PhoneWindow以及DecorView等控制，对开发者来说，Menu是一个直接使用就行的控件，底层不希望开发者对Menu进行指定布局选项之外的操作，因此我们不需要new一个对象出来。至于它是如何在PhoneWindow以及DecorView中创建的，我可能在接下来的博客中写一下自己的理解。</p>
<ul>
<li>ContextMenu的触发与该控件的onLongClick方法的冲突是如何产生的？</li>
</ul>
<p>在上面ContextMenu的使用过程中，会发现ContextMenu默认是长按触发，而且源码里也说明了，控件会被强制赋予长按属性，那么如果同时设置该控件的onLongClick方法会产生怎样的效果，代码很简单，这里有一个疑问了，为什么要返回true？如果返回false会怎样？为什么onClick方法不用返回值？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">button.setOnLongClickListener(<span class="keyword">new</span> View.OnLongClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onLongClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"button long click"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>结果也是很明显的，测试一下就知道这里返回true，那么button的ContextMenu无法触发，Toast会正常产生；返回false，那么button的Toast会产生，而且ContextMenu也会产生，onLongClick方法在onCreateContextMenu方法之前执行。</p>
<p>由此产生了另一个问题，onLongClick方法是如何产生的，解决了这个问题，那么所有的问题都将迎刃而解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// View.java 最直接的调用onLongClick方法的位置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Calls this view's OnLongClickListener, if it is defined. Invokes the</span></span><br><span class="line"><span class="comment">     * context menu if the OnLongClickListener did not consume the event,</span></span><br><span class="line"><span class="comment">     * optionally anchoring it to an (x,y) coordinate.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x x coordinate of the anchoring touch event, or &#123;<span class="doctag">@link</span> Float#NaN&#125;</span></span><br><span class="line"><span class="comment">     *          to disable anchoring</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> y y coordinate of the anchoring touch event, or &#123;<span class="doctag">@link</span> Float#NaN&#125;</span></span><br><span class="line"><span class="comment">     *          to disable anchoring</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if one of the above receivers consumed the event,</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> false&#125; otherwise</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">performLongClickInternal</span><span class="params">(<span class="keyword">float</span> x, <span class="keyword">float</span> y)</span> </span>&#123;</span><br><span class="line">        sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_LONG_CLICKED);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> handled = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">final</span> ListenerInfo li = mListenerInfo;</span><br><span class="line">        <span class="keyword">if</span> (li != <span class="keyword">null</span> &amp;&amp; li.mOnLongClickListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// listener调用onLongClick方法的位置，返回值为handled</span></span><br><span class="line">            handled = li.mOnLongClickListener.onLongClick(View.<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果handled为true，则不会执行下面整个方法showContextMenu，看名字也知道这是ContextMenu显示的方法了，</span></span><br><span class="line">        <span class="comment">// 所以如果onLongClick返回true，则不会显示ContextMenu；反之同理。所以上面关于执行先后顺序的疑问解决了</span></span><br><span class="line">        <span class="keyword">if</span> (!handled) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> isAnchored = !Float.isNaN(x) &amp;&amp; !Float.isNaN(y);</span><br><span class="line">            handled = isAnchored ? showContextMenu(x, y) : showContextMenu();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((mViewFlags &amp; TOOLTIP) == TOOLTIP) &#123;</span><br><span class="line">            <span class="comment">// 如果handled为true，则不会执行下面整个方法showLongClickTooltip，这个Tooltip是另一个控件，</span></span><br><span class="line">            <span class="comment">// 其触发也是与长按事件相关，暂且不表</span></span><br><span class="line">            <span class="keyword">if</span> (!handled) &#123;</span><br><span class="line">                handled = showLongClickTooltip((<span class="keyword">int</span>) x, (<span class="keyword">int</span>) y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (handled) &#123;</span><br><span class="line">            performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 最后还是返回handled的值</span></span><br><span class="line">        <span class="keyword">return</span> handled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 再看看onClick方法的调用，很明显单击事件没有其他控件与其冲突，所以它的返回值为空</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Call this view's OnClickListener, if it is defined.  Performs all normal</span></span><br><span class="line"><span class="comment">     * actions associated with clicking: reporting accessibility event, playing</span></span><br><span class="line"><span class="comment">     * a sound, etc.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> True there was an assigned OnClickListener that was called, false</span></span><br><span class="line"><span class="comment">     *         otherwise is returned.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> other methods on View should not call this method directly, but performClickInternal()</span></span><br><span class="line">    <span class="comment">// instead, to guarantee that the autofill manager is notified when necessary (as subclasses</span></span><br><span class="line">    <span class="comment">// could extend this method without calling super.performClick()).</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">performClick</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// We still need to call this method to handle the cases where performClick() was called</span></span><br><span class="line">        <span class="comment">// externally, instead of through performClickInternal()</span></span><br><span class="line">        notifyAutofillManagerOnClick();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> result;</span><br><span class="line">        <span class="keyword">final</span> ListenerInfo li = mListenerInfo;</span><br><span class="line">        <span class="keyword">if</span> (li != <span class="keyword">null</span> &amp;&amp; li.mOnClickListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">            playSoundEffect(SoundEffectConstants.CLICK);</span><br><span class="line">            <span class="comment">// 无返回值，没有冲突，result直接设置为true即可</span></span><br><span class="line">            li.mOnClickListener.onClick(<span class="keyword">this</span>);</span><br><span class="line">            result = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);</span><br><span class="line"></span><br><span class="line">        notifyEnterOrExitForAutoFillIfNeeded(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 然后就是点击事件与长按事件是如何产生的，这里牵涉到onTouchEvent方法，这里把无关代码略过，仅保留重要代码</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Implement this method to handle touch screen motion events.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * If this method is used to detect click actions, it is recommended that</span></span><br><span class="line"><span class="comment">     * the actions be performed by implementing and calling</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #performClick()&#125;. This will ensure consistent system behavior,</span></span><br><span class="line"><span class="comment">     * including:</span></span><br><span class="line"><span class="comment">     * &lt;ul&gt;</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;obeying click sound preferences</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;dispatching OnClickListener calls</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;handling &#123;<span class="doctag">@link</span> AccessibilityNodeInfo#ACTION_CLICK ACTION_CLICK&#125; when</span></span><br><span class="line"><span class="comment">     * accessibility features are enabled</span></span><br><span class="line"><span class="comment">     * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event The motion event.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> True if the event was handled, false otherwise.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ... </span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (clickable || (viewFlags &amp; TOOLTIP) == TOOLTIP) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">                <span class="comment">// MotionEvent分为四种ACTION_UP、ACTION_DOWN、ACTION_CANCEL、ACTION_MOVE</span></span><br><span class="line">                <span class="comment">// 分别对应手指在屏幕的状态：抬起、按下、（例外，暂且不解释）、滑动</span></span><br><span class="line">                <span class="comment">// 通过对这些MotionEvent的监听可以实现各种点击效果，比如多连击、定时点击等等效果，</span></span><br><span class="line">                <span class="comment">// 也可以控制事件的冲突，我们仅需要在自定义控件中重写onTouchEvent方法即可。</span></span><br><span class="line">                <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                    <span class="comment">// ...</span></span><br><span class="line">                    <span class="comment">// 为什么要在抬起的时候触发点击事件performClick，因为长按与点击是有冲突的，</span></span><br><span class="line">                    <span class="comment">// 长按会在ACTION_DOWN里触发，这是由时间控制的，因此ACTION_UP中与长按事件其实关系就不大了</span></span><br><span class="line">                    <span class="comment">// 所以在这里处理点击事件是一个较为合理的设计</span></span><br><span class="line">                    <span class="keyword">if</span> ((mPrivateFlags &amp; PFLAG_PRESSED) != <span class="number">0</span> || prepressed) &#123;</span><br><span class="line">                        <span class="comment">// take focus if we don't have it already and we should in</span></span><br><span class="line">                        <span class="comment">// touch mode.</span></span><br><span class="line">                        <span class="keyword">boolean</span> focusTaken = <span class="keyword">false</span>;</span><br><span class="line">                        <span class="keyword">if</span> (isFocusable() &amp;&amp; isFocusableInTouchMode() &amp;&amp; !isFocused()) &#123;</span><br><span class="line">                            focusTaken = requestFocus();</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (prepressed) &#123;</span><br><span class="line">                            <span class="comment">// The button is being released before we actually</span></span><br><span class="line">                            <span class="comment">// showed it as pressed.  Make it show the pressed</span></span><br><span class="line">                            <span class="comment">// state now (before scheduling the click) to ensure</span></span><br><span class="line">                            <span class="comment">// the user sees it.</span></span><br><span class="line">                            setPressed(<span class="keyword">true</span>, x, y);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (!mHasPerformedLongPress &amp;&amp; !mIgnoreNextUpEvent) &#123;</span><br><span class="line">                            <span class="comment">// This is a tap, so remove the longpress check</span></span><br><span class="line">                            removeLongPressCallback();</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// Only perform take click actions if we were in the pressed state</span></span><br><span class="line">                            <span class="keyword">if</span> (!focusTaken) &#123;</span><br><span class="line">                                <span class="comment">// Use a Runnable and post this rather than calling</span></span><br><span class="line">                                <span class="comment">// performClick directly. This lets other visual state</span></span><br><span class="line">                                <span class="comment">// of the view update before click actions start.</span></span><br><span class="line">                                <span class="keyword">if</span> (mPerformClick == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                    <span class="comment">// 点击事件的关键，这里的PerformClick是一个Runnable，为什么要用Runnable，之后再解释</span></span><br><span class="line">                                    mPerformClick = <span class="keyword">new</span> PerformClick();</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="comment">// 通过handler调用performClick方法，点击事件就完成了</span></span><br><span class="line">                                <span class="keyword">if</span> (!post(mPerformClick)) &#123;</span><br><span class="line">                                    performClickInternal();</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// ...</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    mIgnoreNextUpEvent = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                    <span class="keyword">if</span> (event.getSource() == InputDevice.SOURCE_TOUCHSCREEN) &#123;</span><br><span class="line">                        mPrivateFlags3 |= PFLAG3_FINGER_DOWN;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// mHasPerformedLongPress用于解决长按与点击的事件冲突，具体可以看源码</span></span><br><span class="line">                    mHasPerformedLongPress = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// clickable表示该控件是否可以点击（包括点击、长按等）</span></span><br><span class="line">                    <span class="keyword">if</span> (!clickable) &#123;</span><br><span class="line">                        <span class="comment">// 如果控件不可点击，那么会判断是否需要显示Tooltip或者什么都不干，然后break，</span></span><br><span class="line">                        <span class="comment">// 具体可以看checkForLongClick方法</span></span><br><span class="line">                        checkForLongClick(<span class="number">0</span>, x, y);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// performButtonActionOnTouchDown与外设有关，暂时不用考虑</span></span><br><span class="line">                    <span class="keyword">if</span> (performButtonActionOnTouchDown(event)) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Walk up the hierarchy to determine if we're inside a scrolling container.</span></span><br><span class="line">                    <span class="keyword">boolean</span> isInScrollingContainer = isInScrollingContainer();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// For views inside a scrolling container, delay the pressed feedback for</span></span><br><span class="line">                    <span class="comment">// a short period in case this is a scroll.</span></span><br><span class="line">                    <span class="comment">// 该控件在一个可以滑动的container内，则会增加一个反应延时，但是最终都是调用checkForLongClick</span></span><br><span class="line">                    <span class="keyword">if</span> (isInScrollingContainer) &#123;</span><br><span class="line">                        mPrivateFlags |= PFLAG_PREPRESSED;</span><br><span class="line">                        <span class="keyword">if</span> (mPendingCheckForTap == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            mPendingCheckForTap = <span class="keyword">new</span> CheckForTap();</span><br><span class="line">                        &#125;</span><br><span class="line">                        mPendingCheckForTap.x = event.getX();</span><br><span class="line">                        mPendingCheckForTap.y = event.getY();</span><br><span class="line">                        postDelayed(mPendingCheckForTap, ViewConfiguration.getTapTimeout());</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// Not inside a scrolling container, so show the feedback right away</span></span><br><span class="line">                        setPressed(<span class="keyword">true</span>, x, y);</span><br><span class="line">                        <span class="comment">// checkForLongClick也是一个Runnable，最终调用还是performLongClickInternal</span></span><br><span class="line">                        checkForLongClick(<span class="number">0</span>, x, y);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// ACTION_CANCEL状态比较难触发，举个例子，在MIUI中开启“传送门”功能，就可以触发</span></span><br><span class="line">                <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</span><br><span class="line">                    <span class="keyword">if</span> (clickable) &#123;</span><br><span class="line">                        setPressed(<span class="keyword">false</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    removeTapCallback();</span><br><span class="line">                    removeLongPressCallback();</span><br><span class="line">                    mInContextButtonPress = <span class="keyword">false</span>;</span><br><span class="line">                    mHasPerformedLongPress = <span class="keyword">false</span>;</span><br><span class="line">                    mIgnoreNextUpEvent = <span class="keyword">false</span>;</span><br><span class="line">                    mPrivateFlags3 &amp;= ~PFLAG3_FINGER_DOWN;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// ACTION_MOVE状态下removeTapCallback方法和removeLongPressCallback可以取消点击事件，</span></span><br><span class="line">                <span class="comment">// 这也就是为什么我们在按住某个按钮然后滑动出去就可以避免触发点击事件</span></span><br><span class="line">                <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                    <span class="keyword">if</span> (clickable) &#123;</span><br><span class="line">                        drawableHotspotChanged(x, y);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Be lenient about moving outside of buttons</span></span><br><span class="line">                    <span class="keyword">if</span> (!pointInView(x, y, mTouchSlop)) &#123;</span><br><span class="line">                        <span class="comment">// Outside button</span></span><br><span class="line">                        <span class="comment">// Remove any future long press/tap checks</span></span><br><span class="line">                        removeTapCallback();</span><br><span class="line">                        removeLongPressCallback();</span><br><span class="line">                        <span class="keyword">if</span> ((mPrivateFlags &amp; PFLAG_PRESSED) != <span class="number">0</span>) &#123;</span><br><span class="line">                            setPressed(<span class="keyword">false</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        mPrivateFlags3 &amp;= ~PFLAG3_FINGER_DOWN;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>根据上述源码，我们知道了ContextMenu与长按事件冲突的原因，点击事件与长按事件是如何产生的，但是随之而来有了新的问题。</p>
<ul>
<li>为什么要使用Runnable来调用以及如果父容器有点击事件的同时子控件也有点击事件，那么事件传递的过程以及中间冲突是如何解决的？</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// View.java 从源码中可以看到，这是一个专门用于UI线程的Handler，通过这个Handler发送的Runnable都会在UI线程中运行</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Causes the Runnable to be added to the message queue.</span></span><br><span class="line"><span class="comment">     * The runnable will be run on the user interface thread.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> action The Runnable that will be executed.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Returns true if the Runnable was successfully placed in to the</span></span><br><span class="line"><span class="comment">     *         message queue.  Returns false on failure, usually because the</span></span><br><span class="line"><span class="comment">     *         looper processing the message queue is exiting.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #postDelayed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #removeCallbacks</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">post</span><span class="params">(Runnable action)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> AttachInfo attachInfo = mAttachInfo;</span><br><span class="line">        <span class="keyword">if</span> (attachInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> attachInfo.mHandler.post(action);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Postpone the runnable until we know on which thread it needs to run.</span></span><br><span class="line">        <span class="comment">// Assume that the runnable will be successfully placed after attach.</span></span><br><span class="line">        getRunQueue().post(action);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>结合上面的部分注释，说明一个原理，所有的点击事件以及屏幕绘制都要在UI线程中处理，这是为了方便点击触发时重绘UI</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Use a Runnable and post this rather than calling</span></span><br><span class="line"><span class="comment">// performClick directly. This lets other visual state</span></span><br><span class="line"><span class="comment">// of the view update before click actions start.</span></span><br></pre></td></tr></table></figure>
<p>从上面的源码部分我们知道了点击或者长按事件是通过onTouchEvent触发的，那么再看看onTouchEvent是在哪里调用的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// View.java onTouchEvent是在dispatchTouchEvent方法中被调用，看注释就知道这个方法它是要将MotionEvent传递给target view</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Pass the touch screen motion event down to the target view, or this</span></span><br><span class="line"><span class="comment">     * view if it is the target.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event The motion event to be dispatched.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> True if the event was handled by the view, false otherwise.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// If the event should be handled by accessibility focus first.</span></span><br><span class="line">        <span class="keyword">if</span> (event.isTargetAccessibilityFocus()) &#123;</span><br><span class="line">            <span class="comment">// We don't have focus or no virtual descendant has it, do not handle the event.</span></span><br><span class="line">            <span class="keyword">if</span> (!isAccessibilityFocusedViewOrHost()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// We have focus and got the event, then use normal event dispatch.</span></span><br><span class="line">            event.setTargetAccessibilityFocus(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// result表示这个MotionEvent是否会被消耗</span></span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mInputEventConsistencyVerifier != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mInputEventConsistencyVerifier.onTouchEvent(event, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> actionMasked = event.getActionMasked();</span><br><span class="line">        <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">            <span class="comment">// Defensive cleanup for new gesture</span></span><br><span class="line">            stopNestedScroll();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (onFilterTouchEventForSecurity(event)) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((mViewFlags &amp; ENABLED_MASK) == ENABLED &amp;&amp; handleScrollBarDragging(event)) &#123;</span><br><span class="line">                result = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//noinspection SimplifiableIfStatement</span></span><br><span class="line">            ListenerInfo li = mListenerInfo;</span><br><span class="line">            <span class="comment">// 如果调用了onTouch方法，那么当前result被置为true，则后面onTouchEvent不会执行，那么事件在onTouch中处理</span></span><br><span class="line">            <span class="keyword">if</span> (li != <span class="keyword">null</span> &amp;&amp; li.mOnTouchListener != <span class="keyword">null</span></span><br><span class="line">                    &amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED</span><br><span class="line">                    &amp;&amp; li.mOnTouchListener.onTouch(<span class="keyword">this</span>, event)) &#123;</span><br><span class="line">                result = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// onTouchEvent调用的位置</span></span><br><span class="line">            <span class="keyword">if</span> (!result &amp;&amp; onTouchEvent(event)) &#123;</span><br><span class="line">                result = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!result &amp;&amp; mInputEventConsistencyVerifier != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mInputEventConsistencyVerifier.onUnhandledEvent(event, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Clean up after nested scrolls if this is the end of a gesture;</span></span><br><span class="line">        <span class="comment">// also cancel it if we tried an ACTION_DOWN but we didn't want the rest</span></span><br><span class="line">        <span class="comment">// of the gesture.</span></span><br><span class="line">        <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_UP ||</span><br><span class="line">                actionMasked == MotionEvent.ACTION_CANCEL ||</span><br><span class="line">                (actionMasked == MotionEvent.ACTION_DOWN &amp;&amp; !result)) &#123;</span><br><span class="line">            stopNestedScroll();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>再往上看，View的dispatchTouchEvent是在哪里调用的，可以往上追溯到ViewGroup的dispatchTransformedTouchEvent方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ViewGroup.java ViewGroup继承自View，但是可以把它当做一个容器，比如LinearLayout就是继承自ViewGroup，</span></span><br><span class="line"><span class="comment">// ViewGroup的dispatchTransformedTouchEvent将MotionEvent传给指定的子view，如果子view为空，那么这个ViewGroup</span></span><br><span class="line"><span class="comment">// 自己就处理MotionEvent，而我们知道ViewGroup继承自View，所以可以调用super.dispatchTouchEvent(event)</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Transforms a motion event into the coordinate space of a particular child view,</span></span><br><span class="line"><span class="comment">     * filters out irrelevant pointer ids, and overrides its action if necessary.</span></span><br><span class="line"><span class="comment">     * If child is null, assumes the MotionEvent will be sent to this ViewGroup instead.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">dispatchTransformedTouchEvent</span><span class="params">(MotionEvent event, <span class="keyword">boolean</span> cancel,</span></span></span><br><span class="line"><span class="function"><span class="params">            View child, <span class="keyword">int</span> desiredPointerIdBits)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// handled标志事件是否被消耗</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> handled;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Canceling motions is a special case.  We don't need to perform any transformations</span></span><br><span class="line">        <span class="comment">// or filtering.  The important part is the action, not the contents.</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> oldAction = event.getAction();</span><br><span class="line">        <span class="comment">// ACTION_CANCEL也要传递出去</span></span><br><span class="line">        <span class="keyword">if</span> (cancel || oldAction == MotionEvent.ACTION_CANCEL) &#123;</span><br><span class="line">            event.setAction(MotionEvent.ACTION_CANCEL);</span><br><span class="line">            <span class="comment">// 通过判断传入的child值决定在子view中处理事件还是在当前ViewGroup中处理</span></span><br><span class="line">            <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</span><br><span class="line">                handled = <span class="keyword">super</span>.dispatchTouchEvent(event);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                handled = child.dispatchTouchEvent(event);</span><br><span class="line">            &#125;</span><br><span class="line">            event.setAction(oldAction);</span><br><span class="line">            <span class="keyword">return</span> handled;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Calculate the number of pointers to deliver.</span></span><br><span class="line">        <span class="comment">// 这里出现了一个新的概念pointers，这是由于许多设备支持多点触控，那么同一时间可以传递多个事件，我们把这些事件成为pointers</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> oldPointerIdBits = event.getPointerIdBits();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> newPointerIdBits = oldPointerIdBits &amp; desiredPointerIdBits;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If for some reason we ended up in an inconsistent state where it looks like we</span></span><br><span class="line">        <span class="comment">// might produce a motion event with no pointers in it, then drop the event.</span></span><br><span class="line">        <span class="keyword">if</span> (newPointerIdBits == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If the number of pointers is the same and we don't need to perform any fancy</span></span><br><span class="line">        <span class="comment">// irreversible transformations, then we can reuse the motion event for this</span></span><br><span class="line">        <span class="comment">// dispatch as long as we are careful to revert any changes we make.</span></span><br><span class="line">        <span class="comment">// Otherwise we need to make a copy.</span></span><br><span class="line">        <span class="keyword">final</span> MotionEvent transformedEvent;</span><br><span class="line">        <span class="comment">// 当事件传递过程中pointers数量保持不变时，我们可以以一个相对安全的方式将事件传递下去</span></span><br><span class="line">        <span class="keyword">if</span> (newPointerIdBits == oldPointerIdBits) &#123;</span><br><span class="line">            <span class="keyword">if</span> (child == <span class="keyword">null</span> || child.hasIdentityMatrix()) &#123;</span><br><span class="line">                <span class="comment">// 判断方式同上</span></span><br><span class="line">                <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    handled = <span class="keyword">super</span>.dispatchTouchEvent(event);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 同时可以将一些偏移量参数传入event中，这也是为什么ContextMenu可以获取到点击事件的位置的原因</span></span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">float</span> offsetX = mScrollX - child.mLeft;</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">float</span> offsetY = mScrollY - child.mTop;</span><br><span class="line">                    event.offsetLocation(offsetX, offsetY);</span><br><span class="line"></span><br><span class="line">                    handled = child.dispatchTouchEvent(event);</span><br><span class="line"></span><br><span class="line">                    event.offsetLocation(-offsetX, -offsetY);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> handled;</span><br><span class="line">            &#125;</span><br><span class="line">            transformedEvent = MotionEvent.obtain(event);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// split方法主要是根据pointers数量变化决定event的类型，具体代码可以在MotionEvent.java中找到</span></span><br><span class="line">            transformedEvent = event.split(newPointerIdBits);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Perform any necessary transformations and dispatch.</span></span><br><span class="line">        <span class="comment">// 同理需要将transformedEvent传出去</span></span><br><span class="line">        <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</span><br><span class="line">            handled = <span class="keyword">super</span>.dispatchTouchEvent(transformedEvent);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">float</span> offsetX = mScrollX - child.mLeft;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">float</span> offsetY = mScrollY - child.mTop;</span><br><span class="line">            transformedEvent.offsetLocation(offsetX, offsetY);</span><br><span class="line">            <span class="keyword">if</span> (! child.hasIdentityMatrix()) &#123;</span><br><span class="line">                transformedEvent.transform(child.getInverseMatrix());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            handled = child.dispatchTouchEvent(transformedEvent);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Done.</span></span><br><span class="line">        transformedEvent.recycle();</span><br><span class="line">        <span class="keyword">return</span> handled;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>再看一下dispatchTransformedTouchEvent被调用的位置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ViewGroup.java 这是ViewGroup的dispatchTouchEvent方法，很明显了，应该功能类似View的dispatchTouchEvent</span></span><br><span class="line"><span class="comment">// 都是对MotionEvent进行传递，这里代码很长，仅仅保留最重要的部分</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">boolean</span> handled = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (onFilterTouchEventForSecurity(ev)) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> action = ev.getAction();</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> actionMasked = action &amp; MotionEvent.ACTION_MASK;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Handle an initial down.</span></span><br><span class="line">            <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">                <span class="comment">// Throw away all previous state when starting a new touch gesture.</span></span><br><span class="line">                <span class="comment">// The framework may have dropped the up or cancel event for the previous gesture</span></span><br><span class="line">                <span class="comment">// due to an app switch, ANR, or some other state change.</span></span><br><span class="line">                cancelAndClearTouchTargets(ev);</span><br><span class="line">                resetTouchState();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Check for interception.</span></span><br><span class="line">            <span class="comment">// 这里多了一个参数intercepted，很重要，用于截断事件的传递</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> intercepted;</span><br><span class="line">            <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN</span><br><span class="line">                    || mFirstTouchTarget != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">boolean</span> disallowIntercept = (mGroupFlags &amp; FLAG_DISALLOW_INTERCEPT) != <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (!disallowIntercept) &#123;</span><br><span class="line">                    <span class="comment">// intercepted的值通过onInterceptTouchEvent方法得到，重写此方法可以截断事件的传递</span></span><br><span class="line">                    intercepted = onInterceptTouchEvent(ev);</span><br><span class="line">                    ev.setAction(action); <span class="comment">// restore action in case it was changed</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    intercepted = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// There are no touch targets and this action is not an initial down</span></span><br><span class="line">                <span class="comment">// so this view group continues to intercept touches.</span></span><br><span class="line">                intercepted = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果intercepted为true，则事件不会被传递下去，如果为false，则会将事件传递下去</span></span><br><span class="line">            <span class="keyword">if</span> (!canceled &amp;&amp; !intercepted) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// If the event is targeting accessibility focus we give it to the</span></span><br><span class="line">                <span class="comment">// view that has accessibility focus and if it does not handle it</span></span><br><span class="line">                <span class="comment">// we clear the flag and dispatch the event to all children as usual.</span></span><br><span class="line">                <span class="comment">// We are looking up the accessibility focused host to avoid keeping</span></span><br><span class="line">                <span class="comment">// state since these events are very rare.</span></span><br><span class="line">                <span class="comment">// 循环遍历ViewGroup的所有子view，将事件传递下去</span></span><br><span class="line">                View childWithAccessibilityFocus = ev.isTargetAccessibilityFocus()</span><br><span class="line">                        ? findChildWithAccessibilityFocus() : <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN</span><br><span class="line">                        || (split &amp;&amp; actionMasked == MotionEvent.ACTION_POINTER_DOWN)</span><br><span class="line">                        || actionMasked == MotionEvent.ACTION_HOVER_MOVE) &#123;</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> actionIndex = ev.getActionIndex(); <span class="comment">// always 0 for down</span></span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> idBitsToAssign = split ? <span class="number">1</span> &lt;&lt; ev.getPointerId(actionIndex)</span><br><span class="line">                            : TouchTarget.ALL_POINTER_IDS;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Clean up earlier touch targets for this pointer id in case they</span></span><br><span class="line">                    <span class="comment">// have become out of sync.</span></span><br><span class="line">                    removePointersFromTouchTargets(idBitsToAssign);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> childrenCount = mChildrenCount;</span><br><span class="line">                    <span class="keyword">if</span> (newTouchTarget == <span class="keyword">null</span> &amp;&amp; childrenCount != <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">final</span> <span class="keyword">float</span> x = ev.getX(actionIndex);</span><br><span class="line">                        <span class="keyword">final</span> <span class="keyword">float</span> y = ev.getY(actionIndex);</span><br><span class="line">                        <span class="comment">// Find a child that can receive the event.</span></span><br><span class="line">                        <span class="comment">// Scan children from front to back.</span></span><br><span class="line">                        <span class="keyword">final</span> ArrayList&lt;View&gt; preorderedList = buildTouchDispatchChildList();</span><br><span class="line">                        <span class="keyword">final</span> <span class="keyword">boolean</span> customOrder = preorderedList == <span class="keyword">null</span></span><br><span class="line">                                &amp;&amp; isChildrenDrawingOrderEnabled();</span><br><span class="line">                        <span class="keyword">final</span> View[] children = mChildren;</span><br><span class="line">                        <span class="comment">// 循环开始的位置</span></span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> i = childrenCount - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                            <span class="keyword">final</span> <span class="keyword">int</span> childIndex = getAndVerifyPreorderedIndex(</span><br><span class="line">                                    childrenCount, i, customOrder);</span><br><span class="line">                            <span class="keyword">final</span> View child = getAndVerifyPreorderedView(</span><br><span class="line">                                    preorderedList, children, childIndex);</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// If there is a view that has accessibility focus we want it</span></span><br><span class="line">                            <span class="comment">// to get the event first and if not handled we will perform a</span></span><br><span class="line">                            <span class="comment">// normal dispatch. We may do a double iteration but this is</span></span><br><span class="line">                            <span class="comment">// safer given the timeframe.</span></span><br><span class="line">                            <span class="keyword">if</span> (childWithAccessibilityFocus != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (childWithAccessibilityFocus != child) &#123;</span><br><span class="line">                                    <span class="keyword">continue</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                childWithAccessibilityFocus = <span class="keyword">null</span>;</span><br><span class="line">                                i = childrenCount - <span class="number">1</span>;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> (!canViewReceivePointerEvents(child)</span><br><span class="line">                                    || !isTransformedTouchPointInView(x, y, child, <span class="keyword">null</span>)) &#123;</span><br><span class="line">                                ev.setTargetAccessibilityFocus(<span class="keyword">false</span>);</span><br><span class="line">                                <span class="keyword">continue</span>;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            newTouchTarget = getTouchTarget(child);</span><br><span class="line">                            <span class="keyword">if</span> (newTouchTarget != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                <span class="comment">// Child is already receiving touch within its bounds.</span></span><br><span class="line">                                <span class="comment">// Give it the new pointer in addition to the ones it is handling.</span></span><br><span class="line">                                newTouchTarget.pointerIdBits |= idBitsToAssign;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            resetCancelNextUpFlag(child);</span><br><span class="line">                            <span class="comment">// 调用dispatchTransformedTouchEvent的位置</span></span><br><span class="line">                            <span class="keyword">if</span> (dispatchTransformedTouchEvent(ev, <span class="keyword">false</span>, child, idBitsToAssign)) &#123;</span><br><span class="line">                                <span class="comment">// Child wants to receive touch within its bounds.</span></span><br><span class="line">                                mLastTouchDownTime = ev.getDownTime();</span><br><span class="line">                                <span class="keyword">if</span> (preorderedList != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                    <span class="comment">// childIndex points into presorted list, find original index</span></span><br><span class="line">                                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; childrenCount; j++) &#123;</span><br><span class="line">                                        <span class="keyword">if</span> (children[childIndex] == mChildren[j]) &#123;</span><br><span class="line">                                            mLastTouchDownIndex = j;</span><br><span class="line">                                            <span class="keyword">break</span>;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                    mLastTouchDownIndex = childIndex;</span><br><span class="line">                                &#125;</span><br><span class="line">                                mLastTouchDownX = ev.getX();</span><br><span class="line">                                mLastTouchDownY = ev.getY();</span><br><span class="line">                                newTouchTarget = addTouchTarget(child, idBitsToAssign);</span><br><span class="line">                                alreadyDispatchedToNewTouchTarget = <span class="keyword">true</span>;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// The accessibility focus didn't handle the event, so clear</span></span><br><span class="line">                            <span class="comment">// the flag and do a normal dispatch to all children.</span></span><br><span class="line">                            ev.setTargetAccessibilityFocus(<span class="keyword">false</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (preorderedList != <span class="keyword">null</span>) preorderedList.clear();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (newTouchTarget == <span class="keyword">null</span> &amp;&amp; mFirstTouchTarget != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// Did not find a child to receive the event.</span></span><br><span class="line">                        <span class="comment">// Assign the pointer to the least recently added target.</span></span><br><span class="line">                        newTouchTarget = mFirstTouchTarget;</span><br><span class="line">                        <span class="keyword">while</span> (newTouchTarget.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            newTouchTarget = newTouchTarget.next;</span><br><span class="line">                        &#125;</span><br><span class="line">                        newTouchTarget.pointerIdBits |= idBitsToAssign;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果intercepted为true，则在这里调用dispatchTransformedTouchEvent</span></span><br><span class="line">            <span class="comment">// 调用dispatchTransformedTouchEvent即调用本身的onTouchEvent方法</span></span><br><span class="line">            <span class="comment">// 只看核心代码就可以知道事件传递的规则</span></span><br><span class="line">            <span class="comment">// Dispatch to touch targets.</span></span><br><span class="line">            <span class="keyword">if</span> (mFirstTouchTarget == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// No touch targets so treat this as an ordinary view.</span></span><br><span class="line">                handled = dispatchTransformedTouchEvent(ev, canceled, <span class="keyword">null</span>,</span><br><span class="line">                        TouchTarget.ALL_POINTER_IDS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Dispatch to touch targets, excluding the new touch target if we already</span></span><br><span class="line">                <span class="comment">// dispatched to it.  Cancel touch targets if necessary.</span></span><br><span class="line">                TouchTarget predecessor = <span class="keyword">null</span>;</span><br><span class="line">                TouchTarget target = mFirstTouchTarget;</span><br><span class="line">                <span class="keyword">while</span> (target != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">final</span> TouchTarget next = target.next;</span><br><span class="line">                    <span class="keyword">if</span> (alreadyDispatchedToNewTouchTarget &amp;&amp; target == newTouchTarget) &#123;</span><br><span class="line">                        handled = <span class="keyword">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">final</span> <span class="keyword">boolean</span> cancelChild = resetCancelNextUpFlag(target.child)</span><br><span class="line">                                || intercepted;</span><br><span class="line">                        <span class="keyword">if</span> (dispatchTransformedTouchEvent(ev, cancelChild,</span><br><span class="line">                                target.child, target.pointerIdBits)) &#123;</span><br><span class="line">                            handled = <span class="keyword">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (cancelChild) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (predecessor == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                mFirstTouchTarget = next;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                predecessor.next = next;</span><br><span class="line">                            &#125;</span><br><span class="line">                            target.recycle();</span><br><span class="line">                            target = next;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    predecessor = target;</span><br><span class="line">                    target = next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Update list of touch targets for pointer up or cancel, if needed.</span></span><br><span class="line">            <span class="keyword">if</span> (canceled</span><br><span class="line">                    || actionMasked == MotionEvent.ACTION_UP</span><br><span class="line">                    || actionMasked == MotionEvent.ACTION_HOVER_MOVE) &#123;</span><br><span class="line">                resetTouchState();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (split &amp;&amp; actionMasked == MotionEvent.ACTION_POINTER_UP) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> actionIndex = ev.getActionIndex();</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> idBitsToRemove = <span class="number">1</span> &lt;&lt; ev.getPointerId(actionIndex);</span><br><span class="line">                removePointersFromTouchTargets(idBitsToRemove);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!handled &amp;&amp; mInputEventConsistencyVerifier != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mInputEventConsistencyVerifier.onUnhandledEvent(ev, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> handled;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>继续往上看，我们就能发现ViewGroup的dispatchTouchEvent方法由DecorView的superDispatchTouchEvent调用，而DecorView又是由PhoneWindow或者Window的superDispatchTouchEvent调用，PhoneWindow的superDispatchTouchEvent方法又是由activity的dispatchTouchEvent方法调用，具体代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Activity.java</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Called to process touch screen events.  You can override this to</span></span><br><span class="line"><span class="comment">     * intercept all touch screen events before they are dispatched to the</span></span><br><span class="line"><span class="comment">     * window.  Be sure to call this implementation for touch screen events</span></span><br><span class="line"><span class="comment">     * that should be handled normally.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ev The touch screen event.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean Return true if this event was consumed.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ev.getAction() == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">            onUserInteraction();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 核心代码getWindow().superDispatchTouchEvent(ev)</span></span><br><span class="line">        <span class="keyword">if</span> (getWindow().superDispatchTouchEvent(ev)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> onTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// -----------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Window.java</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Used by custom windows, such as Dialog, to pass the touch screen event</span></span><br><span class="line"><span class="comment">     * further down the view hierarchy. Application developers should</span></span><br><span class="line"><span class="comment">     * not need to implement or call this.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// 抽象方法，具体由PhoneWindow实现</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">superDispatchTouchEvent</span><span class="params">(MotionEvent event)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// -----------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// DecorView.java</span></span><br><span class="line">    <span class="comment">// PhoneWindow的superDispatchTouchEvent方法交由DecorView实现，DecorView继承自ViewGroup，最终调用的还是ViewGroup的dispatchTouchEvent方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">superDispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(event);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>结合前半部分自底向上和后半部分自顶向下的分析，我们知道了dispatchTouchEvent传递事件的流程：</p>
<p>从activity -&gt; PhoneWindow/DecorView -&gt; ViewGroup(如果布局中有的话) -&gt; View</p>
<ul>
<li>dispatchTouchEvent是一种层层递归式的调用，只有在递归到View中被执行时才会返回，一般来说返回true代表事件被消耗了，而事件的处理在OnTouchEvent中；</li>
<li>ViewGroup中有onInterceptTouchEvent方法可以中断事件的传递，重写此方法让它返回true，那么事件不会传递到子view中，onInterceptTouchEvent默认返回false；</li>
<li>在OnTouchEvent中返回true，则父容器不会执行OnTouchEvent方法，在OnTouchEvent中返回false，则父容器会执行OnTouchEvent方法，且后续的所有事件都会在父容器中处理，不再向下传递。</li>
</ul>
<p><strong>举两个例子说明如何通过onInterceptTouchEvent方法中断事件的传递</strong></p>
<p>第一个例子，一个LinearLayout中包含一个Button，LinearLayout和Button都设置onClick方法，很显然当我们点击Button时Button的onClick方法执行，当我们点击LinearLayout时LinearLayout的onClick方法执行；如果设置了log打印diapatchTouchEvent方法的执行顺序，那么可以发现：</p>
<p>点击Button： activity dispatchTouchEvent -&gt; linearlayout dispatchTouchEvent -&gt; button dispatchTouchEvent</p>
<p>点击LinearLayout： activity dispatchTouchEvent -&gt; linearlayout dispatchTouchEvent</p>
<p>如果我们希望LinearLayout拦截传给Button的事件，那么就需要用到onInterceptTouchEvent方法</p>
<p>直接在自定义LinearLayout中重写onInterceptTouchEvent方法，让它返回true，则该LinearLayout下的所有子view都无法接收到事件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第二个例子，禁止ViewPager左右滑动，首先需要明白一个问题，为什么ViewPager可以使页面左右滑动，如果ViewPager中的Fragment中也包含一个控件CustomTextView，那么滑动会产生冲突吗？</p>
<p>首先看一下log日志，这是在自定义的CustomViewPager和CustomTextView中与TouchEvent相关的代码执行顺序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CustomViewPager:    dispatchTouchEvent    - ACTION_DOWN</span><br><span class="line">CustomViewPager:    onInterceptTouchEvent - ACTION_DOWN</span><br><span class="line">CustomTextView:     dispatchTouchEvent    - ACTION_DOWN</span><br><span class="line">CustomTextView:     onTouchEvent          - ACTION_DOWN</span><br><span class="line">CustomViewPager:    onTouchEvent          - ACTION_DOWN</span><br><span class="line">CustomViewPager:    dispatchTouchEvent    - ACTION_MOVE</span><br><span class="line">CustomViewPager:    onTouchEvent          - ACTION_MOVE</span><br><span class="line">CustomViewPager:    dispatchTouchEvent    - ACTION_UP</span><br><span class="line">CustomViewPager:    onTouchEvent          - ACTION_UP</span><br></pre></td></tr></table></figure>
<p>下面是两个自定义的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomViewPager</span> <span class="keyword">extends</span> <span class="title">ViewPager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"aaaa-CustomViewPager"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> enabled;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomViewPager</span><span class="params">(@NonNull Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        <span class="keyword">this</span>.enabled = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomViewPager</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        <span class="keyword">this</span>.enabled = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"dispatchTouchEvent - "</span> + <span class="string">" - "</span> + ev.toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.enabled) &#123;</span><br><span class="line">            Log.i(TAG, <span class="string">"onTouchEvent - "</span> + <span class="string">" - "</span> + event.toString());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 根据后面的分析可知，对于ACTION_DOWN事件来说，super.onInterceptTouchEvent(event)默认返回false</span></span><br><span class="line"><span class="comment">// 这段代码看似都是返回false，对结果没有影响，但是实际上将onInterceptTouchEvent的调用从ViewGroup转到ViewPager中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.enabled) &#123;</span><br><span class="line">            Log.i(TAG, <span class="string">"onInterceptTouchEvent - "</span> + <span class="string">" - "</span> + event.toString());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onInterceptTouchEvent(event);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPagingEnabled</span><span class="params">(<span class="keyword">boolean</span> enabled)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.enabled = enabled;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomTextView</span> <span class="keyword">extends</span> <span class="title">AppCompatTextView</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"aaaa-CustomTextView"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomTextView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomTextView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomTextView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"dispatchTouchEvent - "</span> + <span class="string">" - "</span> + event.toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"onTouchEvent - "</span> + <span class="string">" - "</span> + event.toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于ACTION_DOWN事件来说，事件传递流程为：</p>
<ol>
<li>CustomViewPager的dispatchTouchEvent（应该是来自于PhoneWindow/DecorView），调用<code>super.dispatchTouchEvent(ev)</code>，即ViewGroup的dispatchTouchEvent方法；</li>
<li>在上面ViewGroup的源码中我们知道，ViewGroup的dispatchTouchEvent方法中调用了onInterceptTouchEvent方法<code>intercepted = onInterceptTouchEvent(ev);</code>，由于我们在CustomViewPager中重写了onInterceptTouchEvent方法，所以会回到CustomViewPager的onInterceptTouchEvent方法；</li>
<li>默认情况下this.enabled为true，所以我们开始调用<code>super.onInterceptTouchEvent(event)</code>，此时super是ViewPager的onInterceptTouchEvent方法；</li>
<li>再看ViewPager的源码，对于ACTION_DOWN事件来说，onInterceptTouchEvent返回false，所以CustomViewPager的onInterceptTouchEvent方法直接返回false，又回到ViewGroup的dispatchTouchEvent方法中；</li>
<li>当<code>intercepted = onInterceptTouchEvent(ev);</code>中intercepted为false时，会执行子view的dispatchTouchEvent方法，子view即CustomTextView的dispatchTouchEvent方法；</li>
<li>CustomTextView的dispatchTouchEvent方法默认调用<code>super.dispatchTouchEvent(event)</code>，即View的dispatchTouchEvent方法，而从View的源码中可知其调用onTouchEvent方法，而我们的CustomTextView重写了onTouchEvent方法，但是此方法又返回到TextView的onTouchEvent方法中，最终还是回到View的onTouchEvent方法，对于ACTION_DOWN事件来说，最终CustomTextView的onTouchEvent方法返回false，则CustomTextView的super以及CustomTextView的dispatchTouchEvent方法返回false，对应5中，如果子view的dispatchTouchEvent方法返回false，则第5步中ViewGroup会执行<code>super.dispatchTouchEvent(event)</code>，即ViewGroup的父类View的dispatchTouchEvent方法，此处的View不再是子view，而是作为CustomViewPager，因为CustomViewPager重写了onTouchEvent方法，所以View的dispatchTouchEvent方法中调用的onTouchEvent方法为CustomViewPager的onTouchEvent方法，而CustomViewPager的onTouchEvent方法调用<code>super.onTouchEvent(event)</code>，即ViewPager的onTouchEvent方法；</li>
<li>ViewPager的onTouchEvent方法即最终实现滑动效果的地方，根据代码可知，只有在没有adapter或者滑动到最边缘的页面才会返回false，其他情况返回true；</li>
<li>ViewPager的onTouchEvent方法返回true即处理了ACTION_DOWN事件，那么依次CustomViewPager的onTouchEvent方法返回true，CustomViewPager的dispatchTouchEvent方法返回true，至此ACTION_DOWN事件的处理结束了。</li>
</ol>
<p>对于ACTION_MOVE和ACTION_UP事件来说（这两个事件分发流程基本相同），事件传递流程为：</p>
<ol>
<li>CustomViewPager的dispatchTouchEvent（应该是来自于PhoneWindow/DecorView），调用<code>super.dispatchTouchEvent(ev)</code>，即ViewGroup的dispatchTouchEvent方法；</li>
<li>ViewGroup的dispatchTouchEvent方法中intercepted为true，拦截了ACTION_MOVE事件，由自身处理，即调用CustomViewPager的onTouchEvent方法；</li>
<li>CustomViewPager的onTouchEvent方法调用<code>super.onTouchEvent(event)</code>，即ViewPager的onTouchEvent方法，在这里实现滑动的效果，根据代码可知，只有在没有adapter或者滑动到最边缘的页面才会返回false，其他情况返回true；</li>
<li>然后依次CustomViewPager的onTouchEvent返回true，CustomViewPager的dispatchTouchEvent方法返回true。</li>
</ol>
<p>简而言之，事件分发就是一系列的dispatchTouchEvent、onInterceptTouchEvent和onTouchEvent方法的相互调用，首先需要明确地就是最终实现滑动效果、点击效果的都是各个控件的onTouchEvent方法，dispatchTouchEvent仅用作事件分发的开始，而onInterceptTouchEvent方法用于终止事件向子控件传递。</p>
<p>以上面的代码为例可以得到一些结论：</p>
<ol>
<li>ViewPager的onInterceptTouchEvent一般对ACTION_DOWN事件返回false，即不会对ACTION_DOWN进行拦截，那么ACTION_DOWN必定传到子view中；</li>
<li>如果ViewPager的子view无法在onTouchEvent中进行处理，比如这里的CustomTextView，对于ACTION_DOWN事件，CustomTextView的onTouchEvent返回false（为什么无法处理ACTION_DOWN，从源码中可知是由于CustomTextView的clickable为false，所以返回false），所以CustomTextView的dispatchTouchEvent方法返回false，相当于告诉父view不要再传给我ACTION_DOWN了，我没法处理；</li>
<li>如果ViewPager的子view的dispatchTouchEvent方法返回false，那么ViewPager就会调用自己的onTouchEvent来处理，ViewPager的onTouchEvent可以处理ACTION_DOWN事件，并记录了点击的位置，然后返回true，从而ViewPager的dispatchTouchEvent方法返回true，ACTION_DOWN事件结束；</li>
<li>紧接着ACTION_DOWN事件的必定是ACTION_MOVE或ACTION_UP，以ACTION_MOVE为例，同样是从ViewPager的dispatchTouchEvent方法开始，此时没有调用onInterceptTouchEvent方法，而是直接执行onTouchEvent方法，即根据ACTION_MOVE事件带的参数实现滑动效果，然后返回true；</li>
<li>紧接着ACTION_MOVE的必然是ACTION_UP，流程同4；</li>
<li>当ViewGroup的onTouchEvent方法可以处理ACTION_DOWN事件时，即onTouchEvent方法返回true，则此ViewGroup的onInterceptTouchEvent方法不再执行（对的，就算不执行也可以拦截事件），同时后续事件被拦截，经由此ViewGroup的onTouchEvent处理。</li>
</ol>
<p>综上所述，如果ViewPager的子view无法处理ACTION_DOWN事件，那么ViewPager自己就会处理ACTION_DOWN事件，并在后续事件传递过程中拦截（不是通过onInterceptTouchEvent方法），后续的ACTION_MOVE或ACTION_UP由ViewPager进行处理，在ViewPager的onTouchEvent中实现了滑动的效果。</p>
<p>如果我们在ViewPager中加上HorizontalScrollView，并加上几个CustomTextView，会产生怎样的效果呢</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">us.zoom.videomeetings.viewpagerdemo.custom.CustomHorizontalScrollView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">us.zoom.videomeetings.viewpagerdemo.custom.CustomLinearLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">us.zoom.videomeetings.viewpagerdemo.custom.CustomTextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/custom_tv"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_margin</span>=<span class="string">"40dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:padding</span>=<span class="string">"40dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"Fragment"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">"30sp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">us.zoom.videomeetings.viewpagerdemo.custom.CustomTextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/custom_tv2"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_margin</span>=<span class="string">"40dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:padding</span>=<span class="string">"40dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"Fragment"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">"30sp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">us.zoom.videomeetings.viewpagerdemo.custom.CustomLinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">us.zoom.videomeetings.viewpagerdemo.custom.CustomHorizontalScrollView</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>CustomHorizontalScrollView和CustomLinearLayout都是直接继承，仅重写dispatchTouchEvent、onTouchEvent、onInterceptTouchEvent方法，加上log，这里就不加代码了，基本同上。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/viewpager.gif" alt="viewpager.gif"></p>
<p>在上述的演示效果中可以发现，如果滑动的位置是TextView，则ViewPager的左右滑动似乎被卡住了，但是偶尔可以切换，而且就算滑动到第二个TextView的边缘也不能切换fragment；如果滑动的位置是下方空白区域则ViewPager可以正常滑动。</p>
<p>根据log以及上文的分析可知，ViewPager左右滑动被卡住的原因是：</p>
<ol>
<li>ACTION_DOWN事件向下层层传递到CustomTextView，结果发现CustomTextView的onTouchEvent无法处理返回了false，然后向上层层传递直到CustomHorizontalScrollView发现自己可以处理ACTION_DOWN事件，于是其onTouchEvent返回了true，则CustomHorizontalScrollView的dispatchTouchEvent方法返回true，从而CustomViewPager的onTouchEvent无法执行；</li>
<li>紧接着ACTION_MOVE事件向下层层传递到CustomHorizontalScrollView，发现CustomHorizontalScrollView之前处理了ACTION_DOWN，那么后续所有事件都被CustomHorizontalScrollView拦截，通过其onTouchEvent处理，并返回true，则CustomHorizontalScrollView的dispatchTouchEvent方法返回true，从而CustomViewPager的onTouchEvent无法执行；</li>
<li>ACTION_UP事件同2。</li>
</ol>
<p>经过上面的分析知道了其实是CustomHorizontalScrollView能够处理所有事件，从而导致CustomViewPager无法执行onTouchEvent，因此ViewPager无法左右滑动。</p>
<p>因此我们可以简单完成几个对滑动控制的需求</p>
<h3 id="4-1-禁用ViewPager的滑动，子view可以滑动"><a href="#4-1-禁用ViewPager的滑动，子view可以滑动" class="headerlink" title="4.1 禁用ViewPager的滑动，子view可以滑动"></a>4.1 禁用ViewPager的滑动，子view可以滑动</h3><p>这个需求是为了解决上面提到的ViewPager偶尔可以滑动的问题，很显然这里可能是事件传递过程中触发了某种条件导致事件最终由ViewPager的onTouchEvent方法处理，我们要防止这种情况发生。解决的方法是CustomViewPager的onTouchEvent返回false（确保CustomViewPager不会处理滑动事件），同时可以在CustomViewPager的onInterceptTouchEvent返回false（可选，但是可以保证CustomViewPager不对事件进行拦截）。</p>
<h3 id="4-2-ViewPager仅在子view滑动到左右边界时可以滑动"><a href="#4-2-ViewPager仅在子view滑动到左右边界时可以滑动" class="headerlink" title="4.2 ViewPager仅在子view滑动到左右边界时可以滑动"></a>4.2 ViewPager仅在子view滑动到左右边界时可以滑动</h3><p>直接看代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomHorizontalScrollView</span> <span class="keyword">extends</span> <span class="title">HorizontalScrollView</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = CustomHorizontalScrollView<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomHorizontalScrollView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomHorizontalScrollView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomHorizontalScrollView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomHorizontalScrollView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr, <span class="keyword">int</span> defStyleRes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr, defStyleRes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可以在此处理冲突</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ev</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 还没滑到右边，请求父控件不要拦截我的事件，事件自己处理 true ；已经滑到右边，则事件交由父控件处理 false。</span></span><br><span class="line">        <span class="comment">// getParent().requestDisallowInterceptTouchEvent(!isScrollToRight());</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 也可以在此处理冲突</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ev</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (ev.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// 处理的逻辑是在ACTION_MOVE事件上，如果滑动到最左或最右边则调用</span></span><br><span class="line">            <span class="comment">// getParent().requestDisallowInterceptTouchEvent(false)</span></span><br><span class="line">            <span class="comment">// 那么HorizontalScrollView的父view会拦截掉ACTION_MOVE事件，</span></span><br><span class="line">            <span class="comment">// 即ViewPager拦截ACTION_MOVE事件，由他的onTouchEvent处理</span></span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                <span class="keyword">if</span> (isScrollToLeft() || isScrollToRight()) &#123;</span><br><span class="line">                    Log.e(TAG, <span class="string">"滑到"</span> + (isScrollToLeft() ? <span class="string">"左边"</span> : <span class="string">"右边"</span>));</span><br><span class="line">                    <span class="comment">// 把事件交给父控件处理，例如：viewpager滑动</span></span><br><span class="line">                    getParent().requestDisallowInterceptTouchEvent(<span class="keyword">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</span><br><span class="line">                <span class="comment">// 请求父控件可以拦截事件</span></span><br><span class="line">                getParent().requestDisallowInterceptTouchEvent(<span class="keyword">false</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onInterceptTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否已经滑到了最右边</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isScrollToRight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// getScrollX得到View的最左边的位置，若HorizontalScrollView滑到最右边，则为负值；</span></span><br><span class="line">        <span class="comment">// getScrollX() + getWidth()为最右边的位置</span></span><br><span class="line">        <span class="comment">// getChildAt(getChildCount() - 1).getRight()恰好得到子view的最右边的位置</span></span><br><span class="line">        <span class="keyword">return</span> getChildAt(getChildCount() - <span class="number">1</span>).getRight() == getScrollX() + getWidth();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否已经滑到了最左边</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isScrollToLeft</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getScrollX() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>滑动冲突的解决方式有两种</strong>：</p>
<blockquote>
<p>1.外部拦截法：触摸事件都先经过父容器的拦截处理，如果父容器需要此事件就拦截，不需要就不拦截（此方法符合view事件分发机制），这样就可以解决滑动冲突问题。需要重写onInterceptTouchEvent方法，伪代码如下：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> intercept = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">switch</span> (ev.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">              <span class="comment">// 不能拦截，否则无法传递事件给子元素</span></span><br><span class="line">                intercept = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">             <span class="comment">// 针对不同的滑动冲突，只需要修改这个条件即可，其它均不需做修改并且也不能修改</span></span><br><span class="line">                <span class="keyword">if</span> (滑动事件交由父容器处理)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 拦截事件</span></span><br><span class="line">                    intercept = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 不拦截事件</span></span><br><span class="line">                    intercept = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</span><br><span class="line">                <span class="comment">// 不拦截，否则子元素可能无法接收到这两个事件</span></span><br><span class="line">                intercept = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> intercept;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>2.内部拦截法：父容器不拦截任何事件，所有的事件都传递给子元素，如果子元素需要此事件就直接消耗掉，否则就交由父容器进行处理，这种方法和android中的事件分发机制不一致，需要配合<code>requestDisallowInterceptTouchEvent</code>方法才能正常工作，使用越来较外部拦截法稍显复杂。我们可以修改<code>dispatchTouchEvent</code>方法或者onTouchEvent方法来达到目的。伪代码如下：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (ev.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                getParent().requestDisallowInterceptTouchEvent(<span class="keyword">true</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">            <span class="comment">// 针对不同的滑动冲突，只需要修改这个条件即可，其它均不需做修改并且也不能修改</span></span><br><span class="line">                <span class="keyword">if</span> (父容器需要此类触摸事件)</span><br><span class="line">                &#123;</span><br><span class="line">                    getParent().requestDisallowInterceptTouchEvent(<span class="keyword">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(ev);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Material</tag>
        <tag>ToolBar</tag>
        <tag>ContextMenu</tag>
        <tag>PopupMenu</tag>
        <tag>RecyclerView</tag>
        <tag>ViewPager</tag>
        <tag>onClick</tag>
        <tag>onLongClick</tag>
        <tag>onTouchEvent</tag>
        <tag>Android事件分发机制</tag>
      </tags>
  </entry>
  <entry>
    <title>Python风格规范</title>
    <url>/archives/10dab2b.html</url>
    <content><![CDATA[<p>参考：</p>
<blockquote>
<p><a href="https://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/" target="_blank" rel="noopener">Google Python风格规范</a></p>
</blockquote>
<h2 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h2><p>不要在行尾加分号, 也不要用分号将两条命令放在同一行.</p>
<h2 id="行长度"><a href="#行长度" class="headerlink" title="行长度"></a>行长度</h2><p>每行不超过80个字符</p>
<p>例外:</p>
<ol>
<li>长的导入模块语句</li>
<li>注释里的URL</li>
</ol>
<p>不要使用反斜杠连接行.</p>
<p>Python会将 <code>圆括号, 中括号和花括号中的行隐式的连接起来</code> , 你可以利用这个特点. 如果需要, 你可以在表达式外围增加一对额外的圆括号.<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Yes: foo_bar(self, width, height, color=<span class="string">'black'</span>, design=<span class="literal">None</span>, x=<span class="string">'foo'</span>,</span><br><span class="line">             emphasis=<span class="literal">None</span>, highlight=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (width == <span class="number">0</span> <span class="keyword">and</span> height == <span class="number">0</span> <span class="keyword">and</span></span><br><span class="line">         color == <span class="string">'red'</span> <span class="keyword">and</span> emphasis == <span class="string">'strong'</span>):</span><br></pre></td></tr></table></figure><br>如果一个文本字符串在一行放不下, 可以使用圆括号来实现隐式行连接:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = (<span class="string">'This will build a very long long '</span></span><br><span class="line">     <span class="string">'long long long long long long string'</span>)</span><br></pre></td></tr></table></figure><br>在注释中，如果必要，将长的URL放在一行上。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Yes:  <span class="comment"># See details at</span></span><br><span class="line">      <span class="comment"># http://www.example.com/us/developer/documentation/api/content/v2.0/csv_file_name_extension_full_specification.html</span></span><br><span class="line">No:  <span class="comment"># See details at</span></span><br><span class="line">     <span class="comment"># http://www.example.com/us/developer/documentation/api/content/\</span></span><br><span class="line">     <span class="comment"># v2.0/csv_file_name_extension_full_specification.html</span></span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Yes: <span class="keyword">if</span> foo:</span><br><span class="line">         bar()</span><br><span class="line">     <span class="keyword">while</span> x:</span><br><span class="line">         x = bar()</span><br><span class="line">     <span class="keyword">if</span> x <span class="keyword">and</span> y:</span><br><span class="line">         bar()</span><br><span class="line">     <span class="keyword">if</span> <span class="keyword">not</span> x:</span><br><span class="line">         bar()</span><br><span class="line">     <span class="keyword">return</span> foo</span><br><span class="line">     <span class="keyword">for</span> (x, y) <span class="keyword">in</span> dict.items(): ...</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">No:  <span class="keyword">if</span> (x):</span><br><span class="line">         bar()</span><br><span class="line">     <span class="keyword">if</span> <span class="keyword">not</span>(x):</span><br><span class="line">         bar()</span><br><span class="line">     <span class="keyword">return</span> (foo)</span><br></pre></td></tr></table></figure>
<h2 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h2><p>用4个空格来缩进代码</p>
<p>绝对不要用tab, 也不要tab和空格混用. 对于行连接的情况, 你应该要么垂直对齐换行的元素, 或者使用4空格的悬挂式缩进(这时第一行不应该有参数):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Yes:   <span class="comment"># 与起始变量对齐</span></span><br><span class="line">       foo = long_function_name(var_one, var_two,</span><br><span class="line">                                var_three, var_four)</span><br><span class="line"></span><br><span class="line">       <span class="comment"># 字典中与起始值对齐</span></span><br><span class="line">       foo = &#123;</span><br><span class="line">           long_dictionary_key: value1 +</span><br><span class="line">                                value2,</span><br><span class="line">           ...</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment"># 4 个空格缩进，第一行不需要</span></span><br><span class="line">       foo = long_function_name(</span><br><span class="line">           var_one, var_two, var_three,</span><br><span class="line">           var_four)</span><br><span class="line"></span><br><span class="line">       <span class="comment"># 字典中 4 个空格缩进</span></span><br><span class="line">       foo = &#123;</span><br><span class="line">           long_dictionary_key:</span><br><span class="line">               long_dictionary_value,</span><br><span class="line">           ...</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">No:    <span class="comment"># 第一行有空格是禁止的</span></span><br><span class="line">      foo = long_function_name(var_one, var_two,</span><br><span class="line">          var_three, var_four)</span><br><span class="line"></span><br><span class="line">      <span class="comment"># 2 个空格是禁止的</span></span><br><span class="line">      foo = long_function_name(</span><br><span class="line">        var_one, var_two, var_three,</span><br><span class="line">        var_four)</span><br><span class="line"></span><br><span class="line">      <span class="comment"># 字典中没有处理缩进</span></span><br><span class="line">      foo = &#123;</span><br><span class="line">          long_dictionary_key:</span><br><span class="line">              long_dictionary_value,</span><br><span class="line">              ...</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>
<h2 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h2><p>顶级定义之间空两行, 方法定义之间空一行</p>
<p>顶级定义之间空两行, 比如函数或者类定义. 方法定义, 类定义与第一个方法之间, 都应该空一行. 函数或方法中, 某些地方要是你觉得合适, 就空一行.</p>
<h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><p>按照标准的排版规范来使用标点两边的空格</p>
<p>括号内不要有空格.</p>
<p>按照标准的排版规范来使用标点两边的空格</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Yes: spam(ham[<span class="number">1</span>], &#123;eggs: <span class="number">2</span>&#125;, [])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">No:  spam( ham[ <span class="number">1</span> ], &#123; eggs: <span class="number">2</span> &#125;, [ ] )</span><br></pre></td></tr></table></figure>
<p>不要在逗号, 分号, 冒号前面加空格, 但应该在它们后面加(除了在行尾).</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Yes: <span class="keyword">if</span> x == <span class="number">4</span>:</span><br><span class="line">         <span class="keyword">print</span> x, y</span><br><span class="line">     x, y = y, x</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">No:  <span class="keyword">if</span> x == <span class="number">4</span> :</span><br><span class="line">         <span class="keyword">print</span> x , y</span><br><span class="line">     x , y = y , x</span><br></pre></td></tr></table></figure>
<p>参数列表, 索引或切片的左括号前不应加空格.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Yes: spam(<span class="number">1</span>)</span><br><span class="line">no: spam (<span class="number">1</span>)</span><br><span class="line">Yes: dict[<span class="string">'key'</span>] = list[index]</span><br><span class="line">No:  dict [<span class="string">'key'</span>] = list [index]</span><br></pre></td></tr></table></figure>
<p>在二元操作符两边都加上一个空格, 比如赋值(<code>=</code>), 比较(<code>==</code>, <code>&lt;</code>, <code>&gt;</code>, <code>!=</code>, <code>&lt;&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>in</code>, <code>not in</code>, <code>is</code>, <code>is not</code>), 布尔(<code>and</code>, <code>or</code>, <code>not</code>). 至于算术操作符两边的空格该如何使用, 需要你自己好好判断. 不过两侧务必要保持一致.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Yes: x == <span class="number">1</span></span><br><span class="line">No:  x&lt;<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>当<code>=</code>用于指示关键字参数或默认参数值时, 不要在其两侧使用空格.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Yes: <span class="function"><span class="keyword">def</span> <span class="title">complex</span><span class="params">(real, imag=<span class="number">0.0</span>)</span>:</span> <span class="keyword">return</span> magic(r=real, i=imag)</span><br><span class="line">No:  <span class="function"><span class="keyword">def</span> <span class="title">complex</span><span class="params">(real, imag = <span class="number">0.0</span>)</span>:</span> <span class="keyword">return</span> magic(r = real, i = imag)</span><br></pre></td></tr></table></figure>
<p>不要用空格来垂直对齐多行间的标记, 因为这会成为维护的负担(适用于<code>:</code>, <code>#</code>, <code>=</code>等):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Yes:</span><br><span class="line">     foo = <span class="number">1000</span>  <span class="comment"># 注释</span></span><br><span class="line">     long_name = <span class="number">2</span>  <span class="comment"># 注释不需要对齐</span></span><br><span class="line"></span><br><span class="line">     dictionary = &#123;</span><br><span class="line">         <span class="string">"foo"</span>: <span class="number">1</span>,</span><br><span class="line">         <span class="string">"long_name"</span>: <span class="number">2</span>,</span><br><span class="line">         &#125;</span><br><span class="line">No:</span><br><span class="line">     foo       = <span class="number">1000</span>  <span class="comment"># 注释</span></span><br><span class="line">     long_name = <span class="number">2</span>     <span class="comment"># 注释不需要对齐</span></span><br><span class="line"></span><br><span class="line">     dictionary = &#123;</span><br><span class="line">         <span class="string">"foo"</span>      : <span class="number">1</span>,</span><br><span class="line">         <span class="string">"long_name"</span>: <span class="number">2</span>,</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure>
<h2 id="Hashbang"><a href="#Hashbang" class="headerlink" title="Hashbang"></a>Hashbang</h2><p>大部分.py文件不必以#!作为文件的开始. 根据 <code>PEP-394</code> , 程序的main文件应该以 <code>#!/usr/bin/python2</code>或者 <code>#!/usr/bin/python3</code>开始.</p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>确保对模块, 函数, 方法和行内注释使用正确的风格</p>
<p><strong>文档字符串</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Python有一种独一无二的的注释方式: 使用文档字符串. 文档字符串是包, 模块, 类或函数里的第一个语句. 这些字符串可以通过对象的__doc__成员被自动提取, 并且被pydoc所用. (你可以在你的模块上运行pydoc试一把, 看看它长什么样). 我们对文档字符串的惯例是使用三重双引号&quot;&quot;&quot;( PEP-257 ). 一个文档字符串应该这样组织: 首先是一行以句号, 问号或惊叹号结尾的概述(或者该文档字符串单纯只有一行). 接着是一个空行. 接着是文档字符串剩下的部分, 它应该与文档字符串的第一行的第一个引号对齐. 下面有更多文档字符串的格式化规范.</span><br></pre></td></tr></table></figure>
<p><strong>模块</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">每个文件应该包含一个许可样板. 根据项目使用的许可(例如, Apache 2.0, BSD, LGPL, GPL), 选择合适的样板.</span><br></pre></td></tr></table></figure>
<p><strong>函数和方法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下文所指的函数,包括函数, 方法, 以及生成器.</span><br><span class="line"></span><br><span class="line">一个函数必须要有文档字符串, 除非它满足以下条件:</span><br><span class="line"></span><br><span class="line">1. 外部不可见</span><br><span class="line">2. 非常短小</span><br><span class="line">3. 简单明了</span><br><span class="line">文档字符串应该包含函数做什么, 以及输入和输出的详细描述. 通常, 不应该描述&quot;怎么做&quot;, 除非是一些复杂的算法. 文档字符串应该提供足够的信息, 当别人编写代码调用该函数时, 他不需要看一行代码, 只要看文档字符串就可以了. 对于复杂的代码, 在代码旁边加注释会比使用文档字符串更有意义.</span><br><span class="line"></span><br><span class="line">关于函数的几个方面应该在特定的小节中进行描述记录， 这几个方面如下文所述. 每节应该以一个标题行开始. 标题行以冒号结尾. 除标题行外, 节的其他内容应被缩进2个空格.</span><br><span class="line"></span><br><span class="line">Args:</span><br><span class="line">列出每个参数的名字, 并在名字后使用一个冒号和一个空格, 分隔对该参数的描述.如果描述太长超过了单行80字符,使用2或者4个空格的悬挂缩进(与文件其他部分保持一致). 描述应该包括所需的类型和含义. 如果一个函数接受*foo(可变长度参数列表)或者**bar (任意关键字参数), 应该详细列出*foo和**bar.</span><br><span class="line"></span><br><span class="line">Returns: (或者 Yields: 用于生成器)</span><br><span class="line">描述返回值的类型和语义. 如果函数返回None, 这一部分可以省略.</span><br><span class="line"></span><br><span class="line">Raises:</span><br><span class="line">列出与接口有关的所有异常.</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetch_bigtable_rows</span><span class="params">(big_table, keys, other_silly_variable=None)</span>:</span></span><br><span class="line">    <span class="string">"""Fetches rows from a Bigtable.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Retrieves rows pertaining to the given keys from the Table instance</span></span><br><span class="line"><span class="string">    represented by big_table.  Silly things may happen if</span></span><br><span class="line"><span class="string">    other_silly_variable is not None.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        big_table: An open Bigtable Table instance.</span></span><br><span class="line"><span class="string">        keys: A sequence of strings representing the key of each table row</span></span><br><span class="line"><span class="string">            to fetch.</span></span><br><span class="line"><span class="string">        other_silly_variable: Another optional variable, that has a much</span></span><br><span class="line"><span class="string">            longer name than the other args, and which does nothing.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        A dict mapping keys to the corresponding table row data</span></span><br><span class="line"><span class="string">        fetched. Each row is represented as a tuple of strings. For</span></span><br><span class="line"><span class="string">        example:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &#123;'Serak': ('Rigel VII', 'Preparer'),</span></span><br><span class="line"><span class="string">         'Zim': ('Irk', 'Invader'),</span></span><br><span class="line"><span class="string">         'Lrrr': ('Omicron Persei 8', 'Emperor')&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        If a key from the keys argument is missing from the dictionary,</span></span><br><span class="line"><span class="string">        then that row was not found in the table.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Raises:</span></span><br><span class="line"><span class="string">        IOError: An error occurred accessing the bigtable.Table object.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p><strong>类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">类应该在其定义下有一个用于描述该类的文档字符串. 如果你的类有公共属性(Attributes), 那么文档中应该有一个属性(Attributes)段. 并且应该遵守和函数参数相同的格式.</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""Summary of class here.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Longer class information....</span></span><br><span class="line"><span class="string">    Longer class information....</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Attributes:</span></span><br><span class="line"><span class="string">        likes_spam: A boolean indicating if we like SPAM or not.</span></span><br><span class="line"><span class="string">        eggs: An integer count of the eggs we have laid.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, likes_spam=False)</span>:</span></span><br><span class="line">        <span class="string">"""Inits SampleClass with blah."""</span></span><br><span class="line">        self.likes_spam = likes_spam</span><br><span class="line">        self.eggs = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">public_method</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Performs operation blah."""</span></span><br></pre></td></tr></table></figure>
<p><strong>块注释和行注释</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">最需要写注释的是代码中那些技巧性的部分. 如果你在下次 代码审查 的时候必须解释一下, 那么你应该现在就给它写注释. 对于复杂的操作, 应该在其操作开始前写上若干行注释. 对于不是一目了然的代码, 应在其行尾添加注释.</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># We use a weighted dictionary search to find out where i is in</span></span><br><span class="line"><span class="comment"># the array.  We extrapolate position based on the largest num</span></span><br><span class="line"><span class="comment"># in the array and the array size and then do binary search to</span></span><br><span class="line"><span class="comment"># get the exact number.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> i &amp; (i<span class="number">-1</span>) == <span class="number">0</span>:        <span class="comment"># true iff i is a power of 2</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">为了提高可读性, 注释应该至少离开代码2个空格.</span><br><span class="line"></span><br><span class="line">另一方面, 绝不要描述代码. 假设阅读代码的人比你更懂Python, 他只是不知道你的代码要做什么.</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># BAD COMMENT: Now go through the b array and make sure whenever i occurs</span></span><br><span class="line"><span class="comment"># the next element is i+1</span></span><br></pre></td></tr></table></figure>
<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>如果一个类不继承自其它类, 就显式的从object继承. 嵌套类也一样.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Yes: <span class="class"><span class="keyword">class</span> <span class="title">SampleClass</span><span class="params">(object)</span>:</span></span><br><span class="line">         <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">         <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span><span class="params">(object)</span>:</span></span><br><span class="line">             <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">ChildClass</span><span class="params">(ParentClass)</span>:</span></span><br><span class="line">         <span class="string">"""Explicitly inherits from another class already."""</span></span><br><span class="line">No: <span class="class"><span class="keyword">class</span> <span class="title">SampleClass</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span>:</span></span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>继承自 <code>object</code> 是为了使属性(<code>properties</code>)正常工作, 并且这样可以保护你的代码, 使其不受Python 3000的一个特殊的潜在不兼容性影响. 这样做也定义了一些特殊的方法, 这些方法实现了对象的默认语义, 包括 <code>__new__</code>, <code>__init__</code>, <code>__delattr__</code>, <code>__getattribute__</code>, <code>__setattr__</code>, <code>__hash__</code>, <code>__repr__</code>, and <code>__str__</code> .</p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Yes: x = a + b</span><br><span class="line">     x = <span class="string">'%s, %s!'</span> % (imperative, expletive)</span><br><span class="line">     x = <span class="string">'&#123;&#125;, &#123;&#125;!'</span>.format(imperative, expletive)</span><br><span class="line">     x = <span class="string">'name: %s; score: %d'</span> % (name, n)</span><br><span class="line">     x = <span class="string">'name: &#123;&#125;; score: &#123;&#125;'</span>.format(name, n)</span><br><span class="line">No: x = <span class="string">'%s%s'</span> % (a, b)  <span class="comment"># use + in this case</span></span><br><span class="line">    x = <span class="string">'&#123;&#125;&#123;&#125;'</span>.format(a, b)  <span class="comment"># use + in this case</span></span><br><span class="line">    x = imperative + <span class="string">', '</span> + expletive + <span class="string">'!'</span></span><br><span class="line">    x = <span class="string">'name: '</span> + name + <span class="string">'; score: '</span> + str(n)</span><br></pre></td></tr></table></figure>
<p>避免在循环中用+和+=操作符来累加字符串. 由于字符串是不可变的, 这样做会创建不必要的临时对象, 并且导致二次方而不是线性的运行时间. 作为替代方案, 你可以将每个子串加入列表, 然后在循环结束后用 .join 连接列表. (也可以将每个子串写入一个 cStringIO.StringIO 缓存中.)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Yes: items = [<span class="string">'&lt;table&gt;'</span>]</span><br><span class="line">     <span class="keyword">for</span> last_name, first_name <span class="keyword">in</span> employee_list:</span><br><span class="line">         items.append(<span class="string">'&lt;tr&gt;&lt;td&gt;%s, %s&lt;/td&gt;&lt;/tr&gt;'</span> % (last_name, first_name))</span><br><span class="line">     items.append(<span class="string">'&lt;/table&gt;'</span>)</span><br><span class="line">     employee_table = <span class="string">''</span>.join(items)</span><br><span class="line">No: employee_table = <span class="string">'&lt;table&gt;'</span></span><br><span class="line">    <span class="keyword">for</span> last_name, first_name <span class="keyword">in</span> employee_list:</span><br><span class="line">        employee_table += <span class="string">'&lt;tr&gt;&lt;td&gt;%s, %s&lt;/td&gt;&lt;/tr&gt;'</span> % (last_name, first_name)</span><br><span class="line">    employee_table += <span class="string">'&lt;/table&gt;'</span></span><br></pre></td></tr></table></figure>
<p>在同一个文件中, 保持使用字符串引号的一致性. 使用单引号’或者双引号”之一用以引用字符串, 并在同一文件中沿用. 在字符串内可以使用另外一种引号, 以避免在字符串中使用. PyLint已经加入了这一检查.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Yes:</span><br><span class="line">     Python(<span class="string">'Why are you hiding your eyes?'</span>)</span><br><span class="line">     Gollum(<span class="string">"I'm scared of lint errors."</span>)</span><br><span class="line">     Narrator(<span class="string">'"Good!" thought a happy Python reviewer.'</span>)</span><br><span class="line">No:</span><br><span class="line">     Python(<span class="string">"Why are you hiding your eyes?"</span>)</span><br><span class="line">     Gollum(<span class="string">'The lint. It burns. It burns us.'</span>)</span><br><span class="line">     Gollum(<span class="string">"Always the great lint. Watching. Watching."</span>)</span><br></pre></td></tr></table></figure>
<p>为多行字符串使用三重双引号”””而非三重单引号’’’. 当且仅当项目中使用单引号’来引用字符串时, 才可能会使用三重’’’为非文档字符串的多行字符串来标识引用. 文档字符串必须使用三重双引号”””. 不过要注意, 通常用隐式行连接更清晰, 因为多行字符串与程序其他部分的缩进方式不一致.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Yes:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"This is much nicer.\n"</span></span><br><span class="line">           <span class="string">"Do it this way.\n"</span>)</span><br><span class="line">No:</span><br><span class="line">      <span class="keyword">print</span> <span class="string">"""This is pretty ugly.</span></span><br><span class="line"><span class="string">  Don't do this.</span></span><br><span class="line"><span class="string">  """</span></span><br></pre></td></tr></table></figure>
<h2 id="文件和sockets"><a href="#文件和sockets" class="headerlink" title="文件和sockets"></a>文件和sockets</h2><p>在文件和sockets结束时, 显式的关闭它.</p>
<p>除文件外, sockets或其他类似文件的对象在没有必要的情况下打开, 会有许多副作用, 例如:</p>
<ol>
<li>它们可能会消耗有限的系统资源, 如文件描述符. 如果这些资源在使用后没有及时归还系统, 那么用于处理这些对象的代码会将资源消耗殆尽.</li>
<li>持有文件将会阻止对于文件的其他诸如移动、删除之类的操作.</li>
<li>仅仅是从逻辑上关闭文件和sockets, 那么它们仍然可能会被其共享的程序在无意中进行读或者写操作. 只有当它们真正被关闭后, 对于它们尝试进行读或者写操作将会跑出异常, 并使得问题快速显现出来.</li>
<li><p>而且, 幻想当文件对象析构时, 文件和sockets会自动关闭, 试图将文件对象的生命周期和文件的状态绑定在一起的想法, 都是不现实的. 因为有如下原因:</p>
</li>
<li><p>没有任何方法可以确保运行环境会真正的执行文件的析构. 不同的Python实现采用不同的内存管理技术, 比如延时垃圾处理机制. 延时垃圾处理机制可能会导致对象生命周期被任意无限制的延长.</p>
</li>
<li>对于文件意外的引用,会导致对于文件的持有时间超出预期(比如对于异常的跟踪, 包含有全局变量等).</li>
<li>推荐使用 <code>with</code>语句 以管理文件:</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"hello.txt"</span>) <span class="keyword">as</span> hello_file:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> hello_file:</span><br><span class="line">        <span class="keyword">print</span> line</span><br></pre></td></tr></table></figure>
<p>对于不支持使用<code>with</code>语句的类似文件的对象,使用 <code>contextlib.closing()</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> contextlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> contextlib.closing(urllib.urlopen(<span class="string">"http://www.python.org/"</span>)) <span class="keyword">as</span> front_page:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> front_page:</span><br><span class="line">        <span class="keyword">print</span> line</span><br></pre></td></tr></table></figure>
<h2 id="TODO注释"><a href="#TODO注释" class="headerlink" title="TODO注释"></a>TODO注释</h2><p>为临时代码使用TODO注释, 它是一种短期解决方案. 不算完美, 但够好了.</p>
<p>TODO注释应该在所有开头处包含”TODO”字符串, 紧跟着是用括号括起来的你的名字, email地址或其它标识符. 然后是一个可选的冒号. 接着必须有一行注释, 解释要做什么. 主要目的是为了有一个统一的TODO格式, 这样添加注释的人就可以搜索到(并可以按需提供更多细节). 写了TODO注释并不保证写的人会亲自解决问题. 当你写了一个TODO, 请注上你的名字.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># TODO(kl@gmail.com): Use a "*" here for string repetition.</span></span><br><span class="line"><span class="comment"># TODO(Zeke) Change this to use relations.</span></span><br></pre></td></tr></table></figure>
<p>如果你的TODO是”将来做某事”的形式, 那么请确保你包含了一个指定的日期(“2009年11月解决”)或者一个特定的事件(“等到所有的客户都可以处理XML请求就移除这些代码”).</p>
<h2 id="导入格式"><a href="#导入格式" class="headerlink" title="导入格式"></a>导入格式</h2><p>每个导入应该独占一行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Yes: <span class="keyword">import</span> os</span><br><span class="line">     <span class="keyword">import</span> sys</span><br><span class="line">No:  <span class="keyword">import</span> os, sys</span><br></pre></td></tr></table></figure>
<p>导入总应该放在文件顶部, 位于模块注释和文档字符串之后, 模块全局变量和常量之前. 导入应该按照从最通用到最不通用的顺序分组:</p>
<ol>
<li>标准库导入</li>
<li>第三方库导入</li>
<li>应用程序指定导入</li>
</ol>
<p>每种分组中, 应该根据每个模块的完整包路径按字典序排序, 忽略大小写.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> foo</span><br><span class="line"><span class="keyword">from</span> foo <span class="keyword">import</span> bar</span><br><span class="line"><span class="keyword">from</span> foo.bar <span class="keyword">import</span> baz</span><br><span class="line"><span class="keyword">from</span> foo.bar <span class="keyword">import</span> Quux</span><br><span class="line"><span class="keyword">from</span> Foob <span class="keyword">import</span> ar</span><br></pre></td></tr></table></figure>
<h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><p>通常每个语句应该独占一行</p>
<p>不过, 如果测试结果与测试语句在一行放得下, 你也可以将它们放在同一行. 如果是<code>if</code>语句, 只有在没有<code>else</code>时才能这样做. 特别地, 绝不要对 <code>try/except</code> 这样做, 因为<code>try</code>和<code>except</code>不能放在同一行.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Yes:</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> foo: bar(foo)</span><br><span class="line">No:</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> foo: bar(foo)</span><br><span class="line">  <span class="keyword">else</span>:   baz(foo)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span>:               bar(foo)</span><br><span class="line">  <span class="keyword">except</span> ValueError: baz(foo)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">      bar(foo)</span><br><span class="line">  <span class="keyword">except</span> ValueError: baz(foo)</span><br></pre></td></tr></table></figure>
<h2 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h2><p>在Python中, 对于琐碎又不太重要的访问函数, 你应该直接使用公有变量来取代它们, 这样可以避免额外的函数调用开销. 当添加更多功能时, 你可以用属性(<code>property</code>)来保持语法的一致性.</p>
<p>(译者注: 重视封装的面向对象程序员看到这个可能会很反感, 因为他们一直被教育: 所有成员变量都必须是私有的! 其实, 那真的是有点麻烦啊. 试着去接受Pythonic哲学吧)</p>
<p>另一方面, 如果访问更复杂, 或者变量的访问开销很显著, 那么你应该使用像 <code>get_foo()</code> 和 <code>set_foo()</code> 这样的函数调用. 如果之前的代码行为允许通过属性(<code>property</code>)访问 , 那么就不要将新的访问函数与属性绑定. 这样, 任何试图通过老方法访问变量的代码就没法运行, 使用者也就会意识到复杂性发生了变化.</p>
<h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><p><strong>应该避免的名称</strong></p>
<ol>
<li>单字符名称, 除了计数器和迭代器.</li>
<li>包/模块名中的连字符(-)</li>
<li>双下划线开头并结尾的名称(Python保留, 例如<code>__init__</code>)</li>
</ol>
<p><strong>命名约定</strong></p>
<ol>
<li>所谓”内部(<code>Internal</code>)”表示仅模块内可用, 或者, 在类内是保护或私有的.</li>
<li>用单下划线(_)开头表示模块变量或函数是<code>protected</code>的(使用<code>import * from</code>时不会包含).</li>
<li>用双下划线(__)开头的实例变量或方法表示类内私有.</li>
<li>将相关的类和顶级函数放在同一个模块里. 不像Java, 没必要限制一个类一个模块.</li>
<li>对类名使用大写字母开头的单词(如CapWords, 即Pascal风格), 但是模块名应该用小写加下划线的方式(如lower_with_under.py). 尽管已经有很多现存的模块使用类似于CapWords.py这样的命名, 但现在已经不鼓励这样做, 因为如果模块名碰巧和类名一致, 这会让人困扰.</li>
</ol>
<h2 id="Main"><a href="#Main" class="headerlink" title="Main"></a>Main</h2><p>即使是一个打算被用作脚本的文件, 也应该是可导入的. 并且简单的导入不应该导致这个脚本的主功能(main functionality)被执行, 这是一种副作用. 主功能应该放在一个<code>main()</code>函数中.</p>
<p>在Python中, pydoc以及单元测试要求模块必须是可导入的. 你的代码应该在执行主程序前总是检查 <code>if __name__ == &#39;__main__&#39;</code> , 这样当模块被导入时主程序就不会被执行.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">      ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>所有的顶级代码在模块导入时都会被执行. 要小心不要去调用函数, 创建对象, 或者执行那些不应该在使用pydoc时执行的操作.</p>
]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python语言规范</title>
    <url>/archives/403cc251.html</url>
    <content><![CDATA[<p>参考：</p>
<blockquote>
<p><a href="https://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_language_rules/" target="_blank" rel="noopener">Google Python语言规范</a></p>
</blockquote>
<h2 id="1-Pylint"><a href="#1-Pylint" class="headerlink" title="1. Pylint"></a>1. Pylint</h2><p>pylint是一个可以查找py文件中部分错误以及不规范的语法，虽然pylint还不够完美但是我们可以借助它修正不规范的地方。</p>
<p>使用方式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pylint xxx.py</span><br></pre></td></tr></table></figure>
<p>输出类似于</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">************* Module wine</span><br><span class="line">wine.py:20:0: C0304: Final newline missing (missing-final-newline)</span><br><span class="line">wine.py:1:0: C0111: Missing module docstring (missing-docstring)</span><br><span class="line">wine.py:3:0: E0401: Unable to import &#39;numpy&#39; (import-error)</span><br><span class="line">wine.py:4:0: E0401: Unable to import &#39;sklearn.datasets&#39; (import-error)</span><br><span class="line">wine.py:5:0: E0401: Unable to import &#39;sklearn.mixture&#39; (import-error)</span><br><span class="line">wine.py:6:0: C0103: Constant name &quot;rawData&quot; doesn&#39;t conform to UPPER_CASE naming style (invalid-name)</span><br><span class="line">wine.py:8:0: C0103: Constant name &quot;data&quot; doesn&#39;t conform to UPPER_CASE naming style (invalid-name)</span><br><span class="line">wine.py:9:0: C0103: Constant name &quot;target&quot; doesn&#39;t conform to UPPER_CASE naming style (invalid-name)</span><br><span class="line">wine.py:11:0: C0103: Constant name &quot;gmm&quot; doesn&#39;t conform to UPPER_CASE naming style (invalid-name)</span><br><span class="line">wine.py:15:0: C0103: Constant name &quot;prediction&quot; doesn&#39;t conform to UPPER_CASE naming style (invalid-name)</span><br><span class="line">wine.py:19:0: C0103: Constant name &quot;acc&quot; doesn&#39;t conform to UPPER_CASE naming style (invalid-name)</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Your code has been rated at -9.17&#x2F;10 (previous run: 10.00&#x2F;10, -19.17)</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>也可以通过行注释来抑制警告</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dict = 'something awful'  # Bad Idea... pylint: disable=redefined-builtin</span><br></pre></td></tr></table></figure>
<p>要抑制”参数未使用”告警, 你可以用”<em>”作为参数标识符, 或者在参数名前加”unused</em>”. 遇到不能改变参数名的情况, 你可以通过在函数开头”提到”它们来消除告警. 例如:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, unused_b, unused_c, d=None, e=None)</span>:</span></span><br><span class="line">    _ = d, e</span><br><span class="line">    <span class="keyword">return</span> a</span><br></pre></td></tr></table></figure>
<h2 id="2-导入"><a href="#2-导入" class="headerlink" title="2. 导入"></a>2. 导入</h2><ul>
<li><p>使用 <code>import x</code> 来导入包和模块.</p>
</li>
<li><p>使用 <code>from x import y</code>, 其中x是包前缀, y是不带前缀的模块名.</p>
</li>
<li><p>使用 <code>from x import y as z</code>, 如果两个要导入的模块都叫做y或者y太长了.</p>
</li>
</ul>
<p>例如, 模块 <code>sound.effects.echo</code> 可以用如下方式导入:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sound.effects <span class="keyword">import</span> echo</span><br><span class="line">...</span><br><span class="line">echo.EchoFilter(input, output, delay=<span class="number">0.7</span>, atten=<span class="number">4</span>)</span><br></pre></td></tr></table></figure>
<p>导入时不要使用相对名称. 即使模块在同一个包中, 也要使用完整包名. 这能帮助你避免无意间导入一个包两次.</p>
<h2 id="3-包"><a href="#3-包" class="headerlink" title="3. 包"></a>3. 包</h2><p>所有的新代码都应该用完整包名来导入每个模块.</p>
<p>应该像下面这样导入:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Reference in code with complete name.</span></span><br><span class="line"><span class="keyword">import</span> sound.effects.echo</span><br><span class="line"></span><br><span class="line"><span class="comment"># Reference in code with just module name (preferred).</span></span><br><span class="line"><span class="keyword">from</span> sound.effects <span class="keyword">import</span> echo</span><br></pre></td></tr></table></figure>
<h2 id="4-异常"><a href="#4-异常" class="headerlink" title="4. 异常"></a>4. 异常</h2><p>异常必须遵守特定条件:</p>
<ol>
<li>像这样触发异常: <code>raise MyException(&quot;Error message&quot;)</code> 或者 <code>raise MyException</code> . 不要使用两个参数的形式( <code>raise MyException, &quot;Error message&quot;</code> )或者过时的字符串异常( <code>raise &quot;Error message&quot;</code> ).</li>
<li>模块或包应该定义自己的特定域的异常基类, 这个基类应该从内建的Exception类继承. 模块的异常基类应该叫做”Error”.<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Error</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li>
<li>永远不要使用 <code>except:</code> 语句来捕获所有异常, 也不要捕获 <code>Exception</code> 或者 <code>StandardError</code> , 除非你打算重新触发该异常, 或者你已经在当前线程的最外层(记得还是要打印一条错误消息). 在异常这方面, Python非常宽容, <code>except:</code> 真的会捕获包括Python语法错误在内的任何错误. 使用 <code>except:</code> 很容易隐藏真正的bug.</li>
<li>尽量减少try/except块中的代码量. try块的体积越大, 期望之外的异常就越容易被触发. 这种情况下, try/except块将隐藏真正的错误.</li>
<li>使用<code>finally</code>子句来执行那些无论try块中有没有异常都应该被执行的代码. 这对于清理资源常常很有用, 例如关闭文件.</li>
<li>当捕获异常时, 使用 <code>as</code> 而不要用逗号. 例如</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> Error</span><br><span class="line"><span class="keyword">except</span> Error <span class="keyword">as</span> error:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<h2 id="5-全局变量"><a href="#5-全局变量" class="headerlink" title="5. 全局变量"></a>5. 全局变量</h2><p>避免使用全局变量, 用类变量来代替. 但也有一些例外:</p>
<ol>
<li>脚本的默认选项.</li>
<li>模块级常量. 例如:　PI = 3.14159. 常量应该全大写, 用下划线连接.</li>
<li>有时候用全局变量来缓存值或者作为函数返回值很有用.</li>
<li>如果需要, 全局变量应该仅在模块内部可用, 并通过模块级的公共函数来访问.</li>
</ol>
<h2 id="6-嵌套-局部-内部类或函数"><a href="#6-嵌套-局部-内部类或函数" class="headerlink" title="6. 嵌套/局部/内部类或函数"></a>6. 嵌套/局部/内部类或函数</h2><p>鼓励使用嵌套/本地/内部类或函数</p>
<p>类可以定义在方法, 函数或者类中. 函数可以定义在方法或函数中. 封闭区间中定义的变量对嵌套函数是只读的.</p>
<p>嵌套类或局部类的实例不能序列化(pickled).</p>
<h2 id="6-列表推导"><a href="#6-列表推导" class="headerlink" title="6. 列表推导"></a>6. 列表推导</h2><p>适用于简单情况. 每个部分应该单独置于一行: 映射表达式, for语句, 过滤器表达式. 禁止多重for语句或过滤器表达式. 复杂情况下还是使用循环.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Yes:</span><br><span class="line">  result = []</span><br><span class="line">  <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">      <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">          <span class="keyword">if</span> x * y &gt; <span class="number">10</span>:</span><br><span class="line">              result.append((x, y))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">5</span>):</span><br><span class="line">      <span class="keyword">for</span> y <span class="keyword">in</span> xrange(<span class="number">5</span>):</span><br><span class="line">          <span class="keyword">if</span> x != y:</span><br><span class="line">              <span class="keyword">for</span> z <span class="keyword">in</span> xrange(<span class="number">5</span>):</span><br><span class="line">                  <span class="keyword">if</span> y != z:</span><br><span class="line">                      <span class="keyword">yield</span> (x, y, z)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ((x, complicated_transform(x))</span><br><span class="line">          <span class="keyword">for</span> x <span class="keyword">in</span> long_generator_function(parameter)</span><br><span class="line">          <span class="keyword">if</span> x <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">  squares = [x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line">  eat(jelly_bean <span class="keyword">for</span> jelly_bean <span class="keyword">in</span> jelly_beans</span><br><span class="line">      <span class="keyword">if</span> jelly_bean.color == <span class="string">'black'</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">No:</span><br><span class="line">  result = [(x, y) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>) <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">5</span>) <span class="keyword">if</span> x * y &gt; <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ((x, y, z)</span><br><span class="line">          <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">5</span>)</span><br><span class="line">          <span class="keyword">for</span> y <span class="keyword">in</span> xrange(<span class="number">5</span>)</span><br><span class="line">          <span class="keyword">if</span> x != y</span><br><span class="line">          <span class="keyword">for</span> z <span class="keyword">in</span> xrange(<span class="number">5</span>)</span><br><span class="line">          <span class="keyword">if</span> y != z)</span><br></pre></td></tr></table></figure>
<h2 id="7-默认迭代器和操作符"><a href="#7-默认迭代器和操作符" class="headerlink" title="7. 默认迭代器和操作符"></a>7. 默认迭代器和操作符</h2><p>如果类型支持, 就使用默认迭代器和操作符, 例如列表, 字典和文件. 内建类型也定义了迭代器方法. 优先考虑这些方法, 而不是那些返回列表的方法. 当然，这样遍历容器时，你将不能修改容器.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Yes:  <span class="keyword">for</span> key <span class="keyword">in</span> adict: ...</span><br><span class="line">      <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> adict: ...</span><br><span class="line">      <span class="keyword">if</span> obj <span class="keyword">in</span> alist: ...</span><br><span class="line">      <span class="keyword">for</span> line <span class="keyword">in</span> afile: ...</span><br><span class="line">      <span class="keyword">for</span> k, v <span class="keyword">in</span> dict.iteritems(): ...</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">No:   <span class="keyword">for</span> key <span class="keyword">in</span> adict.keys(): ...</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> adict.has_key(key): ...</span><br><span class="line">      <span class="keyword">for</span> line <span class="keyword">in</span> afile.readlines(): ...</span><br></pre></td></tr></table></figure>
<h2 id="8-生成器"><a href="#8-生成器" class="headerlink" title="8. 生成器"></a>8. 生成器</h2><p>所谓生成器函数, 就是每当它执行一次生成(yield)语句, 它就返回一个迭代器, 这个迭代器生成一个值. 生成值后, 生成器函数的运行状态将被挂起, 直到下一次生成.</p>
<p>鼓励使用. 注意在生成器函数的文档字符串中使用”Yields:”而不是”Returns:”.</p>
<h2 id="9-Lambda函数"><a href="#9-Lambda函数" class="headerlink" title="9. Lambda函数"></a>9. Lambda函数</h2><p>适用于单行函数. 如果代码超过60-80个字符, 最好还是定义成常规(嵌套)函数.</p>
<p>对于常见的操作符，例如乘法操作符，使用 <code>operator</code> 模块中的函数以代替lambda函数. 例如, 推荐使用 <code>operator.mul</code> , 而不是 <code>lambda x, y: x * y</code> .</p>
<h2 id="10-条件表达式"><a href="#10-条件表达式" class="headerlink" title="10. 条件表达式"></a>10. 条件表达式</h2><p>适用于单行函数. 在其他情况下，推荐使用完整的if语句.</p>
<h2 id="11-默认参数值"><a href="#11-默认参数值" class="headerlink" title="11. 默认参数值"></a>11. 默认参数值</h2><p>鼓励使用, 不过有如下注意事项:</p>
<p>不要在函数或方法定义中使用可变对象作为默认值.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Yes: <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, b=None)</span>:</span></span><br><span class="line">         <span class="keyword">if</span> b <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">             b = []</span><br><span class="line">No:  <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, b=[])</span>:</span></span><br><span class="line">         ...</span><br><span class="line">No:  <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, b=time.time<span class="params">()</span>)</span>:</span>  <span class="comment"># The time the module was loaded???</span></span><br><span class="line">         ...</span><br><span class="line">No:  <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, b=FLAGS.my_thing)</span>:</span>  <span class="comment"># sys.argv has not yet been parsed...</span></span><br><span class="line">         ...</span><br></pre></td></tr></table></figure>
<h2 id="12-属性"><a href="#12-属性" class="headerlink" title="12. 属性"></a>12. 属性</h2><p>你通常习惯于使用访问或设置方法来访问或设置数据, 它们简单而轻量. 不过我们建议你在新的代码中使用属性. 只读属性应该用 <code>@property</code> 装饰器 来创建.</p>
<p>如果子类没有覆盖属性, 那么属性的继承可能看上去不明显. 因此使用者必须确保访问方法间接被调用, 以保证子类中的重载方法被属性调用(使用模板方法设计模式).</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Yes: <span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">Square</span><span class="params">(object)</span>:</span></span><br><span class="line">         <span class="string">"""A square with two properties: a writable area and a read-only perimeter.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">         To use:</span></span><br><span class="line"><span class="string">         &gt;&gt;&gt; sq = Square(3)</span></span><br><span class="line"><span class="string">         &gt;&gt;&gt; sq.area</span></span><br><span class="line"><span class="string">         9</span></span><br><span class="line"><span class="string">         &gt;&gt;&gt; sq.perimeter</span></span><br><span class="line"><span class="string">         12</span></span><br><span class="line"><span class="string">         &gt;&gt;&gt; sq.area = 16</span></span><br><span class="line"><span class="string">         &gt;&gt;&gt; sq.side</span></span><br><span class="line"><span class="string">         4</span></span><br><span class="line"><span class="string">         &gt;&gt;&gt; sq.perimeter</span></span><br><span class="line"><span class="string">         16</span></span><br><span class="line"><span class="string">         """</span></span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, side)</span>:</span></span><br><span class="line">             self.side = side</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">def</span> <span class="title">__get_area</span><span class="params">(self)</span>:</span></span><br><span class="line">             <span class="string">"""Calculates the 'area' property."""</span></span><br><span class="line">             <span class="keyword">return</span> self.side ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">def</span> <span class="title">___get_area</span><span class="params">(self)</span>:</span></span><br><span class="line">             <span class="string">"""Indirect accessor for 'area' property."""</span></span><br><span class="line">             <span class="keyword">return</span> self.__get_area()</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">def</span> <span class="title">__set_area</span><span class="params">(self, area)</span>:</span></span><br><span class="line">             <span class="string">"""Sets the 'area' property."""</span></span><br><span class="line">             self.side = math.sqrt(area)</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">def</span> <span class="title">___set_area</span><span class="params">(self, area)</span>:</span></span><br><span class="line">             <span class="string">"""Indirect setter for 'area' property."""</span></span><br><span class="line">             self._SetArea(area)</span><br><span class="line"></span><br><span class="line">         area = property(___get_area, ___set_area,</span><br><span class="line">                         doc=<span class="string">"""Gets or sets the area of the square."""</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">         @property</span></span><br><span class="line">         <span class="function"><span class="keyword">def</span> <span class="title">perimeter</span><span class="params">(self)</span>:</span></span><br><span class="line">             <span class="keyword">return</span> self.side * <span class="number">4</span></span><br></pre></td></tr></table></figure>
<h2 id="13-True-False的求值"><a href="#13-True-False的求值" class="headerlink" title="13. True/False的求值"></a>13. True/False的求值</h2><p>尽可能使用隐式的false, 例如: 使用 <code>if foo:</code> 而不是 <code>if foo != []:</code> . 不过还是有一些注意事项需要你铭记在心:</p>
<ol>
<li><p>永远不要用==或者!=来比较单件, 比如None. 使用is或者is not.</p>
</li>
<li><p>注意: 当你写下 <code>if x:</code> 时, 你其实表示的是 <code>if x is not None</code> . 例如: 当你要测试一个默认值是None的变量或参数是否被设为其它值. 这个值在布尔语义下可能是false!</p>
</li>
<li><p>永远不要用==将一个布尔量与false相比较. 使用 <code>if not x:</code> 代替. 如果你需要区分false和None, 你应该用像 <code>if not x and x is not None:</code> 这样的语句.</p>
</li>
<li><p>对于序列(字符串, 列表, 元组), 要注意空序列是false. 因此 <code>if not seq:</code> 或者 <code>if seq:</code> 比 <code>if len(seq):</code> 或 <code>if not len(seq):</code> 要更好.</p>
</li>
<li><p>处理整数时, 使用隐式false可能会得不偿失(即不小心将None当做0来处理). 你可以将一个已知是整型(且不是len()的返回结果)的值与0比较.</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Yes: <span class="keyword">if</span> <span class="keyword">not</span> users:</span><br><span class="line">         <span class="keyword">print</span> <span class="string">'no users'</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> foo == <span class="number">0</span>:</span><br><span class="line">         self.handle_zero()</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> i % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">         self.handle_multiple_of_ten()</span><br><span class="line">No:  <span class="keyword">if</span> len(users) == <span class="number">0</span>:</span><br><span class="line">         <span class="keyword">print</span> <span class="string">'no users'</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> foo <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> <span class="keyword">not</span> foo:</span><br><span class="line">         self.handle_zero()</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> <span class="keyword">not</span> i % <span class="number">10</span>:</span><br><span class="line">         self.handle_multiple_of_ten()</span><br></pre></td></tr></table></figure>
<ol>
<li>注意‘0’(字符串)会被当做true.</li>
</ol>
<h2 id="14-词法作用域"><a href="#14-词法作用域" class="headerlink" title="14. 词法作用域"></a>14. 词法作用域</h2><p>嵌套的Python函数可以引用外层函数中定义的变量, 但是不能够对它们赋值. 变量绑定的解析是使用词法作用域, 也就是基于静态的程序文本. 对一个块中的某个名称的任何赋值都会导致Python将对该名称的全部引用当做局部变量, 甚至是赋值前的处理. 如果碰到global声明, 该名称就会被视作全局变量.</p>
<p>一个使用这个特性的例子:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_adder</span><span class="params">(summand1)</span>:</span></span><br><span class="line">    <span class="string">"""Returns a function that adds numbers to a given number."""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">adder</span><span class="params">(summand2)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> summand1 + summand2</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> adder</span><br></pre></td></tr></table></figure>
<p>(译者注: 这个例子有点诡异, 你应该这样使用这个函数: <code>sum = get_adder(summand1)(summand2)</code> )</p>
<h2 id="15-函数与方法装饰器"><a href="#15-函数与方法装饰器" class="headerlink" title="15. 函数与方法装饰器"></a>15. 函数与方法装饰器</h2><p>用于函数及方法的装饰器 (也就是@标记). 最常见的装饰器是@classmethod 和@staticmethod, 用于将常规函数转换成类方法或静态方法. 不过, 装饰器语法也允许用户自定义装饰器. 特别地, 对于某个函数 <code>my_decorator</code> , 下面的两段代码是等效的:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">   @my_decorator</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">method</span><span class="params">(self)</span>:</span></span><br><span class="line">       <span class="comment"># method body ...</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">method</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># method body ...</span></span><br><span class="line">    method = my_decorator(method)</span><br></pre></td></tr></table></figure>
<h2 id="16-线程"><a href="#16-线程" class="headerlink" title="16. 线程"></a>16. 线程</h2><p>虽然Python的内建类型例如字典看上去拥有原子操作, 但是在某些情形下它们仍然不是原子的(即: 如果<strong>hash</strong>或<strong>eq</strong>被实现为Python方法)且它们的原子性是靠不住的. 你也不能指望原子变量赋值(因为这个反过来依赖字典).</p>
<p>优先使用Queue模块的 <code>Queue</code> 数据类型作为线程间的数据通信方式. 另外, 使用threading模块及其锁原语(locking primitives). 了解条件变量的合适使用方式, 这样你就可以使用 <code>threading.Condition</code> 来取代低级别的锁了.</p>
]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Pylint</tag>
      </tags>
  </entry>
  <entry>
    <title>Material组件-BottomSheetDialog</title>
    <url>/archives/4972210c.html</url>
    <content><![CDATA[<p>参考：</p>
<blockquote>
<p><a href="https://material.io/develop/android/components/bottom-sheet-behavior/" target="_blank" rel="noopener">Material Design</a></p>
<p><a href="https://github.com/material-components/material-components-android/blob/master/docs/getting-started.md" target="_blank" rel="noopener">Getting started with Material Components for Android</a></p>
</blockquote>
<p>BottomSheetDialog，顾名思义就是从界面底部往上出现的Dialog，它是Material Design的控件之一，目前在<a href="https://github.com/material-components/material-components-android" target="_blank" rel="noopener">Material Components</a>库中。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/bottomsheet-1.gif" alt="bottomsheet-1.gif"></p>
<a id="more"></a>
<h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><p>Google推出的<a href="https://github.com/material-components/material-components-android" target="_blank" rel="noopener">Material Components</a>库包括了很多常用的控件，我们只需要直接用这些控件就可以实现很多复杂的功能或界面，但是在使用之前还需要一些准备工作，大致在<a href="https://github.com/material-components/material-components-android/blob/master/docs/getting-started.md" target="_blank" rel="noopener">Getting started with Material Components for Android</a>也给出了，我这里简要描述一下：</p>
<ul>
<li>首先使是依赖（建议更新项目到androidx再继续），需要在<code>build.gradle</code>中加入Google’s Maven Repository <code>google()</code>，然后加入库；</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">allprojects</span> &#123;</span><br><span class="line">  <span class="keyword">repositories</span> &#123;</span><br><span class="line">    google()</span><br><span class="line">    jcenter()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 目前最新版为1.1.0-alpha07，有部分控件还是存在Bug</span></span><br><span class="line">    implementation <span class="string">'com.google.android.material:material:1.1.0-alpha07'</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>其次是<code>compileSdkVersion</code>需要在<code>28</code>或以上才能使用Material控件；</li>
<li>然后需要使用或继承<code>AppCompatActivity</code>，<code>AppCompatActivity</code>是专门为Material控件设计的Activity，如果不能继承则需要使用<code>AppCompatDelegate</code>；</li>
<li>最后是需要修改<code>AppTheme</code>，在<code>AndroidManifest.xml</code>里面修改主题，需要继承自Material Components themes，具体有哪些可以看上面给的地址，如果暂时不允许修改<code>AppTheme</code>，可以使用Material Components Bridge themes，这里的区别在于使用Material Components themes可能会导致你原来的应用中某些布局颜色UI发生改变，这时候需要重新修改一些资源文件；如果使用Bridge themes则不会修改原来应用的布局颜色UI等，却可以使用Material组件。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.MaterialComponents.NoActionBar.Bridge"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- Customize your theme here. --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/colorPrimaryDark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>到这里，准备工作基本完成，可以进行下一步使用Material组件了。</p>
<h2 id="2-BottomSheetDialog使用"><a href="#2-BottomSheetDialog使用" class="headerlink" title="2. BottomSheetDialog使用"></a>2. BottomSheetDialog使用</h2><p>根据官网说明，BottomSheetDialog有两种使用方式（这里很多博客没有说明就直接给代码了），一种是Persistent，另一种是Modal，简而言之就是前者是固定的BottomSheetDialog，后者是动态调用的。</p>
<h3 id="2-1-Persistent-BottomSheetDialog"><a href="#2-1-Persistent-BottomSheetDialog" class="headerlink" title="2.1 Persistent BottomSheetDialog"></a>2.1 Persistent BottomSheetDialog</h3><p>设想一个使用场景，某个界面必定包含BottomSheetDialog，需要靠它实现其他功能的选择，举个例子，知乎的评论就是依靠BottomSheetDialog来实现的（一个东西看起来像鸭子，吃起来也像鸭子，那么它就是鸭子），而且有很明显的特征：在回答界面必定存在这个评论功能，那么我们可以将它视为Persistent固定场景，此时实现BottomSheetDialog的方式是使用BottomSheetBehavior，而不是<code>new BottomSheetDialog()</code>，实例代码如下：</p>
<ul>
<li>首先是activity的布局文件<code>activity_second.xml</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注意要使用BottomSheetBehavior，则必须使用CoordinatorLayout作为父布局，而且需要xmlns:app --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.coordinatorlayout.widget.CoordinatorLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/btn_show"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"Show"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- BottomSheetBehavior需要一个寄主，可以是LinearLayout也可以是其他，这个layout就是弹出的dialog布局，</span></span><br><span class="line"><span class="comment">     同时需要几个属性：</span></span><br><span class="line"><span class="comment">     app:behavior_hideable="true"否则BottomSheetDialog不会收起来</span></span><br><span class="line"><span class="comment">     app:behavior_peekHeight="300dp"设置BottomSheetDialog在STATE_COLLAPSED状态的高度，也可以不设置，这个会产生一种弹性收缩的效果，具体自行尝试</span></span><br><span class="line"><span class="comment">     app:elevation="6dp"设置z轴高度，可以产生一种悬浮效果，可以不设置</span></span><br><span class="line"><span class="comment">     app:layout_behavior="com.google.android.material.bottomsheet.BottomSheetBehavior"最重要的属性，简而言之就是让LinearLayout</span></span><br><span class="line"><span class="comment">     的行为变成BottomSheetDialog的行为，这样我们就不需要实例化一个BottomSheetDialog，取而代之的是通过BottomSheetBehavior来实现，</span></span><br><span class="line"><span class="comment">     需要注意的地方是，app:layout_behavior只能在CoordinatorLayout下直接子控件中使用，像这里的CoordinatorLayout-&gt;LinearLayout就可以</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/bottom_sheet"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@color/white"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:behavior_hideable</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:behavior_peekHeight</span>=<span class="string">"300dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:elevation</span>=<span class="string">"6dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_behavior</span>=<span class="string">"com.google.android.material.bottomsheet.BottomSheetBehavior"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 这里随便加了几个子项，在BottomSheetBehavior布局下的子控件都是BottomSheetDialog一部分 --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/MenuIcon"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:src</span>=<span class="string">"@drawable/ic_share_black_24dp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/MenuText"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"Share"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/MenuIcon"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:src</span>=<span class="string">"@drawable/ic_cloud_upload_black_24dp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/MenuText"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"Upload"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/MenuIcon"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:src</span>=<span class="string">"@drawable/ic_content_copy_black_24dp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/MenuText"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"Copy"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/MenuIcon"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:src</span>=<span class="string">"@drawable/ic_print_black_24dp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/MenuText"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"Print"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.coordinatorlayout.widget.CoordinatorLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里用了<code>styles.xml</code>减少重复代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"MenuIcon"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_height"</span>&gt;</span>30dp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_width"</span>&gt;</span>30dp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_margin"</span>&gt;</span>15dp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"MenuText"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_gravity"</span>&gt;</span>center_vertical<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_marginStart"</span>&gt;</span>30dp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:gravity"</span>&gt;</span>start<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span>&gt;</span>#00574B<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>20sp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>然后是activity的代码<code>SecondActivity.java</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_second);</span><br><span class="line">        <span class="comment">// BottomSheetBehavior一共有5个状态：STATE_COLLAPSED/STATE_EXPANDED/STATE_DRAGGING/STATE_SETTLING/STATE_HIDDEN</span></span><br><span class="line">        <span class="comment">// 当你的布局文件中BottomSheetBehavior控件高度大于设置behavior_peekHeight，则Dialog会产生三种位置，一个是隐藏STATE_HIDDEN，</span></span><br><span class="line">        <span class="comment">// 另一个是STATE_EXPANDED即BottomSheetBehavior控件全部显示出来的位置，还有一个是介于前两者之间的STATE_COLLAPSED状态，</span></span><br><span class="line">        <span class="comment">// 此时露出来的Dialog高度为behavior_peekHeight；</span></span><br><span class="line">        <span class="comment">// 另一种情况是behavior_peekHeight大于BottomSheetBehavior控件高度，那么会产生一种弹性收缩的效果</span></span><br><span class="line">        BottomSheetBehavior bottomSheetBehavior = BottomSheetBehavior.from(findViewById(R.id.bottom_sheet));</span><br><span class="line">        bottomSheetBehavior.setState(BottomSheetBehavior.STATE_HIDDEN);</span><br><span class="line"></span><br><span class="line">        findViewById(R.id.btn_show).setOnClickListener(v -&gt; &#123;</span><br><span class="line">            <span class="comment">// 这里通过判断当前状态来进行收缩和打开，与此同时Dialog支持直接滑动关闭</span></span><br><span class="line">            <span class="keyword">if</span> (bottomSheetBehavior.getState() == BottomSheetBehavior.STATE_HIDDEN) &#123;</span><br><span class="line">                bottomSheetBehavior.setState(BottomSheetBehavior.STATE_COLLAPSED);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bottomSheetBehavior.getState() == BottomSheetBehavior.STATE_COLLAPSED) &#123;</span><br><span class="line">                bottomSheetBehavior.setState(BottomSheetBehavior.STATE_HIDDEN);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 通过设置BottomSheetCallback来控制状态变化产生的其他效果，也可以控制滑动过程中产生其他效果</span></span><br><span class="line">        bottomSheetBehavior.setBottomSheetCallback(<span class="keyword">new</span> BottomSheetBehavior.BottomSheetCallback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStateChanged</span><span class="params">(@NonNull View bottomSheet, <span class="keyword">int</span> newState)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//拖动</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSlide</span><span class="params">(@NonNull View bottomSheet, <span class="keyword">float</span> slideOffset)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//状态变化</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>在设备屏幕旋转时BottomSheetDialog会消失，通过在<code>AndroidManifest.xml</code>设置<code>configChanges</code>可以避免</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">".SecondActivity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:configChanges</span>=<span class="string">"orientation"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>至此，简单的通过BottomSheetBehavior实现BottomSheetDialog就结束了，更复杂的效果是添加RecyclerView到BottomSheetDialog<br>中，同时增加点击事件监听等等，接下来介绍如何动态使用BottomSheetDialog。</p>
<h3 id="2-2-Modal-BottomSheetDialog"><a href="#2-2-Modal-BottomSheetDialog" class="headerlink" title="2.2 Modal BottomSheetDialog"></a>2.2 Modal BottomSheetDialog</h3><p>如果你使用过AlertDialog那么就应该知道了，动态调用就是直接new一个出来，然后show一下就完事了，同理对BottomSheetDialog也成立，<br>因此不需要固定的BottomSheetBehavior，而直接new也分为两种方式，一个是<code>new BottomSheetDialog()</code>，另一个是<code>new BottomSheetDialog()</code>，<br>两者显示效果相同，但是后者通过fragment控制生命周期更合理，所以使用后者，简单使用的话只需要三步：</p>
<ol>
<li>继承自<strong>BottomSheetDialogFragment</strong>；</li>
<li>重写<strong>onCreateView</strong>方法，加入你自定义的布局；</li>
<li>调用<strong>show</strong>方法，这里需要<strong>Activity.getSupportFragmentManager()</strong>。</li>
</ol>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/design1.png" alt="design1.png"></p>
<p>我这里实现一个相对复杂的布局，如上图所示，具体包括两部分，一个是header，header可以是一个自定义view，也可以将header隐藏，header与下面的Menu之间是透明的，下面的Menu通过RecyclerView控制选项数量，点击单个选项有水波纹效果，代码如下：</p>
<ul>
<li>首先是Dialog的布局文件<code>dialog_option.xml</code>，根据上面的描述就知道是一个RecyclerView</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/forget_psw_bottom_sheet_layout"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.recyclerview.widget.RecyclerView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/menu_list"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>然后是需要实现这个Dialog为透明背景，这是因为header也在RecyclerView中，那么只有透明背景才可以实现header悬浮的效果，Dialog透明背景需要styles文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"SheetDialog"</span> <span class="attr">parent</span>=<span class="string">"Theme.Design.Light.BottomSheetDialog"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 关键属性是colorBackground，transparent可以是背景透明，但是这会导致一个问题，此处伏笔 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowIsTranslucent"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowContentOverlay"</span>&gt;</span>@null<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:colorBackground"</span>&gt;</span>@android:color/transparent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:backgroundDimEnabled"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:backgroundDimAmount"</span>&gt;</span>0.3<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowFrame"</span>&gt;</span>@null<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowIsFloating"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>以及header的布局文件<code>card_layout.xml</code>和Menu Item的布局文件<code>menu_item.xml</code>，header有圆角，可以用另一种Material组件实现CardView</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- card_layout.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">"8dp"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.cardview.widget.CardView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_margin</span>=<span class="string">"4dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:elevation</span>=<span class="string">"4dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:cardCornerRadius</span>=<span class="string">"10dp"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">"@color/white"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:padding</span>=<span class="string">"12dp"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/Image"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"@string/glass"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/Image"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"@string/clap"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/Image"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"@string/cry"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/Image"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"@string/party"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/Image"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"@string/heart"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/Image"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"@string/thumb"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/Image"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:src</span>=<span class="string">"@drawable/ic_keyboard_arrow_right_black_24dp"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">androidx.cardview.widget.CardView</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.cardview.widget.CardView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_margin</span>=<span class="string">"4dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:elevation</span>=<span class="string">"4dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:cardCornerRadius</span>=<span class="string">"10dp"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">"@color/white"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:padding</span>=<span class="string">"12dp"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:src</span>=<span class="string">"@drawable/outline"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">androidx.cardview.widget.CardView</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里使用了strings的资源，通过Unicode表示表情符号</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"thumb"</span>&gt;</span><span class="symbol">&amp;#128532;</span><span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"heart"</span>&gt;</span>❤️<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"party"</span>&gt;</span><span class="symbol">&amp;#128222;</span><span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"cry"</span>&gt;</span><span class="symbol">&amp;#128722;</span><span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"clap"</span>&gt;</span><span class="symbol">&amp;#128512;</span><span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"glass"</span>&gt;</span><span class="symbol">&amp;#128522;</span><span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- menu_item.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 注意这里伏笔就来了，设置为透明背景的Dialog中，子控件也会是透明的，而且若对子控件的background</span></span><br><span class="line"><span class="comment">    设置为某种颜色则无法产生水波纹效果，所以需要自定义@drawable/touch_bg --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/menu_text"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">"@style/BottomDialog"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@drawable/touch_bg"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"BottomDialog"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:padding"</span>&gt;</span>16dp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>16sp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span>&gt;</span>@color/black<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:gravity"</span>&gt;</span>center<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textStyle"</span>&gt;</span>normal<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- touch_bg.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Use an almost transparent color for the ripple itself--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ripple</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:color</span>=<span class="string">"#22000000"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Use this to define the shape of the ripple effect (rectangle, oval, ring or line). </span></span><br><span class="line"><span class="comment">The color specified here isn't used anyway--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@android:id/mask"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">shape</span> <span class="attr">android:shape</span>=<span class="string">"rectangle"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"#000000"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--This is the background for your button--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Use the shape you want here--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">shape</span> <span class="attr">android:shape</span>=<span class="string">"rectangle"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Use the solid tag to define the background color you want (here white)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"@color/white"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Use the stroke tag for a border--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">stroke</span> <span class="attr">android:width</span>=<span class="string">"1dp"</span> <span class="attr">android:color</span>=<span class="string">"@color/white"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ripple</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>接下来就是主要java代码了，包括<code>MenuBottomSheetDialog.java</code>和<code>MenuListAdapter.java</code>，前者是我们最终调用的Dialog，后者是RecyclerView的Adapter，以及自定义一个Menu Item的实体类<code>OptionMenuItem.java</code>用于保存信息</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OptionMenuItem</span> </span>&#123;</span><br><span class="line">    <span class="comment">// label表示选项的名称最终会显示在Dialog，action表示该选项的行为，这里可以自定义增加其他内容，</span></span><br><span class="line">    <span class="comment">// 比如增加一个state属性表示该选项是否可用等等，如不可用，则颜色为灰色且不可点击，不过我没加</span></span><br><span class="line">    <span class="keyword">private</span> String label;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> action;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OptionMenuItem</span><span class="params">(String label, <span class="keyword">int</span> action)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.label = label;</span><br><span class="line">        <span class="keyword">this</span>.action = action;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLabel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> label;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLabel</span><span class="params">(String label)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.label = label;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> action;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAction</span><span class="params">(<span class="keyword">int</span> action)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.action = action;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuBottomSheetDialog</span> <span class="keyword">extends</span> <span class="title">BottomSheetDialogFragment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = MenuBottomSheetDialog<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RecyclerView recyclerView;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MenuListAdapter adapter;</span><br><span class="line">    <span class="comment">// 这里还加了一个参数hasItemDecoration用于控制是否显示选项之间的分割线</span></span><br><span class="line">    <span class="keyword">private</span> Boolean hasItemDecoration = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> MenuBottomSheetDialog <span class="title">newInstance</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        MenuBottomSheetDialog fragment = <span class="keyword">new</span> MenuBottomSheetDialog();</span><br><span class="line"><span class="comment">//        Bundle bundle = new Bundle();</span></span><br><span class="line"><span class="comment">//        fragment.setArguments(bundle);</span></span><br><span class="line">        fragment.setHasItemDecoration(builder.hasItemDecoration);</span><br><span class="line">        fragment.setAdapter(builder.adapter);</span><br><span class="line">        fragment.setContext(builder.context);</span><br><span class="line">        <span class="keyword">return</span> fragment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dialog <span class="title">onCreateDialog</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// R.style.SheetDialog 透明背景需要在onCreateDialog方法引入</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BottomSheetDialog(context, R.style.SheetDialog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, </span></span></span><br><span class="line"><span class="function"><span class="params">                              @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 在onCreateView引入定义的dialog布局</span></span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.dialog_option, container, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewCreated</span><span class="params">(@NonNull View view, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onViewCreated(view, savedInstanceState);</span><br><span class="line">        <span class="comment">// onViewCreated中进行初始化，这里就很简单的使用了RecyclerView</span></span><br><span class="line">        recyclerView = view.findViewById(R.id.menu_list);</span><br><span class="line">        recyclerView.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(getContext()));</span><br><span class="line">        recyclerView.setAdapter(adapter);</span><br><span class="line">        <span class="keyword">if</span> (hasItemDecoration) &#123;</span><br><span class="line">            <span class="comment">// DividerItemDecoration可以方便的加入到RecyclerView，形成分割线，布局文件在下面</span></span><br><span class="line">            DividerItemDecoration dec = <span class="keyword">new</span> DividerItemDecoration(context, DividerItemDecoration.VERTICAL);</span><br><span class="line">            dec.setDrawable(getResources().getDrawable(R.drawable.divider_line));</span><br><span class="line">            recyclerView.addItemDecoration(dec);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 最终我们通过show方法调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(FragmentManager fragmentManager)</span> </span>&#123;</span><br><span class="line">        FragmentTransaction transaction = fragmentManager.beginTransaction();</span><br><span class="line">        Fragment prevFragment = fragmentManager.findFragmentByTag(TAG);</span><br><span class="line">        <span class="keyword">if</span> (prevFragment != <span class="keyword">null</span>) &#123;</span><br><span class="line">            transaction.remove(prevFragment);</span><br><span class="line">        &#125;</span><br><span class="line">        transaction.addToBackStack(<span class="keyword">null</span>);</span><br><span class="line">        show(transaction, TAG);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 这里因为参数可能会有很多，所以采用建造者模式实现</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title">builder</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Builder(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 建造者模式需要传入的参数有三个</span></span><br><span class="line">        <span class="keyword">private</span> MenuListAdapter adapter;</span><br><span class="line">        <span class="keyword">private</span> Boolean hasItemDecoration;</span><br><span class="line">        <span class="keyword">private</span> Context context;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.context = context;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 以下都是建造者模式可调用的方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setAdapter</span><span class="params">(MenuListAdapter adapter)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.adapter = adapter;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setHasItemDecoration</span><span class="params">(Boolean hasItemDecoration)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.hasItemDecoration = hasItemDecoration;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> MenuBottomSheetDialog <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> newInstance(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> MenuBottomSheetDialog <span class="title">show</span><span class="params">(FragmentManager fragmentManager)</span> </span>&#123;</span><br><span class="line">            MenuBottomSheetDialog dialog = build();</span><br><span class="line">            dialog.show(fragmentManager);</span><br><span class="line">            <span class="keyword">return</span> dialog;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setAdapter</span><span class="params">(MenuListAdapter adapter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.adapter = adapter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setContext</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setHasItemDecoration</span><span class="params">(Boolean hasItemDecoration)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hasItemDecoration = hasItemDecoration;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- divider_line.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layer-list</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--分割线左右边距--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shape</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"@color/split_line_grey"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">size</span> <span class="attr">android:height</span>=<span class="string">"1dp"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layer-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>接下来是RecyclerView的Adapter文件<code>MenuListAdapter.java</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuListAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">RecyclerView</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过hasHeader控制是否显示header，这里是通过MenuListAdapter传入的参数，没有用上面建造者模式</span></span><br><span class="line">    <span class="keyword">private</span> Boolean hasHeader;</span><br><span class="line">    <span class="comment">// 监听选项点击，这里我仅仅对选项做监听没有对header进行任何控制，所以header只是个没有灵魂的花瓶</span></span><br><span class="line">    <span class="keyword">private</span> OnMenuItemClickListener onMenuClickListener;</span><br><span class="line">    <span class="comment">// 传入的选项list</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;OptionMenuItem&gt; options;</span><br><span class="line">    <span class="comment">// onCreateViewHolder判断是否为header的参数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VIEW_TYPE_HEADER = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VIEW_TYPE_ITEM = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MenuListAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.options = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MenuListAdapter</span><span class="params">(List&lt;OptionMenuItem&gt; options)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.options = options;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> RecyclerView.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(@NonNull ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        RecyclerView.ViewHolder viewHolder = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (viewType) &#123;</span><br><span class="line">            <span class="comment">// 这里也比较好理解，如果为header传入header的布局，如果为Menu Item则传入Item的布局</span></span><br><span class="line">            <span class="keyword">case</span> VIEW_TYPE_HEADER:</span><br><span class="line">                viewHolder = <span class="keyword">new</span> HeaderViewHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.card_layout, parent, <span class="keyword">false</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> VIEW_TYPE_ITEM:</span><br><span class="line">                viewHolder = <span class="keyword">new</span> MenuItemViewHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.menu_item, parent, <span class="keyword">false</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> viewHolder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(@NonNull RecyclerView.ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (holder.getItemViewType()) &#123;</span><br><span class="line">            <span class="keyword">case</span> VIEW_TYPE_HEADER:</span><br><span class="line">                <span class="comment">// todo add header view listener</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> VIEW_TYPE_ITEM:</span><br><span class="line">                <span class="comment">// 注意这里positon与header存在与否的关系，然后通过接口把点击事件传出去</span></span><br><span class="line">                OptionMenuItem menuItem = options.get(hasHeader ? position - <span class="number">1</span> : position);</span><br><span class="line">                ((MenuItemViewHolder) holder).bind(menuItem);</span><br><span class="line">                holder.itemView.setOnClickListener(v -&gt; &#123;</span><br><span class="line">                    Log.i(<span class="string">"aaa"</span>, <span class="string">"click"</span>);</span><br><span class="line">                    <span class="keyword">if</span> (onMenuClickListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        onMenuClickListener.onMenuClick(holder.itemView, menuItem.getAction());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 在getItemViewType定义type，从而在前面两个方法中获取</span></span><br><span class="line">        <span class="keyword">if</span> (hasHeader) &#123;</span><br><span class="line">            <span class="keyword">if</span> (position == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> VIEW_TYPE_HEADER;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> VIEW_TYPE_ITEM;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 同理options.size()与hasHeader的关系</span></span><br><span class="line">        <span class="keyword">return</span> hasHeader ?</span><br><span class="line">                (options.size() + <span class="number">1</span>) : options.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MenuItemViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line">        TextView text;</span><br><span class="line">        <span class="comment">// 正如我在Menu Item实体类中所设想的，我们可以在这里根据state进行额外的控制</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MenuItemViewHolder</span><span class="params">(@NonNull View itemView)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(itemView);</span><br><span class="line">            text = itemView.findViewById(R.id.menu_text);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(OptionMenuItem optionMenuItem)</span> </span>&#123;</span><br><span class="line">            text.setText(optionMenuItem.getLabel());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">HeaderViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">HeaderViewHolder</span><span class="params">(@NonNull View itemView)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(itemView);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAll</span><span class="params">(List&lt;OptionMenuItem&gt; options)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.options.clear();</span><br><span class="line">        <span class="keyword">this</span>.options.addAll(options);</span><br><span class="line">        notifyDataSetChanged();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(OptionMenuItem option)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (options != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.options.add(option);</span><br><span class="line">            notifyDataSetChanged();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHasHeader</span><span class="params">(Boolean hasHeader)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hasHeader = hasHeader;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 对外暴露的接口以及设置监听的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnMenuItemClickListener</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onMenuClick</span><span class="params">(View view, <span class="keyword">int</span> action)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnMenuItemClickListener</span><span class="params">(OnMenuItemClickListener listener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.onMenuClickListener = listener;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>最后是直接使用的方式<code>ThirdActivity.java</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThirdActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">MenuListAdapter</span>.<span class="title">OnMenuItemClickListener</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_third);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;OptionMenuItem&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> OptionMenuItem(<span class="string">"Forward"</span>, <span class="number">98</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> OptionMenuItem(<span class="string">"Copy"</span>, <span class="number">2121</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> OptionMenuItem(<span class="string">"Mark as unread"</span>, <span class="number">111</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> OptionMenuItem(<span class="string">"Star message"</span>, <span class="number">66</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> OptionMenuItem(<span class="string">"Cancel"</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        MenuListAdapter menuListAdapter = <span class="keyword">new</span> MenuListAdapter();</span><br><span class="line">        menuListAdapter.addAll(list);</span><br><span class="line">        menuListAdapter.setHasHeader(<span class="keyword">true</span>);</span><br><span class="line">        menuListAdapter.setOnMenuItemClickListener(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        findViewById(R.id.button2).setOnClickListener(v -&gt; &#123;</span><br><span class="line">            <span class="comment">// 两种方式等效</span></span><br><span class="line">            <span class="comment">// MenuBottomSheetDialog.builder(ThirdActivity.this)</span></span><br><span class="line">            <span class="comment">//         .setAdapter(menuListAdapter)</span></span><br><span class="line">            <span class="comment">//         .setHasItemDecoration(true)</span></span><br><span class="line">            <span class="comment">//         .show(getSupportFragmentManager());</span></span><br><span class="line"></span><br><span class="line">            MenuBottomSheetDialog dialog = MenuBottomSheetDialog.builder(ThirdActivity.<span class="keyword">this</span>)</span><br><span class="line">                    .setAdapter(menuListAdapter)</span><br><span class="line">                    .setHasItemDecoration(<span class="keyword">true</span>)</span><br><span class="line">                    .build();</span><br><span class="line">            dialog.show(getSupportFragmentManager());</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMenuClick</span><span class="params">(View view, <span class="keyword">int</span> action)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 点击事件的回调</span></span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"action "</span> + action, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-BottomSheetDialog进阶与Bug"><a href="#3-BottomSheetDialog进阶与Bug" class="headerlink" title="3. BottomSheetDialog进阶与Bug"></a>3. BottomSheetDialog进阶与Bug</h2><!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/design2.gif" alt="design2.gif"></p>
<p>上图即BottomSheetDialog与ViewPager以及RecyclerView之间的Bug，简而言之就是ViewPager下除了第一个页面可以滑动之外，其他页面均不可滑动，具体的<a href="https://stackoverflow.com/questions/39326321/scroll-not-working-for-multiple-recyclerview-in-bottomsheet?noredirect=1&amp;lq=1" target="_blank" rel="noopener">Error link</a>以及我在Github上提的<a href="https://github.com/material-components/material-components-android/issues/373" target="_blank" rel="noopener">issue</a>，这个问题已经有大神给出了解决方法，但是官方目前还是没有引入。</p>
<p>下面我们就来复现这种状况，不过我的设计效果与上图略有不同，增加了一些内容，首先是TabLayout的title，它是由两部分组成，前面是一个Unicode表情，后面是数字，数值表示在这个表情下的list的大小；TabLayout下面对应不同的Fragment，Fragment中显示当前的list，我这里生成的Item都是简单写一下，没有具体意义；整个设计思路是，自定义一个<code>ListBottomSheetDialog</code>，这个dialog由ViewPager + TabLayout + Fragment + RecyclerView组成，先从Fragment开始实现步骤</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/design3.png" alt="design3.png"></p>
<ul>
<li><code>ListObjectFragment</code>布局文件<code>fragment_list.xml</code>与Item布局文件<code>item_list.xml</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- fragment_list.xml --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 首先暂时使用CoordinatorLayout，可能后续会修改为NestedScrollView，此处伏笔 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 而且background="@color/white"是由于后面Dialog为透明背景，这里需要白色背景避免Fragment切换时背景突变透明 --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.coordinatorlayout.widget.CoordinatorLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">"@color/white"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.recyclerview.widget.RecyclerView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/list_view"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_behavior</span>=<span class="string">"com.google.android.material.bottomsheet.BottomSheetBehavior"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.coordinatorlayout.widget.CoordinatorLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- item_list.xml --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注意这里也使用了上面文中出现的水波纹效果背景touch_bg，这是因为要实现圆角背景 --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">"@drawable/touch_bg"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">"10dp"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/avatar"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"40dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"40dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@color/holo_blue_light"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:padding</span>=<span class="string">"5dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">"@color/black"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"20sp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>然后是RecyclerView的Adapter <code>ListViewAdapter.java</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListViewAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">ListViewAdapter</span>.<span class="title">MyViewHolder</span>&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 这里加了点击事件的接口</span></span><br><span class="line">    <span class="keyword">private</span> ItemClickListener onItemClickListener;</span><br><span class="line">    <span class="comment">// 显示的Item就是一个一个的User信息，User信息也很简单，avatar和name，但是avatar没有赋值</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListViewAdapter</span><span class="params">(List&lt;User&gt; data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyViewHolder <span class="title">onCreateViewHolder</span><span class="params">(@NonNull ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 常见方式</span></span><br><span class="line">        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_list, parent, <span class="keyword">false</span>);</span><br><span class="line">        MyViewHolder holder = <span class="keyword">new</span> MyViewHolder(view);</span><br><span class="line">        <span class="keyword">return</span> holder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(@NonNull MyViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        User user = data.get(position);</span><br><span class="line">        <span class="comment">// 这里avatar写死了，没有赋值，偷个懒</span></span><br><span class="line">        holder.avatar.setImageResource(R.drawable.ic_launcher_foreground);</span><br><span class="line">        holder.name.setText(user.getName());</span><br><span class="line">        <span class="comment">// 把点击事件传出去</span></span><br><span class="line">        holder.itemView.setOnClickListener(v -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (onItemClickListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                onItemClickListener.onItemClick(holder.itemView, position);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line">        ImageView avatar;</span><br><span class="line">        TextView name;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyViewHolder</span><span class="params">(@NonNull View itemView)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(itemView);</span><br><span class="line">            avatar = itemView.findViewById(R.id.avatar);</span><br><span class="line">            name = itemView.findViewById(R.id.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemClickListener</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(View view, <span class="keyword">int</span> position)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setItemClickListener</span><span class="params">(ItemClickListener clickListener)</span> </span>&#123;</span><br><span class="line">        onItemClickListener = clickListener;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String avatar;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String avatar, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.avatar = avatar;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAvatar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> avatar;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAvatar</span><span class="params">(String avatar)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.avatar = avatar;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Fragment <code>ListObjectFragment.java</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListObjectFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> <span class="keyword">implements</span> <span class="title">ListViewAdapter</span>.<span class="title">ItemClickListener</span></span>&#123;</span><br><span class="line">    <span class="comment">// emoji表示Unicode表情，count表示list大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line">    <span class="keyword">private</span> String emoji;</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; list;</span><br><span class="line">    <span class="keyword">private</span> ListViewAdapter listViewAdapter;</span><br><span class="line">    <span class="keyword">private</span> RecyclerView recyclerView;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加了几个参数用于仅在Fragment对用户可见时加载数据，针对ViewPager预加载</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isViewInitiated;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isVisibleToUser;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isDataInitiated;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里传入了list，但是在onResume时才是真实加载数据的时候</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListObjectFragment</span><span class="params">(String emoji, <span class="keyword">int</span> count, List&lt;User&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.emoji = emoji;</span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater,</span></span></span><br><span class="line"><span class="function"><span class="params">                             ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.fragment_list_test, container, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onResume();</span><br><span class="line">        isVisibleToUser = <span class="keyword">true</span>;</span><br><span class="line">        prepareFetchData();</span><br><span class="line">        listViewAdapter = <span class="keyword">new</span> ListViewAdapter(list);</span><br><span class="line">        listViewAdapter.setItemClickListener(<span class="keyword">this</span>);</span><br><span class="line">        recyclerView.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(getContext()));</span><br><span class="line">        recyclerView.setAdapter(listViewAdapter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStop();</span><br><span class="line">        isVisibleToUser = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fetchData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 真实加载list的地方，这里仅模拟</span></span><br><span class="line">        list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> User(<span class="string">""</span>, <span class="string">"name"</span> + i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">prepareFetchData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> prepareFetchData(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">prepareFetchData</span><span class="params">(<span class="keyword">boolean</span> forceUpdate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isVisibleToUser &amp;&amp; isViewInitiated &amp;&amp; (!isDataInitiated || forceUpdate)) &#123;</span><br><span class="line">            fetchData();</span><br><span class="line">            isDataInitiated = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewCreated</span><span class="params">(@NonNull View view, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        isViewInitiated = <span class="keyword">true</span>;</span><br><span class="line">        recyclerView = view.findViewById(R.id.list_view);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(View view, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 点击事件回调</span></span><br><span class="line">        Toast.makeText(getContext(), <span class="string">"position"</span> + position, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>自定义BottomSheetDialog的布局文件<code>dialog_list.xml</code>，圆角背景<code>radius_background.xml</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.google.android.material.tabs.TabLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tablayout"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@drawable/radius_background"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:tabIndicatorColor</span>=<span class="string">"@color/colorPrimaryDark"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:tabMode</span>=<span class="string">"scrollable"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:tabTextColor</span>=<span class="string">"@color/black"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"1dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@color/split_line_grey"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.tao.bottomsheetdemo.custom.CustomViewPager</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/viewpager"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- radius_background.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"@color/white"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">corners</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:topLeftRadius</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:topRightRadius</span>=<span class="string">"10dp"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>自定义ViewPager <code>CustomViewPager.java</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomViewPager</span> <span class="keyword">extends</span> <span class="title">ViewPager</span> </span>&#123;</span><br><span class="line">    <span class="comment">// CustomViewPager control scroll enable</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> enabled;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomViewPager</span><span class="params">(@NonNull Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        <span class="keyword">this</span>.enabled = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomViewPager</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        <span class="keyword">this</span>.enabled = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.enabled) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 事件传递控制是否支持左右滑动</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.enabled) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onInterceptTouchEvent(event);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPagingEnabled</span><span class="params">(<span class="keyword">boolean</span> enabled)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.enabled = enabled;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>自定义BottomSheetDialog <code>ListBottomSheetDialog.java</code>与ViewPager的Adapter <code>ListPagerAdapter.java</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListBottomSheetDialog</span> <span class="keyword">extends</span> <span class="title">BottomSheetDialogFragment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = ListBottomSheetDialog<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里的ViewPager为自定义的CustomViewPager，多了额外的功能：可以控制是否支持左右滑动切换Fragment</span></span><br><span class="line">    <span class="keyword">private</span> TabLayout tabLayout;</span><br><span class="line">    <span class="keyword">private</span> CustomViewPager viewPager;</span><br><span class="line">    <span class="comment">// offscreenPageLimit设置可以使ViewPager下的Fragment缓存数据，数值表示缓存数据的Fragment数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> offscreenPageLimit = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 通过参数控制是否支持左右滑动</span></span><br><span class="line">    <span class="keyword">private</span> Boolean enableScroll;</span><br><span class="line">    <span class="comment">// EmojiItem是包含emoji/count/list的实体类，所以可知传入Dialog的数据是一种嵌套list形式</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;EmojiItem&gt; emojiItemList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line">    <span class="comment">// ViewPager的Adapter</span></span><br><span class="line">    <span class="keyword">private</span> ListPagerAdapter adapter;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ListBottomSheetDialog <span class="title">newInstance</span><span class="params">(ListBottomSheetDialog.Builder builder)</span> </span>&#123;</span><br><span class="line">        ListBottomSheetDialog fragment = <span class="keyword">new</span> ListBottomSheetDialog();</span><br><span class="line"><span class="comment">//        Bundle bundle = new Bundle();</span></span><br><span class="line"><span class="comment">//        fragment.setArguments(bundle);</span></span><br><span class="line"><span class="comment">//        fragment.setHeight(builder.peekHeight, builder.maxHeight);</span></span><br><span class="line">        fragment.setEmojiItemList(builder.emojiItemList);</span><br><span class="line">        fragment.setContext(builder.context);</span><br><span class="line">        fragment.setOffscreenPageLimit(builder.offscreenPageLimit);</span><br><span class="line">        fragment.setEnableScroll(builder.enableScroll);</span><br><span class="line">        <span class="keyword">return</span> fragment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dialog <span class="title">onCreateDialog</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line"><span class="comment">//      由于需要首先圆角背景，所以这里也使用了透明背景  </span></span><br><span class="line">        BottomSheetDialog dialog = <span class="keyword">new</span> BottomSheetDialog(context, R.style.SheetDialog);</span><br><span class="line"><span class="comment">//        set dialog peek height and max height</span></span><br><span class="line"><span class="comment">//        dialog.setPeekHeight(peekHeight);</span></span><br><span class="line"><span class="comment">//        dialog.setMaxHeight(maxHeight);</span></span><br><span class="line">        <span class="keyword">return</span> dialog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.dialog_list, container, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewCreated</span><span class="params">(@NonNull View view, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onViewCreated(view, savedInstanceState);</span><br><span class="line">        viewPager = view.findViewById(R.id.viewpager);</span><br><span class="line">        tabLayout = view.findViewById(R.id.tablayout);</span><br><span class="line">        <span class="keyword">if</span> (viewPager != <span class="keyword">null</span> &amp;&amp; tabLayout != <span class="keyword">null</span>) &#123;</span><br><span class="line">            initViewPager();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initViewPager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ListPagerAdapter.BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT参数控制仅在Fragment对用户可见时调用onResume，这也是对应了上面在</span></span><br><span class="line">        <span class="comment">// Fragment中数据加载</span></span><br><span class="line">        adapter = <span class="keyword">new</span> ListPagerAdapter(getChildFragmentManager(), ListPagerAdapter.BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT, context);</span><br><span class="line">        <span class="comment">// 这里的emojiItemList比较简单，没有其他参数，理论上需要根据定义的其他参数传入到Fragment中再进行进一步请求数据</span></span><br><span class="line">        adapter.setEmojiItemList(emojiItemList);</span><br><span class="line">        viewPager.setAdapter(adapter);</span><br><span class="line">        viewPager.setOffscreenPageLimit(offscreenPageLimit);</span><br><span class="line">        <span class="comment">// 这里可以控制是否左右滑动</span></span><br><span class="line">        viewPager.setPagingEnabled(enableScroll);</span><br><span class="line">        <span class="comment">// TabLayout与ViewPager关联，自动实现滑动切换或者点击切换的效果</span></span><br><span class="line">        tabLayout.setupWithViewPager(viewPager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(FragmentManager fragmentManager)</span> </span>&#123;</span><br><span class="line">        FragmentTransaction transaction = fragmentManager.beginTransaction();</span><br><span class="line">        Fragment prevFragment = fragmentManager.findFragmentByTag(TAG);</span><br><span class="line">        <span class="keyword">if</span> (prevFragment != <span class="keyword">null</span>) &#123;</span><br><span class="line">            transaction.remove(prevFragment);</span><br><span class="line">        &#125;</span><br><span class="line">        transaction.addToBackStack(<span class="keyword">null</span>);</span><br><span class="line">        show(transaction, TAG);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 建造者模式，同上</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title">builder</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Builder(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// private int peekHeight;</span></span><br><span class="line">        <span class="comment">// private int maxHeight;</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> offscreenPageLimit;</span><br><span class="line">        <span class="keyword">private</span> Boolean enableScroll;</span><br><span class="line">        <span class="keyword">private</span> List&lt;EmojiItem&gt; emojiItemList;</span><br><span class="line">        <span class="keyword">private</span> Context context;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.context = context;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 这里注释掉的方法可以控制Dialog Expand状态下的高度以及Collapse状态的高度，但是需要自定义BottomSheetDialog</span></span><br><span class="line">        <span class="comment">// 暂时不写</span></span><br><span class="line">        <span class="comment">// public Builder setPeekHeight(int peekHeight) &#123;</span></span><br><span class="line">        <span class="comment">//     this.peekHeight = peekHeight;</span></span><br><span class="line">        <span class="comment">//     return this;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// public Builder setMaxHeight(int maxHeight) &#123;</span></span><br><span class="line">        <span class="comment">//     this.maxHeight = maxHeight;</span></span><br><span class="line">        <span class="comment">//     return this;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setOffscreenPageLimit</span><span class="params">(<span class="keyword">int</span> offscreenPageLimit)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.offscreenPageLimit = offscreenPageLimit;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setEnableScroll</span><span class="params">(Boolean enableScroll)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.enableScroll = enableScroll;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setEmojiItemList</span><span class="params">(List&lt;EmojiItem&gt; emojiItemList)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.emojiItemList = emojiItemList;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ListBottomSheetDialog <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> newInstance(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ListBottomSheetDialog <span class="title">show</span><span class="params">(FragmentManager fragmentManager)</span> </span>&#123;</span><br><span class="line">            ListBottomSheetDialog dialog = build();</span><br><span class="line">            dialog.show(fragmentManager);</span><br><span class="line">            <span class="keyword">return</span> dialog;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setContext</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// private void setHeight(int peekHeight, int maxHeight) &#123;</span></span><br><span class="line">    <span class="comment">//     this.peekHeight = peekHeight;</span></span><br><span class="line">    <span class="comment">//     this.maxHeight = maxHeight;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setOffscreenPageLimit</span><span class="params">(<span class="keyword">int</span> offscreenPageLimit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.offscreenPageLimit = offscreenPageLimit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setEnableScroll</span><span class="params">(Boolean enableScroll)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.enableScroll = enableScroll;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setEmojiItemList</span><span class="params">(List&lt;EmojiItem&gt; emojiItemList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.emojiItemList = emojiItemList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListPagerAdapter</span> <span class="keyword">extends</span> <span class="title">FragmentStatePagerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;EmojiItem&gt; emojiItemList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;EmojiItem&gt; sortedList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListPagerAdapter</span><span class="params">(@NonNull FragmentManager fm, <span class="keyword">int</span> behavior, Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(fm, behavior);</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListPagerAdapter</span><span class="params">(@NonNull FragmentManager fm, <span class="keyword">int</span> behavior, List&lt;EmojiItem&gt; emojiItemList, Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(fm, behavior);</span><br><span class="line">        <span class="keyword">this</span>.emojiItemList = emojiItemList;</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">        <span class="comment">// 这里还需要将传入的emojiItemList按照count进行降序排列</span></span><br><span class="line">        <span class="keyword">this</span>.sortedList = sortList(emojiItemList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        String label = sortedList.get(position).getEmoji();</span><br><span class="line">        <span class="keyword">int</span> count = sortedList.get(position).getCount();</span><br><span class="line">        List&lt;User&gt; list = sortedList.get(position).getUserList();</span><br><span class="line">        Fragment fragment = <span class="keyword">new</span> ListObjectFragment(label, count, list);</span><br><span class="line">        Bundle args = <span class="keyword">new</span> Bundle();</span><br><span class="line">        <span class="keyword">return</span> fragment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> emojiItemList.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CharSequence <span class="title">getPageTitle</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里设置TabLayout的title，emoji+count</span></span><br><span class="line">        CharSequence emoji = sortedList.get(position).getEmoji();</span><br><span class="line">        CharSequence title = emoji + <span class="string">" "</span> + sortedList.get(position).getCount();</span><br><span class="line">        SpannableStringBuilder spBuilder = <span class="keyword">new</span> SpannableStringBuilder(title);</span><br><span class="line">        Pattern pattern = Pattern.compile(emoji.toString());</span><br><span class="line">        Matcher matcher = pattern.matcher(title);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            TextAppearanceSpan span = <span class="keyword">new</span> TextAppearanceSpan(context, R.style.UIKitTextView_ReactionLabel);</span><br><span class="line">            spBuilder.setSpan(span, matcher.start(), matcher.end(), Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> spBuilder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;EmojiItem&gt; <span class="title">sortList</span><span class="params">(List&lt;EmojiItem&gt; list)</span> </span>&#123;</span><br><span class="line">        List&lt;EmojiItem&gt; tmp = <span class="keyword">new</span> ArrayList&lt;&gt;(list);</span><br><span class="line">        Collections.sort(tmp, <span class="keyword">new</span> Comparator&lt;EmojiItem&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(EmojiItem o1, EmojiItem o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o2.getCount() - o1.getCount();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmojiItemList</span><span class="params">(List&lt;EmojiItem&gt; emojiItemList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.emojiItemList = emojiItemList;</span><br><span class="line">        <span class="keyword">this</span>.sortedList = sortList(emojiItemList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>EmojiItem实体类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmojiItem</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String emoji;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; userList;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EmojiItem</span><span class="params">(String emoji, <span class="keyword">int</span> count, List&lt;User&gt; userList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.emoji = emoji;</span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">        <span class="keyword">this</span>.userList = userList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmoji</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> emoji;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmoji</span><span class="params">(String emoji)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.emoji = emoji;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCount</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserList</span><span class="params">(List&lt;User&gt; userList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userList = userList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>调用 <code>FourthActivity.java</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FourthActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_fourth);</span><br><span class="line">        List&lt;EmojiItem&gt; data = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        String[] arr = <span class="keyword">new</span> String[]&#123;</span><br><span class="line">                <span class="string">"\uD83D\uDC4D"</span>, <span class="string">"❤️"</span>, <span class="string">"\uD83C\uDF89"</span>, <span class="string">"\uD83D\uDE02"</span>, <span class="string">"\uD83D\uDC4F"</span>, <span class="string">"\uD83D\uDE0E"</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            data.add(<span class="keyword">new</span> EmojiItem(arr[i], i + <span class="number">10</span>, <span class="keyword">null</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        findViewById(R.id.button4).setOnClickListener(v -&gt;</span><br><span class="line">                ListBottomSheetDialog.builder(FourthActivity.<span class="keyword">this</span>)</span><br><span class="line">                .setEmojiItemList(data)</span><br><span class="line">                .setOffscreenPageLimit(<span class="number">5</span>)</span><br><span class="line">                .setEnableScroll(<span class="keyword">true</span>)</span><br><span class="line">                .show(getSupportFragmentManager()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>运行结果</strong></p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/design4.gif" alt="design4.gif"></p>
<p>很明显有几个问题：</p>
<ol>
<li>list上面有一段空白；</li>
<li>除了第一个Fragment中的list可以上下滑动以外，其他Fragment中的list不可滑动，这也就是BottomSheetDialog的bug。</li>
</ol>
<h2 id="4-解决方法"><a href="#4-解决方法" class="headerlink" title="4. 解决方法"></a>4. 解决方法</h2><ul>
<li><p>针对第一个Bug，这是由于Fragment的布局文件中采用了CoordinatorLayout，我们替换为NestedScrollView，对应伏笔。</p>
</li>
<li><p>第二个bug就比较复杂，根据找到的资料显示大致有两种解决方法（并不一定能成功）</p>
</li>
</ul>
<h3 id="4-1-重写ViewPager的Adapter的setPrimaryItem方法"><a href="#4-1-重写ViewPager的Adapter的setPrimaryItem方法" class="headerlink" title="4.1 重写ViewPager的Adapter的setPrimaryItem方法"></a>4.1 重写ViewPager的Adapter的setPrimaryItem方法</h3><p>也就是在<code>ListPagerAdapter.java</code>中加入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrimaryItem</span><span class="params">(@NonNull ViewGroup container, <span class="keyword">int</span> position, @NonNull Object object)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.setPrimaryItem(container, position, object);</span><br><span class="line">    Fragment currentFragment = (Fragment) object;</span><br><span class="line">    <span class="keyword">if</span> (currentFragment.getView() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; container.getChildCount(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != position) &#123;</span><br><span class="line">                <span class="comment">// 注意这里用NestedScrollView是因为已经默认上面第一个bug被纠正</span></span><br><span class="line">                NestedScrollView otherScrollView = (NestedScrollView) container.getChildAt(i);</span><br><span class="line">                otherScrollView.setNestedScrollingEnabled(<span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        NestedScrollView currentNestedScrollView = (NestedScrollView) currentFragment.getView();</span><br><span class="line">        currentNestedScrollView.setNestedScrollingEnabled(<span class="keyword">true</span>);</span><br><span class="line">        container.requestLayout();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码的作用是让对用户可见的Fragment中的NestedScrollView设置为可以滑动，其他不可见为禁止滑动，但是很遗憾，并没有解决问题，不可滑动问题依然存在。</p>
<h3 id="4-2-重写BottomSheetBehavior的findScrollingChild方法"><a href="#4-2-重写BottomSheetBehavior的findScrollingChild方法" class="headerlink" title="4.2 重写BottomSheetBehavior的findScrollingChild方法"></a>4.2 重写BottomSheetBehavior的findScrollingChild方法</h3><p>我们可以对比以下原始的findScrollingChild方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">View <span class="title">findScrollingChild</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (ViewCompat.isNestedScrollingEnabled(view)) &#123;</span><br><span class="line">    <span class="keyword">return</span> view;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (view <span class="keyword">instanceof</span> ViewGroup) &#123;</span><br><span class="line">    ViewGroup group = (ViewGroup) view;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, count = group.getChildCount(); i &lt; count; i++) &#123;</span><br><span class="line">      View scrollingChild = findScrollingChild(group.getChildAt(i));</span><br><span class="line">      <span class="keyword">if</span> (scrollingChild != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> scrollingChild;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以及修改后的findScrollingChild方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> View <span class="title">findScrollingChild</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ViewCompat.isNestedScrollingEnabled(view)) &#123;</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 修改后的代码增加了判断的选项，根据debug的结果我们知道如果最终返回的scrollingChild是可见状态的Fragment中的NestedScrollView，</span></span><br><span class="line">    <span class="comment">// 那么则可以正常滑动，否则不可滑动</span></span><br><span class="line">    <span class="keyword">if</span> (view <span class="keyword">instanceof</span> ViewPager) &#123;</span><br><span class="line">        ViewPager viewPager = (ViewPager) view;</span><br><span class="line">        <span class="comment">// ViewPagerUtils通过反射获取position得到当前的Fragment中的NestedScrollView</span></span><br><span class="line">        View currentViewPagerChild = ViewPagerUtils.getCurrentView(viewPager);</span><br><span class="line">        <span class="keyword">if</span> (currentViewPagerChild == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        View scrollingChild = findScrollingChild(currentViewPagerChild);</span><br><span class="line">        <span class="keyword">if</span> (scrollingChild != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> scrollingChild;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (view <span class="keyword">instanceof</span> ViewGroup) &#123;</span><br><span class="line">        ViewGroup group = (ViewGroup) view;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, count = group.getChildCount(); i &lt; count; i++) &#123;</span><br><span class="line">            View scrollingChild = findScrollingChild(group.getChildAt(i));</span><br><span class="line">            <span class="keyword">if</span> (scrollingChild != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> scrollingChild;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了重写findScrollingChild方法，有两种方式，一是在com.google.android.material.bottomsheet包下继承BottomSheetBehavior并重写findScrollingChild方法，一是创建新的BottomSheetBehavior类，复制其中的大部分代码以及相关文件。</p>
<ol>
<li>创建当前项目下的另一个包com.google.android.material.bottomsheet不是一个很好的选择，所以不采用；</li>
<li>新建ViewPagerBottomSheetBehavior类，复制代码，并修改findScrollingChild方法，这样会创建很多额外的文件。</li>
</ol>
<p>采用方法二，我们需要加入以下几个文件：</p>
<p><code>ViewPagerBottomSheetBehavior.java</code></p>
<p><code>ViewPagerUtils.java</code></p>
<p><code>BottomSheetUtils.java</code></p>
<p><code>design_view_pager_bottom_sheet_dialog.xml</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * An interaction behavior plugin for a child view of &#123;<span class="doctag">@link</span> CoordinatorLayout&#125; to make it work as</span></span><br><span class="line"><span class="comment"> * a bottom sheet.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewPagerBottomSheetBehavior</span>&lt;<span class="title">V</span> <span class="keyword">extends</span> <span class="title">View</span>&gt; <span class="keyword">extends</span> <span class="title">CoordinatorLayout</span>.<span class="title">Behavior</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Callback for monitoring events about bottom sheets.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BottomSheetCallback</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Called when the bottom sheet changes its state.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> bottomSheet The bottom sheet view.</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> newState    The new state. This will be one of &#123;<span class="doctag">@link</span> #STATE_DRAGGING&#125;,</span></span><br><span class="line"><span class="comment">         *                    &#123;<span class="doctag">@link</span> #STATE_SETTLING&#125;, &#123;<span class="doctag">@link</span> #STATE_EXPANDED&#125;,</span></span><br><span class="line"><span class="comment">         *                    &#123;<span class="doctag">@link</span> #STATE_COLLAPSED&#125;, or &#123;<span class="doctag">@link</span> #STATE_HIDDEN&#125;.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">onStateChanged</span><span class="params">(@NonNull View bottomSheet, @State <span class="keyword">int</span> newState)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Called when the bottom sheet is being dragged.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> bottomSheet The bottom sheet view.</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> slideOffset The new offset of this bottom sheet within [-1,1] range. Offset</span></span><br><span class="line"><span class="comment">         *                    increases as this bottom sheet is moving upward. From 0 to 1 the sheet</span></span><br><span class="line"><span class="comment">         *                    is between collapsed and expanded states and from -1 to 0 it is</span></span><br><span class="line"><span class="comment">         *                    between hidden and collapsed states.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">onSlide</span><span class="params">(@NonNull View bottomSheet, <span class="keyword">float</span> slideOffset)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The bottom sheet is dragging.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATE_DRAGGING = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The bottom sheet is settling.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATE_SETTLING = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The bottom sheet is expanded.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATE_EXPANDED = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The bottom sheet is collapsed.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATE_COLLAPSED = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The bottom sheet is hidden.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATE_HIDDEN = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RestrictTo</span>(LIBRARY_GROUP)</span><br><span class="line">    <span class="meta">@IntDef</span>(&#123;STATE_EXPANDED, STATE_COLLAPSED, STATE_DRAGGING, STATE_SETTLING, STATE_HIDDEN&#125;)</span><br><span class="line">    <span class="meta">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> State &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Peek at the 16:9 ratio keyline of its parent.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This can be used as a parameter for &#123;<span class="doctag">@link</span> #setPeekHeight(int)&#125;.</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #getPeekHeight()&#125; will return this when the value is set.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PEEK_HEIGHT_AUTO = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> HIDE_THRESHOLD = <span class="number">0.5f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> HIDE_FRICTION = <span class="number">0.1f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mMaximumVelocity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mPeekHeight;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mPeekHeightAuto;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mPeekHeightMin;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mMinOffset;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mMaxOffset;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> mHideable;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mSkipCollapsed;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@State</span></span><br><span class="line">    <span class="keyword">int</span> mState = STATE_COLLAPSED;</span><br><span class="line"></span><br><span class="line">    ViewDragHelper mViewDragHelper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mIgnoreEvents;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mLastNestedScrollDy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mNestedScrolled;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mParentHeight;</span><br><span class="line"></span><br><span class="line">    WeakReference&lt;V&gt; mViewRef;</span><br><span class="line"></span><br><span class="line">    WeakReference&lt;View&gt; mNestedScrollingChildRef;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BottomSheetCallback mCallback;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> VelocityTracker mVelocityTracker;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mActivePointerId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mInitialY;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> mTouchingScrollingChild;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Default constructor for instantiating ViewPagerBottomSheetBehaviors.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewPagerBottomSheetBehavior</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Default constructor for inflating ViewPagerBottomSheetBehaviors from layout.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context The &#123;<span class="doctag">@link</span> Context&#125;.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> attrs   The &#123;<span class="doctag">@link</span> AttributeSet&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewPagerBottomSheetBehavior</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        TypedArray a = context.obtainStyledAttributes(attrs,</span><br><span class="line">                R.styleable.BottomSheetBehavior_Layout);</span><br><span class="line">        TypedValue value = a.peekValue(R.styleable.BottomSheetBehavior_Layout_behavior_peekHeight);</span><br><span class="line">        <span class="keyword">if</span> (value != <span class="keyword">null</span> &amp;&amp; value.data == PEEK_HEIGHT_AUTO) &#123;</span><br><span class="line">            setPeekHeight(value.data);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            setPeekHeight(a.getDimensionPixelSize(</span><br><span class="line">                    R.styleable.BottomSheetBehavior_Layout_behavior_peekHeight, PEEK_HEIGHT_AUTO));</span><br><span class="line">        &#125;</span><br><span class="line">        setHideable(a.getBoolean(R.styleable.BottomSheetBehavior_Layout_behavior_hideable, <span class="keyword">false</span>));</span><br><span class="line">        setSkipCollapsed(a.getBoolean(R.styleable.BottomSheetBehavior_Layout_behavior_skipCollapsed,</span><br><span class="line">                <span class="keyword">false</span>));</span><br><span class="line">        a.recycle();</span><br><span class="line">        ViewConfiguration configuration = ViewConfiguration.get(context);</span><br><span class="line">        mMaximumVelocity = configuration.getScaledMaximumFlingVelocity();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Parcelable <span class="title">onSaveInstanceState</span><span class="params">(CoordinatorLayout parent, V child)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SavedState(<span class="keyword">super</span>.onSaveInstanceState(parent, child), mState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRestoreInstanceState</span><span class="params">(CoordinatorLayout parent, V child, Parcelable state)</span> </span>&#123;</span><br><span class="line">        SavedState ss = (SavedState) state;</span><br><span class="line">        <span class="keyword">super</span>.onRestoreInstanceState(parent, child, ss.getSuperState());</span><br><span class="line">        <span class="comment">// Intermediate states are restored as collapsed state</span></span><br><span class="line">        <span class="keyword">if</span> (ss.state == STATE_DRAGGING || ss.state == STATE_SETTLING) &#123;</span><br><span class="line">            mState = STATE_COLLAPSED;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mState = ss.state;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onLayoutChild</span><span class="params">(CoordinatorLayout parent, V child, <span class="keyword">int</span> layoutDirection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ViewCompat.getFitsSystemWindows(parent) &amp;&amp; !ViewCompat.getFitsSystemWindows(child)) &#123;</span><br><span class="line">            ViewCompat.setFitsSystemWindows(child, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> savedTop = child.getTop();</span><br><span class="line">        <span class="comment">// First let the parent lay it out</span></span><br><span class="line">        parent.onLayoutChild(child, layoutDirection);</span><br><span class="line">        <span class="comment">// Offset the bottom sheet</span></span><br><span class="line">        mParentHeight = parent.getHeight();</span><br><span class="line">        <span class="keyword">int</span> peekHeight;</span><br><span class="line">        <span class="keyword">if</span> (mPeekHeightAuto) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mPeekHeightMin == <span class="number">0</span>) &#123;</span><br><span class="line">                mPeekHeightMin = parent.getResources().getDimensionPixelSize(</span><br><span class="line">                        R.dimen.design_bottom_sheet_peek_height_min);</span><br><span class="line">            &#125;</span><br><span class="line">            peekHeight = Math.max(mPeekHeightMin, mParentHeight - parent.getWidth() * <span class="number">9</span> / <span class="number">16</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            peekHeight = mPeekHeight;</span><br><span class="line">        &#125;</span><br><span class="line">        mMinOffset = Math.max(<span class="number">0</span>, mParentHeight - child.getHeight());</span><br><span class="line">        mMaxOffset = Math.max(mParentHeight - peekHeight, mMinOffset);</span><br><span class="line">        <span class="keyword">if</span> (mState == STATE_EXPANDED) &#123;</span><br><span class="line">            ViewCompat.offsetTopAndBottom(child, mMinOffset);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mHideable &amp;&amp; mState == STATE_HIDDEN) &#123;</span><br><span class="line">            ViewCompat.offsetTopAndBottom(child, mParentHeight);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mState == STATE_COLLAPSED) &#123;</span><br><span class="line">            ViewCompat.offsetTopAndBottom(child, mMaxOffset);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mState == STATE_DRAGGING || mState == STATE_SETTLING) &#123;</span><br><span class="line">            ViewCompat.offsetTopAndBottom(child, savedTop - child.getTop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mViewDragHelper == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mViewDragHelper = ViewDragHelper.create(parent, mDragCallback);</span><br><span class="line">        &#125;</span><br><span class="line">        mViewRef = <span class="keyword">new</span> WeakReference&lt;&gt;(child);</span><br><span class="line">        mNestedScrollingChildRef = <span class="keyword">new</span> WeakReference&lt;&gt;(findScrollingChild(child));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(CoordinatorLayout parent, V child, MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!child.isShown()) &#123;</span><br><span class="line">            mIgnoreEvents = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> action = event.getActionMasked();</span><br><span class="line">        <span class="comment">// Record the velocity</span></span><br><span class="line">        <span class="keyword">if</span> (action == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">            reset();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mVelocityTracker == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mVelocityTracker = VelocityTracker.obtain();</span><br><span class="line">        &#125;</span><br><span class="line">        mVelocityTracker.addMovement(event);</span><br><span class="line">        <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</span><br><span class="line">                mTouchingScrollingChild = <span class="keyword">false</span>;</span><br><span class="line">                mActivePointerId = MotionEvent.INVALID_POINTER_ID;</span><br><span class="line">                <span class="comment">// Reset the ignore flag</span></span><br><span class="line">                <span class="keyword">if</span> (mIgnoreEvents) &#123;</span><br><span class="line">                    mIgnoreEvents = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                <span class="keyword">int</span> initialX = (<span class="keyword">int</span>) event.getX();</span><br><span class="line">                mInitialY = (<span class="keyword">int</span>) event.getY();</span><br><span class="line">                View scroll = mNestedScrollingChildRef != <span class="keyword">null</span></span><br><span class="line">                        ? mNestedScrollingChildRef.get() : <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (scroll != <span class="keyword">null</span> &amp;&amp; parent.isPointInChildBounds(scroll, initialX, mInitialY)) &#123;</span><br><span class="line">                    mActivePointerId = event.getPointerId(event.getActionIndex());</span><br><span class="line">                    mTouchingScrollingChild = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                mIgnoreEvents = mActivePointerId == MotionEvent.INVALID_POINTER_ID &amp;&amp;</span><br><span class="line">                        !parent.isPointInChildBounds(child, initialX, mInitialY);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!mIgnoreEvents &amp;&amp; mViewDragHelper.shouldInterceptTouchEvent(event)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// We have to handle cases that the ViewDragHelper does not capture the bottom sheet because</span></span><br><span class="line">        <span class="comment">// it is not the top most view of its parent. This is not necessary when the touch event is</span></span><br><span class="line">        <span class="comment">// happening over the scrolling content as nested scrolling logic handles that case.</span></span><br><span class="line">        View scroll = mNestedScrollingChildRef.get();</span><br><span class="line">        <span class="keyword">return</span> action == MotionEvent.ACTION_MOVE &amp;&amp; scroll != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                !mIgnoreEvents &amp;&amp; mState != STATE_DRAGGING &amp;&amp;</span><br><span class="line">                !parent.isPointInChildBounds(scroll, (<span class="keyword">int</span>) event.getX(), (<span class="keyword">int</span>) event.getY()) &amp;&amp;</span><br><span class="line">                Math.abs(mInitialY - event.getY()) &gt; mViewDragHelper.getTouchSlop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(CoordinatorLayout parent, V child, MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!child.isShown()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> action = event.getActionMasked();</span><br><span class="line">        <span class="keyword">if</span> (mState == STATE_DRAGGING &amp;&amp; action == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mViewDragHelper != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mViewDragHelper.processTouchEvent(event);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Record the velocity</span></span><br><span class="line">        <span class="keyword">if</span> (action == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">            reset();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mVelocityTracker == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mVelocityTracker = VelocityTracker.obtain();</span><br><span class="line">        &#125;</span><br><span class="line">        mVelocityTracker.addMovement(event);</span><br><span class="line">        <span class="comment">// The ViewDragHelper tries to capture only the top-most View. We have to explicitly tell it</span></span><br><span class="line">        <span class="comment">// to capture the bottom sheet in case it is not captured and the touch slop is passed.</span></span><br><span class="line">        <span class="keyword">if</span> (action == MotionEvent.ACTION_MOVE &amp;&amp; !mIgnoreEvents) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Math.abs(mInitialY - event.getY()) &gt; mViewDragHelper.getTouchSlop()) &#123;</span><br><span class="line">                mViewDragHelper.captureChildView(child, event.getPointerId(event.getActionIndex()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> !mIgnoreEvents;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onStartNestedScroll</span><span class="params">(CoordinatorLayout coordinatorLayout, V child,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       View directTargetChild, View target, <span class="keyword">int</span> nestedScrollAxes)</span> </span>&#123;</span><br><span class="line">        mLastNestedScrollDy = <span class="number">0</span>;</span><br><span class="line">        mNestedScrolled = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> (nestedScrollAxes &amp; ViewCompat.SCROLL_AXIS_VERTICAL) != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNestedPreScroll</span><span class="params">(CoordinatorLayout coordinatorLayout, V child, View target, <span class="keyword">int</span> dx,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  <span class="keyword">int</span> dy, <span class="keyword">int</span>[] consumed)</span> </span>&#123;</span><br><span class="line">        View scrollingChild = mNestedScrollingChildRef.get();</span><br><span class="line">        <span class="keyword">if</span> (target != scrollingChild) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> currentTop = child.getTop();</span><br><span class="line">        <span class="keyword">int</span> newTop = currentTop - dy;</span><br><span class="line">        <span class="keyword">if</span> (dy &gt; <span class="number">0</span>) &#123; <span class="comment">// Upward</span></span><br><span class="line">            <span class="keyword">if</span> (newTop &lt; mMinOffset) &#123;</span><br><span class="line">                consumed[<span class="number">1</span>] = currentTop - mMinOffset;</span><br><span class="line">                ViewCompat.offsetTopAndBottom(child, -consumed[<span class="number">1</span>]);</span><br><span class="line">                setStateInternal(STATE_EXPANDED);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                consumed[<span class="number">1</span>] = dy;</span><br><span class="line">                ViewCompat.offsetTopAndBottom(child, -dy);</span><br><span class="line">                setStateInternal(STATE_DRAGGING);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dy &lt; <span class="number">0</span>) &#123; <span class="comment">// Downward</span></span><br><span class="line">            <span class="keyword">if</span> (!target.canScrollVertically(-<span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (newTop &lt;= mMaxOffset || mHideable) &#123;</span><br><span class="line">                    consumed[<span class="number">1</span>] = dy;</span><br><span class="line">                    ViewCompat.offsetTopAndBottom(child, -dy);</span><br><span class="line">                    setStateInternal(STATE_DRAGGING);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    consumed[<span class="number">1</span>] = currentTop - mMaxOffset;</span><br><span class="line">                    ViewCompat.offsetTopAndBottom(child, -consumed[<span class="number">1</span>]);</span><br><span class="line">                    setStateInternal(STATE_COLLAPSED);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dispatchOnSlide(child.getTop());</span><br><span class="line">        mLastNestedScrollDy = dy;</span><br><span class="line">        mNestedScrolled = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStopNestedScroll</span><span class="params">(CoordinatorLayout coordinatorLayout, V child, View target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (child.getTop() == mMinOffset) &#123;</span><br><span class="line">            setStateInternal(STATE_EXPANDED);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mNestedScrollingChildRef == <span class="keyword">null</span> || target != mNestedScrollingChildRef.get()</span><br><span class="line">                || !mNestedScrolled) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> top;</span><br><span class="line">        <span class="keyword">int</span> targetState;</span><br><span class="line">        <span class="keyword">if</span> (mLastNestedScrollDy &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            top = mMinOffset;</span><br><span class="line">            targetState = STATE_EXPANDED;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mHideable &amp;&amp; shouldHide(child, getYVelocity())) &#123;</span><br><span class="line">            top = mParentHeight;</span><br><span class="line">            targetState = STATE_HIDDEN;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mLastNestedScrollDy == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> currentTop = child.getTop();</span><br><span class="line">            <span class="keyword">if</span> (Math.abs(currentTop - mMinOffset) &lt; Math.abs(currentTop - mMaxOffset)) &#123;</span><br><span class="line">                top = mMinOffset;</span><br><span class="line">                targetState = STATE_EXPANDED;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                top = mMaxOffset;</span><br><span class="line">                targetState = STATE_COLLAPSED;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            top = mMaxOffset;</span><br><span class="line">            targetState = STATE_COLLAPSED;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mViewDragHelper.smoothSlideViewTo(child, child.getLeft(), top)) &#123;</span><br><span class="line">            setStateInternal(STATE_SETTLING);</span><br><span class="line">            ViewCompat.postOnAnimation(child, <span class="keyword">new</span> SettleRunnable(child, targetState));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            setStateInternal(targetState);</span><br><span class="line">        &#125;</span><br><span class="line">        mNestedScrolled = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onNestedPreFling</span><span class="params">(CoordinatorLayout coordinatorLayout, V child, View target,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    <span class="keyword">float</span> velocityX, <span class="keyword">float</span> velocityY)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> target == mNestedScrollingChildRef.get() &amp;&amp;</span><br><span class="line">                (mState != STATE_EXPANDED ||</span><br><span class="line">                        <span class="keyword">super</span>.onNestedPreFling(coordinatorLayout, child, target,</span><br><span class="line">                                velocityX, velocityY));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">invalidateScrollingChild</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> View scrollingChild = findScrollingChild(mViewRef.get());</span><br><span class="line">        mNestedScrollingChildRef = <span class="keyword">new</span> WeakReference&lt;&gt;(scrollingChild);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets the height of the bottom sheet when it is collapsed.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> peekHeight The height of the collapsed bottom sheet in pixels, or</span></span><br><span class="line"><span class="comment">     *                   &#123;<span class="doctag">@link</span> #PEEK_HEIGHT_AUTO&#125; to configure the sheet to peek automatically</span></span><br><span class="line"><span class="comment">     *                   at 16:9 ratio keyline.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@attr</span> ref android.support.design.R.styleable#BottomSheetBehavior_Layout_behavior_peekHeight</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setPeekHeight</span><span class="params">(<span class="keyword">int</span> peekHeight)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> layout = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (peekHeight == PEEK_HEIGHT_AUTO) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!mPeekHeightAuto) &#123;</span><br><span class="line">                mPeekHeightAuto = <span class="keyword">true</span>;</span><br><span class="line">                layout = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mPeekHeightAuto || mPeekHeight != peekHeight) &#123;</span><br><span class="line">            mPeekHeightAuto = <span class="keyword">false</span>;</span><br><span class="line">            mPeekHeight = Math.max(<span class="number">0</span>, peekHeight);</span><br><span class="line">            mMaxOffset = mParentHeight - peekHeight;</span><br><span class="line">            layout = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (layout &amp;&amp; mState == STATE_COLLAPSED &amp;&amp; mViewRef != <span class="keyword">null</span>) &#123;</span><br><span class="line">            V view = mViewRef.get();</span><br><span class="line">            <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">                view.requestLayout();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Gets the height of the bottom sheet when it is collapsed.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The height of the collapsed bottom sheet in pixels, or &#123;<span class="doctag">@link</span> #PEEK_HEIGHT_AUTO&#125;</span></span><br><span class="line"><span class="comment">     * if the sheet is configured to peek automatically at 16:9 ratio keyline</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@attr</span> ref android.support.design.R.styleable#BottomSheetBehavior_Layout_behavior_peekHeight</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getPeekHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mPeekHeightAuto ? PEEK_HEIGHT_AUTO : mPeekHeight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets whether this bottom sheet can hide when it is swiped down.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hideable &#123;<span class="doctag">@code</span> true&#125; to make this bottom sheet hideable.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@attr</span> ref android.support.design.R.styleable#BottomSheetBehavior_Layout_behavior_hideable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHideable</span><span class="params">(<span class="keyword">boolean</span> hideable)</span> </span>&#123;</span><br><span class="line">        mHideable = hideable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Gets whether this bottom sheet can hide when it is swiped down.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if this bottom sheet can hide.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@attr</span> ref android.support.design.R.styleable#BottomSheetBehavior_Layout_behavior_hideable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHideable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mHideable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets whether this bottom sheet should skip the collapsed state when it is being hidden</span></span><br><span class="line"><span class="comment">     * after it is expanded once. Setting this to true has no effect unless the sheet is hideable.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> skipCollapsed True if the bottom sheet should skip the collapsed state.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@attr</span> ref android.support.design.R.styleable#BottomSheetBehavior_Layout_behavior_skipCollapsed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSkipCollapsed</span><span class="params">(<span class="keyword">boolean</span> skipCollapsed)</span> </span>&#123;</span><br><span class="line">        mSkipCollapsed = skipCollapsed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets whether this bottom sheet should skip the collapsed state when it is being hidden</span></span><br><span class="line"><span class="comment">     * after it is expanded once.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Whether the bottom sheet should skip the collapsed state.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@attr</span> ref android.support.design.R.styleable#BottomSheetBehavior_Layout_behavior_skipCollapsed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getSkipCollapsed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mSkipCollapsed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets a callback to be notified of bottom sheet events.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> callback The callback to notify when bottom sheet events occur.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBottomSheetCallback</span><span class="params">(BottomSheetCallback callback)</span> </span>&#123;</span><br><span class="line">        mCallback = callback;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets the state of the bottom sheet. The bottom sheet will transition to that state with</span></span><br><span class="line"><span class="comment">     * animation.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> state One of &#123;<span class="doctag">@link</span> #STATE_COLLAPSED&#125;, &#123;<span class="doctag">@link</span> #STATE_EXPANDED&#125;, or</span></span><br><span class="line"><span class="comment">     *              &#123;<span class="doctag">@link</span> #STATE_HIDDEN&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">final</span> @State <span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (state == mState) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mViewRef == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// The view is not laid out yet; modify mState and let onLayoutChild handle it later</span></span><br><span class="line">            <span class="keyword">if</span> (state == STATE_COLLAPSED || state == STATE_EXPANDED ||</span><br><span class="line">                    (mHideable &amp;&amp; state == STATE_HIDDEN)) &#123;</span><br><span class="line">                mState = state;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> V child = mViewRef.get();</span><br><span class="line">        <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Start the animation; wait until a pending layout if there is one.</span></span><br><span class="line">        ViewParent parent = child.getParent();</span><br><span class="line">        <span class="keyword">if</span> (parent != <span class="keyword">null</span> &amp;&amp; parent.isLayoutRequested() &amp;&amp; ViewCompat.isAttachedToWindow(child)) &#123;</span><br><span class="line">            child.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    startSettlingAnimation(child, state);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            startSettlingAnimation(child, state);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Gets the current state of the bottom sheet.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> One of &#123;<span class="doctag">@link</span> #STATE_EXPANDED&#125;, &#123;<span class="doctag">@link</span> #STATE_COLLAPSED&#125;, &#123;<span class="doctag">@link</span> #STATE_DRAGGING&#125;,</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #STATE_SETTLING&#125;, and &#123;<span class="doctag">@link</span> #STATE_HIDDEN&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@State</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setStateInternal</span><span class="params">(@State <span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mState == state) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mState = state;</span><br><span class="line">        View bottomSheet = mViewRef.get();</span><br><span class="line">        <span class="keyword">if</span> (bottomSheet != <span class="keyword">null</span> &amp;&amp; mCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mCallback.onStateChanged(bottomSheet, state);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mActivePointerId = ViewDragHelper.INVALID_POINTER;</span><br><span class="line">        <span class="keyword">if</span> (mVelocityTracker != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mVelocityTracker.recycle();</span><br><span class="line">            mVelocityTracker = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">shouldHide</span><span class="params">(View child, <span class="keyword">float</span> yvel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mSkipCollapsed) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (child.getTop() &lt; mMaxOffset) &#123;</span><br><span class="line">            <span class="comment">// It should not hide, but collapse.</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> newTop = child.getTop() + yvel * HIDE_FRICTION;</span><br><span class="line">        <span class="keyword">return</span> Math.abs(newTop - mMaxOffset) / (<span class="keyword">float</span>) mPeekHeight &gt; HIDE_THRESHOLD;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@VisibleForTesting</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> View <span class="title">findScrollingChild</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ViewCompat.isNestedScrollingEnabled(view)) &#123;</span><br><span class="line">            <span class="keyword">return</span> view;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (view <span class="keyword">instanceof</span> ViewPager) &#123;</span><br><span class="line">            ViewPager viewPager = (ViewPager) view;</span><br><span class="line">            View currentViewPagerChild = ViewPagerUtils.getCurrentView(viewPager);</span><br><span class="line">            <span class="keyword">if</span> (currentViewPagerChild == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            View scrollingChild = findScrollingChild(currentViewPagerChild);</span><br><span class="line">            <span class="keyword">if</span> (scrollingChild != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> scrollingChild;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (view <span class="keyword">instanceof</span> ViewGroup) &#123;</span><br><span class="line">            ViewGroup group = (ViewGroup) view;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, count = group.getChildCount(); i &lt; count; i++) &#123;</span><br><span class="line">                View scrollingChild = findScrollingChild(group.getChildAt(i));</span><br><span class="line">                <span class="keyword">if</span> (scrollingChild != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> scrollingChild;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">float</span> <span class="title">getYVelocity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mVelocityTracker.computeCurrentVelocity(<span class="number">1000</span>, mMaximumVelocity);</span><br><span class="line">        <span class="keyword">return</span> mVelocityTracker.getYVelocity(mActivePointerId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">startSettlingAnimation</span><span class="params">(View child, <span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> top;</span><br><span class="line">        <span class="keyword">if</span> (state == STATE_COLLAPSED) &#123;</span><br><span class="line">            top = mMaxOffset;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == STATE_EXPANDED) &#123;</span><br><span class="line">            top = mMinOffset;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mHideable &amp;&amp; state == STATE_HIDDEN) &#123;</span><br><span class="line">            top = mParentHeight;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal state argument: "</span> + state);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mViewDragHelper.smoothSlideViewTo(child, child.getLeft(), top)) &#123;</span><br><span class="line">            setStateInternal(STATE_SETTLING);</span><br><span class="line">            ViewCompat.postOnAnimation(child, <span class="keyword">new</span> SettleRunnable(child, state));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            setStateInternal(state);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ViewDragHelper.Callback mDragCallback = <span class="keyword">new</span> ViewDragHelper.Callback() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryCaptureView</span><span class="params">(View child, <span class="keyword">int</span> pointerId)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (mState == STATE_DRAGGING) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mTouchingScrollingChild) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mState == STATE_EXPANDED &amp;&amp; mActivePointerId == pointerId) &#123;</span><br><span class="line">                View scroll = mNestedScrollingChildRef.get();</span><br><span class="line">                <span class="keyword">if</span> (scroll != <span class="keyword">null</span> &amp;&amp; scroll.canScrollVertically(-<span class="number">1</span>)) &#123;</span><br><span class="line">                    <span class="comment">// Let the content scroll up</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> mViewRef != <span class="keyword">null</span> &amp;&amp; mViewRef.get() == child;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewPositionChanged</span><span class="params">(View changedView, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span>&#123;</span><br><span class="line">            dispatchOnSlide(top);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewDragStateChanged</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (state == ViewDragHelper.STATE_DRAGGING) &#123;</span><br><span class="line">                setStateInternal(STATE_DRAGGING);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewReleased</span><span class="params">(View releasedChild, <span class="keyword">float</span> xvel, <span class="keyword">float</span> yvel)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> top;</span><br><span class="line">            <span class="meta">@State</span> <span class="keyword">int</span> targetState;</span><br><span class="line">            <span class="keyword">if</span> (yvel &lt; <span class="number">0</span>) &#123; <span class="comment">// Moving up</span></span><br><span class="line">                top = mMinOffset;</span><br><span class="line">                targetState = STATE_EXPANDED;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mHideable &amp;&amp; shouldHide(releasedChild, yvel)) &#123;</span><br><span class="line">                top = mParentHeight;</span><br><span class="line">                targetState = STATE_HIDDEN;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (yvel == <span class="number">0</span>.f) &#123;</span><br><span class="line">                <span class="keyword">int</span> currentTop = releasedChild.getTop();</span><br><span class="line">                <span class="keyword">if</span> (Math.abs(currentTop - mMinOffset) &lt; Math.abs(currentTop - mMaxOffset)) &#123;</span><br><span class="line">                    top = mMinOffset;</span><br><span class="line">                    targetState = STATE_EXPANDED;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    top = mMaxOffset;</span><br><span class="line">                    targetState = STATE_COLLAPSED;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                top = mMaxOffset;</span><br><span class="line">                targetState = STATE_COLLAPSED;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mViewDragHelper.settleCapturedViewAt(releasedChild.getLeft(), top)) &#123;</span><br><span class="line">                setStateInternal(STATE_SETTLING);</span><br><span class="line">                ViewCompat.postOnAnimation(releasedChild,</span><br><span class="line">                        <span class="keyword">new</span> SettleRunnable(releasedChild, targetState));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                setStateInternal(targetState);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">clampViewPositionVertical</span><span class="params">(View child, <span class="keyword">int</span> top, <span class="keyword">int</span> dy)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> MathUtils.clamp(top, mMinOffset, mHideable ? mParentHeight : mMaxOffset);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">clampViewPositionHorizontal</span><span class="params">(View child, <span class="keyword">int</span> left, <span class="keyword">int</span> dx)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> child.getLeft();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getViewVerticalDragRange</span><span class="params">(View child)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (mHideable) &#123;</span><br><span class="line">                <span class="keyword">return</span> mParentHeight - mMinOffset;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> mMaxOffset - mMinOffset;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dispatchOnSlide</span><span class="params">(<span class="keyword">int</span> top)</span> </span>&#123;</span><br><span class="line">        View bottomSheet = mViewRef.get();</span><br><span class="line">        <span class="keyword">if</span> (bottomSheet != <span class="keyword">null</span> &amp;&amp; mCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (top &gt; mMaxOffset) &#123;</span><br><span class="line">                mCallback.onSlide(bottomSheet, (<span class="keyword">float</span>) (mMaxOffset - top) /</span><br><span class="line">                        (mParentHeight - mMaxOffset));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mCallback.onSlide(bottomSheet,</span><br><span class="line">                        (<span class="keyword">float</span>) (mMaxOffset - top) / ((mMaxOffset - mMinOffset)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@VisibleForTesting</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getPeekHeightMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mPeekHeightMin;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">SettleRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> View mView;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@State</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> mTargetState;</span><br><span class="line"></span><br><span class="line">        SettleRunnable(View view, <span class="meta">@State</span> <span class="keyword">int</span> targetState) &#123;</span><br><span class="line">            mView = view;</span><br><span class="line">            mTargetState = targetState;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (mViewDragHelper != <span class="keyword">null</span> &amp;&amp; mViewDragHelper.continueSettling(<span class="keyword">true</span>)) &#123;</span><br><span class="line">                ViewCompat.postOnAnimation(mView, <span class="keyword">this</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                setStateInternal(mTargetState);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SavedState</span> <span class="keyword">extends</span> <span class="title">AbsSavedState</span> </span>&#123;</span><br><span class="line">        <span class="meta">@State</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> state;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SavedState</span><span class="params">(Parcel source)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>(source, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SavedState</span><span class="params">(Parcel source, ClassLoader loader)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(source, loader);</span><br><span class="line">            <span class="comment">//noinspection ResourceType</span></span><br><span class="line">            state = source.readInt();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SavedState</span><span class="params">(Parcelable superState, @State <span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(superState);</span><br><span class="line">            <span class="keyword">this</span>.state = state;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel out, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.writeToParcel(out, flags);</span><br><span class="line">            out.writeInt(state);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Creator&lt;SavedState&gt; CREATOR = <span class="keyword">new</span> ClassLoaderCreator&lt;SavedState&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> SavedState <span class="title">createFromParcel</span><span class="params">(Parcel in, ClassLoader loader)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> SavedState(in, loader);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> SavedState <span class="title">createFromParcel</span><span class="params">(Parcel in)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> SavedState(in, <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> SavedState[] newArray(<span class="keyword">int</span> size) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> SavedState[size];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A utility function to get the &#123;<span class="doctag">@link</span> ViewPagerBottomSheetBehavior&#125; associated with the &#123;<span class="doctag">@code</span> view&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> view The &#123;<span class="doctag">@link</span> View&#125; with &#123;<span class="doctag">@link</span> ViewPagerBottomSheetBehavior&#125;.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The &#123;<span class="doctag">@link</span> ViewPagerBottomSheetBehavior&#125; associated with the &#123;<span class="doctag">@code</span> view&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;V extends View&gt; <span class="function">ViewPagerBottomSheetBehavior&lt;V&gt; <span class="title">from</span><span class="params">(V view)</span> </span>&#123;</span><br><span class="line">        ViewGroup.LayoutParams params = view.getLayoutParams();</span><br><span class="line">        <span class="keyword">if</span> (!(params <span class="keyword">instanceof</span> CoordinatorLayout.LayoutParams)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"The view is not a child of CoordinatorLayout"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        CoordinatorLayout.Behavior behavior = ((CoordinatorLayout.LayoutParams) params)</span><br><span class="line">                .getBehavior();</span><br><span class="line">        <span class="keyword">if</span> (!(behavior <span class="keyword">instanceof</span> ViewPagerBottomSheetBehavior)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    <span class="string">"The view is not associated with ViewPagerBottomSheetBehavior"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (ViewPagerBottomSheetBehavior&lt;V&gt;) behavior;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewPagerUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> View <span class="title">getCurrentView</span><span class="params">(ViewPager viewPager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> currentItem = viewPager.getCurrentItem();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; viewPager.getChildCount(); i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> View child = viewPager.getChildAt(i);</span><br><span class="line">            <span class="keyword">final</span> ViewPager.LayoutParams layoutParams = (ViewPager.LayoutParams) child.getLayoutParams();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Field field = layoutParams.getClass().getDeclaredField(<span class="string">"position"</span>);</span><br><span class="line">                field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                <span class="keyword">int</span> position = field.getInt(layoutParams);</span><br><span class="line">                <span class="keyword">if</span> (!layoutParams.isDecor &amp;&amp; currentItem == position) &#123;</span><br><span class="line">                    <span class="keyword">return</span> child;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">BottomSheetUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setupViewPager</span><span class="params">(ViewPager viewPager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> View bottomSheetParent = findBottomSheetParent(viewPager);</span><br><span class="line">        <span class="keyword">if</span> (bottomSheetParent != <span class="keyword">null</span>) &#123;</span><br><span class="line">            viewPager.addOnPageChangeListener(<span class="keyword">new</span> BottomSheetViewPagerListener(viewPager, bottomSheetParent));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BottomSheetViewPagerListener</span> <span class="keyword">extends</span> <span class="title">ViewPager</span>.<span class="title">SimpleOnPageChangeListener</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ViewPager viewPager;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ViewPagerBottomSheetBehavior&lt;View&gt; behavior;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">BottomSheetViewPagerListener</span><span class="params">(ViewPager viewPager, View bottomSheetParent)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.viewPager = viewPager;</span><br><span class="line">            <span class="keyword">this</span>.behavior = ViewPagerBottomSheetBehavior.from(bottomSheetParent);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageSelected</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">            viewPager.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    behavior.invalidateScrollingChild();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> View <span class="title">findBottomSheetParent</span><span class="params">(<span class="keyword">final</span> View view)</span> </span>&#123;</span><br><span class="line">        View current = view;</span><br><span class="line">        <span class="keyword">while</span> (current != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> ViewGroup.LayoutParams params = current.getLayoutParams();</span><br><span class="line">            <span class="keyword">if</span> (params <span class="keyword">instanceof</span> CoordinatorLayout.LayoutParams &amp;&amp; ((CoordinatorLayout.LayoutParams) params).getBehavior() <span class="keyword">instanceof</span> ViewPagerBottomSheetBehavior) &#123;</span><br><span class="line">                <span class="keyword">return</span> current;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">final</span> ViewParent parent = current.getParent();</span><br><span class="line">            current = parent == <span class="keyword">null</span> || !(parent <span class="keyword">instanceof</span> View) ? <span class="keyword">null</span> : (View) parent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- design_view_pager_bottom_sheet_dialog.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  ~ Copyright (C) 2015 The Android Open Source Project</span></span><br><span class="line"><span class="comment">  ~</span></span><br><span class="line"><span class="comment">  ~ Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment">  ~ you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  ~ You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">  ~</span></span><br><span class="line"><span class="comment">  ~      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">  ~</span></span><br><span class="line"><span class="comment">  ~ Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  ~ distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment">  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  ~ See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  ~ limitations under the License.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.coordinatorlayout.widget.CoordinatorLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/touch_outside"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:soundEffectsEnabled</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/design_bottom_sheet"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"center_horizontal|top"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:clickable</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_behavior</span>=<span class="string">".behavior.ViewPagerBottomSheetBehavior"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">"?attr/bottomSheetStyle"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.coordinatorlayout.widget.CoordinatorLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后基于上述文件自定义BottomSheetDialog <code>ViewPagerBottomSheetDialog.java</code>以及<code>ViewPagerBottomSheetDialogFragment.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewPagerBottomSheetDialog</span> <span class="keyword">extends</span> <span class="title">AppCompatDialog</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ViewPagerBottomSheetBehavior&lt;FrameLayout&gt; mBehavior;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mCancelable = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mCanceledOnTouchOutside = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mCanceledOnTouchOutsideSet;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mCreated;</span><br><span class="line">    <span class="comment">// 在这个自定义的Dialog中加入了设置高度的功能</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mPeekHeight;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mMaxHeight;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Window mWindow;</span><br><span class="line">    <span class="keyword">private</span> ViewPagerBottomSheetBehavior mBottomSheetBehavior;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewPagerBottomSheetDialog</span><span class="params">(@NonNull Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, getThemeResId(context, <span class="number">0</span>));</span><br><span class="line">        init(<span class="number">1000</span>,<span class="number">1000</span>); <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewPagerBottomSheetDialog</span><span class="params">(@NonNull Context context, @StyleRes <span class="keyword">int</span> theme)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, getThemeResId(context, theme));</span><br><span class="line">        <span class="comment">// We hide the title bar for any style configuration. Otherwise, there will be a gap</span></span><br><span class="line">        <span class="comment">// above the bottom sheet when it is expanded.</span></span><br><span class="line">        supportRequestWindowFeature(Window.FEATURE_NO_TITLE);</span><br><span class="line">        init(<span class="number">1000</span>, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewPagerBottomSheetDialog</span><span class="params">(@NonNull Context context, <span class="keyword">int</span> peekHeight, <span class="keyword">int</span> maxHeight)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="number">0</span>, peekHeight, maxHeight);</span><br><span class="line">        init(peekHeight, maxHeight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewPagerBottomSheetDialog</span><span class="params">(@NonNull Context context, @StyleRes <span class="keyword">int</span> theme, <span class="keyword">int</span> peekHeight, <span class="keyword">int</span> maxHeight)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, getThemeResId(context, theme));</span><br><span class="line">        <span class="comment">// We hide the title bar for any style configuration. Otherwise, there will be a gap</span></span><br><span class="line">        <span class="comment">// above the bottom sheet when it is expanded.</span></span><br><span class="line">        supportRequestWindowFeature(Window.FEATURE_NO_TITLE);</span><br><span class="line">        init(peekHeight, maxHeight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">ViewPagerBottomSheetDialog</span><span class="params">(@NonNull Context context, <span class="keyword">boolean</span> cancelable,</span></span></span><br><span class="line"><span class="function"><span class="params">                                         DialogInterface.OnCancelListener cancelListener, <span class="keyword">int</span> peekHeight, <span class="keyword">int</span> maxHeight)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, cancelable, cancelListener);</span><br><span class="line">        supportRequestWindowFeature(Window.FEATURE_NO_TITLE);</span><br><span class="line">        mCancelable = cancelable;</span><br><span class="line">        init(peekHeight, maxHeight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> peekHeight, <span class="keyword">int</span> maxHeight)</span> </span>&#123;</span><br><span class="line">        mWindow = getWindow();</span><br><span class="line">        mPeekHeight = peekHeight;</span><br><span class="line">        mMaxHeight = maxHeight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(@LayoutRes <span class="keyword">int</span> layoutResId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setContentView(wrapInBottomSheet(layoutResId, <span class="keyword">null</span>, <span class="keyword">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        getWindow().setLayout(</span><br><span class="line">                ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);</span><br><span class="line">        setPeekHeight();</span><br><span class="line">        setMaxHeight();</span><br><span class="line">        mCreated = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPeekHeight</span><span class="params">(<span class="keyword">int</span> peekHeight)</span> </span>&#123;</span><br><span class="line">        mPeekHeight = peekHeight;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mCreated) &#123;</span><br><span class="line">            setPeekHeight();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaxHeight</span><span class="params">(<span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">        mMaxHeight = height;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mCreated) &#123;</span><br><span class="line">            setMaxHeight();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setPeekHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mPeekHeight &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (getBottomSheetBehavior() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mBottomSheetBehavior.setPeekHeight(mPeekHeight);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setMaxHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mMaxHeight &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置高度的核心函数</span></span><br><span class="line">        mWindow.setLayout(ViewGroup.LayoutParams.MATCH_PARENT, mMaxHeight);</span><br><span class="line">        mWindow.setGravity(Gravity.BOTTOM);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ViewPagerBottomSheetBehavior <span class="title">getBottomSheetBehavior</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mBottomSheetBehavior != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> mBottomSheetBehavior;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        View view = mWindow.findViewById(R.id.design_bottom_sheet);</span><br><span class="line">        <span class="comment">// setContentView() 没有调用</span></span><br><span class="line">        <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mBottomSheetBehavior = ViewPagerBottomSheetBehavior.from(view);</span><br><span class="line">        <span class="keyword">return</span> mBottomSheetBehavior;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setContentView(wrapInBottomSheet(<span class="number">0</span>, view, <span class="keyword">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(View view, ViewGroup.LayoutParams params)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setContentView(wrapInBottomSheet(<span class="number">0</span>, view, params));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCancelable</span><span class="params">(<span class="keyword">boolean</span> cancelable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setCancelable(cancelable);</span><br><span class="line">        <span class="keyword">if</span> (mCancelable != cancelable) &#123;</span><br><span class="line">            mCancelable = cancelable;</span><br><span class="line">            <span class="keyword">if</span> (mBehavior != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mBehavior.setHideable(cancelable);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCanceledOnTouchOutside</span><span class="params">(<span class="keyword">boolean</span> cancel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setCanceledOnTouchOutside(cancel);</span><br><span class="line">        <span class="keyword">if</span> (cancel &amp;&amp; !mCancelable) &#123;</span><br><span class="line">            mCancelable = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mCanceledOnTouchOutside = cancel;</span><br><span class="line">        mCanceledOnTouchOutsideSet = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> View <span class="title">wrapInBottomSheet</span><span class="params">(<span class="keyword">int</span> layoutResId, View view, ViewGroup.LayoutParams params)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> CoordinatorLayout coordinator = (CoordinatorLayout) View.inflate(getContext(),</span><br><span class="line">                R.layout.design_view_pager_bottom_sheet_dialog, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (layoutResId != <span class="number">0</span> &amp;&amp; view == <span class="keyword">null</span>) &#123;</span><br><span class="line">            view = getLayoutInflater().inflate(layoutResId, coordinator, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        FrameLayout bottomSheet = (FrameLayout) coordinator.findViewById(R.id.design_bottom_sheet);</span><br><span class="line">        mBehavior = ViewPagerBottomSheetBehavior.from(bottomSheet);</span><br><span class="line">        mBehavior.setBottomSheetCallback(mBottomSheetCallback);</span><br><span class="line">        mBehavior.setHideable(mCancelable);</span><br><span class="line">        <span class="keyword">if</span> (params == <span class="keyword">null</span>) &#123;</span><br><span class="line">            bottomSheet.addView(view);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            bottomSheet.addView(view, params);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// We treat the CoordinatorLayout as outside the dialog though it is technically inside</span></span><br><span class="line">        coordinator.findViewById(R.id.touch_outside).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (mCancelable &amp;&amp; isShowing() &amp;&amp; shouldWindowCloseOnTouchOutside()) &#123;</span><br><span class="line">                    cancel();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> coordinator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">shouldWindowCloseOnTouchOutside</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!mCanceledOnTouchOutsideSet) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Build.VERSION.SDK_INT &lt; <span class="number">11</span>) &#123;</span><br><span class="line">                mCanceledOnTouchOutside = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                TypedArray a = getContext().obtainStyledAttributes(</span><br><span class="line">                        <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;android.R.attr.windowCloseOnTouchOutside&#125;);</span><br><span class="line">                mCanceledOnTouchOutside = a.getBoolean(<span class="number">0</span>, <span class="keyword">true</span>);</span><br><span class="line">                a.recycle();</span><br><span class="line">            &#125;</span><br><span class="line">            mCanceledOnTouchOutsideSet = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mCanceledOnTouchOutside;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getThemeResId</span><span class="params">(Context context, <span class="keyword">int</span> themeId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (themeId == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// If the provided theme is 0, then retrieve the dialogTheme from our theme</span></span><br><span class="line">            TypedValue outValue = <span class="keyword">new</span> TypedValue();</span><br><span class="line">            <span class="keyword">if</span> (context.getTheme().resolveAttribute(</span><br><span class="line">                    R.attr.bottomSheetDialogTheme, outValue, <span class="keyword">true</span>)) &#123;</span><br><span class="line">                themeId = outValue.resourceId;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// bottomSheetDialogTheme is not provided; we default to our light theme</span></span><br><span class="line">                themeId = R.style.Theme_Design_Light_BottomSheetDialog;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> themeId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ViewPagerBottomSheetBehavior.BottomSheetCallback mBottomSheetCallback</span><br><span class="line">            = <span class="keyword">new</span> ViewPagerBottomSheetBehavior.BottomSheetCallback() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStateChanged</span><span class="params">(@NonNull View bottomSheet,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   @ViewPagerBottomSheetBehavior.State <span class="keyword">int</span> newState)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (newState == ViewPagerBottomSheetBehavior.STATE_HIDDEN) &#123;</span><br><span class="line">                dismiss();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSlide</span><span class="params">(@NonNull View bottomSheet, <span class="keyword">float</span> slideOffset)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewPagerBottomSheetDialogFragment</span> <span class="keyword">extends</span> <span class="title">AppCompatDialogFragment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dialog <span class="title">onCreateDialog</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ViewPagerBottomSheetDialog(getContext(), getTheme());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在Activity中使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FourthActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_fourth);</span><br><span class="line">        List&lt;EmojiItem&gt; data = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        String[] arr = <span class="keyword">new</span> String[]&#123;</span><br><span class="line">                <span class="string">"\uD83D\uDC4D"</span>, <span class="string">"❤️"</span>, <span class="string">"\uD83C\uDF89"</span>, <span class="string">"\uD83D\uDE02"</span>, <span class="string">"\uD83D\uDC4F"</span>, <span class="string">"\uD83D\uDE0E"</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            data.add(<span class="keyword">new</span> EmojiItem(arr[i], i + <span class="number">10</span>, <span class="keyword">null</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 多了setMaxHeight(1600)和setPeekHeight(1000)</span></span><br><span class="line">        findViewById(R.id.button4).setOnClickListener(v -&gt;</span><br><span class="line">                ListBottomSheetDialog.builder(FourthActivity.<span class="keyword">this</span>)</span><br><span class="line">                        .setEmojiItemList(data)</span><br><span class="line">                        .setMaxHeight(<span class="number">1600</span>)</span><br><span class="line">                        .setPeekHeight(<span class="number">1000</span>)</span><br><span class="line">                        .setOffscreenPageLimit(<span class="number">5</span>)</span><br><span class="line">                        .setEnableScroll(<span class="keyword">true</span>)</span><br><span class="line">                        .show(getSupportFragmentManager()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果如下，但是如果BottomSheetDialog官方将这个bug修复了，那么就不需要修改这么多的文件，而且自定义的ViewPagerBottomSheetBehavior只是复制了BottomSheetBehavior中的部分代码，可能存在其他问题尚未发现。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/design5.gif" alt="design5.gif"></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Material</tag>
        <tag>RecyclerView</tag>
        <tag>ViewPager</tag>
        <tag>BottomSheetDialog</tag>
      </tags>
  </entry>
  <entry>
    <title>正则式</title>
    <url>/archives/75276563.html</url>
    <content><![CDATA[<p>参考：</p>
<blockquote>
<p><a href="https://www.liaoxuefeng.com/wiki/897692888725344/923056128128864" target="_blank" rel="noopener">正则表达式-廖雪峰</a></p>
<p>1.用<code>\d</code>可以匹配一个数字，<code>\w</code>可以匹配一个字母或数字，所以：</p>
</blockquote>
<ul>
<li><p><code>&#39;00\d&#39;</code>可以匹配<code>&#39;007&#39;</code>，但无法匹配<code>&#39;00A&#39;</code>；</p>
</li>
<li><p><code>&#39;\d\d\d&#39;</code>可以匹配<code>&#39;010&#39;</code>；</p>
</li>
<li><p><code>&#39;\w\w\d&#39;</code>可以匹配<code>&#39;py3&#39;</code>；</p>
</li>
</ul>
<blockquote>
<p>2.<code>.</code>可以匹配任意字符，所以：</p>
</blockquote>
<ul>
<li><code>&#39;py.&#39;</code>可以匹配<code>&#39;pyc&#39;</code>、<code>&#39;pyo&#39;</code>、<code>&#39;py!&#39;</code>等等。</li>
</ul>
<blockquote>
<p>3.用<code>*</code>表示任意个字符（包括0个），用<code>+</code>表示至少一个字符，用<code>?</code>表示0个或1个字符，用<code>{n}</code>表示n个字符，用<code>{n,m}</code>表示n-m个字符：</p>
</blockquote>
<p>来看一个复杂的例子：<code>\d{3}\s+\d{3,8}</code></p>
<ul>
<li><p><code>\d{3}</code>表示匹配3个数字，例如<code>&#39;010&#39;</code>；</p>
</li>
<li><p><code>\s</code>可以匹配一个空格（也包括Tab等空白符），所以<code>\s+</code>表示至少有一个空格，例如匹配<code>&#39; &#39;</code>，<code>&#39; &#39;</code>等；</p>
</li>
<li><p><code>\d{3,8}</code>表示3-8个数字，例如<code>&#39;1234567&#39;</code>。</p>
</li>
</ul>
<a id="more"></a>
<h2 id="1-进阶"><a href="#1-进阶" class="headerlink" title="1. 进阶"></a>1. 进阶</h2><p>要做更精确地匹配，可以用<code>[]</code>表示范围，比如：</p>
<p><code>[0-9a-zA-Z\_]</code>可以匹配一个数字、字母或者下划线；</p>
<p><code>[0-9a-zA-Z\_]+</code>可以匹配至少由一个数字、字母或者下划线组成的字符串，比如<code>&#39;a100&#39;</code>，<code>&#39;0_Z&#39;</code>，<code>&#39;Py3000&#39;</code>等等；</p>
<p><code>[a-zA-Z\_][0-9a-zA-Z\_]*</code>可以匹配由字母或下划线开头，后接任意个由一个数字、字母或者下划线组成的字符串，也就是Python合法的变量；</p>
<p><code>[a-zA-Z\_][0-9a-zA-Z\_]{0, 19}</code>更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）。</p>
<p><code>A|B</code>可以匹配A或B，所以<code>(P|p)ython</code>可以匹配<code>&#39;Python&#39;</code>或者<code>&#39;python&#39;</code>。</p>
<p><code>^</code>表示行的开头，<code>^\d</code>表示必须以数字开头。</p>
<p><script type="math/tex">`表示行的结束，`\d</script>表示必须以数字结束。</p>
<p>你可能注意到了，<code>^py</code>也可以匹配<code>&#39;python&#39;</code>，但是加上<code>^py$</code>就变成了整行匹配，就只能匹配<code>&#39;py&#39;</code>了。</p>
<h2 id="2-re"><a href="#2-re" class="headerlink" title="2. re"></a>2. re</h2><p>强烈建议使用Python的r前缀，就不用考虑转义的问题了：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">r'ABC\-001'</span> <span class="comment"># Python的字符串</span></span><br><span class="line"><span class="comment"># 对应的正则表达式字符串不变：</span></span><br><span class="line"><span class="comment"># 'ABC\-001'</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">r'^\d&#123;3&#125;\-\d&#123;3,8&#125;$'</span>, <span class="string">'010-12345'</span>)</span><br><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">9</span>), match=<span class="string">'010-12345'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">r'^\d&#123;3&#125;\-\d&#123;3,8&#125;$'</span>, <span class="string">'010 12345'</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
<p><code>match()</code>方法判断是否匹配，如果匹配成功，返回一个<code>Match</code>对象，否则返回<code>None</code>。常见的判断方法就是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test = <span class="string">'用户输入的字符串'</span></span><br><span class="line"><span class="keyword">if</span> re.match(<span class="string">r'正则表达式'</span>, test):</span><br><span class="line">    print(<span class="string">'ok'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'failed'</span>)</span><br></pre></td></tr></table></figure>
<h2 id="3-切分字符串"><a href="#3-切分字符串" class="headerlink" title="3. 切分字符串"></a>3. 切分字符串</h2><p>用正则表达式切分字符串比用固定的字符更灵活，请看正常的切分代码：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'a b   c'</span>.split(<span class="string">' '</span>)</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">'c'</span>]</span><br></pre></td></tr></table></figure></p>
<p>嗯，无法识别连续的空格，用正则表达式试试：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">r'\s+'</span>, <span class="string">'a b   c'</span>)</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br></pre></td></tr></table></figure></p>
<p>无论多少个空格都可以正常分割。加入<code>,</code>试试：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">r'[\s\,]+'</span>, <span class="string">'a,b, c  d'</span>)</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br></pre></td></tr></table></figure></p>
<p>再加入<code>;</code>试试：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">r'[\s\,\;]+'</span>, <span class="string">'a,b;; c  d'</span>)</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br></pre></td></tr></table></figure></p>
<h2 id="4-分组"><a href="#4-分组" class="headerlink" title="4. 分组"></a>4. 分组</h2><p>除了简单地判断是否匹配之外，正则表达式还有提取子串的强大功能。用()表示的就是要提取的分组（Group）。比如：</p>
<p><code>^(\d{3})-(\d{3,8})$</code>分别定义了两个组，可以直接从匹配的字符串中提取出区号和本地号码：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = re.match(<span class="string">r'^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$'</span>, <span class="string">'010-12345'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m</span><br><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">9</span>), match=<span class="string">'010-12345'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">0</span>)</span><br><span class="line"><span class="string">'010-12345'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">1</span>)</span><br><span class="line"><span class="string">'010'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">2</span>)</span><br><span class="line"><span class="string">'12345'</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = <span class="string">'19:05:30'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = re.match(<span class="string">r'^(0[0-9]|1[0-9]|2[0-3]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])$'</span>, t)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.groups()</span><br><span class="line">(<span class="string">'19'</span>, <span class="string">'05'</span>, <span class="string">'30'</span>)</span><br></pre></td></tr></table></figure>
<p>这个正则表达式可以直接识别合法的时间。但是有些时候，用正则表达式也无法做到完全验证，比如识别日期：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'^(0[1-9]|1[0-2]|[0-9])-(0[1-9]|1[0-9]|2[0-9]|3[0-1]|[0-9])$'</span></span><br></pre></td></tr></table></figure><br>对于<code>&#39;2-30&#39;</code>，<code>&#39;4-31&#39;</code>这样的非法日期，用正则还是识别不了，或者说写出来非常困难，这时就需要程序配合识别了。</p>
<h2 id="5-贪婪匹配"><a href="#5-贪婪匹配" class="headerlink" title="5. 贪婪匹配"></a>5. 贪婪匹配</h2><p>最后需要特别指出的是，正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。举例如下，匹配出数字后面的0：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">r'^(\d+)(0*)$'</span>, <span class="string">'102300'</span>).groups()</span><br><span class="line">(<span class="string">'102300'</span>, <span class="string">''</span>)</span><br></pre></td></tr></table></figure><br>由于<code>\d+</code>采用贪婪匹配，直接把后面的0全部匹配了，结果<code>0*</code>只能匹配空字符串了。</p>
<p>必须让<code>\d+</code>采用非贪婪匹配（也就是尽可能少匹配），才能把后面的0匹配出来，加个<code>?</code>就可以让<code>\d+</code>采用非贪婪匹配：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">r'^(\d+?)(0*)$'</span>, <span class="string">'102300'</span>).groups()</span><br><span class="line">(<span class="string">'1023'</span>, <span class="string">'00'</span>)</span><br></pre></td></tr></table></figure></p>
<h2 id="6-编译"><a href="#6-编译" class="headerlink" title="6. 编译"></a>6. 编译</h2><p>当我们在Python中使用正则表达式时，re模块内部会干两件事情：</p>
<ol>
<li><p>编译正则表达式，如果正则表达式的字符串本身不合法，会报错；</p>
</li>
<li><p>用编译后的正则表达式去匹配字符串。</p>
</li>
</ol>
<p>如果一个正则表达式要重复使用几千次，出于效率的考虑，我们可以预编译该正则表达式，接下来重复使用时就不需要编译这个步骤了，直接匹配：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># 编译:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re_telephone = re.compile(<span class="string">r'^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$'</span>)</span><br><span class="line"><span class="comment"># 使用：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re_telephone.match(<span class="string">'010-12345'</span>).groups()</span><br><span class="line">(<span class="string">'010'</span>, <span class="string">'12345'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re_telephone.match(<span class="string">'010-8086'</span>).groups()</span><br><span class="line">(<span class="string">'010'</span>, <span class="string">'8086'</span>)</span><br></pre></td></tr></table></figure>
<p>编译后生成Regular Expression对象，由于该对象自己包含了正则表达式，所以调用对应的方法时不用给出正则字符串。</p>
]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>Regex</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode搭建LaTeX论文写作环境</title>
    <url>/archives/212d026f.html</url>
    <content><![CDATA[<p>参考：</p>
<blockquote>
<p><a href="https://github.com/ustctug/ustcthesis" target="_blank" rel="noopener">中国科学技术大学学位论文 LaTeX 模板</a></p>
<p><a href="https://blog.csdn.net/yinqingwang/article/details/79684419" target="_blank" rel="noopener">论文写作的又一利器：VSCode + LaTeX Workshop + MikTex + Git</a></p>
<p><a href="https://miktex.org/" target="_blank" rel="noopener">MikTeX</a></p>
<p><a href="https://www.tug.org/mactex/" target="_blank" rel="noopener">MacTeX</a></p>
<p><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">VSCode</a></p>
</blockquote>
<h2 id="Windows环境"><a href="#Windows环境" class="headerlink" title="Windows环境"></a>Windows环境</h2><h3 id="1-安装LaTeX发行版"><a href="#1-安装LaTeX发行版" class="headerlink" title="1. 安装LaTeX发行版"></a>1. 安装LaTeX发行版</h3><p>在Windows下我选择的是MikTeX，Mac下选择的是MacTex，这个LaTeX发行版相当于一个开发工具包，你需要的编译器以及某些资源文件都包含在这个包里面，安装完成后可以通过命令行启用。</p>
<p>在Windows下MikTeX的安装教程链接为<a href="https://miktex.org/howto/install-miktex" target="_blank" rel="noopener">Install MiKTeX on Windows</a>，链接里也给出了安装包的地址<a href="https://miktex.org/download" target="_blank" rel="noopener">Basic MiKTeX Installer</a>，安装完成后打开 MiKTeX Console 更新package。目前这个阶段还不需要安装额外的package，这个我们可以等到编译论文的时候再下载。</p>
<a id="more"></a>
<h3 id="2-VSCode安装与参数设置"><a href="#2-VSCode安装与参数设置" class="headerlink" title="2. VSCode安装与参数设置"></a>2. VSCode安装与参数设置</h3><p>VSCode的安装没什么可说的，完成后需要在<strong>扩展</strong>中搜索<code>latex</code>，就可以找到需要的插件<code>LaTeX Workshop</code>，安装完成后需要配置一些参数，在设置中搜索<code>latex</code>，打开<code>settings.json</code>，加入以下参数</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/latex-workshop.png" alt="latex-workshop.png"></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"latex-workshop.view.pdf.viewer": "tab",</span><br><span class="line">"latex-workshop.latex.recipes": [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"latexmk"</span>,</span><br><span class="line">        <span class="attr">"tools"</span>: [</span><br><span class="line">            <span class="string">"latexmk"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"pdflatex"</span>,</span><br><span class="line">        <span class="attr">"tools"</span>: [</span><br><span class="line">            <span class="string">"pdflatex"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"pdflatex -&gt; bibtex -&gt; pdflatex*2"</span>,</span><br><span class="line">        <span class="attr">"tools"</span>: [</span><br><span class="line">            <span class="string">"pdflatex"</span>,</span><br><span class="line">            <span class="string">"bibtex"</span>,</span><br><span class="line">            <span class="string">"pdflatex"</span>,</span><br><span class="line">            <span class="string">"pdflatex"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line">"latex-workshop.latex.tools": [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"xelatex"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"xelatex"</span>,</span><br><span class="line">        <span class="attr">"args"</span>: [</span><br><span class="line">            <span class="string">"-synctex=1"</span>,</span><br><span class="line">            <span class="string">"-interaction=nonstopmode"</span>,</span><br><span class="line">            <span class="string">"-file-line-error"</span>,</span><br><span class="line">            <span class="string">"%DOC%"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"pdflatex"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"pdflatex"</span>,</span><br><span class="line">        <span class="attr">"args"</span>: [</span><br><span class="line">            <span class="string">"-synctex=1"</span>,</span><br><span class="line">            <span class="string">"-interaction=nonstopmode"</span>,</span><br><span class="line">            <span class="string">"-file-line-error"</span>,</span><br><span class="line">            <span class="string">"%DOC%"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"latexmk"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"latexmk"</span>,</span><br><span class="line">        <span class="attr">"args"</span>: [</span><br><span class="line">            <span class="string">"-xelatex"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"bibtex"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"bibtex"</span>,</span><br><span class="line">        <span class="attr">"args"</span>: [</span><br><span class="line">            <span class="string">"%DOCFILE%"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line">"latex-workshop.latex.autoBuild.run": "never",</span><br><span class="line">"latex-workshop.latex.autoClean.run": "never",</span><br><span class="line">"latex-workshop.latex.clean.fileTypes": [</span><br><span class="line">        "*.aux",</span><br><span class="line">        "*.bbl",</span><br><span class="line">        "*.blg",</span><br><span class="line">        "*.idx",</span><br><span class="line">        "*.ind",</span><br><span class="line">        "*.lof",</span><br><span class="line">        "*.lot",</span><br><span class="line">        "*.out",</span><br><span class="line">        "*.toc",</span><br><span class="line">        "*.acn",</span><br><span class="line">        "*.acr",</span><br><span class="line">        "*.alg",</span><br><span class="line">        "*.glg",</span><br><span class="line">        "*.glo",</span><br><span class="line">        "*.gls",</span><br><span class="line">        "*.ist",</span><br><span class="line">        "*.fls",</span><br><span class="line">        "*.log",</span><br><span class="line">        "*.xdv",</span><br><span class="line">        "*.fdb_latexmk",</span><br><span class="line">        <span class="string">"*.synctex.gz"</span></span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<ol>
<li><code>latex-workshop.view.pdf.viewer</code>设置为<code>tab</code>可以在VSCode里查看生成的pdf文件，你也可以选择其他方式；</li>
<li><code>latex-workshop.latex.tools</code>定义你可能需要用到的编译工具，比如<code>latexmk</code>、<code>xelatex</code>、<code>pdflatex</code>等等，这里定义的工具才可以在<code>latex-workshop.latex.recipes</code>里使用，<strong>这里<code>latexmk</code>的参数被修改为<code>-xelatex</code>，与Github上相同</strong>，我这里加入了很多的工具，并不一定全都要用；</li>
<li><code>latex-workshop.latex.recipes</code>定义编译方式，比如<code>latexmk</code>、<code>pdflatex -&gt; bibtex -&gt; pdflatex*2</code>，这里同上，也并不一定全都要用，不同的编译方式会导致最终生成的pdf文件内容存在差异，使用<code>latexmk</code>以外的编译工具编译<a href="https://github.com/ustctug/ustcthesis" target="_blank" rel="noopener">中国科学技术大学学位论文 LaTeX 模板</a>可能会导致pdf中丢失目录以及文献列表等内容，在这里定义的编译方式会在后面显示在VSCode的选项中；</li>
<li><code>latex-workshop.latex.autoBuild.run</code>设置为<code>never</code>是为了避免每次修改完<code>tex</code>文件后自动编译，也可以不设置此参数；</li>
<li><code>latex-workshop.latex.autoClean.run</code>设置为<code>never</code>是为了避免自动清理编译过程产生的临时文件，这里会有一些log文件，也可以不设置此参数。</li>
<li><code>latex-workshop.latex.clean.fileTypes</code>设置需要清理临时文件类型，以各种后缀表示，有些文件可能不需要清理，这个需要自行判断。</li>
</ol>
<h3 id="3-编译论文模板"><a href="#3-编译论文模板" class="headerlink" title="3. 编译论文模板"></a>3. 编译论文模板</h3><p>在<a href="https://github.com/ustctug/ustcthesis" target="_blank" rel="noopener">中国科学技术大学学位论文 LaTeX 模板</a>下载release文件<a href="https://github.com/ustctug/ustcthesis/releases/download/v3.1.06/ustcthesis-v3.1.06.zip" target="_blank" rel="noopener">ustcthesis-v3.1.06.zip</a>，这里面有模板以及样例文件。</p>
<p>文件目录大概如下图，里面某些pdf和tex文件可能不同，但不重要</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/ustcthesis.png" alt="ustcthesis.png"></p>
<p>用VSCode打开模板文件，并打开<code>main.tex</code>文件，这里可以先把<code>main.pdf</code>重命名一下，此时如果之前的步骤都是对的，那么VSCode的左下角会有一个勾的图标，点击后应该如下图</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/recipe.png" alt="recipe.png"></p>
<p>这里会发现之前设置参数时加入的<code>recipe</code>都显示出来，中国科学技术大学学位论文 LaTeX 模板 需要用<code>latexmk</code>编译，所以直接双击<code>Recipe: latexmk</code>编译<code>main.tex</code>，生成<code>main.pdf</code>文件，在编译过程中会提示你缺少某些package，这些package里面有需要的一些样式文件，类似于CSS，弹出的窗口来自于<code>MikTeX Console</code>，点击确定下载即可，可能会需要点很多次，当所有需要的package下载完成后编译也可以继续下去，最后比对一下生成的<code>main.pdf</code>文件内容与重命名之前的<code>main.pdf</code>，看看有没有缺失或者显示不对的地方，如果有，再查找原因，一般来说问题出在缺少某些package。如果需要清理生成的临时文件只需要双击<code>Clean up</code>即可。</p>
<p>这是我生成的pdf文件截图，第一张图我修改为<code>硕士</code>，第二张图生成当前时间。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/1.png" alt="1.png"></p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/2.png" alt="2.png"></p>
<h2 id="Mac环境"><a href="#Mac环境" class="headerlink" title="Mac环境"></a>Mac环境</h2><h3 id="1-安装LaTeX发行版-1"><a href="#1-安装LaTeX发行版-1" class="headerlink" title="1. 安装LaTeX发行版"></a>1. 安装LaTeX发行版</h3><p>在Mac下选择的安装<a href="https://www.tug.org/mactex/" target="_blank" rel="noopener">MacTeX</a>，而MacTeX有几个不同的安装包，一个是<code>MacTeX.pkg</code>，大概3.9G，还有一个是<code>BasicTeX.pkg</code>，大概76M，区别在于前者包括了GUI，大概有4个工具配合使用，后者没有GUI仅提供命令行工具，这里我选择了后者，前者应该也没有区别。</p>
<p>命令行工具为<code>tlmgr</code>，我在运行时需要加<code>sudo</code>，应该是安装路径对一般用户不可写。</p>
<p>然后需要使用<code>tlmgr</code>安装一些package，我们先设置一下镜像源加速下载</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 这是清华镜像源，也可以使用科大镜像源http://mirrors.ustc.edu.cn/CTAN/systems/texlive/tlnet</span></span><br><span class="line">tlmgr option repository https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/tlnet</span><br></pre></td></tr></table></figure>
<p>然后更新自己和所有的package</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo tlmgr update --self --all</span><br></pre></td></tr></table></figure>
<p>最后需要下载<code>latexmk</code>包，Windows不需要应该是MikTeX中已经包含了这个包，而Mac下<code>BasicTeX</code>没有包含，所以需要自己下载。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo tlmgr install latexmk</span><br></pre></td></tr></table></figure>
<h3 id="2-VSCode安装与参数设置-1"><a href="#2-VSCode安装与参数设置-1" class="headerlink" title="2. VSCode安装与参数设置"></a>2. VSCode安装与参数设置</h3><p>安装配置同Windows。</p>
<h3 id="3-编译论文模板-1"><a href="#3-编译论文模板-1" class="headerlink" title="3. 编译论文模板"></a>3. 编译论文模板</h3><p>在Mac上使用<code>latexmk -xelatex main.tex</code>会失败，而且<strong>系统不会像Windows那样提示你需要下载哪些package，每次失败都会告诉你缺少哪个文件，这个在log中是可以看到的，一般来说在<a href="https://www.ctan.org/" target="_blank" rel="noopener">CTAN官网</a><em>搜索缺少的文件</em>就可以知道需要下载哪个package</strong>。</p>
<p>下载package的代码为</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> package_name为包名，比如可能有siunitx...</span></span><br><span class="line">sudo tlmgr install package_name</span><br></pre></td></tr></table></figure>
<p>这些下载的package是可以在<code>/usr/local/texlive/2019basic/texmf-dist/tex/latex</code>下找到的，我的可以正确运行科大LaTeX模板的package截图如下，不想一个一个搜索的可以直接对照下载缺少的package。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/3.png" alt="3.png"></p>
<p>最后同上测试一下能否正确生成pdf文件。</p>
]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
        <tag>LaTeX</tag>
        <tag>Windows</tag>
        <tag>Mac</tag>
        <tag>MacTeX</tag>
        <tag>MikTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习-深度学习中的结构化概率模型</title>
    <url>/archives/e4c77c8d.html</url>
    <content><![CDATA[<p>参考：</p>
<blockquote>
<p><a href="https://github.com/exacity/deeplearningbook-chinese" target="_blank" rel="noopener">《深度学习》第16章 深度学习中的结构化概率模型</a></p>
</blockquote>
<p><strong>结构化概率模型</strong>使用图来描述概率分布中随机变量之间的直接相互作用，从而描述一个概率分布。所以也被称为<strong>图模型</strong>。</p>
<p>图模型中的一个主要难点就是判断哪些变量之间存在直接的相互作用关系，也就是对于给定的问题哪一种图结构是最适合的。</p>
<h2 id="1-非结构化建模的挑战"><a href="#1-非结构化建模的挑战" class="headerlink" title="1. 非结构化建模的挑战"></a>1. 非结构化建模的挑战</h2>]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Theory</tag>
      </tags>
  </entry>
  <entry>
    <title>WGAN</title>
    <url>/archives/7a4d6191.html</url>
    <content><![CDATA[<p>参考：</p>
<blockquote>
<p><a href="https://arxiv.org/abs/1701.04862" target="_blank" rel="noopener">Towards Principled Methods for Training Generative Adversarial Networks</a><br><a href="https://arxiv.org/abs/1701.07875" target="_blank" rel="noopener">Wasserstein GAN</a><br><a href="https://arxiv.org/abs/1704.00028" target="_blank" rel="noopener">Improved Training of Wasserstein GANs</a><br><a href="https://zhuanlan.zhihu.com/p/25071913" target="_blank" rel="noopener">令人拍案叫绝的Wasserstein GAN</a><br><a href="https://github.com/jiamings/wgan" target="_blank" rel="noopener">Wasserstein GANs-Github</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Theory</tag>
        <tag>WGAN</tag>
      </tags>
  </entry>
  <entry>
    <title>DCGAN</title>
    <url>/archives/ef2377d1.html</url>
    <content><![CDATA[<p>参考：</p>
<blockquote>
<p><a href="https://arxiv.org/abs/1511.06434" target="_blank" rel="noopener">Unsupervised Representation Learning with Deep Convolutional Generative Adversarial Networks</a><br><a href="https://arxiv.org/abs/1603.07285" target="_blank" rel="noopener">A guide to convolution arithmetic for deep learning</a><br><a href="https://github.com/carpedm20/DCGAN-tensorflow" target="_blank" rel="noopener">DCGAN-tensorflow</a></p>
</blockquote>
<p>DCGAN，全称 Deep Convolutional Generative Adversarial Networks，深层卷积生成式对抗网路，顾名思义，<br>它是一个GAN模型的同时必定使用了卷积神经网络的结构，最初的GAN是非监督学习的模型，但是CNN通常用于监督学习，这<br>两者如何结合，为什么可以实现非监督条件下对原始图像的学习，且看作者是如何论证的。</p>
<a id="more"></a>
<h2 id="1-DCGAN作者说"><a href="#1-DCGAN作者说" class="headerlink" title="1. DCGAN作者说"></a>1. DCGAN作者说</h2><p>首先作者肯定了GAN的功能：生成多样性样本，生成样本可以用于其他监督学习任务，判别器网络可以被用于一些分类任务（这里我觉得应该只能分真假，而不是分种类）。然后针对GAN训练过程中的常见问题：训练不稳定，提出了深层卷积的结构，最后对卷积核进行了可视化的研究，意图理解卷积核是如何学习到数据特征。</p>
<p>DCGAN的生成器网络结构如下所示，输入是长度为100的随机噪声，输出的是$64 \times 64$大小的图像。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/DCGAN.png" alt="DCGAN.png"></p>
<p>DCGAN结构设计：</p>
<ul>
<li>所有的池化层（pooling）都用卷积层替换，原因：池化在分类任务中的作用是提高卷积核的学习能力，使图像在短距离平移后依然保持原有特征结构，但是在生成器网络中，我们的目的是尽可能地学习原有数据的细节而不需要这种冗余，因此卷积层有利于在上采样过程中学习到数据特征，而对于判别器来说，与分类任务不同的地方在于判别器网络会影响生成器的训练效果，因此判别器也需要使用卷积层替换池化层；</li>
<li>生成器网络的输入是随机噪声$\mathbb{Z}$长度为100，但是并不是直接作为卷积的输入，需要先做矩阵乘法转换为一个4维张量；判别器最后一层通过Flatten然后输入一个Sigmoid分数；</li>
<li>判别器和生成器都在激活函数之前使用BatchNorm，但是生成器最后的输出层以及判别器的输入层不使用；</li>
<li>生成器激活函数维ReLU，输出层tanh；判别器激活函数为LeakyReLU，输出Sigmoid。</li>
</ul>
<p>需要注意的是虽然论文图上第一层是$4 \times 4 \times 1024$，但是在很多实现的代码中是$4 \times 4 \times 512$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># https://github.com/carpedm20/DCGAN-tensorflow</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conv_out_size_same</span><span class="params">(size, stride)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> int(math.ceil(float(size) / float(stride)))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conv_cond_concat</span><span class="params">(x, y)</span>:</span></span><br><span class="line">  <span class="string">"""Concatenate conditioning vector on feature map axis."""</span></span><br><span class="line">  x_shapes = x.get_shape()</span><br><span class="line">  y_shapes = y.get_shape()</span><br><span class="line">  <span class="keyword">return</span> concat([</span><br><span class="line">    x, y*tf.ones([x_shapes[<span class="number">0</span>], x_shapes[<span class="number">1</span>], x_shapes[<span class="number">2</span>], y_shapes[<span class="number">3</span>]])], <span class="number">3</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># DCGAN代码实现中采用了两种形式，一是生成手写数字，二是生成人脸图像，所以这里的生成器</span></span><br><span class="line"><span class="comment"># 由两个部分组成，y_dim为空时生成人脸，否则生成手写数字</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generator</span><span class="params">(self, z, y=None)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">"generator"</span>) <span class="keyword">as</span> scope:</span><br><span class="line">      <span class="comment"># y_dim即手写数字的标签one_hot变量长度，一般是10</span></span><br><span class="line">      <span class="comment"># output_height和output_width对于mnist来说是28，人脸数据集是64</span></span><br><span class="line">      <span class="comment"># batch_size=64, z_dim=100, gf_dim=64, df_dim=64, gfc_dim=1024, dfc_dim=1024, c_dim=3</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> self.y_dim:</span><br><span class="line">        <span class="comment"># 由于此代码基于的TensorFlow的版本较低所以很多高级API当时并没有，因此实现起来显得有些</span></span><br><span class="line">        <span class="comment"># 复杂，如果用新的API应该比较简洁</span></span><br><span class="line">        s_h, s_w = self.output_height, self.output_width <span class="comment"># 64, 64</span></span><br><span class="line">        s_h2, s_w2 = conv_out_size_same(s_h, <span class="number">2</span>), conv_out_size_same(s_w, <span class="number">2</span>) <span class="comment"># 32, 32</span></span><br><span class="line">        s_h4, s_w4 = conv_out_size_same(s_h2, <span class="number">2</span>), conv_out_size_same(s_w2, <span class="number">2</span>) <span class="comment"># 16, 16</span></span><br><span class="line">        s_h8, s_w8 = conv_out_size_same(s_h4, <span class="number">2</span>), conv_out_size_same(s_w4, <span class="number">2</span>) <span class="comment"># 8, 8</span></span><br><span class="line">        s_h16, s_w16 = conv_out_size_same(s_h8, <span class="number">2</span>), conv_out_size_same(s_w8, <span class="number">2</span>) <span class="comment"># 4, 4</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># project `z` and reshape</span></span><br><span class="line">        <span class="comment"># z长度为100，经过矩阵乘法转为长度64 * 8 * 4 * 4 = 8192</span></span><br><span class="line">        self.z_, self.h0_w, self.h0_b = linear(</span><br><span class="line">            z, self.gf_dim*<span class="number">8</span>*s_h16*s_w16, <span class="string">'g_h0_lin'</span>, with_w=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 8192长度的向量reshape为 4 * 4 * 512的张量，这也是与原始论文4 * 4 * 1024不同的地方</span></span><br><span class="line">        <span class="comment"># batch size为64</span></span><br><span class="line">        self.h0 = tf.reshape(</span><br><span class="line">            self.z_, [<span class="number">-1</span>, s_h16, s_w16, self.gf_dim * <span class="number">8</span>])</span><br><span class="line">        <span class="comment"># 激活函数relu，使用batch norm</span></span><br><span class="line">        h0 = tf.nn.relu(self.g_bn0(self.h0))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 然后是四次反卷积，每次输出长宽加倍，通道数减半，最后一层通道数压缩为c_dim，即3，表示输出彩色图像</span></span><br><span class="line">        <span class="comment"># 前三次是relu激活，最后一次是tanh激活，且没有使用batch norm</span></span><br><span class="line">        self.h1, self.h1_w, self.h1_b = deconv2d(</span><br><span class="line">            h0, [self.batch_size, s_h8, s_w8, self.gf_dim*<span class="number">4</span>], name=<span class="string">'g_h1'</span>, with_w=<span class="literal">True</span>)</span><br><span class="line">        h1 = tf.nn.relu(self.g_bn1(self.h1))</span><br><span class="line"></span><br><span class="line">        h2, self.h2_w, self.h2_b = deconv2d(</span><br><span class="line">            h1, [self.batch_size, s_h4, s_w4, self.gf_dim*<span class="number">2</span>], name=<span class="string">'g_h2'</span>, with_w=<span class="literal">True</span>)</span><br><span class="line">        h2 = tf.nn.relu(self.g_bn2(h2))</span><br><span class="line"></span><br><span class="line">        h3, self.h3_w, self.h3_b = deconv2d(</span><br><span class="line">            h2, [self.batch_size, s_h2, s_w2, self.gf_dim*<span class="number">1</span>], name=<span class="string">'g_h3'</span>, with_w=<span class="literal">True</span>)</span><br><span class="line">        h3 = tf.nn.relu(self.g_bn3(h3))</span><br><span class="line"></span><br><span class="line">        h4, self.h4_w, self.h4_b = deconv2d(</span><br><span class="line">            h3, [self.batch_size, s_h, s_w, self.c_dim], name=<span class="string">'g_h4'</span>, with_w=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> tf.nn.tanh(h4)</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># mnist与人脸略有不同，这是由于mnist是带有标签的数据</span></span><br><span class="line">        s_h, s_w = self.output_height, self.output_width <span class="comment"># 28, 28</span></span><br><span class="line">        s_h2, s_h4 = int(s_h/<span class="number">2</span>), int(s_h/<span class="number">4</span>) <span class="comment"># 14, 14</span></span><br><span class="line">        s_w2, s_w4 = int(s_w/<span class="number">2</span>), int(s_w/<span class="number">4</span>) <span class="comment"># 7, 7</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># yb = tf.expand_dims(tf.expand_dims(y, 1),2)</span></span><br><span class="line">        <span class="comment"># yb为图片标签one_hot向量</span></span><br><span class="line">        yb = tf.reshape(y, [self.batch_size, <span class="number">1</span>, <span class="number">1</span>, self.y_dim])</span><br><span class="line">        <span class="comment"># 这里的操作是将随机变量z与one_hot向量直接连接起来，长度为100 + 10 = 110</span></span><br><span class="line">        z = concat([z, y], <span class="number">1</span>)</span><br><span class="line">        print(<span class="string">"yb shape: &#123;&#125;"</span>.format(yb.shape))</span><br><span class="line">        <span class="comment"># yb shape: (64, 1, 1, 10)</span></span><br><span class="line">        print(<span class="string">"y shape: &#123;&#125;"</span>.format(y.shape))</span><br><span class="line">        <span class="comment"># y shape: (64, 10)</span></span><br><span class="line">        print(<span class="string">"z shape: &#123;&#125;"</span>.format(z.shape))</span><br><span class="line">        <span class="comment"># z shape: (64, 110)</span></span><br><span class="line">        <span class="comment"># 矩阵乘法将110长度转为1024</span></span><br><span class="line">        h0 = tf.nn.relu(</span><br><span class="line">            self.g_bn0(linear(z, self.gfc_dim, <span class="string">'g_h0_lin'</span>)))</span><br><span class="line">        <span class="comment"># 然后继续将one_hot连接到向量变为1034</span></span><br><span class="line">        h0 = concat([h0, y], <span class="number">1</span>)</span><br><span class="line">        print(<span class="string">"h0 shape: &#123;&#125;"</span>.format(h0.shape))</span><br><span class="line">        <span class="comment"># h0 shape: (64, 1034)</span></span><br><span class="line">        <span class="comment"># 再将1034长度转为64 * 2 * 14 * 14为后面反卷积做准备</span></span><br><span class="line">        h1 = tf.nn.relu(self.g_bn1(</span><br><span class="line">            linear(h0, self.gf_dim*<span class="number">2</span>*s_h4*s_w4, <span class="string">'g_h1_lin'</span>)))</span><br><span class="line">        h1 = tf.reshape(h1, [self.batch_size, s_h4, s_w4, self.gf_dim * <span class="number">2</span>])</span><br><span class="line">        <span class="comment"># 再一次将one_hot变量添加到张量中</span></span><br><span class="line">        h1 = conv_cond_concat(h1, yb)</span><br><span class="line">        print(<span class="string">"h1 shape: &#123;&#125;"</span>.format(h1.shape))</span><br><span class="line">        <span class="comment"># h1 shape: (64, 7, 7, 138)</span></span><br><span class="line"></span><br><span class="line">        h2 = tf.nn.relu(self.g_bn2(deconv2d(h1,</span><br><span class="line">            [self.batch_size, s_h2, s_w2, self.gf_dim * <span class="number">2</span>], name=<span class="string">'g_h2'</span>)))</span><br><span class="line">        <span class="comment"># 再一次将one_hot变量添加到张量中</span></span><br><span class="line">        h2 = conv_cond_concat(h2, yb)</span><br><span class="line">        print(<span class="string">"h2 shape: &#123;&#125;"</span>.format(h2.shape))</span><br><span class="line">        <span class="comment"># h2 shape: (64, 14, 14, 138)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># mnist为灰度图像，所以c_dim为1，最后一层sigmoid激活，没有batch norm</span></span><br><span class="line">        <span class="keyword">return</span> tf.nn.sigmoid(</span><br><span class="line">            deconv2d(h2, [self.batch_size, s_h, s_w, self.c_dim], name=<span class="string">'g_h3'</span>))</span><br></pre></td></tr></table></figure>
<p>对于有标签的mnist数据集，生成器网络试图尽可能地将标签信息传到每一层张量中（这个很值得思考），最后一层不适用batch norm是<br>因为需要生成多样化的样本，如果batch norm了那么整个batch的样本就会丢失多样性。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lrelu</span><span class="params">(x, leak=<span class="number">0.2</span>, name=<span class="string">"lrelu"</span>)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> tf.maximum(x, leak*x)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">discriminator</span><span class="params">(self, image, y=None, reuse=False)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">"discriminator"</span>) <span class="keyword">as</span> scope:</span><br><span class="line">      <span class="keyword">if</span> reuse:</span><br><span class="line">        scope.reuse_variables()</span><br><span class="line">      <span class="comment"># 判别器也分为两部分，前面是人脸判别器，后面是mnist判别器</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> self.y_dim:</span><br><span class="line">        <span class="comment"># 激活函数是Leaky ReLU，image大小为108 * 108 * 3，卷积步长为2，所以每次卷积长宽减半，向上取整</span></span><br><span class="line">        <span class="comment"># 第一层和最后一层没有batch norm</span></span><br><span class="line">        h0 = lrelu(conv2d(image, self.df_dim, name=<span class="string">'d_h0_conv'</span>)) <span class="comment"># 54 * 54 * 64</span></span><br><span class="line">        h1 = lrelu(self.d_bn1(conv2d(h0, self.df_dim*<span class="number">2</span>, name=<span class="string">'d_h1_conv'</span>))) <span class="comment"># 27 * 27 * 128</span></span><br><span class="line">        h2 = lrelu(self.d_bn2(conv2d(h1, self.df_dim*<span class="number">4</span>, name=<span class="string">'d_h2_conv'</span>))) <span class="comment"># 14 * 14 * 256</span></span><br><span class="line">        h3 = lrelu(self.d_bn3(conv2d(h2, self.df_dim*<span class="number">8</span>, name=<span class="string">'d_h3_conv'</span>))) <span class="comment"># 7 * 7 * 512</span></span><br><span class="line">        <span class="comment"># h4通过reshape和矩阵乘法将长度为25088输出为长度为1的结果</span></span><br><span class="line">        h4 = linear(tf.reshape(h3, [self.batch_size, <span class="number">-1</span>]), <span class="number">1</span>, <span class="string">'d_h4_lin'</span>) <span class="comment"># 25088 -&gt; 1</span></span><br><span class="line">        <span class="comment"># 返回两部分，一是判别为真的概率sigmiod，一是计算结果</span></span><br><span class="line">        <span class="keyword">return</span> tf.nn.sigmoid(h4), h4</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># yb为one_hot向量，mnist为灰度图像，channel为1</span></span><br><span class="line">        yb = tf.reshape(y, [self.batch_size, <span class="number">1</span>, <span class="number">1</span>, self.y_dim])</span><br><span class="line">        x = conv_cond_concat(image, yb)</span><br><span class="line">        print(<span class="string">"image shape: &#123;&#125;"</span>.format(image.shape))</span><br><span class="line">        <span class="comment"># image shape: (64, 28, 28, 1)</span></span><br><span class="line">        print(<span class="string">"x shape: &#123;&#125;"</span>.format(x.shape))</span><br><span class="line">        <span class="comment"># x shape: (64, 28, 28, 11)</span></span><br><span class="line"></span><br><span class="line">        h0 = lrelu(conv2d(x, self.c_dim + self.y_dim, name=<span class="string">'d_h0_conv'</span>))</span><br><span class="line">        h0 = conv_cond_concat(h0, yb)</span><br><span class="line">        print(<span class="string">"h0 shape: &#123;&#125;"</span>.format(h0.shape))</span><br><span class="line">        <span class="comment"># h0 shape: (64, 14, 14, 21)</span></span><br><span class="line"></span><br><span class="line">        h1 = lrelu(self.d_bn1(conv2d(h0, self.df_dim + self.y_dim, name=<span class="string">'d_h1_conv'</span>)))</span><br><span class="line">        h1 = tf.reshape(h1, [self.batch_size, <span class="number">-1</span>])      </span><br><span class="line">        h1 = concat([h1, y], <span class="number">1</span>)</span><br><span class="line">        print(<span class="string">"h1 shape: &#123;&#125;"</span>.format(h1.shape))</span><br><span class="line">        <span class="comment"># h1 shape: (64, 3636)</span></span><br><span class="line"></span><br><span class="line">        h2 = lrelu(self.d_bn2(linear(h1, self.dfc_dim, <span class="string">'d_h2_lin'</span>)))</span><br><span class="line">        h2 = concat([h2, y], <span class="number">1</span>)</span><br><span class="line">        print(<span class="string">"h2 shape: &#123;&#125;"</span>.format(h2.shape))</span><br><span class="line">        <span class="comment"># h2 shape: (64, 1034)</span></span><br><span class="line"></span><br><span class="line">        h3 = linear(h2, <span class="number">1</span>, <span class="string">'d_h3_lin'</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> tf.nn.sigmoid(h3), h3</span><br></pre></td></tr></table></figure>
<p>mnist判别器在计算过程中也加入了标签数据，使用AdamOptimizer。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.G                  = self.generator(self.z, self.y)</span><br><span class="line">self.D, self.D_logits   = self.discriminator(inputs, self.y, reuse=<span class="literal">False</span>) <span class="comment"># 真实数据</span></span><br><span class="line">self.D_, self.D_logits_ = self.discriminator(self.G, self.y, reuse=<span class="literal">True</span>) <span class="comment"># 生成样本</span></span><br><span class="line"></span><br><span class="line">self.d_loss_real = tf.reduce_mean(</span><br><span class="line">  sigmoid_cross_entropy_with_logits(self.D_logits, tf.ones_like(self.D)))</span><br><span class="line">self.d_loss_fake = tf.reduce_mean(</span><br><span class="line">  sigmoid_cross_entropy_with_logits(self.D_logits_, tf.zeros_like(self.D_)))</span><br><span class="line"></span><br><span class="line">self.g_loss = tf.reduce_mean(</span><br><span class="line">  sigmoid_cross_entropy_with_logits(self.D_logits_, tf.ones_like(self.D_)))   </span><br><span class="line"></span><br><span class="line">self.d_loss = self.d_loss_real + self.d_loss_fake</span><br></pre></td></tr></table></figure>
<h2 id="2-卷积与反卷积"><a href="#2-卷积与反卷积" class="headerlink" title="2. 卷积与反卷积"></a>2. 卷积与反卷积</h2><h3 id="2-1-卷积"><a href="#2-1-卷积" class="headerlink" title="2.1 卷积"></a>2.1 卷积</h3><p>参考<a href="https://mr7ldu.coding-pages.com/archives/c6767314.html" target="_blank" rel="noopener">卷积神经网络</a></p>
<script type="math/tex; mode=display">
\mathbb{X} = 

\left[
\begin{matrix}
x_{00} & x_{01} & x_{02} & x_{03} \\
x_{10} & x_{11} & x_{12} & x_{13} \\
x_{20} & x_{21} & x_{22} & x_{23} \\
x_{30} & x_{31} & x_{32} & x_{33}
\end{matrix}
\right]</script><script type="math/tex; mode=display">
\mathbb{Y} = 

\left[
\begin{matrix}
y_{00} & y_{01} \\
y_{10} & y_{11} 
\end{matrix}
\right]</script><script type="math/tex; mode=display">
\mathbb{W} = 

\left[
\begin{matrix}
w_{00} & w_{01} & w_{02}\\
w_{10} & w_{11} & w_{12}\\
w_{20} & w_{21} & w_{22}
\end{matrix}
\right]</script><!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/conv.png" alt="conv.png"></p>
<p>假定我们的输入矩阵为$\mathbb{X}, 4 \times 4$，输出矩阵为$\mathbb{Y}, 2 \times 2$，卷积核为$\mathbb{W}, 3 \times 3$，则我们的卷积变换可以理解为矩阵相乘得到的，我们定义的乘积矩阵$\mathbb{C}$为：</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/c.png" alt="c.png"></p>
<p>并且将矩阵$\mathbb{X}$和矩阵$\mathbb{Y}$整理为一列，即</p>
<script type="math/tex; mode=display">
\mathbb{X} = [x_{00} , x_{01} , x_{02} , x_{03} ,
x_{10} , x_{11} , x_{12} , x_{13} ,
x_{20} , x_{21} , x_{22} , x_{23} ,
x_{30} , x_{31} , x_{32} , x_{33}]^T \\

\mathbb{Y} = [y_{00} , y_{01} , y_{10} , y_{11} ]^T</script><p>则卷积变换等价于</p>
<script type="math/tex; mode=display">
\mathbb{Y} = \mathbb{C} \times \mathbb{X}</script><p>很显然反卷积（转置卷积）就是这个过程的逆过程，我们需要通过$\mathbb{Y}$还原得到$\mathbb{X}$</p>
<script type="math/tex; mode=display">
\mathbb{X} = \mathbb{C}^T \times \mathbb{Y}</script><p>需要注意的是这里的还原并不是逆矩阵还原数值，而是通过转置矩阵$\mathbb{C}^T$进行结构还原，在实际使用中我们并不需要直到原始矩阵$\mathbb{C}$的参数。</p>
<h3 id="2-2-反卷积"><a href="#2-2-反卷积" class="headerlink" title="2.2 反卷积"></a>2.2 反卷积</h3><p>反卷积（Transposed convolution或者deconvolution），transposed本意是转置的意思，常见于转置矩阵，但是这里还是用反卷积来翻译。反卷积与卷积操作实际上都是进行卷积操作，只是中间的卷积策略稍有不同，并不是说反卷积一定是某个卷积操作的逆过程。常见的卷积操作可以使图片被压缩为一串特征向量（feature map），那么反卷积就是将特征向量还原为图片，这里的还原不是图像数据的还原，而是图像结构的还原，即维度、长度、宽度的近似还原。</p>
<p>如果按照卷积操作的方式来进行反卷积，必然存在需要填充0的情况，如下图所示，但是这种$s = 1$的条件下，左上、左下、右上、右下的点仅受到单个原始数据的影响</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/deconv.png" alt="deconv.png"></p>
<p>如果在$s = 2$的条件下，原始数据之间被填充了0，此时如果卷积核足够大，四角的数据是会受到多个原始数据的影响，因此一般来说都会使用stride控制0填充</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/deconv1.png" alt="deconv1.png"></p>
<h3 id="2-3-扩张卷积"><a href="#2-3-扩张卷积" class="headerlink" title="2.3 扩张卷积"></a>2.3 扩张卷积</h3><p>扩张卷积（dilated convolutions或者atrous convolutions），也属于卷积的一种形式，它在原始卷积的基础上加入了一个dilation参数，用于控制在原始数据中进行计算的间隔，作用是增加感受野。在WaveNet有应用，用于</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/dilaconv.png" alt="dilaconv.png"></p>
]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Theory</tag>
        <tag>DCGAN</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习-表示学习</title>
    <url>/archives/ec76f9d.html</url>
    <content><![CDATA[<p>参考：</p>
<blockquote>
<p><a href="https://github.com/exacity/deeplearningbook-chinese" target="_blank" rel="noopener">《深度学习》第15章 表示学习</a></p>
</blockquote>
<p>表示学习类似于找到更好的数据表示形式，比如在算术运算过程中使用阿拉伯数字而不是使用罗马数字，虽然两者的含义相同，但是在手写运算的过程中，阿拉伯数字更具优势，我们可以把计算当作后续任务，把以哪种形式表示当作前馈任务，通过表示学习的方法，学习到最优的表示。因此，表示学习可以用于非监督学习或者半监督学习任务中，用于学习到数据潜在的表示形式，便于后续任务的进行。</p>
<a id="more"></a>
<h2 id="1-贪心逐层无监督预训练"><a href="#1-贪心逐层无监督预训练" class="headerlink" title="1. 贪心逐层无监督预训练"></a>1. 贪心逐层无监督预训练</h2><p>贪心逐层无监督预训练依赖于单层表示学习算法，例如RBM、单层自编码器、稀疏编码模型或其他学习潜在表示的模型。每一层使用无监督学习预训练，将前一层的输出作为输入，输出数据的新的表示。这个新的表示的分布（或者是和其他变量比如要预测类别的关系）有可能是更简单的。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/1de14d55d247de5b3.png" alt="1de14d55d247de5b3.png"></p>
<p>贪心逐层无监督预训练的几个标志性特点：</p>
<ul>
<li>贪心：基于贪心算法，每次仅优化当前的一层网络，对后续的网络情况不需要了解；</li>
<li>逐层：预训练过程通常包括一个多层的神经网络，保持前面的网络层的参数不变，每次训练一层，并将训练完的输出作为下一层的输入；</li>
<li>无监督：每一层都是使用无监督学习算法。</li>
</ul>
<p>因此它被称为预训练，我们可以在很多论文中发现作者会使用这种逐层的预训练的方式进行网络的初始化。在监督学习任务中，它可以被看作是正则化项（在一些实验中，预训练不能降低训练误差，但能降低测试误差）和参数初始化的一种形式。</p>
<p>我们也可以进行贪心逐层监督预训练。这是建立在训练浅层模型比深度模型更容易的前提下，而该前提似乎在一些情况下已被证实。</p>
<h3 id="1-1-何时以及为何无监督预训练有效？"><a href="#1-1-何时以及为何无监督预训练有效？" class="headerlink" title="1.1 何时以及为何无监督预训练有效？"></a>1.1 何时以及为何无监督预训练有效？</h3><p>在很多分类任务中，贪心逐层无监督预训练能够在测试误差上获得重大提升。</p>
<p>然而，在很多其他问题上，无监督预训练不能带来改善，甚至还会带来明显的负面影响。</p>
<p>无监督预训练结合了两种不同的想法：</p>
<ol>
<li>利用深度神经网络对初始参数的选择，可以对模型有着显著的正则化效果（在较小程度上，可以改进优化）的想法；</li>
<li>学习输入分布有助于学习从输入到输出的映射。</li>
</ol>
<p>第一个想法，我们知道神经网络的训练过程本质上是一个寻找最优解的过程，在空间中等价于找到那个最低点，而从不同的起点出发，随着梯度下降的作用，我们可能得到的是一个局部极小值而不是全局最小值，通过无监督预训练，我们可以获取此阶段提取的数据的某些信息，若这些信息对我们的训练目标有用，那么训练起点会处于一个相对较优的位置。但是也有可能陷入一个非常不好的处境，比如代价函数无法进一步下降或下降很少，因此现代方法通常<strong>同时</strong>使用无监督学习和监督学习，而不是依序使用两个学习阶段。</p>
<p>为了保持无监督学习阶段提取的信息，可以固定特征提取器的参数，仅仅将监督学习作为顶层学成特征的分类器。</p>
<p>第二个想法，即学习算法可以使用无监督阶段学习的信息，在监督学习的阶段表现得更好。其基本想法是对于无监督任务有用的一些特征对于监督学习任务也可能是有用的。例如，如果我们训练汽车和摩托车图像的生成模型，它需要知道轮子的概念，以及一张图中应该有多少个轮子。如果我们幸运的话，无监督阶段学习的轮子表示会适合于监督学习。同时这也印证了为什么<strong>同时</strong>使用无监督学习和监督学习-输出层施加的约束很自然地从一开始就包括在内。</p>
<p>无监督学习表示的一个重要例子就是词嵌入（word embeding）。使用one-hot向量表示的词并不具有很多信息，这是因为两个one-hot向量之间的距离都是相同的。</p>
<p>学成的词嵌入自然会用它们彼此之间的距离来编码词之间的相似性。因此，无监督预训练在处理单词时特别有用。然而在处理图像时是不太有用的，可能是因为图像已经在一个很丰富的向量空间中，其中的距离只能提供低质量的相似性度量。</p>
<p>何时预训练效果最好——预训练的网络越深，测试误差的均值和方差下降得越多。值得注意的是，这些实验是在训练非常深层网络的现代方法发明和流行（整流线性单元，Dropout 和批标准化）之前进行的，因此对于无监督预训练与当前方法的结合，我们所知甚少。</p>
<p>与无监督学习的其他形式相比，无监督预训练的缺点是其使用了两个单独的训练阶段。很多正则化技术都具有一个优点，允许用户通过调整单一超参数的值来控制正则化的强度。无监督预训练没有一种明确的方法来调整无监督阶段正则化的强度。相反，无监督预训练有许多超参数，但其效果只能之后度量，通常难以提前预测。当我们同时执行无监督和监督学习而不使用预训练策略时，会有单个超参数（通常是附加到无监督代价的系数）控制无监督目标正则化监督模型的强度。减少该系数，总是能够可预测地获得较少正则化强度。在无监督预训练的情况下，没有一种灵活调整正则化强度的方式——要么监督模型初始化为预训练的参数，要么不是。</p>
<h2 id="2-迁移学习和领域自适应"><a href="#2-迁移学习和领域自适应" class="headerlink" title="2. 迁移学习和领域自适应"></a>2. 迁移学习和领域自适应</h2><p>迁移学习和领域自适应指的是利用一个情景（例如，分布P1）中已经学到的内容去改善另一个情景（比如分布P2）中的泛化情况。这点概括了上一节提出的想法，即在无监督学习任务和监督学习任务之间转移表示。</p>
<p><strong>迁移学习</strong>，举个简单的例子，TensorFlow.keras中包括很多训练好的模型，比如VGG16、ResNet等等，这些模型都是在ImageNet数据集上训练得到的，如果我们把这些模型拿来对猫狗进行分类任务，这就是迁移学习。甚至是ImageNet中并不包括的种类，我们也可以利用训练好的模型进行迁移学习，这是因为许多视觉类别共享一些低级概念，比如边缘、视觉形状、几何变化、光照变化的影响等等。</p>
<p>一般而言，当存在对不同情景或任务有用特征时，并且这些特征对应多个情景出现的潜在因素，迁移学习、多任务学习和领域自适应可以使用表示学习来实现。</p>
<p>然而，有时不同任务之间共享的不是输入的语义，而是输出的语义。例如，语音识别系统需要在输出层产生有效的句子，但是输入附近的较低层可能需要识别相同音素或子音素发音的非常不同的版本（这取决于说话人）。在这样的情况下，共享神经网络的上层（输出附近）和进行任务特定的预处理是有意义的。</p>
<p><strong>领域自适应</strong>，即目标任务是相同的，但是输入分布不同。例如，考虑情感分析的任务，如判断一条评论是表达积极的还是消极的情绪。网上的评论有许多类别。在书、视频和音乐等媒体内容上训练的顾客评论情感预测器，被用于分析诸如电视机或智能电话的消费电子产品的评论时，领域自适应情景可能会出现。</p>
<p>对于监督训练来说，由于语句的词汇和风格不同，且并没有出现在训练集中，那么很有可能在领域自适应的情况下得不到正确的结果，但是对于无监督学习来说，它能够将正面、中性、负面评价的潜在特征学习到，从而能够用于领域自适应。</p>
<p><strong>概念漂移</strong>，指的是数据分布随时间为逐渐变化。一般可以将其视为多任务学习的特定形式，在所有这些情况下，我们的目标是利用第一个情景下的数据，提取那些在第二种情景中学习时或直接进行预测时可能有用的信息。表示学习的核心思想是相同的表示可能在两种情景中都是有用的。两个情景使用相同的表示，使得表示可以受益于两个任务的训练数据。</p>
<p>迁移学习有两种极端的形式：</p>
<ol>
<li><strong>一次学习</strong>，只有一个标注样本的迁移任务被称为一次学习，看起来很不可思议，但是如果考虑表示空间已经学习的非常好了，那么在表示空间中，聚集在标注样本周围的点应该具有相同的标签；</li>
<li><strong>零次学习</strong>，没有标注样本的迁移任务被称为零次学习，举个例子，学习器已经读取了大量文本，然后要解决对象识别的问题。如果文本足够好地描述了对象，那么即使没有看到某对象的图像，也能识别出该对象的类别。例如，已知猫有四条腿和尖尖的耳朵，那么学习器可以在没有见过猫的情况下猜测该图像中是猫。</li>
</ol>
<p>当然上述学习并不是没有约束的，只有在训练时使用了额外的信息，零数据学习和零次学习才是有可能的。在我们的例子中，没有提前看到猫的图像而去识别猫，所以拥有一些未标注文本数据包含句子诸如“猫有四条腿”或“猫有尖耳朵”，对于学习非常有帮助。</p>
<p>零次学习是迁移学习的一种特殊形式。同样的原理可以解释如何能执行多模态学习，学习两种模态的表示，和一种模态中的观察结果$\boldsymbol{x}$与另一种模态中的观察结果$\boldsymbol{y}$组成的对$(\boldsymbol{x, y})$之间的关系（通常是一个联合分布）。通过学习所有的三组参数（从$\boldsymbol{x}$到它的表示、从$\boldsymbol{y}$到它的表示，以及两个表示之间的关系），一个表示中的概念被锚定在另一个表示中，反之亦然，从而可以有效地推广到新的对组。这个过程可以用下图展示</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/2785d6f8e4c581049.png" alt="2785d6f8e4c581049.png"></p>
<h2 id="3-半监督解释因果关系"><a href="#3-半监督解释因果关系" class="headerlink" title="3. 半监督解释因果关系"></a>3. 半监督解释因果关系</h2><p><em>什么原因能使一个表示比另一个表示更好？</em></p>
<p>一种假设是，理想表示中的特征对应到观测数据的潜在成因，特征空间中不同的特征或方向对应着不同的原因，从而表示能够区分这些原因。</p>
<p>可以参考受限玻尔兹曼机RBM和混合高斯模型GMM，对于输入$\boldsymbol{x}$来说，若它属于某种混合分布，而对应的目标$\boldsymbol{y}$属于其中的混合分量，那么通过无监督学习，我们可以找到一个非常好的表示空间用于描述输入$\boldsymbol{x}$。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/3733d48f1827dfc38.png" alt="3733d48f1827dfc38.png"></p>
<p>关于上述成立的条件是，大多数观察是由极其大量的潜在成因形成的。半监督学习的一个重要研究前沿是确定每种情况下要编码什么。目前，处理大量潜在原因的两个主要策略是，同时使用无监督学习和监督学习信号，从而使得模型捕获最相关的变动因素，或是使用纯无监督学习学习更大规模的表示。</p>
<p>无监督学习的另一个思路是选择一个更好的确定哪些潜在因素最为关键的定义。这个问题就很突出了，潜在因素有很多，甚至说我们并不能预先知道潜在因素有哪些或者有多少，但是我们需要确定哪些潜在因素最为关键，而放弃掉那些不重要的因素。</p>
<p>例如，图像像素的均方误差隐式地指定，一个潜在因素只有在其显著地改变大量像素的亮度时，才是重要影响因素。如果我们希望解决的问题涉及到小对象之间的相互作用，那么这将有可能遇到问题。在机器人任务中，自编码器未能学习到编码小乒乓球。同样是这个机器人，它可以成功地与更大的对象进行交互（例如棒球，均方误差在这种情况下很显著）。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/4.png" alt="4.png"></p>
<p>这就与生成式对抗网络有很大的联系了，具体参考生成式对抗网络。生成式对抗网络只是确定应该表示哪些因素的一小步。我们期望未来的研究能够发现更好的方式来确定表示哪些因素，并且根据任务来开发表示不同因素的机制。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/5.png" alt="5.png"></p>
<h2 id="4-分布式表示"><a href="#4-分布式表示" class="headerlink" title="4. 分布式表示"></a>4. 分布式表示</h2><p><strong>分布式表示</strong>，它的含义是由很多元素组合的表示，这些元素之间可以设置成可分离的，简而言之就是对于我们需要考察的任务，我们都以具有$k$个值的$n$个特征去描述，总共我们就可以描述$k^n$个不同的概念。</p>
<p>分布式表示是表示学习最重要的工具之一。就神经网络而言，隐藏神经元即利用了分布式表示的策略；就概率模型而言，潜变量也是利用了分布式表示的策略。我们之所以使用了这些隐藏神经元或潜变量，是因为如果表示空间足够大，我们必定能够以某种方式找到任务在表示空间中的方向。</p>
<p>以$n$维二元向量为例，有$2^n$种配置，每一种都对应输入空间中的一个不同区域。这与符号表示类似但是不同，比如说字典中有$n$个符号，以one-hot向量表示，那么每一个字典里的符号都是一个唯一的$n$维二元向量。但是仅需要$n$个不同的区域而不是$2^n$，因此符号表示是非分布式表示类中的一个具体示例，它可以包含很多条目，但是每个条目没有显著意义的单独控制作用。</p>
<p>与此类似的基于非分布式表示的学习算法有：</p>
<ul>
<li>聚类算法，包含k-means算法：每个输入点恰好分配一个类别。</li>
<li>k-最近邻算法：给定一个输入，一个或几个模板或原型样本与之关联。</li>
<li>决策树：给定输入时，只有一个叶节点是被激活的。</li>
<li>高斯混合体和专家混合体：模板（聚类中心）或专家关联一个激活的程度。</li>
<li>具有高斯核（或其他类似的局部核）的核机器：尽管每个“支持向量”或模板样本的激活程度是连续值，但仍然会出现和高斯混合体相同的问题。</li>
<li>基于n-gram的语言或翻译模型：根据后缀的树结构划分上下文集合（符号序列）。</li>
</ul>
<p>基于分布式表示的示例：</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/7.png" alt="7.png"></p>
<p>基于非分布式表示的示例：</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/8.png" alt="8.png"></p>
<p>将分布式表示和符号表示区分开来的一个重要概念是，<strong>由不同概念之间的共享属性而产生的泛化</strong>。比如对于“猫”和“狗”，如果作为符号表示，那么“猫”、“狗”之间的距离与其他任何符号的距离都是相同的，可以理解为one-hot向量，但是若作为分布式表示，我们将以“具有皮毛”、“腿的数目”等特征作为表示空间，那么“猫”、“狗”之间的距离与其他对象的距离就是不同的，比如“房屋”，因为在某些特征上“猫”、“狗”更加接近，从而导致以分布式表示的效果比符号表示更好。这里就不得不说<strong>词嵌入</strong>，在语言模型上，词嵌入比one-hot表示更加优秀。分布式表示具有丰富的相似性空间，语义上相近的概念（或输入）在距离上接近，这是纯粹的符号表示所缺少的特点。</p>
<p>在学习算法中使用分布式表示何时以及为什么具有统计优势？当一个明显复杂的结构可以用较少参数紧致地表示时，分布式表示具有统计上的优点。</p>
<p>对于上图分布式表示的示例，我们可以通过对输入的线性函数进行阈值处理来提取二元特征。那么可以将空间划分的数量为：</p>
<script type="math/tex; mode=display">
\sum^d_{j=0} \binom{n}{j} = O(n^d)</script><p>显然，关于输入大小呈指数级增长，关于隐藏单元的数量呈多项式级增长。</p>
<p>这提供了分布式表示泛化能力的一种几何解释：$O(nd)$个参数能够明确表示输入空间中$O(n^d)$个不同区域。这也就意味着使用更少的参数来表示模型，只需要更少的训练样本就可以获得比非分布式表示更好的泛化。</p>
<p>另一种解释基于分布式表示的模型泛化能力更好的说法是，尽管能够，明确地编码这么多不同的区域，但它们的容量仍然是有限的。</p>
<p>在实践中，隐藏单元并不能总是学习出具有简单语言学名称的事物，但有趣的是，这些事物会在那些最好的计算机视觉深度网络的顶层附近出现。这些特征的共同之处在于，我们可以设想学习其中的每个特征不需要知道所有其他特征的所有配置。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/6.png" alt="6.png"></p>
<h2 id="5-得益于深度的指数增益"><a href="#5-得益于深度的指数增益" class="headerlink" title="5. 得益于深度的指数增益"></a>5. 得益于深度的指数增益</h2><p>多层感知机是万能近似器相比于浅层网络，一些函数能够用指数级小的深度网络表示。缩小模型规模能够提高统计效率。</p>
<p>在许多不同情景中已经证明，非线性和重用特征层次结构的组合来组织计算，可以使分布式表示获得指数级加速之外，还可以获得统计效率的指数级提升。许多种类的只有一个隐藏层的网络（例如，具有饱和非线性，布尔门，和/积，或RBF 单元的网络）都可以被视为万能近似器。在给定足够多隐藏单元的情况下，这个模型族是一个万能近似器，可以在任意非零允错级别近似一大类函数（包括所有连续函数）。然而，隐藏单元所需的数量可能会非常大。</p>
<h2 id="6-提供发现潜在原因的线索"><a href="#6-提供发现潜在原因的线索" class="headerlink" title="6. 提供发现潜在原因的线索"></a>6. 提供发现潜在原因的线索</h2><p><strong>什么原因能够使一个表示比另一个表示更好？</strong></p>
<p>一个理想的表示能够区分生成数据变化的潜在因果因子，特别是那些与我们的应用相关的因素。表示学习的大多数策略都会引入一些有助于学习潜在变差因素的线索。这些线索可以帮助学习器将这些观察到的因素与其他因素分开。</p>
<p>诸如没有免费午餐定理的这些结果表明，正则化策略对于获得良好泛化是很有必要的。当不可能找到一个普遍良好的正则化策略时，深度学习的一个目标是找到一套相当通用的正则化策略，使其能够适用于各种各样的AI 任务（类似于人和动物能够解决的任务）。</p>
<p>在此，我们提供了一些通用正则化策略的列表。该列表显然是不详尽的，但是给出了一些学习算法是如何发现对应潜在因素的特征的具体示例。</p>
<ul>
<li>平滑：假设对于单位$\boldsymbol{d}$和小量$\epsilon$有$f(\boldsymbol{x} + \epsilon \boldsymbol{d}) \approx f(\boldsymbol{x})$。这个假设允许学习器从训练样本泛化到输入空间中附近的点。许多机器学习算法都利用了这个想法，但它不能克服维数灾难难题。</li>
<li>线性：很多学习算法假定一些变量之间的关系是线性的。这使得算法能够预测远离观测数据的点，但有时可能会导致一些极端的预测。大多数简单的学习算法不会做平滑假设，而会做线性假设。这些假设实际上是不同的，具有很大权重的线性函数在高维空间中可能不是非常平滑的。</li>
<li>多个解释因子：许多表示学习算法受以下假设的启发，数据是由多个潜在解释因子生成的，并且给定每一个因子的状态，大多数任务都能轻易解决。</li>
<li>因果因子：该模型认为学成表示所描述的变差因素是观察数据x 的成因，而并非反过来。</li>
<li>深度，或者解释因子的层次组织：高级抽象概念能够通过将简单概念层次化来定义。从另一个角度来看，深度架构表达了我们认为任务应该由多个程序步骤完成的观念，其中每一个步骤回溯到先前步骤处理之后的输出。</li>
<li>任务间共享因素：当多个对应到不同变量$y_i$的任务共享相同的输入$\boldsymbol{x}$时，或者当每个任务关联到全局输入$\boldsymbol{x}$的子集或者函数$f^{(i)}(\boldsymbol{x})$时，我们会假设每个变量$y_i$关联到来自相关因素$\boldsymbol{h}$公共池的不同子集。</li>
<li>流形：概率质量集中，并且集中区域是局部连通的，且占据很小的体积。在连续情况下，这些区域可以用比数据所在原始空间低很多维的低维流形来近似。</li>
<li>自然聚类：很多机器学习算法假设输入空间中每个连通流形可以被分配一个单独的类。数据分布在许多个不连通的流形上，但相同流形上数据的类别是相同的。这个假设激励了各种学习算法，包括正切传播、双反向传播、流形正切分类器和对抗训练。</li>
<li>时间和空间相干性：慢特征分析和相关的算法假设，最重要的解释因子随时间变化很缓慢，或者至少假设预测真实的潜在解释因子比预测诸如像素值这类原始观察会更容易些。</li>
<li>稀疏性：假设大部分特征和大部分输入不相关，如在表示猫的图像时，没有必要使用象鼻的特征。因此，我们可以强加一个先验，任何可以解释为“存在”或“不存在”的特征在大多数时间都是不存在的。</li>
<li>简化因子依赖：在良好的高级表示中，因子会通过简单的依赖相互关联。比如边缘独立。</li>
</ul>
]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Theory</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrapy-古诗词数据</title>
    <url>/archives/7a5a343a.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>降维与度量学习</title>
    <url>/archives/c7795c7c.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>聚类</title>
    <url>/archives/186e9376.html</url>
    <content><![CDATA[<p><strong>物以类聚</strong></p>
<p>参考：</p>
<blockquote>
<p>西瓜书第9章 聚类</p>
</blockquote>
<h2 id="1-聚类任务"><a href="#1-聚类任务" class="headerlink" title="1. 聚类任务"></a>1. 聚类任务</h2><p>聚类在无监督学习任务中研究最为广泛，从字面上理解就是具有类似特征（取决于目标）的数据可能会在某个样本空间中呈现聚集的状态（可以是原始样本空间也就可以是映射后的样本空间）。聚类试图将数据集中的样本划分为若干个通常是不相交的子集，每个子集成为一个“簇”（cluster）。</p>
<p>形式化地说，假定样本集$D = { \boldsymbol{x}<em>1, \boldsymbol{x}_2,…,\boldsymbol{x}_m }$包含$m$个无标记样本，每个样本$\boldsymbol{x}_i = (x</em>{i1};x<em>{i2};…;x</em>{in})$是一个$n$维特征向量，则聚类算法将样本集$D$划分为$k$个不相交的簇${ C<em>l|l = 1,2,…,k }$，其中$C</em>{l’} \cap<em>{l’\neq l} C_l = \text{\O}$且$D = \cup^k</em>{l=1}C<em>l$。相应地，我们用$\lambda_j \in { 1,2,…,k }$表示样本$\boldsymbol{x}_j$的簇标记，即$\boldsymbol{x}_j \in C</em>{\lambda_j}$。于是，聚类的结果可用包含$m$个元素的簇标记向量$\boldsymbol{\lambda} = (\lambda_1;\lambda_2;…;\lambda_m)$表示。</p>
<p>根据聚类的功能描述，显然它可以作为单独的分类方法使用，也可以作为其他任务的前驱过程。</p>
<a id="more"></a>
<h2 id="2-性能度量"><a href="#2-性能度量" class="headerlink" title="2. 性能度量"></a>2. 性能度量</h2><p>聚类性能度量亦称聚类有效性指标。与监督学习类似，需要通过某种性能度量来评估其好坏；另一方面，若明确了最终将要使用的性能度量，则可直接将其作为聚类过程的优化目标。</p>
<p>样本集$D$被划分为若干个互不相交的子集，即样本簇。类似LDA的类间散度和类内散度定义，聚类结果要求簇内相似度高且簇间相似度低。</p>
<p>聚类性能度量大致有两类。一类是将聚类结果与某个“参考模型”进行比较，称为外部指标；另一类是直接考察聚类结果而不利用任何参考模型，称为内部指标。</p>
<p>对数据集$D = { \boldsymbol{x}_1, \boldsymbol{x}_2,…,\boldsymbol{x}_m }$，假定通过聚类给出的簇划分为$\mathcal{C} = { C_1, C_2,…,C_k }$，参考模型给出的簇划分为$\mathcal{C}^<em> = { C_1^</em>, C_2^<em>,…,C_k^</em> }$。相应的，令$\boldsymbol{\lambda}$与$\boldsymbol{\lambda}^<em>$分别表示与$\mathcal{C}$和$\mathcal{C}^</em>$对应的簇标记向量。将样本两两配对，定义</p>
<script type="math/tex; mode=display">
a = |SS|, \quad SS = \{ (\boldsymbol{x}_i, \boldsymbol{x}_j) | \lambda_i = \lambda_j, \lambda^*_i = \lambda^*_j, i < j \}
\\
b = |SD|, \quad SD = \{ (\boldsymbol{x}_i, \boldsymbol{x}_j) | \lambda_i = \lambda_j, \lambda^*_i \neq \lambda^*_j, i < j \}
\\
c = |DS|, \quad DS = \{ (\boldsymbol{x}_i, \boldsymbol{x}_j) | \lambda_i \neq \lambda_j, \lambda^*_i = \lambda^*_j, i < j \}
\\
d = |DD|, \quad DD = \{ (\boldsymbol{x}_i, \boldsymbol{x}_j) | \lambda_i \neq \lambda_j, \lambda^*_i \neq \lambda^*_j, i < j \}</script><p>其中集合$SS$包含了在$\mathcal{C}$中隶属于相同簇且在$\mathcal{C}^*$中也隶属于相同簇的样本对，同理对其他三个集合。由于每个样本对仅能出现在一个集合中，因此有$a+b+c+d = \frac{m(m-1)}{2}$成立。</p>
<p>基于上式可导出下面这些常用的聚类性能度量外部指标：</p>
<ul>
<li>Jaccard 系数（简称JC）</li>
</ul>
<script type="math/tex; mode=display">
JC =\frac{a}{a+b+c}</script><ul>
<li>FM 指数（简称FMI）</li>
</ul>
<script type="math/tex; mode=display">
FMI = \sqrt{\frac{a}{a+b} \cdot \frac{a}{a+c}}</script><ul>
<li>Rand 指数（简称RI）</li>
</ul>
<script type="math/tex; mode=display">
RI = \frac{2(a+d)}{m(m-1)}</script><p>显然上述结果在$[0,1]$区间，值越大性能越好。</p>
<p>考虑聚类结果的簇划分$\mathcal{C} = { C_1,C_2,…,C_k }$，定义</p>
<script type="math/tex; mode=display">
avg(C) = \frac{2}{|C|(|C| - 1)}\sum_{1 \leqslant i <j\leqslant |C|} dist(\boldsymbol{x}_i, \boldsymbol{x}_j)
\\
diam(C) = \max_{1 \leqslant i <j\leqslant |C|} dist(\boldsymbol{x}_i, \boldsymbol{x}_j)
\\
d_{min}(C_i,C_j) = \min_{\boldsymbol{x}_i \in C_i,\boldsymbol{x}_j \in C_j} dist(\boldsymbol{x}_i, \boldsymbol{x}_j)
\\
d_{cen}(C_i,C_j) = dist(\boldsymbol{\mu}_i, \boldsymbol{\mu}_j)</script><p>其中$dist(\cdot)$用于计算两个样本之间的距离；$\boldsymbol{\mu}$代表簇$C$的中心点$\boldsymbol{\mu} = \frac{1}{|C|}\sum<em>{1 \leqslant i \leqslant|C|}\boldsymbol{x}_i$。显然$avg(C)$对应于簇$C$内样本间的平均距离，$diam(C)$对应于簇$C$内样本间最远距离，$d</em>{min}(C<em>i,C_j)$对应于簇$C_i$与簇$C_j$最近样本间的距离，$d</em>{cen}(C_i,C_j)$对应于簇$C_i$与簇$C_j$中心点间的距离。</p>
<p>基于上式可导出下面这些常用的聚类性能度量内部指标：</p>
<ul>
<li>DB 指数（简称DBI）</li>
</ul>
<script type="math/tex; mode=display">
DBI = \frac{1}{k} \sum^k_{i=1}\max_{j \neq i}(\frac{avg(C_i) + avg(C_j)}{d_{cen}(\boldsymbol{\mu}_i, \boldsymbol{\mu}_j)})</script><ul>
<li>Dunn 指数（简称DI）</li>
</ul>
<script type="math/tex; mode=display">
DI = \underset{1 \leqslant i \leqslant k}{\min} \{ \underset{j \neq i}{\min} (\frac{d_{min}(C_i,C_j)}{\max_{1 \leqslant l \leqslant k}diam(C_l)}) \}</script><p>DBI的值越小越好，DI越大越好。</p>
<h2 id="3-距离计算"><a href="#3-距离计算" class="headerlink" title="3. 距离计算"></a>3. 距离计算</h2><p>上面提到的$dist(\cdot)$需要满足一些基本性质：</p>
<ul>
<li>非负性：$dist(\boldsymbol{x}_i, \boldsymbol{x}_j) \geqslant 0$；</li>
<li>同一性：$dist(\boldsymbol{x}_i, \boldsymbol{x}_j) = 0$当且仅当$\boldsymbol{x}_i= \boldsymbol{x}_j$；</li>
<li>对称性：$dist(\boldsymbol{x}_i, \boldsymbol{x}_j) = dist(\boldsymbol{x}_j, \boldsymbol{x}_i)$；</li>
<li>直递性：$dist(\boldsymbol{x}_i, \boldsymbol{x}_j) \leqslant dist(\boldsymbol{x}_i, \boldsymbol{x}_k) + dist(\boldsymbol{x}_k, \boldsymbol{x}_j)$</li>
</ul>
<p>给定样本$\boldsymbol{x}<em>i = { x</em>{i1};x<em>{i2};…;x</em>{in} }$与$\boldsymbol{x}<em>j = { x</em>{j1};x<em>{j2};…;x</em>{jn} }$，最常用的是闵科夫斯基距离</p>
<script type="math/tex; mode=display">
dist_{mk}(\boldsymbol{x}_i, \boldsymbol{x}_j) = (\sum^n_{u=1}|x_{iu}-x_{ju}|^p)^{\frac{1}{p}}</script><p>显然$p=2$时，即欧式距离</p>
<script type="math/tex; mode=display">
dist_{ed}(\boldsymbol{x}_i, \boldsymbol{x}_j) = ||\boldsymbol{x}_i- \boldsymbol{x}_j||_2</script><p>$p=1$时，即曼哈顿距离</p>
<script type="math/tex; mode=display">
dist_{man}(\boldsymbol{x}_i, \boldsymbol{x}_j) = ||\boldsymbol{x}_i- \boldsymbol{x}_j||_1</script><p>有序属性例如{1，2，3}，可直接计算距离，而无序属性如{飞机，火车，轮船}无法使用闵科夫斯基距离计算。</p>
<p>对无序属性可采用VDM，令$m<em>{u,a}$表示在属性$u$上取值为$a$的样本数，$m</em>{u,a,i}$表示在第$i$个样本簇中在属性$u$上取值为$a$的样本数，$k$为样本簇数，则属性$u$上两个离散值$a$与$b$之间的VDM距离为</p>
<script type="math/tex; mode=display">
VDM_p(a,b) = \sum^k_{i=1}|\frac{m_{u,a,i}}{m_{u,a}} - \frac{m_{u,b,i}}{m_{u,b}}|^p</script><p>于是，将闵科夫斯基距离和VDM结合即可处理混合属性。假定有$n_c$个有序属性、$n-n_c$个无序属性，不失一般性，令有序属性排列在无序属性之前，则</p>
<script type="math/tex; mode=display">
MinkovDM_p(\boldsymbol{x}_i, \boldsymbol{x}_j) = (\sum^{n_c}_{u=1}|x_{iu} - x_{ju}|^p + \sum^n_{u=n_c+1}VDM_p(x_{iu},x_{ju}))^{\frac{1}{p}}</script><p>当样本空间中不同属性的重要性不同时，可使用加权距离，以加权闵科夫斯基距离为例</p>
<script type="math/tex; mode=display">
dist_{wmk}(\boldsymbol{x}_i, \boldsymbol{x}_j) = (w_1\cdot |x_{i1} - x_{j1}|^p + ...+ w_n\cdot |x_{in} - x_{jn}|^p)^{\frac{1}{p}}</script><p>其中权重$w<em>i \geqslant 0$，通常$\sum^n</em>{i=1}w_i = 1$</p>
<p>在某些条件下，直递性不一定需要满足，比如我们希望“人”“马”分别于“人马”相似，但是“人”与“马”之间距离很大。这样的距离称为非度量距离，在不少现实任务中需要基于样本数据来确定合适的距离计算方式。</p>
<h2 id="4-原型聚类"><a href="#4-原型聚类" class="headerlink" title="4. 原型聚类"></a>4. 原型聚类</h2><p>原型指的是样本空间中具有代表性的点，基本算法是先对原型进行初始化，然后对原型进行迭代更新求解。</p>
<h3 id="4-1-k-均值算法"><a href="#4-1-k-均值算法" class="headerlink" title="4.1 $k$均值算法"></a>4.1 $k$均值算法</h3><p>$k$均值算法最小化平方误差</p>
<script type="math/tex; mode=display">
E = \sum^k_{i=1}\sum_{\boldsymbol{x} \in C_i}||\boldsymbol{x} - \boldsymbol{\mu}_i||^2_2</script><p>其中$\boldsymbol{\mu}<em>i = \frac{1}{|C_i|}\sum</em>{\boldsymbol{x}\in C_i}\boldsymbol{x}$是簇$C_i$的均值向量。显然，E越小则簇内样本相似度越高。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/17b3444a9855b4b8d.jpg" alt="17b3444a9855b4b8d.jpg"></p>
<h3 id="4-2-学习向量量化"><a href="#4-2-学习向量量化" class="headerlink" title="4.2 学习向量量化"></a>4.2 学习向量量化</h3><h3 id="4-3-高斯混合聚类"><a href="#4-3-高斯混合聚类" class="headerlink" title="4.3 高斯混合聚类"></a>4.3 高斯混合聚类</h3><h2 id="5-密度聚类"><a href="#5-密度聚类" class="headerlink" title="5. 密度聚类"></a>5. 密度聚类</h2><h2 id="6-层次聚类"><a href="#6-层次聚类" class="headerlink" title="6. 层次聚类"></a>6. 层次聚类</h2>]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Theory</tag>
        <tag>Clustering</tag>
      </tags>
  </entry>
  <entry>
    <title>LightGBM</title>
    <url>/archives/e227beb7.html</url>
    <content><![CDATA[<p>参考：</p>
<blockquote>
<p><a href="https://papers.nips.cc/paper/6907-lightgbm-a-highly-efficient-gradient-boosting-decision-tree.pdf" target="_blank" rel="noopener">LightGBM: A Highly Efficient Gradient Boosting Decision Tree</a><br><a href="https://dataxujing.github.io/LightGBM-learn/#1" target="_blank" rel="noopener">LightGBM整理</a><br><a href="https://juejin.im/post/5ab1d713f265da238f126b87" target="_blank" rel="noopener">从结构到性能，一文概述XGBoost、Light GBM和CatBoost的同与不同</a><br><a href="https://juejin.im/post/5b76437ae51d45666b5d9b05" target="_blank" rel="noopener">LightGBM核心解析与调参</a><br><a href="https://v.qq.com/x/page/k0362z6lqix.html" target="_blank" rel="noopener">LightGBM视频教程</a><br><a href="http://lightgbm.apachecn.org/#/" target="_blank" rel="noopener">LightGBM 中文文档</a></p>
</blockquote>
<p>LightGBM属于Boosting一族，由微软开源，被评价为“速度惊人”，“非常有启发”，“支持分布式”，“内存占用小”等。</p>
<a id="more"></a>
<h2 id="1-回顾"><a href="#1-回顾" class="headerlink" title="1. 回顾"></a>1. 回顾</h2><h3 id="1-1-Boosting"><a href="#1-1-Boosting" class="headerlink" title="1.1 Boosting"></a>1.1 Boosting</h3><p>参考<code>决策树</code></p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/0.png" alt="0.png"></p>
<h3 id="1-2-Gradient-Boosting"><a href="#1-2-Gradient-Boosting" class="headerlink" title="1.2 Gradient Boosting"></a>1.2 Gradient Boosting</h3><p>参考<code>GBDT</code></p>
<h2 id="2-Leaf-wise"><a href="#2-Leaf-wise" class="headerlink" title="2. Leaf-wise"></a>2. Leaf-wise</h2><!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/1ef4e0ddfa431fa54.png" alt="1ef4e0ddfa431fa54.png"></p>
<h3 id="2-1-Level-wise算法"><a href="#2-1-Level-wise算法" class="headerlink" title="2.1 Level-wise算法"></a>2.1 Level-wise算法</h3><p>传统决策树算法采用的就是Level-wise算法，每次划分（连续值）都在减少当前结点的损失，在不考虑预剪枝的情况下，这种做法缺点是贪心，优点是可以利用多线程。</p>
<h3 id="2-2-Leaf-wise算法"><a href="#2-2-Leaf-wise算法" class="headerlink" title="2.2 Leaf-wise算法"></a>2.2 Leaf-wise算法</h3><p>Leaf-wise算法主要用于LightGBM，它的核心思想是：在将结点一分为二后，考虑在损失最大的那个子结点上继续进行划分（这里比较的是全部数据集的损失，也就是说如果某次迭代中子树的损失小于其某个祖先的兄弟时，可以从祖先的兄弟继续划分子树）。这样可以很容易实现整体的最小损失，但是容易过拟合，我们可以通过控制树的深度避免过拟合。</p>
<p>上图中的$p,f,v$应该代表划分的样本子集，最佳特征，最佳特征对应的最佳阈值。</p>
<h2 id="3-对比XGBoost"><a href="#3-对比XGBoost" class="headerlink" title="3. 对比XGBoost"></a>3. 对比XGBoost</h2><p>参考<code>XGBoost</code>，首先了解一下XGBoost的优缺点</p>
<ul>
<li>精确贪心算法<ul>
<li>优点：<ul>
<li>可以找到精确的划分条件</li>
</ul>
</li>
<li>缺点：<ul>
<li>计算量巨大</li>
<li>内存占用巨大</li>
<li>易产生过拟合</li>
</ul>
</li>
</ul>
</li>
<li>Level-wise迭代方式<ul>
<li>优点：<ul>
<li>可以使用多线程</li>
<li>可以加速精确贪心算法</li>
</ul>
</li>
<li>缺点： <ul>
<li>效率低下，可能产生不必要的叶结点</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>LightGBM官方宣称的优点，很明显是针对XGBoost：</p>
<ul>
<li>快速高效</li>
<li>内存占用低</li>
<li>准确率高</li>
<li>支持分布式</li>
<li>支持large-scale data</li>
<li>支持直接使用category特征</li>
</ul>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/298e4c387d3161ef1.png" alt="298e4c387d3161ef1.png"></p>
<p>表格中提到的Histogram algorithm稍后介绍，XGBoost与LightGBM的对比，看表格应该是LightGBM全面碾压XGBoost</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/3846bfb9b8435c5ad.png" alt="3846bfb9b8435c5ad.png"></p>
<h2 id="4-Histogram-algorithm"><a href="#4-Histogram-algorithm" class="headerlink" title="4. Histogram algorithm"></a>4. Histogram algorithm</h2><!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/42e349c4307079b3d.png" alt="42e349c4307079b3d.png"></p>
<p>Histogram algorithm应该翻译为直方图算法，直方图算法的思想也很简单，首先将连续的浮点数据转换为bin数据，具体过程是首先确定对于每一个特征需要多少的桶bin，然后均分，将属于该桶的样本数据更新为bin的值，最后用直方图表示。（看起来很高大上，其实就是直方图统计，最后我们将大规模的数据放在了直方图中）</p>
<p>直方图算法有几个需要注意的地方：</p>
<ul>
<li>使用bin替代原始数据相当于增加了正则化；</li>
<li>使用bin意味着很多数据的细节特征被放弃了，相似的数据可能被划分到相同的桶中，这样的数据之间的差异就消失了；</li>
<li>bin数量选择决定了正则化的程度，bin越少惩罚越严重，欠拟合风险越高。</li>
</ul>
<p>直方图算法：</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/5053d6bef5a71571c.png" alt="5053d6bef5a71571c.png"></p>
<p>直方图算法需要注意的地方：</p>
<ul>
<li>构建直方图时不需要对数据进行排序（比XGBoost快），因为预先设定了bin的范围；</li>
<li>直方图除了保存划分阈值和当前bin内样本数以外还保存了当前bin内所有样本的一阶梯度和（一阶梯度和的平方的均值等价于均方损失）；</li>
<li>阈值的选取是按照直方图从小到大遍历，使用了上面的一阶梯度和，目的是得到划分之后使$\bigtriangleup loss$最大的特征及阈值。</li>
</ul>
<h2 id="5-优势解读"><a href="#5-优势解读" class="headerlink" title="5. 优势解读"></a>5. 优势解读</h2><h3 id="5-1-内存优化"><a href="#5-1-内存优化" class="headerlink" title="5.1 内存优化"></a>5.1 内存优化</h3><p>图中表示原始数据的inices和values都用4bytes存储，使用直方图算法不需要存储indices，values转为bin的值最少仅需要1byte（uint8），所以有了8倍内存减小的优势。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/6da3870ca21ae08c4.png" alt="6da3870ca21ae08c4.png"></p>
<ol>
<li>由于使用原始数据到bin的映射，那么存储时只需要存储bin的值；</li>
<li>对于某些特征的数据，它们映射到的bin的数量较少，那么可以用uint8表示bin的值。</li>
</ol>
<h3 id="5-2-带最大深度限制的Leaf-wise"><a href="#5-2-带最大深度限制的Leaf-wise" class="headerlink" title="5.2 带最大深度限制的Leaf-wise"></a>5.2 带最大深度限制的Leaf-wise</h3><!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/72d0cdd8ad2830ae5.png" alt="72d0cdd8ad2830ae5.png"></p>
<ol>
<li>根据之前介绍的Leaf-wise算法，可以知道Leaf-wise比Level-wise能减少更多的损失，性能更强；</li>
<li>通过设置最大深度约束Leaf-wise的生长有利于减小过拟合风险。</li>
</ol>
<h3 id="5-3-直方图减法"><a href="#5-3-直方图减法" class="headerlink" title="5.3 直方图减法"></a>5.3 直方图减法</h3><!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/8e9467b0119862351.png" alt="8e9467b0119862351.png"></p>
<ol>
<li>根据上面直方图算法介绍，我们知道构建bin的时候保存了当前bin内所有样本的一阶梯度和，那么后面划分结点时按照bin的顺序遍历左边加起来，然后用总和减去左边的和，剩下就是右子树的一阶梯度和；</li>
<li>计算复杂度仅与bin的数量有关，为$O(n_{bin})$；</li>
<li>只需做一次减法就得到两棵树的一阶梯度和，那么速度比分别计算左右两边快两倍。</li>
</ol>
<h3 id="5-4-增加缓存命中率"><a href="#5-4-增加缓存命中率" class="headerlink" title="5.4 增加缓存命中率"></a>5.4 增加缓存命中率</h3><p>cache miss一般发生在访问的数据随机性很大的任务中，这是由于内存的管理机制决定的，因此如果访问的数据是相邻的或有序的，那么缓存命中率就会提升，缓存命中率提升会增加访问速度，从另一个角度增加计算速度。</p>
<p>在XGBoost中我们计算某个叶结点权重的最优值需要用到落入此结点的所有样本的一阶梯度以及二阶梯度，与此同时，划分依据的特征也是需要遍历的，也就是说，在划分并确定最佳权重的阶段，计算复杂度为$O(n<em>{data} \times n</em>{feature})$，而且数据之间没有规律可循，因此缓存命中率低。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/9.png" alt="9.png"></p>
<p>在LightGBM使用基于直方图算法，它是如何增加缓存命中率的？</p>
<p>首先不需要考虑样本的indices了，不需要考虑样本的顺序，仅需要直方图中的数据；其次由于直方图中已经计算了一阶梯度和，而且由于采用了直方图减法，因此需要读取的数据量小而且有序，所以缓存命中率提升。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/10.png" alt="10.png"></p>
<h3 id="5-5-支持Category特征"><a href="#5-5-支持Category特征" class="headerlink" title="5.5 支持Category特征"></a>5.5 支持Category特征</h3><p>一般来说，可以将Category特征转换为onehot变量作为输入，LightGBM的决策树直接将Category特征加入到判定方法中，减少了计算时间以及存储占用。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/11.png" alt="11.png"></p>
<h3 id="5-6-支持分布式并行计算"><a href="#5-6-支持分布式并行计算" class="headerlink" title="5.6 支持分布式并行计算"></a>5.6 支持分布式并行计算</h3><p>从三个方面分析并行计算的优势：</p>
<ul>
<li>特征并行Feature Parallelizztion<ul>
<li>数据计算和数据交互取决于data</li>
</ul>
</li>
<li>数据并行Data Parallelizztion<ul>
<li>数据交互取决于feature </li>
</ul>
</li>
<li>投票并行Voting Parallelizztion<ul>
<li>减少数据并行中的数据交互</li>
</ul>
</li>
</ul>
<h4 id="5-6-1-Feature-Parallelizztion"><a href="#5-6-1-Feature-Parallelizztion" class="headerlink" title="5.6.1 Feature Parallelizztion"></a>5.6.1 Feature Parallelizztion</h4><p>很简单，就是将不同的特征给不同的worker。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/12.png" alt="12.png"></p>
<h4 id="5-6-2-Data-Parallelizztion"><a href="#5-6-2-Data-Parallelizztion" class="headerlink" title="5.6.2 Data Parallelizztion"></a>5.6.2 Data Parallelizztion</h4><p>不同的worker分配不同的数据，生成<strong>所有特征</strong>的本地直方图</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/13.png" alt="13.png"></p>
<h4 id="5-6-3-Voting-Parallelizztion"><a href="#5-6-3-Voting-Parallelizztion" class="headerlink" title="5.6.3 Voting Parallelizztion"></a>5.6.3 Voting Parallelizztion</h4><p>不同的worker分配不同的数据，增加了Voting阶段，应该是每个worker先选出最佳的几个划分特征，然后集体再voting，再选出集体的最佳的几个特征，最后再集成直方图数据，进行全局划分</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/14.png" alt="14.png"></p>
<h3 id="5-7-其他优点"><a href="#5-7-其他优点" class="headerlink" title="5.7 其他优点"></a>5.7 其他优点</h3><!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/15.png" alt="15.png"></p>
<p>在LightGBM库中使用num_leaves替换最大深度，对应的替换公式如下</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/16.png" alt="16.png"></p>
<p>其他优势的说明如下：</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/17.png" alt="17.png"></p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/18.png" alt="18.png"></p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/19.png" alt="19.png"></p>
]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Theory</tag>
        <tag>LightGBM</tag>
      </tags>
  </entry>
  <entry>
    <title>XGBoost</title>
    <url>/archives/ce8cbd0b.html</url>
    <content><![CDATA[<p>参考：</p>
<blockquote>
<p><a href="https://arxiv.org/pdf/1603.02754v3.pdf" target="_blank" rel="noopener">XGBoost: A Scalable Tree Boosting System</a><br><a href="https://juejin.im/post/5a13c9a8f265da43333e0648" target="_blank" rel="noopener">XGBoost基本原理</a></p>
</blockquote>
<h2 id="1-正则化学习目标"><a href="#1-正则化学习目标" class="headerlink" title="1. 正则化学习目标"></a>1. 正则化学习目标</h2><p>假定数据集有$n$个样本，每个样本有$m$个特征，$\mathcal{D} = { (\boldsymbol{x}_i, y_i) } (|\mathcal{D}| = n, \boldsymbol{x}_i \in \mathbb{R}^m, y_i \in \mathbb{R})$，并且该数据集属于回归任务，特征值和预测目标都是任意常数。假定用$K$个树构建模型，并且预测结果为所有树的预测结果的和</p>
<script type="math/tex; mode=display">
\hat{y}_i = \phi(\boldsymbol{x}_i) = \sum^K_{k=1}f_k(\boldsymbol{x}_i), \quad f_k \in \mathcal{F}</script><p>其中$\mathcal{F} = { f(\boldsymbol{x}) = w<em>{q(\boldsymbol{x})} }(q:\mathbb{R}^m \rightarrow T, w \in \mathbb{R}^T)$，$T$是当前树的叶结点数（我们将叶结点编号），$q$是从样本$\boldsymbol{x}$到叶结点index的映射，即样本$\boldsymbol{x}$落在树的index叶结点上，$w</em>{q(\boldsymbol{x})}$表示该样本属于的叶结点的权值，我们可以将$f$看作是一棵树的表示函数，其包括两个部分：树的结构函数$q$和树的叶结点权重$w$。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/017978af7cab33961.png" alt="017978af7cab33961.png"></p>
<a id="more"></a>
<p>XGBoost是由多个决策树相加形成的，考虑增加正则项$\Omega$，则整个模型的优化目标为</p>
<script type="math/tex; mode=display">
\mathcal{L}(\phi) = \sum_i l(\hat{y}_i, y_i) + \sum_k \Omega(f_k)
\\
\Omega(f) = \gamma T + \frac{1}{2}\lambda ||w||^2</script><p>前半部分是预测值与真实值的误差，后半部分是对树的结构的惩罚，$\Omega$前半部分是对叶结点数的惩罚（避免过拟合严重），后半部分是对叶结点权重的惩罚（$L_2$范数），也就是说XGBoost在回归树的基础上增加了对结点的权重惩罚（回归树结点取样本均值）。</p>
<!-- more -->
<h2 id="2-决策树梯度上升"><a href="#2-决策树梯度上升" class="headerlink" title="2. 决策树梯度上升"></a>2. 决策树梯度上升</h2><p>我们知道神经网络的反向传播是应用于所有参数的，也就是说神经网络的参数更新是对所有的参数；XGBoost的梯度上升或下降是通过加法实现的，也就是说通过构建下一棵树来实现对当前树的梯度下降，我们在第$t$轮（这里$t$与上面的$k$几乎等价）的优化目标为</p>
<script type="math/tex; mode=display">
\mathcal{L}^{(t)} = \sum^n_{i=1}l(y_i, \hat{y}_i^{(i-1)} + f_t(\boldsymbol{x}_i)) + \Omega(f_t)</script><p>我们仅考虑加入$f_t$以优化模型，这种做法是贪心的。通过二阶近似$f(x+\bigtriangleup x) = f(x) + f’(x)\bigtriangleup x + \frac{1}{2}f’’(x) (\bigtriangleup x)^2$，可以将上式近似表示为</p>
<script type="math/tex; mode=display">
\mathcal{L}^{(t)} \simeq \sum^n_{i=1}[l(y_i, \hat{y}_i^{(t-1)})+ g_if_t(\boldsymbol{x}_i) + \frac{1}{2}h_if_t^2(\boldsymbol{x}_i)] + \Omega(f_t)</script><p>其中$g<em>i = \partial</em>{\hat{y}<em>i^{(t-1)}}l(y_i, \hat{y}_i^{(t-1)})$，$h_i = \partial^2</em>{\hat{y}_i^{(t-1)}}l(y_i, \hat{y}_i^{(t-1)})$，本质上就是损失的一阶梯度和二阶梯度，由于我们的目标是最小化$t$轮的误差，所以可以去掉与$f_t$无关的量</p>
<script type="math/tex; mode=display">
\tilde{\mathcal{L}}^{(t)} = \sum^n_{i=1}[g_if_t(\boldsymbol{x}_i) + \frac{1}{2}h_if_t^2(\boldsymbol{x}_i)] + \Omega(f_t)</script><p>定义$I_j = { i|q(\boldsymbol{x}_i) = j }$为划分到index为$j$的叶结点的样本的index集合（简单来说就是统计落入$j$叶结点的所有样本），那么重写上式为</p>
<script type="math/tex; mode=display">
\tilde{\mathcal{L}}^{(t)} = \sum^n_{i=1}[g_if_t(\boldsymbol{x}_i) + \frac{1}{2}h_if_t^2(\boldsymbol{x}_i)] + \gamma T + \frac{1}{2}\lambda \sum^T_{j=1}w_j^2
\\
= \sum^T_{j=1}[(\sum_{i \in I_j}g_i)w_j + \frac{1}{2}(\sum_{i \in I_j}h_i + \lambda)w_j^2] + \gamma T</script><!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/13eac003017b1ae0e.png" alt="13eac003017b1ae0e.png"></p>
<p>上式的两种变形考虑的对象不同，第一个式子考虑每个样本，第二个式子考虑的是当前树的每个叶结点（由于每个样本必定落入某个叶结点，因此考虑叶结点简化了计算过程），通过对$w_j$求偏导数使损失最小</p>
<script type="math/tex; mode=display">
w^*_j = - \frac{\sum_{i \in I_j} g_i}{\sum_{i \in I_j}h_i + \lambda}</script><p>一般令$G<em>j = \sum</em>{i \in I<em>j} g_i, H_j = \sum</em>{i \in I_j}h_i$，所以上式为</p>
<script type="math/tex; mode=display">
w^*_j = - \frac{G_j}{H_j + \lambda}</script><p>将最优$w_j^*$代入到损失函数中，我们得到与树结构$q$相关的损失函数</p>
<script type="math/tex; mode=display">
\tilde{\mathcal{L}}^{(t)}(q) = -\frac{1}{2}\sum^T_{j=1}\frac{(\sum_{i \in I_j}g_i)^2}{\sum_{i \in I_j}h_i + \lambda} + \gamma T</script><p>因此上式可以作为衡量当前决策树性能的分数函数，通常用$Obj$表示。</p>
<p>如何确定最优树结构，理论上遍历所有树结构可以得到最小损失，但是很明显实际不可行。通常从一个根结点出发，逐渐增加左右两个分支，令$I<em>L$和$I_R$分别表示落入到左子树和右子树的样本集，计算损失下降$\mathcal{L}</em>{split}$</p>
<script type="math/tex; mode=display">
\mathcal{L}_{split} = \frac{1}{2}[\frac{(\sum_{i \in I_L}g_i)^2}{\sum_{i \in I_L}h_i + \lambda} + \frac{(\sum_{i \in I_R}g_i)^2}{\sum_{i \in I_R}h_i + \lambda} - \frac{(\sum_{i \in I}g_i)^2}{\sum_{i \in I}h_i + \lambda}] - \lambda</script><p>这个式子很好理解，就是<code>未分支损失-分枝后损失</code>（$\lambda$系数为1是由于仅增加了一个叶结点），所以这个值越大说明分支效果越好。</p>
<h2 id="3-收缩与特征采样"><a href="#3-收缩与特征采样" class="headerlink" title="3. 收缩与特征采样"></a>3. 收缩与特征采样</h2><p>原文是Shrinkage和Column Subsampling，是两种避免过拟合的策略</p>
<ul>
<li>Shrinkage通过参数$\eta$限制新加入的树的权重$w$，目的是为了避免新加入的树性能过强导致后面加入的树没有优化空间，从而避免过拟合；</li>
<li>Column Subsampling在随机森林中也使用过，先从当前结点的属性集合中随机选择一个包含k个属性的子集，然后再从这个子集中选择最优属性用于划分。</li>
</ul>
<h2 id="4-分支划分算法"><a href="#4-分支划分算法" class="headerlink" title="4. 分支划分算法"></a>4. 分支划分算法</h2><h3 id="4-1-精确贪心算法"><a href="#4-1-精确贪心算法" class="headerlink" title="4.1 精确贪心算法"></a>4.1 精确贪心算法</h3><p>原文是Exact Greedy Algorithm，这个算法在<code>决策树</code>连续值处理里面介绍过，通过遍历每个特征，寻找各个特征的最佳划分阈值，最后取能使$\mathcal{L}_{split}$分数最大的特征及阈值。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/2035ad92df7be84bf.png" alt="2035ad92df7be84bf.png"></p>
<ul>
<li>在XGBoost上面的介绍中已经说明采用了Column Subsampling策略，因此在确定某一棵树的结构时并不会遍历整个特征集，而在从特征集中采样出一个子集，这里子集的大小为$m$；</li>
<li>需要将第$k$个特征的所有样本按照大小排序后再计算阈值（如果是连续值，排序后取相邻样本的均值作为待定阈值；如果是离散值，那么每次选择其中一个）。</li>
</ul>
<h3 id="4-2-近似算法"><a href="#4-2-近似算法" class="headerlink" title="4.2 近似算法"></a>4.2 近似算法</h3><p>Exact Greedy Algorithm存在两个问题：一是遍历大数据集是非常不可取的，二是不可能应用于分布式环境中，因此提出Approximate Algorithm用于解决上述两个问题。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/35a2426a8bef4c332.png" alt="35a2426a8bef4c332.png"></p>
<p>相较于Exact Greedy Algorithm遍历所有可能的阈值，在Approximate Algorithm中直接将第$k$个特征的阈值集合$S_k$按百分比分类列出来，形成候选集合，然后类似Exact Greedy Algorithm中找到分数最大值对应的划分方式，按照近似算法得到的结果往往与精确贪心算法相差不大。</p>
<h3 id="4-3-加权分位数草图"><a href="#4-3-加权分位数草图" class="headerlink" title="4.3 加权分位数草图"></a>4.3 加权分位数草图</h3><p>原文是Weighted Quantile Sketch，在近似算法中需要选出候选子集，那么如何以一个相对合理的方式划分出候选子集？定义数据集$\mathcal{D}<em>k = { (x</em>{1k}, h<em>1), (x</em>{2k}, h<em>2),…, (x</em>{nk}, h_n) }$包括第$k$个特征的值$x_k$以及二阶梯度$h$，且按照顺序排列好，则定义排序函数$r_k: \mathbb{R} \rightarrow [0, +\infty)$</p>
<script type="math/tex; mode=display">
r_k(z) = \frac{1}{\sum_{(x, h) \in \mathcal{D}_k}h} \sum_{(x, h) \in \mathcal{D}_k, x<z} h</script><p>则最佳划分候选子集${s<em>{k1}, s</em>{k2}, …, s_{kl}}$为</p>
<script type="math/tex; mode=display">
|r_k(s_{k,j}) - r_k(s_{k,j+1})|<\epsilon, \quad s_{k1} = \underset{i}{\min} x_{ik}, s_{kl} = \underset{i}{\max} x_{ik}</script><p>对上式的理解为，若排序后的样本的二阶梯度占所有样本的二阶梯度和的比例小于$\epsilon$，则认为这个区间内的样本属于同一区域，那么我们取这个区域的最大值和最小值作为候选子集的首尾（同样取均值作为划分阈值）。</p>
<p>$\epsilon$是近似因子，一般意味候选子集大小为$\frac{1}{\epsilon}$，也就是说通过控制$\epsilon$的大小我们可以控制候选子集的大小，同时也是划分的精度，从这个角度来看优化目标，我们需要二阶梯度尽可能小的样本作为候选子集，由$w^*_j$计算公式表明样本$\boldsymbol{x}_i$的最优权重可以表示为$\frac{g_i}{h_i}$。我们可以重写第$t$棵树的优化目标为</p>
<script type="math/tex; mode=display">
\sum^n_{i=1}\frac{1}{2}h_i(f_t(\boldsymbol{x}_i) - \frac{g_i}{h_i})^2 + \Omega(f_t) + constant</script><p>重写后的优化目标将$h_i$视为样本权重，$\frac{g_i}{h_i}$视为真实标签。</p>
<h3 id="4-4-稀疏划分"><a href="#4-4-稀疏划分" class="headerlink" title="4.4 稀疏划分"></a>4.4 稀疏划分</h3><p>原文是Sparsity-aware Split Finding，在现实任务中会遇到稀疏矩阵的问题，有可能是数据缺失，有可能是数据属于onehot变量，我们需要能处理稀疏数据的方式，一种简单的方式是制定一个默认的方向，当遇到数据缺失时使其具有默认的方向。一般有两种方式设定数据的方向：</p>
<ul>
<li>从数据中学到划分方向，这里参照下图，在计算左子树分支损失时将缺失值的样本作为右子树的集合，在计算右子树分支损失时将缺失值的样本作为左子树的集合；</li>
<li>人为指定方向（或者不采用带有缺失值的数据）。</li>
</ul>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/468bda16a099fc1ae.png" alt="468bda16a099fc1ae.png"></p>
]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Theory</tag>
        <tag>XGBoost</tag>
      </tags>
  </entry>
  <entry>
    <title>梯度提升决策树GBDT</title>
    <url>/archives/b4ab55fe.html</url>
    <content><![CDATA[<p>参考：</p>
<blockquote>
<p><a href="http://videolectures.net/site/normal_dl/tag=81961/nipsworkshops2010_ye_gbd_01.pdf" target="_blank" rel="noopener">Introduction to Gradient Boosted Decision Trees</a><br><a href="https://www.jianshu.com/p/005a4e6ac775" target="_blank" rel="noopener">GBDT：梯度提升决策树</a></p>
</blockquote>
<h2 id="1-Regression-Decision-Tree-回归树"><a href="#1-Regression-Decision-Tree-回归树" class="headerlink" title="1. Regression Decision Tree 回归树"></a>1. Regression Decision Tree 回归树</h2><p>参考<code>决策树</code></p>
<h2 id="2-Boosting-Decision-Tree-提升树"><a href="#2-Boosting-Decision-Tree-提升树" class="headerlink" title="2. Boosting Decision Tree 提升树"></a>2. Boosting Decision Tree 提升树</h2><p>BDT由多棵回归树来集成，属于Boosting算法一种，因此它的算法思想为：首先训练一个初始的回归决策树，决策树的深度、叶结点数、最小分类数等等是预先设定好的，也就意味着单个决策树的性能不一定是非常好的（对比单一决策树），然后我们根据这棵决策树预测各个样本的预测值，然后与样本的真实值计算残差（真实值-预测值），然后再将所有样本的残差作为下一个决策树预测的目标，继续生成决策树。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/2142d058159520761.png" alt="2142d058159520761.png"></p>
<a id="more"></a>
<h2 id="3-Gradient-Boosting-Decision-Tree-梯度提升决策树"><a href="#3-Gradient-Boosting-Decision-Tree-梯度提升决策树" class="headerlink" title="3. Gradient Boosting Decision Tree 梯度提升决策树"></a>3. Gradient Boosting Decision Tree 梯度提升决策树</h2><p>GBDT又叫MART（Multiple Additive Regression Tree），GBDT通常用来做回归预测，调整后也可以用于分类。</p>
<p>首先是损失函数对应的梯度计算结果</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/18772c30181281c41.png" alt="18772c30181281c41.png"></p>
<p>但是上图中绝对值损失和Huber损失的优化方式比较复杂，因此GBDT采取的措施是：利用损失函数的负梯度在当前模型的值，作为回归问题中提升树算法的残差的近似值，拟合一个回归树。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/0052ac28870fd7202.png" alt="0052ac28870fd7202.png"></p>
<ol>
<li>首先初始化一个决策树，仅有一个根节点，估计使损失函数极小化的常数值$\gamma$；</li>
<li>计算损失函数的负梯度在当前模型的值，将它作为残差的估计；</li>
<li>估计回归树叶节点区域，以拟合残差的近似值；</li>
<li>利用线性搜索估计叶节点区域的值，使损失函数极小化；</li>
<li>更新回归树；</li>
<li>得到输出的最终模型</li>
</ol>
<p><strong>推荐GBDT树的深度：6</strong></p>
]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Theory</tag>
        <tag>GBDT</tag>
        <tag>BDT</tag>
      </tags>
  </entry>
  <entry>
    <title>集成学习</title>
    <url>/archives/72fab9d8.html</url>
    <content><![CDATA[<p><strong>三个臭皮匠，顶个诸葛亮？</strong></p>
<p>参考：</p>
<blockquote>
<p>西瓜书第8章 集成学习</p>
</blockquote>
<h2 id="1-个体与集成"><a href="#1-个体与集成" class="headerlink" title="1. 个体与集成"></a>1. 个体与集成</h2><p>集成学习，顾名思义就是多个学习器联合起来完成学习任务，那么问题来了，单个学习器是怎样形成的？这些学习器怎样联合起来？</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/16f0808fe360ad913.jpg" alt="16f0808fe360ad913.jpg"></p>
<p>如图所示，个体学习器通常由一个现有的学习算法从训练数据中产生，例如C4.5决策树、BP神经网络等，那么有一些定义产生了（虽然没什么用）。</p>
<p>比如，若集成中只包含同种类型的个体学习器，则这样的集成是”同质”的（比如全是决策树或者全是神经网络）。同质集成中的个体学习器称为<strong>基学习器</strong>，相应的算法称为<strong>基学习算法</strong>。</p>
<p>当然集成中也可以包含不同类型的个体学习器，同理叫做”异质”的。异质集成中没有基学习器和基学习算法的概念。</p>
<p>集成学习通过将多个学习器进行结合，常可以获得比单一学习器显著优越的泛化性能（传说中的<code>三个臭皮匠，顶个诸葛亮</code>）。而且许多集成学习研究是针对于<strong>弱学习器</strong>（泛化性能略优于随机猜测的学习器，比如二分类准确度略高于50%），我觉得这是因为在现实任务中获得单一的极强泛化性能的学习器是非常困难（这里应该包括训练过程和数据获取难度），但是获得一个性能不那么强的学习器往往需要的成本会小很多，然后我们再根据数据类型，训练出多个类似的弱学习器，通过集成策略（比如投票）作为最终模型，那么成本降下来了，而且性能也还可以，所以这个能称为研究的方向。当然了，在实际问题中能够轻易得到强学习器，还是会使用强学习器作为个体学习器的，毕竟<code>强强联手</code>。</p>
<p>对于每个个体学习器而言，它必须满足一定的基础条件，否则它就会拖后腿（比如三个臭皮匠中有个混子，那就很难受了），所以第一个是<strong>准确性</strong>，即学习器不能太坏（二分类低于50%那就是个混子还会拖后腿），另一个是<strong>多样性</strong>，即学习器间具有差异（简单来说就是各个学习器考虑问题的方向不同，如果相同了，那不就是抄袭吗），综合起来四个字<strong>好而不同</strong>。</p>
<a id="more"></a>
<hr>
<p><em>集成学习性能证明</em></p>
<p>考虑二分类问题$y \in { -1, +1 }$和真实函数$f$，假定基学习器的错误率为$\epsilon$，即对每个基学习器$h_i$有</p>
<script type="math/tex; mode=display">
P(h_i(\boldsymbol{x}) \neq f(\boldsymbol{x})) = \epsilon</script><p>假设集成策略为简单投票法结合$T$个基学习器，超过半数原则</p>
<script type="math/tex; mode=display">
H(\boldsymbol{x}) = sign(\sum^T_{i=1}h_i(\boldsymbol{x}))</script><p>假设基学习器的错误率相互独立，则集成的错误率为</p>
<script type="math/tex; mode=display">
P(H(\boldsymbol{x}) \neq f(\boldsymbol{x})) = \sum^{\left \lfloor T/2 \right \rfloor}_{k=0}\binom{T}{k}(1-\epsilon)^k\epsilon^{T-k}
\\
\leqslant \exp(-\frac{1}{2}T(1-2\epsilon)^2)</script><p>上式表明，随着$T$增大，集成的错误率指数级下降，最终趋向于0。</p>
<p>注意，这个式子的前提是基学习器的错误率相互独立，也就是说每个基学习器考虑问题的方向不能有任何交叉（比如决策树之间的判定条件必须不同，选择的最优特征不同），显然很不现实，所以如何产生并结合好而不同的个体学习器，恰是集成学习研究的核心。</p>
<p>根据个体学习器的生成方式，目前的集成学习方法大致可分为两大类：</p>
<ol>
<li>个体学习器间存在强依赖关系、必须串行生成的序列化方法，代表<code>Boosting</code>；</li>
<li>个体学习器间不存在强依赖关系、可同时生成的并行化方法，代表<code>Bagging</code>和<code>随机森林</code>。</li>
</ol>
<h2 id="2-Boosting"><a href="#2-Boosting" class="headerlink" title="2. Boosting"></a>2. Boosting</h2><p>Boosting算法工作机制：</p>
<ol>
<li>根据初始训练集训练出一个基学习器</li>
<li>根据基学习器的表现对训练样本分布进行调整，使得先前基学习器错判的样本在后续受到更多关注</li>
<li>基于调整后的样本分布来训练下一个基学习器</li>
<li>判断基学习器数目是否达到指定的值$T$，未达到则返回第2步，否则将这$T$个基学习器进行加权结合</li>
</ol>
<p>Boosting族算法中最著名的是AdaBoost，其中$y_i \in { -1, +1 }$，$f$是真实函数。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/288ec896965340bb4.png" alt="288ec896965340bb4.png"></p>
<p>AdaBoost算法有多种推导方式，比较容易理解的是基于“加性模型”</p>
<script type="math/tex; mode=display">
H(\boldsymbol{x}) = \sum^T_{t=1}\alpha_th_t(\boldsymbol{x})</script><p>来最小化指数损失函数</p>
<script type="math/tex; mode=display">
l_{\exp}(H|\mathcal{D}) = \mathbb{E}_{\boldsymbol{x} \sim \mathcal{D}}[e^{-f(\boldsymbol{x})H(\boldsymbol{x})}]</script><p>对于二分类$y_i \in { -1, +1 }$来说，损失函数可以有<code>0-1损失</code>、<code>Logistic loss</code>、<code>Hinge loss</code>、<code>指数损失(Exponential loss)</code>、<code>modified Huber loss</code>，这里选择指数损失的原因推导如下：</p>
<p>若$H(\boldsymbol{x})$能令指数损失最小化，则考虑上式对$H(\boldsymbol{x})$的偏导数</p>
<script type="math/tex; mode=display">
\frac{\partial l_{\exp}(H|\mathcal{D})}{\partial H(\boldsymbol{x})} = -e^{-H(\boldsymbol{x})} P(f(\boldsymbol{x}) = 1|\boldsymbol{x}) + e^{H(\boldsymbol{x})} P(f(\boldsymbol{x}) = -1|\boldsymbol{x})</script><p>令上式为0，解得</p>
<script type="math/tex; mode=display">
H(\boldsymbol{x}) = \frac{1}{2}\ln\frac{P(f(\boldsymbol{x}) = 1|\boldsymbol{x})}{P(f(\boldsymbol{x}) = -1|\boldsymbol{x})}</script><p>因此有</p>
<script type="math/tex; mode=display">
sign(H(\boldsymbol{x})) = sign(\frac{1}{2}\ln\frac{P(f(\boldsymbol{x}) = 1|\boldsymbol{x})}{P(f(\boldsymbol{x}) = -1|\boldsymbol{x})})
\\
= \left\{\begin{matrix}
1, \quad P(f(\boldsymbol{x}) = 1|\boldsymbol{x}) > P(f(\boldsymbol{x}) = -1|\boldsymbol{x})\\ 
-1, \quad P(f(\boldsymbol{x}) = 1|\boldsymbol{x}) < P(f(\boldsymbol{x}) = -1|\boldsymbol{x})
\end{matrix}\right.
\\
= \underset{y\in \{ -1, 1 \}}{\arg \max} P(f(\boldsymbol{x}) = y|\boldsymbol{x})</script><p>也就是说$sign(H(\boldsymbol{x}))$达到了贝叶斯最优错误率。换言之，指数损失函数最小化等价于分类错误率最小化；也就是说，<code>指数损失</code>函数是分类任务原本<code>0-1损失</code>函数的一致替代损失函数。而且指数损失函数有更好的数学性质，因此用它作为优化目标。</p>
<ul>
<li>样本分布$\mathcal{D}_t$即各个样本的权值（这里相当于各个样本出现的概率），那么所有样本的权值的和必定为1；</li>
<li>基于分布$\mathcal{D}_t$从数据集$D$中训练出分类器$h_t$，即按照决策树的方式生成，比如信息增益，需要的参数如样本概率就对应样本权值分布；</li>
<li>如果误差大于0.5，那么放弃这个分类器，并且训练过程停止，因为明显拖后腿，此时样本分布出现了问题，后面提到的“重采样法”可以解决；</li>
<li>分类器权重$\alpha_t = \frac{1}{2}\ln(\frac{1-\epsilon_t}{\epsilon_t}) &gt; 0$，显然，错误率越小，分类器权重越大，权重计算方式证明如下；</li>
<li>针对某个样本来说，若当前分类器能正确分类此样本，那么此样本的权重减小（乘以$\exp(-\alpha_t)$），若当前分类器不能正确分类此样本，那么此样本的权重增加（乘以$\exp(\alpha_t)$），两种做法都进行了规范化，样本权重计算方式证明如下。</li>
</ul>
<hr>
<p>分类器权重$\alpha_t$公式证明</p>
<p>当基学习器$h_t$基于分布$\mathcal{D}_t$产生后，该基学习器的权重$\alpha_t$应使得$\alpha_th_t$最小化指数损失函数</p>
<script type="math/tex; mode=display">
l_{\exp}(\alpha_th_t|\mathcal{D}_t) = \mathbb{E}_{\boldsymbol{x} \sim \mathcal{D}_t}[e^{-f(\boldsymbol{x})\alpha_th_t(\boldsymbol{x})}]
\\
= \mathbb{E}_{\boldsymbol{x} \sim \mathcal{D}_t}[e^{-\alpha_t}\mathbb{I}(f(\boldsymbol{x}) = h_t(\boldsymbol{x})) + e^{\alpha_t}\mathbb{I}(f(\boldsymbol{x}) \neq h_t(\boldsymbol{x}))]
\\
= e^{-\alpha_t}P_{\boldsymbol{x} \sim\mathcal{D}_t}(f(\boldsymbol{x}) = h_t(\boldsymbol{x})) + e^{\alpha_t}P_{\boldsymbol{x} \sim\mathcal{D}_t}(f(\boldsymbol{x}) \neq h_t(\boldsymbol{x}))
\\
= e^{-\alpha_t}(1-\epsilon_t) + e^{\alpha_t}\epsilon_t
\\
\mathbb{I}指示函数，真取1，假取0</script><p>其中$\epsilon<em>t = P</em>{\boldsymbol{x}\sim \mathcal{D}_t}(h_t(\boldsymbol{x}) \neq f(\boldsymbol{x}))$，考虑指数损失函数的导数</p>
<script type="math/tex; mode=display">
\frac{\partial l_{\exp}(\alpha_th_t|\mathcal{D}_t)}{\partial \alpha_t} = -e^{-\alpha_t}(1-\epsilon_t) + e^{\alpha_t}\epsilon_t</script><p>令上式为0，解得</p>
<script type="math/tex; mode=display">
\alpha_t = \frac{1}{2} \ln (\frac{1-\epsilon_t}{\epsilon_t})</script><p>证毕</p>
<hr>
<p>样本权重更新公式证明</p>
<p>AdaBoost算法在获得$H<em>{t-1}$之后样本分布将进行调整，使得下一轮的基学习器$h_t$能纠正$H</em>{t-1}$的一些错误，即最小化</p>
<script type="math/tex; mode=display">
l_{\exp}(H_{t-1} + h_t|\mathcal{D}) = \mathbb{E}_{\boldsymbol{x}\sim \mathcal{D}}[e^{-f(\boldsymbol{x})(H_{t-1}(\boldsymbol{x})+h_t(\boldsymbol{x}))}]
\\
= \mathbb{E}_{\boldsymbol{x}\sim \mathcal{D}}[e^{-f(\boldsymbol{x})H_{t-1}(\boldsymbol{x})}e^{-f(\boldsymbol{x})h_t(\boldsymbol{x})}]</script><p><em>注意这里没有用$\alpha_th_t$是因为在循环过程中是不需要使用分类器权重，我们在最后输出模型时才使用了基学习器权重$\alpha_t$</em></p>
<p>又因为$f^2(\boldsymbol{x}) = h_t^2(\boldsymbol{x}) = 1$，后半部分的泰勒展开式近似为</p>
<script type="math/tex; mode=display">
l_{\exp}(H_{t-1} + h_t|\mathcal{D}) \simeq \mathbb{E}_{\boldsymbol{x}\sim \mathcal{D}}[e^{-f(\boldsymbol{x})H_{t-1}(\boldsymbol{x})}(1- f(\boldsymbol{x})h_t(\boldsymbol{x}) + \frac{f^2(\boldsymbol{x})h^2_t(\boldsymbol{x})}{2})]
\\
= \mathbb{E}_{\boldsymbol{x}\sim \mathcal{D}}[e^{-f(\boldsymbol{x})H_{t-1}(\boldsymbol{x})}(1- f(\boldsymbol{x})h_t(\boldsymbol{x}) + \frac{1}{2})]</script><p>于是理想的基学习器</p>
<script type="math/tex; mode=display">
h_t(\boldsymbol{x}) = \underset{h}{\arg \min} l_{\exp}(H_{t-1} + h|\mathcal{D})
\\
= \underset{h}{\arg \min} \mathbb{E}_{\boldsymbol{x}\sim \mathcal{D}}[e^{-f(\boldsymbol{x})H_{t-1}(\boldsymbol{x})}(1- f(\boldsymbol{x})h(\boldsymbol{x}) + \frac{1}{2})]
\\
= \underset{h}{\arg \max} \mathbb{E}_{\boldsymbol{x}\sim \mathcal{D}}[e^{-f(\boldsymbol{x})H_{t-1}(\boldsymbol{x})} f(\boldsymbol{x})h(\boldsymbol{x})]
\\
= \underset{h}{\arg \max} \mathbb{E}_{\boldsymbol{x}\sim \mathcal{D}}[\frac{e^{-f(\boldsymbol{x})H_{t-1}(\boldsymbol{x})}}{\mathbb{E}_{\boldsymbol{x}\sim \mathcal{D}}[e^{-f(\boldsymbol{x})H_{t-1}(\boldsymbol{x})}]} f(\boldsymbol{x})h(\boldsymbol{x})]</script><p>注意到$\mathbb{E}<em>{\boldsymbol{x}\sim \mathcal{D}}[e^{-f(\boldsymbol{x})H</em>{t-1}(\boldsymbol{x})}]$是一个常数，所以被除也不影响结果。令$\mathcal{D}_t$表示一个分布</p>
<script type="math/tex; mode=display">
\mathcal{D}_t(\boldsymbol{x}) = \frac{\mathcal{D}(\boldsymbol{x})e^{-f(\boldsymbol{x})H_{t-1}(\boldsymbol{x})}}{\mathbb{E}_{\boldsymbol{x}\sim \mathcal{D}}[e^{-f(\boldsymbol{x})H_{t-1}(\boldsymbol{x})}]}</script><p>根据数学期望的定义，这等价于令</p>
<script type="math/tex; mode=display">
h_t(\boldsymbol{x}) = \underset{h}{\arg \max} \mathbb{E}_{\boldsymbol{x}\sim \mathcal{D}}[\frac{e^{-f(\boldsymbol{x})H_{t-1}(\boldsymbol{x})}}{\mathbb{E}_{\boldsymbol{x}\sim \mathcal{D}}[e^{-f(\boldsymbol{x})H_{t-1}(\boldsymbol{x})}]} f(\boldsymbol{x})h(\boldsymbol{x})]
\\
= \underset{h}{\arg \max} \mathbb{E}_{\boldsymbol{x}\sim \mathcal{D}_t}[f(\boldsymbol{x})h(\boldsymbol{x})]</script><p>由$f(\boldsymbol{x})h(\boldsymbol{x}) \in {-1, 1}$，有</p>
<script type="math/tex; mode=display">
f(\boldsymbol{x})h(\boldsymbol{x}) = 1- 2\mathbb{I}(f(\boldsymbol{x}) \neq h(\boldsymbol{x}))</script><p>则理想的基学习器</p>
<script type="math/tex; mode=display">
h_t(\boldsymbol{x}) = \underset{h}{\arg \max} \mathbb{E}_{\boldsymbol{x}\sim \mathcal{D}_t} [\mathbb{I}(f(\boldsymbol{x}) \neq h(\boldsymbol{x}))]</script><p>由此可见，理想的$h<em>t$将在分布$\mathcal{D}_t$下最小化分类误差。因此弱分类器将基于分布$\mathcal{D}_t$来训练，且分类误差应小于0.5。考虑到$\mathcal{D}_t$和$\mathcal{D}</em>{t+1}$的关系，有</p>
<script type="math/tex; mode=display">
\mathcal{D}_{t+1}(\boldsymbol{x}) = \frac{\mathcal{D}(\boldsymbol{x})e^{-f(\boldsymbol{x})H_t(\boldsymbol{x})}}{\mathbb{E}_{\boldsymbol{x}\sim \mathcal{D}}[e^{-f(\boldsymbol{x})H_t(\boldsymbol{x})}]}
\\
= \frac{\mathcal{D}(\boldsymbol{x})e^{-f(\boldsymbol{x})H_{t-1}(\boldsymbol{x})}e^{-f(\boldsymbol{x})\alpha_th_t(\boldsymbol{x})}}{\mathbb{E}_{\boldsymbol{x}\sim \mathcal{D}}[e^{-f(\boldsymbol{x})H_t(\boldsymbol{x})}]}
\\
= \mathcal{D}_t(\boldsymbol{x}) \cdot e^{-f(\boldsymbol{x})\alpha_th_t(\boldsymbol{x})} \frac{\mathbb{E}_{\boldsymbol{x}\sim \mathcal{D}}[e^{-f(\boldsymbol{x})H_{t-1}(\boldsymbol{x})}]}{\mathbb{E}_{\boldsymbol{x}\sim \mathcal{D}}[e^{-f(\boldsymbol{x})H_t(\boldsymbol{x})}]}</script><p><em>注意这里将$H<em>t$分解为$H</em>{t-1}$和$\alpha_th_t$，是因为递归式已经将$H_t$作为最优解，即输出模型，所以需要加上基学习器权重</em></p>
<p>证毕</p>
<hr>
<p>通过上面的证明，我们会发现Boosting算法的关键是更新样本权重然后生成新的基学习器，在上面的算法中使用的是“重赋权法”；在某些任务中，基学习算法不支持带权样本，则需要通过“重采样法”来处理，根据样本分布对训练集进行重新采样，再用重采样得到的样本集对基学习器进行训练。一般而言，这两种方式没有显著的优劣区别。</p>
<p>需要注意的是，之前设置了0.5误差阈值，一旦条件不满足，则当前基学习器即被抛弃，且学习过程停止，若采用“重采样法”，则可获得“重启动”机会以避免训练过早停止。</p>
<p><strong>问题：当t=1，初始化分布为均分时，若第一个基学习器误差超过0.5，重采样法的样本分布从何而来</strong></p>
<p>从偏差-方差分解的角度看，Boosting主要关注降低偏差，因此Boosting能基于泛化性能相当弱的学习器构建出很强的集成。</p>
<h2 id="3-Bagging与随机森林"><a href="#3-Bagging与随机森林" class="headerlink" title="3. Bagging与随机森林"></a>3. Bagging与随机森林</h2><p>Boosting算法通过样本分布更新产生差异化，从而形成不同的基学习器，它是串行的，使用了全部的训练样本；Bagging与随机森林算法形成基学习器的方式是并行的，因此每个基学习器的训练数据集需要进行设计从而产生差异，一种简单的方式是根据不同的分布对完整数据集进行采样，每一个分布对应一个基学习器，这样就产生了差异，但是也会导致训练过程仅使用了一部分数据，效果不好。为了解决这个问题，可以考虑使用相互有交叠的采样子集。</p>
<h3 id="3-1-Bagging"><a href="#3-1-Bagging" class="headerlink" title="3.1 Bagging"></a>3.1 Bagging</h3><p>Bagging算法基于<strong>自助采样法</strong>进行随机采样，一个样本在$m$次采样中始终不会被取到的概率是</p>
<script type="math/tex; mode=display">
\underset{m \rightarrow \infty}{\lim} (1 - \frac{1}{m})^m = \frac{1}{e} \approx 0.368</script><p>也就是说，初始训练集中约有63.2%的样本出现在采样集中。</p>
<p>那么采样出$T$个含有$m$个样本的采样集，基于每个采样集训练出一个基学习器，再将这些基学习器集成，这就是Bagging算法的基本流程。Bagging集成策略对于分类任务通常是简单投票法，对于回归任务通常是简单平均法。若票数相同，最简单的是随机选择一个，也可以进一步考察学习器投票的置信度来确定。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/3120bafa5f0a20828.png" alt="3120bafa5f0a20828.png"></p>
<p>Bagging的计算复杂度与训练一个学习器的复杂度同阶，而且由于可以并行训练，所以Bagging是一个很高效的集成学习算法。与标准AdaBoost算法只适用于二分类任务不同（AdaBoost变体可以处理多分类或者回归任务），Bagging能不经修改地用于多分类、回归等任务。</p>
<p>值得一提的是，自助采样法还给Bagging带来了另一个优点：剩下36.8%地样本可用作验证集来对泛化性能进行“包外估计”。令$D_t$表示$h_t$实际使用地训练样本集，令$H^{oob}(\boldsymbol{x})$表示对样本$\boldsymbol{x}$地包外预测，有</p>
<script type="math/tex; mode=display">
H^{oob}(\boldsymbol{x}) = \underset{y \in \mathcal{Y}}{\arg \max} \sum^T_{t=1}\mathbb{I}(h_t(\boldsymbol{x})=y) \cdot \mathbb{I}(\boldsymbol{x} \notin D_t)</script><p>则Bagging泛化误差地包外估计为</p>
<script type="math/tex; mode=display">
\epsilon^{oob} = \frac{1}{|D|}\sum_{(\boldsymbol{x}, y)\in D}\mathbb{I}(H^{oob}(\boldsymbol{x}) \neq y)</script><p>包外估计的其他用途：</p>
<ul>
<li>当基学习器是决策树时，可以使用包外样本来辅助剪枝；</li>
<li>用于估计决策树中各结点的后验概率以辅助对零训练样本结点的处理；</li>
<li>当基学习器时神经网络时，可使用包外样本来辅助早期停止以减小过拟合。</li>
</ul>
<p>从偏差-方差分解的角度看，Bagging主要关注降低方差，因此它在不剪枝决策树、神经网络等易受样本扰动的学习器上效用更为明显。</p>
<h3 id="3-2-随机森林"><a href="#3-2-随机森林" class="headerlink" title="3.2 随机森林"></a>3.2 随机森林</h3><p>随机森林RF是Bagging的一个扩展变体。</p>
<p>随机森林有两个特点：</p>
<ol>
<li>基学习器是决策树；</li>
<li>对基决策树的每个结点，先从该结点的属性集合中随机选择一个包含k个属性的子集，然后再从这个子集中选择最优属性用于划分。</li>
</ol>
<p>若令$k=d$，则基决策树的构建与传统决策树相同；若令$k=1$，则是随机选择一个属性用于划分；一般情况，推荐值$k = \log_2d$</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/41eb2b5527afb07e0.png" alt="41eb2b5527afb07e0.png"></p>
<p>随机森林的训练效率常优于Bagging，显然是因为Bagging选择最优属性考虑的是所有属性而随机森林考虑某一个随机属性集。</p>
<h2 id="4-结合策略"><a href="#4-结合策略" class="headerlink" title="4. 结合策略"></a>4. 结合策略</h2><p>学习器结合的三个好处：</p>
<ol>
<li>拟合更大的假设空间，增加泛化性能；</li>
<li>避免局部极小点；</li>
<li>扩大假设空间。</li>
</ol>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/5ba1d67313047c5a2.png" alt="5ba1d67313047c5a2.png"></p>
<p>假定集成包含$T$个基学习器${ h_1, h_2,…,h_T }$，其中$h_i$在示例$\boldsymbol{x}$上的输出为$h_i(\boldsymbol{x})$</p>
<h3 id="4-1-平均法"><a href="#4-1-平均法" class="headerlink" title="4.1 平均法"></a>4.1 平均法</h3><p>对数值型输出$h_i(\boldsymbol{x}) \in \mathbb{R}$</p>
<ul>
<li>简单平均法</li>
</ul>
<script type="math/tex; mode=display">
H(\boldsymbol{x}) = \frac{1}{T} \sum^T_{i=1}h_i(\boldsymbol{x})</script><ul>
<li>加权平均法</li>
</ul>
<script type="math/tex; mode=display">
H(\boldsymbol{x}) =  \sum^T_{i=1}w_ih_i(\boldsymbol{x})</script><p>其中$w<em>i$是个体学习器$h_i$的权重，通常要求$w_i \geqslant 0, \sum^T</em>{i=1}w_i = 1$，权重一般从训练数据中学习而得（比如权重大小与个体学习器误差大小成反比），实验和应用显示，加权并不一定优于简单平均法。一般而言，在个体学习器性能差异较大时宜使用加权平均法，否则简单平均法。</p>
<h3 id="4-2-投票法"><a href="#4-2-投票法" class="headerlink" title="4.2 投票法"></a>4.2 投票法</h3><p>对分类任务来说，总计$N$个类别${ c_1,c_2,…,c_N }$，$h_i$在样本$\boldsymbol{x}$上的预测输出表示为一个$N$维向量$(h_i^1(\boldsymbol{x});h_i^2(\boldsymbol{x});…;h_i^N(\boldsymbol{x}))$</p>
<ul>
<li>绝对多数投票法，超过半数</li>
</ul>
<script type="math/tex; mode=display">
H(\boldsymbol{x}) = \left\{\begin{matrix}
c_j, \quad if \quad \sum^T_{i=1}h_i^j(\boldsymbol{x}) > 0.5\sum^N_{k=1}\sum^T_{i=1}h_i^k(\boldsymbol{x}) \\ 
reject, \quad otherwise
\end{matrix}\right.</script><ul>
<li>相对多数投票法，得票最多（多个则随机选取）</li>
</ul>
<script type="math/tex; mode=display">
H(\boldsymbol{x}) = c_{\underset{j}{\arg \max}\sum^T_{i=1}h_i^j(\boldsymbol{x})}</script><ul>
<li>加权投票法，$w_i$定义同上文</li>
</ul>
<script type="math/tex; mode=display">
H(\boldsymbol{x}) = c_{\underset{j}{\arg \max}\sum^T_{i=1}w_ih_i^j(\boldsymbol{x})}</script><p>在现实任务中，个体学习器产生的结果$h_i^j(\boldsymbol{x})$可能是不同类型的：</p>
<ul>
<li>类标记：$h_i^j(\boldsymbol{x}) \in {0, 1}$，类似于onehot变量；</li>
<li>类概率：$h_i^j(\boldsymbol{x}) \in [0, 1]$，类似于softmax输出。</li>
</ul>
<p>不同类型的输出不可混用，若使用类概率需要规范化，使用类概率往往性能优于类标记；不同类型的基学习器输出的概率不能直接进行比较，需要转换为类标记然后再投票。</p>
<h3 id="4-3-学习法"><a href="#4-3-学习法" class="headerlink" title="4.3 学习法"></a>4.3 学习法</h3><p>Stacking是学习法的典型代表。这里个体学习器被称为初级学习器，用于结合的学习器称为次级学习器或元学习器。</p>
<p>Stacking先从初始数据集训练出初级学习器，然后“生成”一个新的数据集用于训练次级学习器。新的数据集中，初级学习器的输出被当作样例输入特征，而初始样本的标记仍被当作样例标记。初级学习器可以是同质也可以是异质的。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/69b39458dd617b376.png" alt="69b39458dd617b376.png"></p>
<p>注意</p>
<ul>
<li>训练阶段，次级训练集是利用初级学习器产生的，若直接用初级学习器的训练集来产生次级训练集，则过拟合风险较大（在相对正确的基础上更加正确）；</li>
<li>一般通过交叉验证法或留一法，用初级学习器未使用的样本来产生次级学习器的训练样本。</li>
</ul>
<p>次级学习器的输入属性表示和次级学习算法对Stacking集成的泛化性能有很大影响。有研究表明，将初级学习器的输出类概率作为次级学习器的输入属性，用多响应线性回归MLR作为次级学习算法的效果较好，在MLR中使用不同的属性集更佳。</p>
<p>MLR是基于线性回归的分类器，它对每个类别分别进行线性回归，属于该类的训练样例所对应的输出被置为1，其他类置为0；测试示例将被分给输出值最大的类。</p>
<p>贝叶斯模型平均BMA基于后验概率来为不同模型赋予权重，可视为加权平均法的一种特殊实现。理论上来说，若数据生成模型在当前考虑的模型中，且数据噪声很少，则BMA不差于Stacking；然而，在现实应用中无法保证数据生成模型一定在当前考虑的模型中，因此Stacking通常优于BMA。</p>
<h2 id="5-多样性"><a href="#5-多样性" class="headerlink" title="5. 多样性"></a>5. 多样性</h2><h3 id="5-1-误差-分歧分解"><a href="#5-1-误差-分歧分解" class="headerlink" title="5.1 误差-分歧分解"></a>5.1 误差-分歧分解</h3><p>假定个体学习器通过加权平均法结合产生的集成来完成回归学习任务$f: \mathbb{R}^d \rightarrow \mathbb{R}$。则单个学习器$h_i$的“分歧”定义为</p>
<script type="math/tex; mode=display">
A(h_i|\boldsymbol{x}) = (h_i(\boldsymbol{x}) - H(\boldsymbol{x}))^2</script><p>集成的“分歧”为</p>
<script type="math/tex; mode=display">
\bar{A}(h|\boldsymbol{x}) = \sum^T_{i=1} w_i A(h_i|\boldsymbol{x})
\\
= \sum^T_{i=1} w_i(h_i(\boldsymbol{x}) - H(\boldsymbol{x}))^2</script><p>个体学习器$h_i$和集成$H$的平方误差分别为</p>
<script type="math/tex; mode=display">
E(h_i|\boldsymbol{x}) = (f(\boldsymbol{x}) - h_i(\boldsymbol{x}))^2
\\
E(H|\boldsymbol{x}) = (f(\boldsymbol{x}) - H(\boldsymbol{x}))^2</script><p>令$\bar{E}(h|\boldsymbol{x}) = \sum^T_{i=1} w_i \cdot E(h_i|\boldsymbol{x})$表示个体学习器误差的加权均值，有</p>
<script type="math/tex; mode=display">
\bar{A}(h|\boldsymbol{x}) = \sum^T_{i=1}w_i E(h_i|\boldsymbol{x}) - E(H|\boldsymbol{x})
\\
= \bar{E}(h|\boldsymbol{x}) - E(H|\boldsymbol{x})</script><p>很显然，配方法化简得到上式。</p>
<p>上式对所有样本$\boldsymbol{x}$均成立，令$p(\boldsymbol{x})$表示样本的概率密度，则在全样本上有</p>
<script type="math/tex; mode=display">
\sum^T_{i=1}w_i \int A(h_i|\boldsymbol{x})p(\boldsymbol{x})d\boldsymbol{x}  = \sum^T_{i=1}w_i \int E(h_i|\boldsymbol{x})p(\boldsymbol{x})d\boldsymbol{x} - \int E(H|\boldsymbol{x})p(\boldsymbol{x})d\boldsymbol{x}</script><p>类似的，个体学习器$h_i$在全样本上的泛化误差和分歧项分别为</p>
<script type="math/tex; mode=display">
E_i = \int E(h_i|\boldsymbol{x})p(\boldsymbol{x})d\boldsymbol{x}
\\
A_i = \int A(h_i|\boldsymbol{x})p(\boldsymbol{x})d\boldsymbol{x}</script><p>集成的泛化误差为</p>
<script type="math/tex; mode=display">
E = \int E(H|\boldsymbol{x})p(\boldsymbol{x})d\boldsymbol{x}</script><p>将上式代入，再令$\bar{E} = \sum^T<em>{i=1}w_iE_i$表示个体学习器泛化误差的加权值，$\bar{A} = \sum^T</em>{i=1}w_iA_i$表示个体学习器的加权分歧值，有</p>
<script type="math/tex; mode=display">
E = \bar{E} - \bar{A}</script><p>这个式子表明：个体学习器准确性越高、多样性越大，则集成越好。</p>
<p>现实任务中很难将$\bar{E} - \bar{A}$作为优化目标求解，而且上式推导只适用于回归学习，难以推广到分类学习任务上去。</p>
<h3 id="5-2-多样性度量"><a href="#5-2-多样性度量" class="headerlink" title="5.2 多样性度量"></a>5.2 多样性度量</h3><p>个体学习器之间的多样性的度量方式，典型做法是考虑个体学习器的两两相似/不相似性。</p>
<p>给定数据集$D = { (\boldsymbol{x}_1, y_1),(\boldsymbol{x}_2, y_2),…,(\boldsymbol{x}_m, y_m) }$，对二分类任务，$y_i \in {-1, +1}$，分类器$h_i$与$h_j$的预测结果列联表为</p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>$h_i=+1$</th>
<th>$h_i=-1$</th>
</tr>
</thead>
<tbody>
<tr>
<td>$h_j=+1$</td>
<td>$a$</td>
<td>$c$</td>
</tr>
<tr>
<td>$h_j=-1$</td>
<td>$b$</td>
<td>$d$</td>
</tr>
</tbody>
</table>
</div>
<p>其中$a$表示$h_i$与$h_j$均预测为正类的样本数目；同理对$b, c, d$；$a+b+c+d=m$，基于此列联表，产生了各种多样性度量</p>
<ul>
<li>不合度量</li>
</ul>
<script type="math/tex; mode=display">
dis_{ij} = \frac{b+c}{m}</script><p>&emsp;值域$[0, 1]$，值越大多样性越大</p>
<ul>
<li>相关系数</li>
</ul>
<script type="math/tex; mode=display">
\rho_{ij} = \frac{ad-bc}{\sqrt{(a+b)(a+c)(c+d)(b+d)}}</script><p>&emsp;值域$[-1,1]$，若$h_i$与$h_j$无关，则值为0；若正相关为正数，否则为负数。</p>
<ul>
<li>$Q$-统计量</li>
</ul>
<script type="math/tex; mode=display">
Q_{ij} = \frac{ad-bc}{ad+bc}</script><p>&emsp;与$\rho<em>{ij}$符号相同，且$|Q</em>{ij}| \geqslant |\rho_{ij}|$</p>
<ul>
<li>$\kappa$-统计量</li>
</ul>
<script type="math/tex; mode=display">
\kappa = \frac{p_1 - p_2}{1-p_2}
\\
p_1 = \frac{a+d}{m}
\\
p_2 = \frac{(a+b)(a+c) + (c+d)(b+d)}{m^2}</script><p>&emsp;$p_1$是两个分类器取得一致的概率；$p_2$是两个分类器偶然达成一致的概率，可由数据集$D$估算；若分类器$h_i$与$h_j$在$D$上完全一致，则$\kappa = 1$；若仅是偶然达成一致，则$\kappa = 0$，通常为非负值，仅在$h_i$与$h_j$达成一致的概率甚至低于偶然性的情况下取负值。</p>
<h3 id="5-3-多样性增强"><a href="#5-3-多样性增强" class="headerlink" title="5.3 多样性增强"></a>5.3 多样性增强</h3><p>为了增强个体学习器的多样性，一般在数据样本、输入属性、输出表示、算法参数等方面加入随机性。</p>
<ul>
<li>数据样本扰动</li>
</ul>
<p>&emsp;Bagging的自助采样法，AdaBoost中使用序列采样，适用于决策树、神经网络等不稳定基学习器。</p>
<ul>
<li>输入属性扰动</li>
</ul>
<p>&emsp;随机森林中使用随机属性子集（随机子空间算法），适用于包含大量冗余属性的数据。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/725e25bfc29a550dd.png" alt="725e25bfc29a550dd.png"></p>
<ul>
<li>输出表示扰动</li>
</ul>
<p>&emsp;对输出表示进行操纵以增强多样性。比如对训练样本的类别标记稍作变动，如“翻转法”随机改变一些训练样本的标记；也可以对输出表示进行转化，如“输出调制法”将分类输出转化为回归输出后构建个体学习器；还可以将原任务拆分为多个可同时求解的子任务，如ECOC法。</p>
<ul>
<li>算法参数扰动</li>
</ul>
<p>&emsp;如神经网络的隐层神经元数、初始连接权值等差异会产生不同的神经网络。</p>
]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Theory</tag>
        <tag>Ensemble Learning</tag>
        <tag>Boosting</tag>
        <tag>Bagging</tag>
        <tag>Random Forest</tag>
        <tag>Stacking</tag>
      </tags>
  </entry>
  <entry>
    <title>生成式对抗网络</title>
    <url>/archives/b8a67b7c.html</url>
    <content><![CDATA[<p><strong>道高一尺魔高一丈，魔高一尺道高一丈</strong></p>
<p>参考：</p>
<blockquote>
<p><a href="https://arxiv.org/abs/1406.2661" target="_blank" rel="noopener">Generative Adversarial Networks</a><br><a href="https://juejin.im/post/5bd07e26e51d457a7c7bbc31" target="_blank" rel="noopener">[GAN学习系列] 初识GAN</a><br><a href="https://juejin.im/post/5bdd70886fb9a049f912028d" target="_blank" rel="noopener">[GAN学习系列2] GAN的起源</a><br><a href="https://zhuanlan.zhihu.com/p/25071913" target="_blank" rel="noopener">令人拍案叫绝的Wasserstein GAN</a><br><a href="https://github.com/soumith/ganhacks" target="_blank" rel="noopener">Tips and tricks to make GANs work</a><br><a href="https://arxiv.org/pdf/1611.07004v1.pdf" target="_blank" rel="noopener">Image-to-Image Translation with Conditional Adversarial Networks</a></p>
</blockquote>
<p>GAN，即生成式对抗网络，是一个生成模型，也是半监督和无监督学习模型，它可以在<strong>不需要大量标注数据</strong>的情况下学习深度表征。最大的特点就是提出了一种让两个深度网络对抗训练的方法。</p>
<p>GAN 主要就是两个网络组成，生成器网络(Generator)和判别器网络(Discriminator)，通过这两个网络的互相博弈，让生成器网络最终能够学习到输入数据的分布，这也就是 GAN 想达到的目的：学习输入数据的分布。</p>
<a id="more"></a>
<h2 id="1-基本原理"><a href="#1-基本原理" class="headerlink" title="1. 基本原理"></a>1. 基本原理</h2><!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/1f0b378fcabfd36c7.png" alt="1f0b378fcabfd36c7.png"></p>
<ul>
<li>D 是判别器，负责对输入的真实数据和由 G 生成的假数据进行判断，其输出是 0 和 1，即它本质上是一个二值分类器，目标就是对输入为真实数据输出是 1，对假数据的输入，输出是 0；</li>
<li>G 是生成器，它接收的是一个随机噪声，并生成图像。</li>
</ul>
<p>在训练的过程中，G 的目标是尽可能生成足够真实的数据去迷惑 D，而 D 就是要将 G 生成的图片都辨别出来，这样两者就是互相博弈，最终是要达到一个平衡，也就是纳什均衡。</p>
<p>需要注意的是，在原始GAN中，生成器接收的是随机噪声（大小可能在$[-1， 1]$之间），输出的是具有真实图片风格（不完全相同）的图片，也不需要标签，也就是说从噪声到图片的映射是不可描述的，而学习到的<strong>输入数据的特征</strong>仅能够作用在随机噪声上，因此原始GAN的作用被限制了，如果能将生成器的输入为某个与真实图片相关的特征映射，那么我们就可以利用这个生成器来进行图片风格迁移。</p>
<h2 id="2-GAN特点"><a href="#2-GAN特点" class="headerlink" title="2. GAN特点"></a>2. GAN特点</h2><p>优：</p>
<ul>
<li>对于生成式模型来说，可以类比<code>语音识别-RBM和DBN</code>以及<code>语音识别-HMM</code>，RBM和HMM都是基于隐变量状态来描述观察变量，而GAN可以不考虑隐变量而是通过神经网络来描述生成器和判别器，这也就意味着GAN不需要对状态作近似推断，也不依赖马尔可夫链，仅需要反向传播即可训练网络，相比其他生成模型（VAE、玻尔兹曼机），可以生成更好的生成样本；</li>
<li>理论上，只要是可微分函数都可以用于构建 D 和 G，因为能够与深度神经网络结合做深度生成式模型；</li>
<li>G 的参数更新不是直接来自数据样本，而是使用来自 D 的反向传播；</li>
<li>GAN 是一种半监督学习模型，对训练集不需要太多有标签的数据；</li>
<li>没有必要遵循任何种类的因子分解去设计模型，所有的生成器和鉴别器都可以正常工作。</li>
</ul>
<p>劣：</p>
<ul>
<li>可解释性差，生成模型的分布$P_g(G)$没有显式的表达；</li>
<li>比较难训练，D 与 G 之间需要很好的同步，例如 D 更新 k 次而 G 更新一次；</li>
<li>训练 GAN 需要达到纳什均衡，有时候可以用梯度下降法做到，有时候做不到，我们还没有找到很好的达到纳什均衡的方法，所以训练 GAN 相比 VAE 或者 PixelRNN 是不稳定的，但我认为在实践中它还是比训练玻尔兹曼机稳定的多；</li>
<li>它很难去学习生成离散的数据，就像文本；</li>
<li>相比玻尔兹曼机，GANs 很难根据一个像素值去猜测另外一个像素值，GANs 天生就是做一件事的，那就是一次产生所有像素，你可以用 BiGAN 来修正这个特性，它能让你像使用玻尔兹曼机一样去使用 Gibbs 采样来猜测缺失值；</li>
<li>训练不稳定，G 和 D 很难收敛；</li>
<li>训练还会遭遇梯度消失、模式崩溃的问题；</li>
<li>缺乏比较有效的直接可观的评估模型生成效果的方法。</li>
</ul>
<h3 id="2-1-为什么训练会出现梯度消失和模式崩溃"><a href="#2-1-为什么训练会出现梯度消失和模式崩溃" class="headerlink" title="2.1 为什么训练会出现梯度消失和模式崩溃"></a>2.1 为什么训练会出现梯度消失和模式崩溃</h3><p>梯度消失和模式奔溃其实就是这种情况下的两个结果，分别对应 D 和 G 是强大的一方的结果。</p>
<ol>
<li>对于梯度消失的情况是<strong>D 越好，G 的梯度消失越严重</strong>，因为 G 的梯度更新来自 D，而在训练初始阶段，G 的输入是随机生成的噪声，肯定不会生成很好的图片，D 会很容易就判断出来真假样本，也就是 D 的训练几乎没有损失，也就没有有效的梯度信息回传给 G 让 G 去优化自己。这样的现象叫做 gradient vanishing，梯度消失问题。</li>
<li>对于模式奔溃（mode collapse）问题，主要就是<strong>G 比较强，导致 D 不能很好区分出真实图片和 G 生成的假图片</strong>，而如果此时 G 其实还不能完全生成足够真实的图片的时候，但 D 却分辨不出来，并且给出了正确的评价，那么 G 就会认为这张图片是正确的，接下来就继续这么输出这张或者这些图片，然后 D 还是给出正确的评价，于是两者就是这么相互欺骗，这样 G 其实就只会输出固定的一些图片，导致的结果除了生成图片不够真实，还有就是多样性不足的问题。</li>
</ol>
<h3 id="2-2-为什么GAN不适合处理文本数据"><a href="#2-2-为什么GAN不适合处理文本数据" class="headerlink" title="2.2 为什么GAN不适合处理文本数据"></a>2.2 为什么GAN不适合处理文本数据</h3><ol>
<li>文本数据相比较图片数据来说是离散的，因为对于文本来说，通常需要将一个词映射为一个高维的向量，最终预测的输出是一个one-hot向量，假设 softmax 的输出是$(0.2， 0.3， 0.1，0.2，0.15，0.05)$，那么变为 onehot是$(0，1，0，0，0，0)$，如果softmax输出是$(0.2， 0.25， 0.2， 0.1，0.15，0.1 )$，one-hot 仍然是$(0， 1， 0， 0， 0， 0)$，所以对于生成器来说，G 输出了不同的结果, 但是 D 给出了同样的判别结果，并不能将梯度更新信息很好的传递到 G 中去，所以 D 最终输出的判别没有意义。</li>
<li>GAN 的损失函数是 JS 散度，JS 散度不适合衡量不想交分布之间的距离。（WGAN 虽然使用 wassertein 距离代替了 JS 散度，但是在生成文本上能力还是有限，GAN 在生成文本上的应用有 seq-GAN,和强化学习结合的产物）</li>
</ol>
<h3 id="2-3-为什么GAN中的优化器不常用SGD"><a href="#2-3-为什么GAN中的优化器不常用SGD" class="headerlink" title="2.3 为什么GAN中的优化器不常用SGD"></a>2.3 为什么GAN中的优化器不常用SGD</h3><ol>
<li>SGD 容易震荡，容易使 GAN 的训练更加不稳定。</li>
<li>GAN 的目的是在高维非凸的参数空间中找到纳什均衡点，GAN 的纳什均衡点是一个鞍点，但是 SGD 只会找到局部极小值，因为 SGD 解决的是一个寻找最小值的问题，但 GAN 是一个博弈问题。</li>
</ol>
<h2 id="3-训练技巧"><a href="#3-训练技巧" class="headerlink" title="3. 训练技巧"></a>3. 训练技巧</h2><h3 id="3-1-对输入进行规范化"><a href="#3-1-对输入进行规范化" class="headerlink" title="3.1 对输入进行规范化"></a>3.1 对输入进行规范化</h3><ul>
<li>将输入规范化到 -1 和 1 之间</li>
<li>G 的输出层采用Tanh激活函数</li>
</ul>
<h3 id="3-2-采用修正的损失函数"><a href="#3-2-采用修正的损失函数" class="headerlink" title="3.2 采用修正的损失函数"></a>3.2 采用修正的损失函数</h3><p>在原始 GAN 论文中，损失函数 G 是要$\min \log(1-D)$, 但实际使用的时候是采用$\max \log(D)$，作者给出的原因是前者会导致梯度消失问题。<br>但实际上，即便是作者提出的这种实际应用的损失函数也是存在问题，即模崩溃的问题，在接下来提出的 GAN 相关的论文中，就有不少论文是针对这个问题进行改进的，如 WGAN 模型就提出一种新的损失函数。</p>
<h3 id="3-3-从球体上采样噪声"><a href="#3-3-从球体上采样噪声" class="headerlink" title="3.3 从球体上采样噪声"></a>3.3 从球体上采样噪声</h3><ul>
<li>不要采用均匀分布来采样</li>
<li>从高斯分布中采样得到随机噪声</li>
<li>当进行插值操作的时候，从大圆进行该操作，而不要直接从点 A 到 点 B 直线操作，如下图所示</li>
</ul>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/216e62e351d8cc292.png" alt="216e62e351d8cc292.png"></p>
<h3 id="3-4-BatchNorm"><a href="#3-4-BatchNorm" class="headerlink" title="3.4 BatchNorm"></a>3.4 BatchNorm</h3><ul>
<li>采用 mini-batch BatchNorm，要保证每个 mini-batch 都是真实图片或者都是生成图片</li>
<li>不采用 BatchNorm 的时候，可以采用 instance normalization（对每个样本的规范化操作，减均值除以标准差）</li>
<li>可以使用虚拟批量归一化(virtural batch normalization):开始训练之前预定义一个 batch R，对每一个新的 batch X，都使用 R+X 的级联来计算归一化参数</li>
</ul>
<h3 id="3-5-避免稀疏的梯度：ReLU、MaxPool"><a href="#3-5-避免稀疏的梯度：ReLU、MaxPool" class="headerlink" title="3.5 避免稀疏的梯度：ReLU、MaxPool"></a>3.5 避免稀疏的梯度：ReLU、MaxPool</h3><ul>
<li>稀疏梯度会影响 GAN 的稳定性</li>
<li>在 G 和 D 中采用 LeakyReLU 代替 Relu 激活函数</li>
<li>对于下采样操作，可以采用平均池化(Average Pooling) 和 Conv2d+stride 的替代方案</li>
<li>对于上采样操作，可以使用 <a href="https://arxiv.org/abs/1609.05158" target="_blank" rel="noopener">PixelShuffle</a>, ConvTranspose2d + stride</li>
</ul>
<h3 id="3-6-标签的使用"><a href="#3-6-标签的使用" class="headerlink" title="3.6 标签的使用"></a>3.6 标签的使用</h3><ul>
<li>标签平滑。也就是如果有两个目标标签，假设真实图片标签是 1，生成图片标签是 0，那么对每个输入例子，如果是真实图片，采用 0.7 到 1.2 之间的一个随机数字来作为标签，而不是 1；一般是采用单边标签平滑</li>
<li>在训练 D 的时候，偶尔翻转标签</li>
<li>有标签数据就尽量使用标签</li>
</ul>
<h3 id="3-7-DCGAN-混合模型"><a href="#3-7-DCGAN-混合模型" class="headerlink" title="3.7 DCGAN/混合模型"></a>3.7 DCGAN/混合模型</h3><ul>
<li>尽量使用DCGAN</li>
<li>如果DCGAN不稳定，使用混合模型：KL+GAN或者VAE+GAN</li>
</ul>
<h3 id="3-8-使用RL的稳定性tricks"><a href="#3-8-使用RL的稳定性tricks" class="headerlink" title="3.8 使用RL的稳定性tricks"></a>3.8 使用RL的稳定性tricks</h3><ul>
<li>训练过程回放<ul>
<li>缓存之前的生成器生成的结果，偶尔展示出来</li>
<li>保存G和D的检查点，偶尔将当前G和D置换为以前保存的G和D，以训练几轮</li>
</ul>
</li>
<li>All stability tricks that work for deep deterministic policy gradients</li>
</ul>
<h3 id="3-9-使用-Adam-优化器"><a href="#3-9-使用-Adam-优化器" class="headerlink" title="3.9 使用 Adam 优化器"></a>3.9 使用 Adam 优化器</h3><ul>
<li>遵守Adam规则</li>
<li>D使用SGD，G使用Adam</li>
</ul>
<h3 id="3-10-尽早追踪失败的原因"><a href="#3-10-尽早追踪失败的原因" class="headerlink" title="3.10 尽早追踪失败的原因"></a>3.10 尽早追踪失败的原因</h3><ul>
<li>D 的 loss 变成 0，那么这就是训练失败了</li>
<li>检查规范的梯度：如果超过 100，那出问题了</li>
<li>如果训练正常，那么 D loss 有低方差并且随着时间降低</li>
<li>如果 g loss 稳定下降，那么它是用糟糕的生成样本欺骗了 D</li>
</ul>
<h3 id="3-11-不要通过统计学来平衡-loss（除非你有一个好的理由）"><a href="#3-11-不要通过统计学来平衡-loss（除非你有一个好的理由）" class="headerlink" title="3.11 不要通过统计学来平衡 loss（除非你有一个好的理由）"></a>3.11 不要通过统计学来平衡 loss（除非你有一个好的理由）</h3><ul>
<li>不要试图寻找一个训练轮数以避免模式崩溃（无用的做法）</li>
<li>如果要这样做，需要制定一个准则而非依靠直觉</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while lossD &gt; A:</span><br><span class="line">  train D</span><br><span class="line">while lossG &gt; B:</span><br><span class="line">  train G</span><br></pre></td></tr></table></figure>
<h3 id="3-12-给输入添加噪声，随时间衰减"><a href="#3-12-给输入添加噪声，随时间衰减" class="headerlink" title="3.12 给输入添加噪声，随时间衰减"></a>3.12 给输入添加噪声，随时间衰减</h3><ul>
<li>给 D 的输入添加人为的噪声<ul>
<li><a href="https://www.inference.vc/instance-noise-a-trick-for-stabilising-gan-training/" target="_blank" rel="noopener">www.inference.vc/instance-no…</a></li>
<li><a href="https://openreview.net/forum?id=Hk4_qw5xe" target="_blank" rel="noopener">openreview.net/forum?id=Hk…</a></li>
</ul>
</li>
<li>给 G 的每层都添加高斯噪声</li>
</ul>
<h3 id="3-13-对于-Conditional-GANs-的离散变量"><a href="#3-13-对于-Conditional-GANs-的离散变量" class="headerlink" title="3.13 对于 Conditional GANs 的离散变量"></a>3.13 对于 Conditional GANs 的离散变量</h3><ul>
<li>使用一个 Embedding 层</li>
<li>对输入图片添加一个额外的通道</li>
<li>保持 embedding 低维并通过上采样操作来匹配图像的通道大小</li>
</ul>
<h3 id="3-14-在-G-的训练和测试阶段使用-Dropouts"><a href="#3-14-在-G-的训练和测试阶段使用-Dropouts" class="headerlink" title="3.14 在 G 的训练和测试阶段使用 Dropouts"></a>3.14 在 G 的训练和测试阶段使用 Dropouts</h3><ul>
<li>以 dropout 的形式提供噪声(50%的概率)</li>
<li>训练和测试阶段，在 G 的几层使用</li>
</ul>
<h2 id="4-对抗样本"><a href="#4-对抗样本" class="headerlink" title="4. 对抗样本"></a>4. 对抗样本</h2><p><strong>对抗样本(adversarial example)，它是指经过精心计算得到的用于误导分类器的样本</strong>。例如下图就是一个例子，左边是一个熊猫，但是添加了少量随机噪声变成右图后，分类器给出的预测类别却是长臂猿，但视觉上左右两幅图片并没有太大改变。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/3279e8cd93152cfbd.png" alt="3279e8cd93152cfbd.png"></p>
<p>这是因为图像分类器本质上是高维空间的一个复杂的决策边界。当然涉及到图像分类的时候，由于是高维空间而不是简单的两维或者三维空间，我们无法画出这个边界出来。但是我们可以肯定的是，训练完成后，分类器是无法泛化到所有数据上，除非我们的训练集包含了分类类别的所有数据，但实际上我们做不到。而做不到泛化到所有数据的分类器，其实就会过拟合训练集的数据，这也就是我们可以利用的一点。</p>
<p>我们可以给图片添加一个非常接近于 0 的随机噪声，这可以通过控制噪声的 L2 范数来实现。L2 范数可以看做是一个向量的长度，这里有个诀窍就是图片的像素越多，即图片尺寸越大，其平均 L2 范数也就越大。因此，当添加的噪声的范数足够低，那么视觉上你不会觉得这张图片有什么不同，正如上述右边的图片一样，看起来依然和左边原始图片一模一样；但是，在向量空间上，添加噪声后的图片和原始图片已经有很大的距离了。</p>
<p>因为在 L2 范数看来，对于熊猫和长臂猿的决策边界并没有那么远，添加了非常微弱的随机噪声的图片可能就远离了熊猫的决策边界内，到达长臂猿的预测范围内，因此欺骗了分类器。</p>
<p>除了这种简单的添加随机噪声，还可以通过图像变形的方式，使得新图像和原始图像视觉上一样的情况下，让分类器得到有很高置信度的错误分类结果。这种过程也被称为对抗攻击(adversarial attack)，这种生成方式的简单性也是给 GAN 提供了解释。</p>
<h2 id="5-生成对抗网络GAN"><a href="#5-生成对抗网络GAN" class="headerlink" title="5. 生成对抗网络GAN"></a>5. 生成对抗网络GAN</h2><p>生成器G与判别器D组合起来就是GAN，其目标是</p>
<script type="math/tex; mode=display">
\underset{G}{\min} \underset{D}{\max} V(D, G) = \mathbb{E}_{\boldsymbol{x} \sim p_{data}(\boldsymbol{x})}[\log D(\boldsymbol{x})] + \mathbb{E}_{\boldsymbol{z} \sim p_{\boldsymbol{z}}(\boldsymbol{z})}[\log (1 - D(G(\boldsymbol{z})))]</script><p>对于判别器D来说，其更新梯度为</p>
<script type="math/tex; mode=display">
\bigtriangledown_{\theta_d}\frac{1}{m}\sum^m_{i=1}[\log D(\boldsymbol{x}^{(i)} ) + \log(1 - D(G(\boldsymbol{z}^{(i)})))]</script><p>对于生成器G来说，其更新梯度为</p>
<script type="math/tex; mode=display">
\bigtriangledown_{\theta_g}\frac{1}{m} \sum^m_{i=1}\log(1-D(G(\boldsymbol{z}^{(i)})))</script><p>这里根据它们的损失函数分析下，G 网络的训练目标就是让<strong>D(G(z)) 趋近于 1</strong>，这也是让其 loss 变小的做法；而 D 网络的训练目标是区分真假数据，自然是让<strong>D(x) 趋近于 1，而 D(G(z)) 趋近于 0</strong>。这就是两个网络相互对抗，彼此博弈的过程了。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/40bd67b4be7a9365f.png" alt="40bd67b4be7a9365f.png"></p>
<p>上图中，黑色曲线表示输入数据 x 的实际分布，绿色曲线表示的是 G 网络生成数据的分布，我们的目标自然是希望着两条曲线可以相互重合，也就是两个数据分布一致了。而蓝色的曲线表示的是生成数据对应于 D 的分布。</p>
<p>在 a 图中是刚开始训练的时候，D 的分类能力还不是最好，因此有所波动，而生成数据的分布也自然和真实数据分布不同，毕竟 G 网络输入是随机生成的噪声；到了 b 图的时候，D 网络的分类能力就比较好了，可以看到对于真实数据和生成数据，它是明显可以区分出来，也就是给出的概率是不同的；</p>
<p>而绿色的曲线，即 G 网络的目标是学习真实数据的分布，所以它会往蓝色曲线方向移动，也就是 c 图了，并且因为 G 和 D 是相互对抗的，当 G 网络提升，也会影响 D 网络的分辨能力。论文中，Ian Goodfellow 做出了证明，当假设 G 网络不变，训练 D 网络，最优的情况会是：</p>
<script type="math/tex; mode=display">
D_G^*(\boldsymbol{x}) = \frac{p_{data}(\boldsymbol{x})}{p_{data}(\boldsymbol{x}) + p_g(\boldsymbol{x})}</script><p>也就是当生成数据的分布$p<em>g(x)$趋近于真实数据分布$p</em>{data}(x)$的时候，D 网络输出的概率$D_G^*(x)$会趋近于 0.5，也就是 d 图的结果，这也是最终希望达到的训练结果，这时候 G 和 D 网络也就达到一个平衡状态。</p>
<h2 id="6-算法"><a href="#6-算法" class="headerlink" title="6. 算法"></a>6. 算法</h2><p>论文给出的算法实现过程如下所示</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/5f601eac50c9eb3e3.png" alt="5f601eac50c9eb3e3.png"></p>
<p>这里包含了一些训练的技巧和方法：</p>
<ol>
<li>首先 G 和 D 是同步训练，但两者训练次数不一样，通常是<strong>D 网络训练 k 次后，G 训练一次</strong>。主要原因是 GAN 刚开始训练时候会很不稳定；</li>
<li>D 的训练是<strong>同时输入真实数据和生成数据来计算 loss，而不是采用交叉熵（cross entropy）分开计算</strong>。不采用 cross entropy 的原因是这会让$D(G(z))$变为 0，导致没有梯度提供给 G 更新，而现在 GAN 的做法是会收敛到 0.5；</li>
<li>实际训练的时候，作者是采用$-\log(D(G(\boldsymbol{z})))$来代替$\log(1-D(G(\boldsymbol{z})))$，这是希望在训练初始就可以加大梯度信息，这是因为初始阶段 D 的分类能力会远大于 G 生成足够真实数据的能力，但这种修改也将让整个 GAN 不再是一个完美的零和博弈。</li>
</ol>
]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Theory</tag>
        <tag>GAN</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习-自编码器</title>
    <url>/archives/d178b7d8.html</url>
    <content><![CDATA[<p>参考：</p>
<blockquote>
<p><a href="https://github.com/exacity/deeplearningbook-chinese" target="_blank" rel="noopener">《深度学习》第14章 自编码器</a></p>
</blockquote>
<p>自编码器autoencoder是神经网络的一种，经过训练后能尝试将输入复制到输出。</p>
<p>自编码器可以看作两个部分：一个由函数$\boldsymbol{h} = f(\boldsymbol{x})$表示的编码器和一个生成重构的解码器$\boldsymbol{r}=g(\boldsymbol{h})$。但是如果一个自编码器只是简单地学会处处设置为$g(f(\boldsymbol{x})) = \boldsymbol{x}$，那么这个自编码器毫无意义。相反我们不应该将自编码器设计成输入到输出完全相等。通常需要加入一些约束，使得自编码器的输出与训练数据的输入相似而不相同。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/07e4cdb0725dc1a4f.png" alt="07e4cdb0725dc1a4f.png"></p>
<a id="more"></a>
<h2 id="1-欠完备自编码器"><a href="#1-欠完备自编码器" class="headerlink" title="1. 欠完备自编码器"></a>1. 欠完备自编码器</h2><p>通过限制$\boldsymbol{h}$的维度比$\boldsymbol{x}$小，这种编码维度小于输入维度的自编码器称为<strong>欠完备</strong>自编码器。显然，欠完备自编码器可以实现两个功能：降维和学习数据分布中最显著的特征。</p>
<p>损失函数为</p>
<script type="math/tex; mode=display">
L(\boldsymbol{x}, g(f(\boldsymbol{x})))</script><p>当解码器是线性的且$L$是均方误差，欠完备的自编码器会学习出与PCA相同的生成子空间。但是若编码器和解码器被赋予过大的容量，自编码器会执行简单的复制任务而捕捉不到任何有关数据分布的有用信息。</p>
<h2 id="2-正则自编码器"><a href="#2-正则自编码器" class="headerlink" title="2. 正则自编码器"></a>2. 正则自编码器</h2><p>若隐藏编码的维输允许与输入相等，或隐藏编码维输大于输入的过完备情况下，编码器和解码器很有可能仅仅是复制数据而学习不到数据分布的有用信息。</p>
<p>正则自编码器通过使用带约束的损失函数避免上述问题的产生。</p>
<h3 id="2-1-稀疏自编码器"><a href="#2-1-稀疏自编码器" class="headerlink" title="2.1 稀疏自编码器"></a>2.1 稀疏自编码器</h3><p>稀疏自编码器在训练时增加编码层的稀疏惩罚$\Omega(\boldsymbol{h})$：</p>
<script type="math/tex; mode=display">
L(\boldsymbol{x}, g(f(\boldsymbol{x}))) + \Omega(\boldsymbol{h})</script><p>上式如何理解，首先我们知道贝叶斯近似推断认为，正则化的惩罚对应于模型参数的先验概率分布，也就说最大化对数似然对应最大化$p(\boldsymbol{\theta}|\boldsymbol{x})$，相当于最大化$\log p(\boldsymbol{x}|\boldsymbol{\theta}) + \log p(\boldsymbol{\theta})$。$\log p(\boldsymbol{x}|\boldsymbol{\theta})$即通常的数据似然项，参数的对数先验项$\log p(\boldsymbol{\theta})$则包含了对$\boldsymbol{\theta}$特定值的偏好。但是正则自编码器不适用这样的解释是因为正则项取决于数据（损失$L$与惩罚$\Omega$面向对象不同）。虽然我们任可以认为正则项隐式地表达了对函数的偏好。</p>
<p>从$\boldsymbol{h}$的角度来看，我们可以将$\boldsymbol{h}$作为潜变量，而整个稀疏自编码器框架是对潜变量$\boldsymbol{h}$的生成模型的近似最大似然训练。对于具有明确联合分布$p<em>{model}(\boldsymbol{x}, \boldsymbol{h}) = p</em>{model}(\boldsymbol{h})p<em>{model}(\boldsymbol{x}|\boldsymbol{h})$的模型，可以将$p</em>{model}(\boldsymbol{h})$视为模型关于潜变量的先验分布，表示模型看到$\boldsymbol{x}$的信念先验。对数似然可分解为</p>
<script type="math/tex; mode=display">
\log p_{model}(\boldsymbol{x}) = \log \sum_{\boldsymbol{h}}p_{model}(\boldsymbol{h}, \boldsymbol{x})</script><p>我们可以认为自编码器使用一个高似然值$\boldsymbol{h}$的点估计近似这个总和。但是$\boldsymbol{h}$是参数编码器的输出，从这个角度，我们根据这个选择的$\boldsymbol{h}$，最大化如下</p>
<script type="math/tex; mode=display">
\log p_{model}(\boldsymbol{h},\boldsymbol{x}) = \log p_{model}(\boldsymbol{h}) + \log p_{model}(\boldsymbol{x}|\boldsymbol{h})</script><p>$\log p_{model}(\boldsymbol{h})$项能被稀疏诱导。如Laplace先验</p>
<script type="math/tex; mode=display">
p_{model}(h_i) = \frac{\lambda}{2} e^{-\lambda |h_t|}</script><p>对应于绝对值稀疏惩罚。将对数先验表示为绝对值惩罚，得到</p>
<script type="math/tex; mode=display">
\Omega(\boldsymbol{h}) = \lambda \sum_i |h_i|
\\
-\log p_{model}(\boldsymbol{h}) = \sum_i(\lambda|h_i| - \log \frac{\lambda}{2}) = \Omega(\boldsymbol{h}) + const</script><p>这里的常数项只跟$\lambda$有关，通常将$\lambda$视为超参数，因此可以丢弃不影响参数学习的常数项。</p>
<p>从稀疏性导致$p_{model}(\boldsymbol{h})$学习成近似最大似然的结果看，稀疏惩罚完全不是一个正则项。这仅仅影响模型关于潜变量的分布。这个观点提供了训练自编码器的另一个动机：这是近似训练生成模型的一种途径。这也给出了为什么自编码器学到的特征是有用的另一个解释：它们描述的潜变量可以解释输入。</p>
<h3 id="2-2-去噪自编码器"><a href="#2-2-去噪自编码器" class="headerlink" title="2.2 去噪自编码器"></a>2.2 去噪自编码器</h3><p>去噪自编码器DAE最小化</p>
<script type="math/tex; mode=display">
L(\boldsymbol{x}, g(f(\tilde{\boldsymbol{x}})))</script><p>其中$\tilde{\boldsymbol{x}}$是被某种噪声损坏的$\boldsymbol{x}$的副本。因此去噪自编码器必须撤销这些损坏，而不是简单地复制输入。</p>
<h3 id="2-3-惩罚导数作为正则"><a href="#2-3-惩罚导数作为正则" class="headerlink" title="2.3 惩罚导数作为正则"></a>2.3 惩罚导数作为正则</h3><p>类似稀疏自编码器中的惩罚项$\Omega$</p>
<script type="math/tex; mode=display">
L(\boldsymbol{x}, g(f(\boldsymbol{x}))) + \Omega(\boldsymbol{h}, \boldsymbol{x})</script><p>但是$\Omega$的形式不同</p>
<script type="math/tex; mode=display">
\Omega(\boldsymbol{h}, \boldsymbol{x}) = \lambda\sum_i ||\bigtriangledown_{\boldsymbol{x}}h_i||^2</script><p>这迫使模型学习一个在$\boldsymbol{x}$变化小时目标也没有太大变化的函数。因为这个惩罚只对训练数据适用，它迫使自编码器学习可以反映训练数据分布信息的特征。</p>
<p>这样正则化的自编码器被称为收缩自编码器（contractive autoencoder, CAE）。这种方法与去噪自编码器、流形学习和概率模型存在一定理论联系。</p>
<h2 id="3-表示能力、层的大小和深度"><a href="#3-表示能力、层的大小和深度" class="headerlink" title="3. 表示能力、层的大小和深度"></a>3. 表示能力、层的大小和深度</h2><p>自编码器通常只有单层的编码器和解码器，但这不是必然的。实际上深度编码器和解码器能提供更多优势。</p>
<p>万能近似定理保证至少有一层隐藏层且隐藏单元足够多的前馈神经网络能以任意精度近似任意函数（在很大范围里），这是非平凡深度（至少有一层隐藏层）的一个主要优点。这意味着具有单隐藏层的自编码器在数据域内能表示任意近似数据的恒等函数。但是，从输入到编码的映射是浅层的。这意味这我们不能任意添加约束，比如约束编码稀疏。深度自编码器（编码器至少包含一层额外隐藏层）在给定足够多的隐藏单元的情况下，能以任意精度近似任何从输入到编码的映射。</p>
<p>深度可以指数地降低表示某些函数的计算成本。深度也能指数地减少学习一些函数所需的训练数据量。</p>
<p>实验中，深度自编码器能比相应的浅层或线性自编码器产生更好的压缩效率。</p>
<p>训练深度自编码器的普遍策略是训练一堆浅层的自编码器来贪心地预训练相应的深度架构。所以即使最终目标是训练深度自编码器，我们也经常会遇到浅层自编码器。</p>
<h2 id="4-随机编码器和解码器"><a href="#4-随机编码器和解码器" class="headerlink" title="4. 随机编码器和解码器"></a>4. 随机编码器和解码器</h2><p>在给定隐藏编码$\boldsymbol{h}$的条件下，我们可以认为解码器提供了一个条件分布$p<em>{model}(\boldsymbol{x}|\boldsymbol{h})$。接着根据最小化$-\log p</em>{decoder}(\boldsymbol{x}|\boldsymbol{h})$来训练自编码器。损失函数的具体形式视$p_{decoder}$的形式而定：</p>
<ol>
<li>$\boldsymbol{x}$为连续实值，通常使用ReLU线性输出单元参数化高斯分布的均值，此时负对数似然对应均方误差；</li>
<li>$\boldsymbol{x}$为二值变量，对应伯努利分布，通常由Sigmoid输出单元确定；</li>
<li>$\boldsymbol{x}$为离散有限值，则对应Softmax分布，以此类推。</li>
</ol>
<p>与此同时，我们可以将<strong>编码函数</strong>$f(\boldsymbol{x})$的概念推广为<strong>编码分布</strong>$p_{encoder}(\boldsymbol{h}|\boldsymbol{x})$。</p>
<p>任何潜变量模型$p_{model}(\boldsymbol{h}, \boldsymbol{x})$定义一个随机编码器</p>
<script type="math/tex; mode=display">
p_{encoder}(\boldsymbol{h}|\boldsymbol{x}) = p_{model}(\boldsymbol{h}|\boldsymbol{x})</script><p>以及一个随机解码器</p>
<script type="math/tex; mode=display">
p_{decoder}(\boldsymbol{x}|\boldsymbol{h}) = p_{model}(\boldsymbol{x}|\boldsymbol{h})</script><!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/1a23380310c4540c3.png" alt="1a23380310c4540c3.png"></p>
<p>通常情况下，编码器和解码器的分布没有必要是与唯一一个联合分布$p_{model}(\boldsymbol{x}; \boldsymbol{h})$相容的条件分布。</p>
<h2 id="5-去噪自编码器"><a href="#5-去噪自编码器" class="headerlink" title="5. 去噪自编码器"></a>5. 去噪自编码器</h2><p><strong>去噪自编码器</strong>DAE是一类接受损坏数据作为输入，并训练来预测原始未被损坏数据作为输出的自编码器。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/2b32c9d9b628e403b.png" alt="2b32c9d9b628e403b.png"></p>
<p>DAE的训练过程如上图所示，引入了一个损坏过程$C(\tilde{\boldsymbol{x}}|\boldsymbol{x})$，这个条件分布代表给定数据样本$\boldsymbol{x}$产生损坏样本$\tilde{\boldsymbol{x}}$的概率。自编码器则根据一下过程，从训练数据对$(\boldsymbol{x}, \tilde{\boldsymbol{x}})$中学习重构分布$P_{reconstruct}(\boldsymbol{x}|\tilde{\boldsymbol{x}})$：</p>
<ol>
<li>从训练数据中采一个训练样本$\boldsymbol{x}$；</li>
<li>从$C(\tilde{\boldsymbol{x}}|\boldsymbol{x})$采一个损坏样本$\tilde{\boldsymbol{x}}$；</li>
<li>将$(\boldsymbol{x}, \tilde{\boldsymbol{x}})$作为训练样本来估计自编码器的重构分布$P<em>{reconstruct}(\boldsymbol{x}|\tilde{\boldsymbol{x}}) = p</em>{decoder}(\boldsymbol{x}|\boldsymbol{h})$。</li>
</ol>
<p>通常我们可以简单地对负对数似然$\log p_{decoder}(\boldsymbol{x} | \boldsymbol{h})$进行基于梯度法（如小批量梯度下降）的近似最小化。只要编码器是确定性的，去噪自编码器就是一个前馈网络，并且可以使用与其他前馈网络完全相同的方式进行训练。</p>
<p>因此我们可以认为DAE是在以下期望下进行随机梯度下降：</p>
<script type="math/tex; mode=display">
-\mathbb{E}_{\boldsymbol{x} \sim \hat{p}_{data}(\boldsymbol{x})}\mathbb{E}_{\tilde{\boldsymbol{x}} \sim C(\tilde{\boldsymbol{x}}|\boldsymbol{x})} \log p_{decoder}(\boldsymbol{x}|\boldsymbol{h} = f(\tilde{\boldsymbol{x}}))</script><p>其中$\hat{p}_{data}(\boldsymbol{x})$是训练数据的分布。</p>
<h3 id="5-1-得分估计"><a href="#5-1-得分估计" class="headerlink" title="5.1 得分估计"></a>5.1 得分估计</h3><p>得分匹配是最大似然的代替。它提供了概率分布的一致估计，促使模型在各个数据点$\boldsymbol{x}$上获得与数据分布相同的<strong>得分</strong>。在这种情况下，得分是一个特定的梯度场：</p>
<script type="math/tex; mode=display">
\bigtriangledown_{\boldsymbol{x}} \log p(\boldsymbol{x})</script><p>对于现在讨论的自编码器，理解学习$\log p<em>{data}$的梯度场是学习$p</em>{data}$结构的一种方式就足够了。</p>
<p>DAE的训练准则（条件高斯$p(\boldsymbol{x}|\boldsymbol{h})$）能让自编码器学到能估计数据分布得分的向量场$g(f(\boldsymbol{x})) -\boldsymbol{x}$，这是DAE的一个重要特性。如下图所示</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/33c3276895f4e972d.png" alt="33c3276895f4e972d.png"></p>
<p>对一类采用高斯噪声和均方误差作为重构误差的特定去噪自编码器（具有sigmoid 隐藏单元和线性重构单元）的去噪训练过程，与训练一类特定的被称为RBM的无向概率模型是等价的。</p>
<p>对于现在的讨论，我们只需要知道这个模型能显示的给出$p_{model}(\boldsymbol{x};\boldsymbol{\theta})$。当RBM使用<strong>去噪得分匹配</strong>算法训练时，它的学习算法与训练对应的去噪自编码器是等价的。在一个确定的噪声水平下，正则化的得分匹配不是一致估计量；相反它会恢复分布的一个模糊版本。然而，当噪声水平趋向于0且训练样本数趋向于无穷时，一致性就会恢复。</p>
<p>自编码器和RBM还存在其他联系。在RBM上应用得分匹配后，其代价函数将等价于重构误差结合类似CAE惩罚的正则项。自编码器的梯度是对RBM对比散度训练的近似。</p>
<p>对于连续的$\boldsymbol{x}$，高斯损坏和重构分布的去噪准则得到的得分估计适用于一般编码器和解码器的参数化。这意味着一个使用平方误差准则</p>
<script type="math/tex; mode=display">
||g(f(\tilde{\boldsymbol{x}})) - \boldsymbol{x}||^2</script><p>和噪声方差为$\sigma^2$的损坏</p>
<script type="math/tex; mode=display">
C(\tilde{\boldsymbol{x}} | \boldsymbol{x}) = N(\tilde{\boldsymbol{x}};\mu=\boldsymbol{x},\sum=\sigma^2 I)</script><p>的通用编码器-解码器架构可以用来训练估计得分。下图展示其中的工作原理</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/4f257f4afc83f01c5.png" alt="4f257f4afc83f01c5.png"></p>
<p>一般情况下，不能保证重构函数$g(f(\boldsymbol{x}))$减去输入$\boldsymbol{x}$后对应于某个函数的梯度，更不用说得分。</p>
<p>目前为止我们所讨论的仅限于去噪自编码器如何学习表示一个概率分布。更一般的，我们可能希望使用自编码器作为生成模型，并从其分布中进行采样。</p>
<p>“去噪自编码器”的命名指的不仅仅是学习去噪，而且可以学到一个好的内部表示（作为学习去噪的副效用）。这个想法提出较晚。学习到的表示可以被用来预训练更深的无监督网络或监督网络。与稀疏自编码器、稀疏编码、收缩自编码器等正则化的自编码器类似，DAE的动机是允许学习容量很高的编码器，同时防止在编码器和解码器学习一个无用的恒等函数。</p>
<h2 id="6-使用自编码器学习流形"><a href="#6-使用自编码器学习流形" class="headerlink" title="6. 使用自编码器学习流形"></a>6. 使用自编码器学习流形</h2><p>自编码器跟其他很多机器学习算法一样，也利用了数据集中在一个低维流形或者一小组这样的流形的思想。其中一些机器学习算法仅能学习到在流形上表现良好但给定不在流形上的输入会导致异常的函数。自编码器进一步借此想法，旨在学习流形的结构。</p>
<p>流形的一个重要特征是切平面（tangent plane）的集合。$d$维流形上的一点$\boldsymbol{x}$，切平面由能张成流形上允许变动的局部方向的$d$维基向量给出。如下图所示，这些局部方向决定了我们能如何微小地变动$\boldsymbol{x}$ 而保持于流形上。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/5b4681512ea9d03b1.png" alt="5b4681512ea9d03b1.png"></p>
<p>所有自编码器的训练过程涉及两种推动力的折衷：</p>
<ol>
<li>学习训练样本$\boldsymbol{x}$的表示$\boldsymbol{h}$使得$\boldsymbol{x}$能通过解码器近似地从$\boldsymbol{h}$中恢复。$\boldsymbol{x}$是从训练数据挑出的这一事实很关键，因为这意味着自编码器不需要成功重构不属于数据生成分布下的输入。</li>
<li>满足约束或正则惩罚。这可以是限制自编码器容量的架构约束，也可以是加入到重构代价的一个正则项。这些技术一般倾向那些对输入较不敏感的解。</li>
</ol>
<p>重要的原则是，自编码器必须有能力表示重构训练实例所需的变化。如果该数据生成分布集中靠近一个低维流形，自编码器能隐式产生捕捉这个流形局部坐标系的表示：仅在$\boldsymbol{x}$周围关于流形的相切变化需要对应于$\boldsymbol{h} = f(\boldsymbol{x})$中的变化。因此，编码器学习从输入空间$\boldsymbol{x}$到表示空间的映射，映射仅对沿着流形方向的变化敏感，并且对流形正交方向的变化不敏感。</p>
<p>下图的例子说明，我们可以通过构建对数据点周围的输入扰动不敏感的重构函数，使得自编码器恢复流形结构。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/6cf295ede7a3d6491.png" alt="6cf295ede7a3d6491.png"></p>
<p>为了理解自编码器可用于流形学习的原因，我们可以将自编码器和其他方法进行对比。学习表征流形最常见的是流形上（或附近）数据点的表示（representation）。对于特定的实例，这样的表示也被称为嵌入。它通常由一个低维向量给出，具有比这个流形的“外围”空间更少的维数。有些算法（下面讨论的非参数流形学习算法）直接学习每个训练样例的嵌入，而其他算法学习更一般的映射（有时被称为编码器或表示函数），将周围空间（输入空间）的任意点映射到它的嵌入。</p>
<p>流形学习大多专注于试图捕捉到这些流形的无监督学习过程。最初始的学习非线性流形的机器学习研究专注基于<strong>最近邻图</strong>（nearest neighbor graph）的<strong>非参数</strong>（non-parametric）方法。该图中每个训练样例对应一个节点，它的边连接近邻点对。这些方法将每个节点与张成实例和近邻之间的差向量变化方向的切平面相关联。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/766bed1cf93e86bdc.png" alt="766bed1cf93e86bdc.png"></p>
<p>全局坐标系则可以通过优化或求解线性系统获得。下图展示了如何通过大量局部线性的类高斯样平铺（或“薄煎饼”，因为高斯块在切平面方向是扁平的）得到一个流形。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/8c8df4d30677de582.png" alt="8c8df4d30677de582.png"></p>
<p>然而，Bengio and Monperrus (2005) 指出了这些局部非参数方法应用于流形学习的根本困难：如果流形不是很光滑（它们有许多波峰、波谷和曲折），为覆盖其中的每一个变化，我们可能需要非常多的训练样本，导致没有能力泛化到没见过的变化。实际上，这些方法只能通过内插，概括相邻实例之间流形的形状。不幸的是，AI 问题中涉及的流形可能具有非常复杂的结构，难以仅从局部插值捕获特征。考虑图14.6 转换所得的流形样例。如果我们只观察输入向量内的一个坐标$x_i$，当平移图像，我们可以观察到当这个坐标遇到波峰或波谷时，图像的亮度也会经历一个波峰或波谷。换句话说，底层图像模板亮度的模式复杂性决定执行简单的图像变换所产生的流形的复杂性。这是采用分布式表示和深度学习捕获流形结构的动机。</p>
<h2 id="7-收缩自编码器"><a href="#7-收缩自编码器" class="headerlink" title="7. 收缩自编码器"></a>7. 收缩自编码器</h2><p>收缩自编码器CAE再编码$\boldsymbol{h} = f(\boldsymbol{x})$的基础上添加了显示的正则项，鼓励$f$的导数尽可能小：</p>
<script type="math/tex; mode=display">
\Omega(\boldsymbol{h}) = \lambda ||\frac{\partial f(\boldsymbol{x})}{\partial \boldsymbol{x}}||^2_F</script><p>惩罚项$\Omega$为平方Frobenius 范数（元素平方之和），作用于与编码器的函数相关偏导数的Jacobian矩阵。</p>
<p>去噪自编码器和收缩自编码器之间存在一定联系：Alain and Bengio (2013) 指出在小高斯噪声的限制下，当重构函数将$\boldsymbol{x}$映射到$\boldsymbol{r} = g(f(\boldsymbol{x}))$时，去噪重构误差与收缩惩罚项是等价的。换句话说，去噪自编码器能抵抗小且有限的输入扰动，而收缩自编码器使特征提取函数能抵抗极小的输入扰动。</p>
<p>收缩（contractive）源于CAE弯曲空间的方式。具体来说，由于CAE训练为抵抗输入扰动，鼓励将输入点邻域映射到输出点处更小的邻域。我们能认为这是将输入的邻域收缩到更小的输出邻域。</p>
<p>说得更清楚一点，CAE只在局部收缩-一个训练样本$\boldsymbol{x}$的所有扰动都映射到$f(\boldsymbol{x})$的附近。全局来看，两个不同的点$\boldsymbol{x}$和$\boldsymbol{x}’$会分别被映射到远离原点的两个点$f(\boldsymbol{x})$和$f(\boldsymbol{x})$。$f$扩展到数据流形的中间或远处是合理的（见图14.7 中小例子的情况）。当$\Omega(\boldsymbol{h})$惩罚应用于sigmoid单元时，收缩Jacobian 的简单方式是令sigmoid趋向饱和的0或1。这鼓励CAE使用sigmoid的极值编码输入点，或许可以解释为二进制编码。它也保证了CAE可以穿过大部分sigmoid隐藏单元能张成的超立方体，进而扩散其编码值。</p>
<p>我们可以认为点$\boldsymbol{x}$处的Jacobian 矩阵$\boldsymbol{J}$能将非线性编码器近似为线性算子。这允许我们更形式地使用“收缩”这个词。在线性理论中，当$\boldsymbol{Jx}$的范数对于所有单位$\boldsymbol{x}$都小于等于1 时，J 被称为收缩的。换句话说，如果J 收缩了单位球，他就是收缩的。我们可以认为CAE 为鼓励每个局部线性算子具有收缩性，而在每个训练数据点处将Frobenius 范数作为$f(\boldsymbol{x})$的局部线性近似的惩罚。</p>
<p>正则自编码器基于两种相反的推动力学习流形。在CAE 的情况下，这两种推动力是重构误差和收缩惩罚$\Omega(\boldsymbol{h})$。单独的重构误差鼓励CAE 学习一个恒等函数。单独的收缩惩罚将鼓励CAE 学习关于$\boldsymbol{x}$是恒定的特征。这两种推动力的折衷产生导数$\frac{\partial f(\boldsymbol{x})}{\partial \boldsymbol{x}}$大多是微小的自编码器。只有少数隐藏单元，对应于一小部分输入数据的方向，可能有显著的导数。</p>
<p>CAE 的目标是学习数据的流形结构。使$\boldsymbol{Jx}$很大的方向$\boldsymbol{x}$，会快速改变$\boldsymbol{h}$，因此很可能是近似流形切平面的方向。Rifai et al. (2011a,b) 的实验显示训练CAE 会导致$\boldsymbol{J}$中大部分奇异值（幅值）比1 小，因此是收缩的。然而，有些奇异值仍然比1 大，因为重构误差的惩罚鼓励CAE 对最大局部变化的方向进行编码。对应于最大奇异值的方向被解释为收缩自编码器学到的切方向。理想情况下，这些切方向应对应于数据的真实变化。比如，一个应用于图像的CAE 应该能学到显示图像改变的切向量，如图14.6 图中物体渐渐改变状态。如下图所示，实验获得的奇异向量的可视化似乎真的对应于输入图象有意义的变换。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/949b9f25e12366078.png" alt="949b9f25e12366078.png"></p>
<p>收缩自编码器正则化准则的一个实际问题是，尽管它在单一隐藏层的自编码器情况下是容易计算的，但在更深的自编码器情况下会变的难以计算。根据Rifaiet al. (2011a) 的策略，分别训练一系列单层的自编码器，并且每个被训练为重构前一个自编码器的隐藏层。这些自编码器的组合就组成了一个深度自编码器。因为每个层分别训练成局部收缩，深度自编码器自然也是收缩的。这个结果与联合训练深度模型完整架构（带有关于Jacobian的惩罚项）获得的结果是不同的，但它抓住了许多理想的定性特征。</p>
<p>另一个实际问题是，如果我们不对解码器强加一些约束，收缩惩罚可能导致无用的结果。例如，编码器将输入乘一个小常数$\epsilon$，解码器将编码除以一个小常数$\epsilon$。随着$\epsilon$趋向于0，编码器会使收缩惩罚项$\Omega(\boldsymbol{h})$趋向于0 而学不到任何关于分布的信息。同时，解码器保持完美的重构。Rifai et al. (2011a) 通过绑定$f$ 和$g$ 的权重来防止这种情况。$f$ 和$g$ 都是由线性仿射变换后进行逐元素非线性变换的标准神经网络层组成，因此将$g$ 的权重矩阵设成$f$ 权重矩阵的转置是很直观的。</p>
<h2 id="8-预测稀疏分解"><a href="#8-预测稀疏分解" class="headerlink" title="8. 预测稀疏分解"></a>8. 预测稀疏分解</h2><p>预测稀疏分解（predictive sparse decomposition, PSD）是稀疏编码和参数化自编码器(Kavukcuoglu et al., 2008) 的混合模型。参数化编码器被训练为能预测迭代推断的输出。PSD 被应用于图片和视频中对象识别的无监督特征学习(Kavukcuogluet al., 2009, 2010; Jarrett et al., 2009b; Farabet et al., 2011)，在音频中也有所应用(Henaff et al., 2011)。这个模型由一个编码器$f(\boldsymbol{x})$和一个解码器$g(\boldsymbol{h})$组成，并且都是参数化的。在训练过程中，$\boldsymbol{h}$由优化算法控制。优化过程是最小化</p>
<script type="math/tex; mode=display">
||\boldsymbol{x} - g(\boldsymbol{h})||^2 + \lambda|\boldsymbol{h}|_1 + \gamma||\boldsymbol{h} - f(\boldsymbol{x})||^2</script><p>就像稀疏编码，训练算法交替地相对$\boldsymbol{h}$和模型的参数最小化上述目标。相对$\boldsymbol{h}$最小化较快，因为$f(\boldsymbol{x})$提供$\boldsymbol{h}$的良好初始值以及损失函数将$\boldsymbol{h}$约束在$f(\boldsymbol{x})$附近。简单的梯度下降算法只需10 步左右就能获得理想的$\boldsymbol{h}$。</p>
<p>PSD 所使用的训练程序不是先训练稀疏编码模型，然后训练$f(\boldsymbol{x})$来预测稀疏编码的特征。PSD 训练过程正则化解码器，使用$f(\boldsymbol{x})$可以推断出良好编码的参数。</p>
<p>预测稀疏分解是学习<strong>近似推断</strong>（learned approximate inference）的一个例子。PSD 能够被解释为通过最大化模型的对数似然下界训练有向稀疏编码的概率模型。</p>
<p>在PSD 的实际应用中，迭代优化仅在训练过程中使用。模型被部署后，参数编码器$f$用于计算已经习得的特征。相比通过梯度下降推断$h$，计算$f$是很容易的。因为$f$是一个可微带参函数，PSD 模型可堆叠，并用于初始化其他训练准则的深度网络。</p>
<h2 id="9-自编码器的应用"><a href="#9-自编码器的应用" class="headerlink" title="9. 自编码器的应用"></a>9. 自编码器的应用</h2><p>自编码器已成功应用于降维和信息检索任务。降维是表示学习和深度学习的第一批应用之一。它是研究自编码器早期驱动力之一。例如，Hinton and Salakhutdinov(2006) 训练了一个栈式RBM，然后利用它们的权重初始化一个隐藏层逐渐减小的深度自编码器，终结于30 个单元的瓶颈。生成的编码比30 维的PCA 产生更少的重构误差，所学到的表示更容易定性解释，并能联系基础类别，这些类别表现为分离良好的集群。</p>
<p>低维表示可以提高许多任务的性能，例如分类。小空间的模型消耗更少的内存和运行时间。</p>
<p>相比普通任务，<strong>信息检索</strong>（information retrieval）从降维中获益更多，此任务需要找到数据库中类似查询的条目。此任务不仅和其他任务一样从降维中获得一般益处，还使某些低维空间中的搜索变得极为高效。特别的，如果我们训练降维算法生成一个低维且二值的编码，那么我们就可以将所有数据库条目在哈希表映射为二值编码向量。这个哈希表允许我们返回具有相同二值编码的数据库条目作为查询结果进行信息检索。我们也可以非常高效地搜索稍有不同条目，只需反转查询编码的各个位。这种通过降维和二值化的信息检索方法被称为<strong>语义哈希</strong>（semantic hashing）(Salakhutdinov and Hinton, 2007b, 2009b)，已经被用于文本输入(Salakhutdinov andHinton, 2007b, 2009b) 和图像(Torralba et al., 2008; Weiss et al., 2008; Krizhevsky and Hinton, 2011)。</p>
<p>通常在最终层上使用sigmoid 编码函数产生语义哈希的二值编码。sigmoid 单元必须被训练为到达饱和，对所有输入值都接近0 或接近1。能做到这一点的窍门就是训练时在sigmoid 非线性单元前简单地注入加性噪声。噪声的大小应该随时间增加。要对抗这种噪音并且保存尽可能多的信息，网络必须加大输入到sigmoid 函数的幅度，直到饱和。</p>
<p>学习哈希函数的思想已在其他多个方向进一步探讨，包括改变损失训练表示的想法，其中所需优化的损失与哈希表中查找附近样本的任务有更直接的联系。</p>
]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Theory</tag>
        <tag>DAE</tag>
        <tag>CAE</tag>
        <tag>PSD</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习-线性因子模型</title>
    <url>/archives/fe0a787b.html</url>
    <content><![CDATA[<p>参考：</p>
<blockquote>
<p><a href="https://github.com/exacity/deeplearningbook-chinese" target="_blank" rel="noopener">《深度学习》第13章 线性因子模型</a></p>
</blockquote>
<p>相较于线性模型描述输入$\boldsymbol{x}$与输出$\boldsymbol{y}$的关系，线性因子模型考虑的是输入$\boldsymbol{x}$与隐变量$\boldsymbol{h}$的关系，也就是说线性因子模型的目的是发掘出输入变量$\boldsymbol{x}$的统计特征，利用隐变量实现降维或输入优化等目的。</p>
<p>线性因子模型，顾名思义，我们假设$\boldsymbol{x}$是$\boldsymbol{h}$的线性变换以及添加噪声来生成的</p>
<script type="math/tex; mode=display">
\boldsymbol{x} = \boldsymbol{Wh} + \boldsymbol{b} + noise</script><p>其中解释性因子$\boldsymbol{h}$从一个分布中抽取</p>
<script type="math/tex; mode=display">
\boldsymbol{h} \sim p(\boldsymbol{h})</script><p>其中$p(\boldsymbol{h})$是一个因子分布，满足$p(\boldsymbol{h}) = \prod_ip(h_i)$，噪声通常是对角化的且服从高斯分布。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/linear.png" alt="linear.png"></p>
<a id="more"></a>
<h2 id="1-概率PCA和因子分析"><a href="#1-概率PCA和因子分析" class="headerlink" title="1. 概率PCA和因子分析"></a>1. 概率PCA和因子分析</h2><p>概率PCA、因子分析和其他线性因子模型是上述等式的特殊情况，并且仅在对观测到$\boldsymbol{x}$之前的噪声分布和潜变量$\boldsymbol{h}$先验的选择上有所不同。</p>
<h3 id="1-1-因子分析"><a href="#1-1-因子分析" class="headerlink" title="1.1 因子分析"></a>1.1 因子分析</h3><p>在因子分析中，潜变量的先验是一个方差为单位矩阵的高斯分布</p>
<script type="math/tex; mode=display">
\boldsymbol{h} \sim N(\boldsymbol{h};\boldsymbol{0},\boldsymbol{I})</script><p>同时假定在给定$\boldsymbol{h}$的条件下观察值$x_i$是条件独立的。具体来说，我们可以假设噪声是从对角协方差矩阵的高斯分布中抽出的，协方差矩阵为$\boldsymbol{\psi} = diag(\boldsymbol{\sigma}^2)$，其中$\boldsymbol{\sigma}^2 = [\sigma_1^2, \sigma_2^2, …,\sigma_n^2]^T$表示一个向量，每个元素表示一个变量的方差。</p>
<p>因此潜变量的作用是捕获不同观测变量$x_i$之间的依赖关系。</p>
<script type="math/tex; mode=display">
\boldsymbol{x} \sim N(\boldsymbol{x};\boldsymbol{b}, \boldsymbol{W}\boldsymbol{W}^T + \boldsymbol{\psi})</script><h3 id="1-2-概率PCA"><a href="#1-2-概率PCA" class="headerlink" title="1.2 概率PCA"></a>1.2 概率PCA</h3><p>对因子分析模型作轻微修改，使条件方差$\sigma_i^2$等于同一个值。在这种情况下，$\boldsymbol{x}$的协方差简化为$\boldsymbol{W}\boldsymbol{W}^T + \sigma^2\boldsymbol{I})$，这里的$\sigma^2$是一个标量。</p>
<script type="math/tex; mode=display">
\boldsymbol{x} \sim N(\boldsymbol{x};\boldsymbol{b}, \boldsymbol{W}\boldsymbol{W}^T + \sigma^2\boldsymbol{I})</script><p>或等价</p>
<script type="math/tex; mode=display">
\boldsymbol{x} = \boldsymbol{Wh} + \boldsymbol{b} + \sigma \boldsymbol{z}</script><p>其中$\boldsymbol{z} \sim N(\boldsymbol{z}; \boldsymbol{0}, \boldsymbol{I})$是高斯噪声，<code>Tipping and Bishop</code>提出了一种迭代的EM算法来估计参数$\boldsymbol{W}$和$\sigma^2$。</p>
<p>概率PCA模型利用了一种观察现象：除了一些微小残余的重构误差（至多为$\sigma^2$），数据中的大多数变量可以由潜变量$\boldsymbol{h}$描述。当$\sigma \rightarrow 0$，概率PCA退化为PCA，概率PCA所定义的密度函数在$d$维的$\boldsymbol{W}$的列空间周围非常尖锐。这导致模型会为没有在一个超平面附近聚集的数据分配非常低的概率。</p>
<h2 id="2-独立成分分析"><a href="#2-独立成分分析" class="headerlink" title="2. 独立成分分析"></a>2. 独立成分分析</h2><p>独立成分分析ICA是一种建模线性因子的方法，旨在将观察到的信号分离成许多潜在信号，这些潜在信号通过压缩和叠放可以恢复成观察数据。这些信号是完全独立，而不是仅仅彼此不相关。</p>
<p>潜在因子$\boldsymbol{h}$的先验$p(\boldsymbol{h})$，必须由用户提前给出并固定。接着模型确定性地生成$\boldsymbol{x} = \boldsymbol{Wh}$。我们可以通过非线性变化来确定$p(\boldsymbol{x})$。然后通过一般的方法比如最大化似然进行学习。</p>
<p>ICA的所有变种均要求$p(\boldsymbol{h})$是非高斯的。因为若$p(\boldsymbol{h})$具有高斯分量的独立先验，对于许多$\boldsymbol{W}$值，我们可以在$p(\boldsymbol{x})$上获得相同的分布，那么$\boldsymbol{W}$存在多解，意味着不可解。在用户明确指定分布的最大似然方法中，一个典型的选择是使用$p(h_i) = \frac{\partial}{\partial h_i}\sigma(h_i)$。这些非高斯分布的典型选择在0附近具有比高斯分布更高的峰值，因此我们也可以看到独立成分分析经常用于学习稀疏特征。</p>
<h2 id="3-慢特征分析"><a href="#3-慢特征分析" class="headerlink" title="3. 慢特征分析"></a>3. 慢特征分析</h2><p>慢特征分析SFA是使用来自时间信号的信息学习不变特征的线性因子模型。</p>
<p>慢特征分析的想法源于所谓的<strong>慢性原则（slowness principle）</strong>。其基本思想是，与场景中起描述作用的单个量度相比，场景的重要特性通常变化得非常缓慢。例如，在计算机视觉中，单个像素值可以非常快速地改变。如果斑马从左到右移动穿过图像并且它的条纹穿过对应的像素时，该像素将迅速从黑色变为白色，并再次恢复成黑色。通过比较，指示斑马是否在图像中的特征将不发生改变，并且描述斑马位置的特征将缓慢地改变。因此，我们可能希望将模型正则化，从而能够学习到那些随时间变化较为缓慢的特征。</p>
<p>一般来说，我们可以将慢性原则应用于可以使用梯度下降训练的任何可微分模型。为了引入慢性原则，我们可以向代价函数添加以下项</p>
<script type="math/tex; mode=display">
\lambda \sum_t L(f(\boldsymbol{x}^{(t+1)}), f(\boldsymbol{x}^{(t)}))</script><p>其中$\lambda$是确定慢度正则化强度的超参数项，$t$是样本时间序列的索引，$f$是需要正则化的特征提取器，$L$是测量$f(x(t))$和$f(x(t+1))$之间的距离的损失函数。$L$的一个常见选择是均方误差。</p>
<p>SFA算法先将$f(\boldsymbol{x};\theta)$定义为线性变换，然后求解如下优化问题</p>
<script type="math/tex; mode=display">
\underset{\boldsymbol{\theta}}{\min} \mathbb{E}_t(f(\boldsymbol{x}^{(t+1)})_i - f(\boldsymbol{x}^{(t)})_i)^2</script><p>并满足下面的约束</p>
<script type="math/tex; mode=display">
\mathbb{E}_tf(\boldsymbol{x}^{(t)})_i = 0
\\
\mathbb{E}_t[f(\boldsymbol{x}^{(t)})_i^2] = 1</script><p>学习特征具有零均值的约束对于使问题具有唯一解是必要的；否则我们可以向所有特征值添加一个常数，并获得具有相等慢度目标值的不同解。特征具有单位方差的约束对于防止所有特征趋近于0的病态解是必要的。</p>
<p>与 PCA 类似，SFA 特征是有序的，其中学习第一特征是最慢的。要学习多个特征，我们还必须添加约束</p>
<script type="math/tex; mode=display">
\forall i < j, \quad \mathbb{E}_t[f(\boldsymbol{x}^{(t)})_if(\boldsymbol{x}^{(t)})_j] = 0</script><p>这要求学习的特征必须彼此线性去相关。没有这个约束，所有学习到的特征将简单地捕获一个最慢的信号。可以想象使用其他机制，如最小化重构误差，也可以迫使特征多样化。但是由于 SFA 特征的线性，这种去相关机制只能得到一种简单的解。SFA 问题可以通过线性代数软件获得闭式解。</p>
<p>深度 SFA 也已经被用于学习用在对象识别和姿态估计的特征。</p>
<h2 id="4-稀疏编码"><a href="#4-稀疏编码" class="headerlink" title="4. 稀疏编码"></a>4. 稀疏编码</h2><p>稀疏编码是一个线性因子模型，像大多数其他线性因子模型一样，它使用了线性的解码器加上噪声的方式获得一个$\boldsymbol{x}$的重构，稀疏编码模型通常假设线性因子有一个各向同性精度为$\beta$的高斯噪声</p>
<script type="math/tex; mode=display">
p(\boldsymbol{x}|\boldsymbol{h}) = N(\boldsymbol{x};\boldsymbol{Wh} + \boldsymbol{b}, \frac{1}{\beta}\boldsymbol{I})</script><p>分布$p(\boldsymbol{h})$通常选取为一个峰值很尖锐且接近0的分布。常见的选择包括可分解的<code>Laplace、Cauchy</code>或者可分解的<code>Student-t</code>分布。例如，以稀疏惩罚系数$\lambda$为参数的<code>Laplace</code>先验可以表示为</p>
<script type="math/tex; mode=display">
p(h_i) = Laplace(h_i;0,\frac{2}{\lambda}) = \frac{\lambda}{4}e^{-\frac{1}{2}\lambda|h_i|}</script><p>相应的，<code>Student-t</code>先验分布可以表示为</p>
<script type="math/tex; mode=display">
p(h_i) \propto \frac{1}{(1 + \frac{h_i^2}{v})^{\frac{v+1}{2}}}</script><p>使用最大似然的方法来训练稀疏编码模型是不可行的。相反，为了在给定编码的情况下更好地重构数据，训练过程在编码数据和训练解码器之间交替进行。</p>
<p>编码器是一个优化算法，在这个优化问题中，我们寻找单个最可能的编码值：</p>
<script type="math/tex; mode=display">
\boldsymbol{h}^* = f(\boldsymbol{x}) = \underset{\boldsymbol{h}}{\arg \max} p(\boldsymbol{h}|\boldsymbol{x})</script><p>优化问题如下</p>
<script type="math/tex; mode=display">
\underset{\boldsymbol{h}}{\arg \max} p(\boldsymbol{h}|\boldsymbol{x})
\\
= \underset{\boldsymbol{h}}{\arg \max} \log p(\boldsymbol{h}|\boldsymbol{x})
\\
= \underset{\boldsymbol{h}}{\arg \min} \lambda ||\boldsymbol{h}||_1 + \beta ||\boldsymbol{x} - \boldsymbol{Wh}||^2_2</script><p>由于$L_1$范数，这个过程将产生稀疏的$\boldsymbol{h}^*$。</p>
<p>为了训练模型而不仅仅是进行推断，我们交替迭代关于$\boldsymbol{h}$和$\boldsymbol{W}$的最小化过程。在本文中，我们将$\beta$视为超参数。我们通常将其设置为 1，因为它在此优化问题的作用与$\lambda$类似，没有必要使用两个超参数。</p>
<h2 id="5-PCA的流形解释"><a href="#5-PCA的流形解释" class="headerlink" title="5. PCA的流形解释"></a>5. PCA的流形解释</h2><p>线性因子模型，包括 PCA 和因子分析，可以理解为学习一个流形。</p>
<p>我们可以将概率 PCA 定义为高概率的薄饼状区域，即一个高斯分布，沿着某些轴非常窄，就像薄饼沿着其垂直轴非常平坦，但沿着其他轴是细长的，正如薄饼在其水平轴方向是很宽的一样。</p>
<p>PCA 可以理解为将该薄饼与更高维空间中的线性流形对准。这种解释不仅适用于传统 PCA，而且适用于学习矩阵$\boldsymbol{W}$和$\boldsymbol{V}$的任何线性自编码器，其目的是使重构的$\boldsymbol{x}$尽可能接近于原始的$\boldsymbol{x}$。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/pca.png" alt="pca.png"></p>
<p>编码器表示为</p>
<script type="math/tex; mode=display">
\boldsymbol{h} = f(\boldsymbol{x}) = \boldsymbol{W}^T(\boldsymbol{x} - \boldsymbol{\mu})</script><p>编码器计算$\boldsymbol{h}$的低维表示，解码器负责重构</p>
<script type="math/tex; mode=display">
\hat{\boldsymbol{x}} = g(\boldsymbol{h}) = \boldsymbol{b} + \boldsymbol{Vh}</script><p>能够最小化重构误差</p>
<script type="math/tex; mode=display">
\mathbb{E}[||\boldsymbol{x} - \hat{\boldsymbol{x}}||^2]</script><p>的线性编码器和解码器的选择对应着$\boldsymbol{V} = \boldsymbol{W}, \boldsymbol{\mu} = \boldsymbol{b} = \mathbb{E}[\boldsymbol{x}]$，$\boldsymbol{W}$的列形成一组标准正交基，这组基生成的子空间与协方差矩阵$\boldsymbol{C}$</p>
<script type="math/tex; mode=display">
\boldsymbol{C} = \mathbb{E}[(\boldsymbol{x} - \boldsymbol{\mu})(\boldsymbol{x} - \boldsymbol{\mu})^T]</script><p>的主特征向量所生成的子空间相同。在PCA中，$\boldsymbol{W}$的列是按照对应特征值幅度大小排序所对应的特征向量。</p>
<p>我们还可以发现$\boldsymbol{C}$的特征值$\lambda_i$对应了$\boldsymbol{x}$在特征向量$\boldsymbol{v}^{(i)}$方向上的方差。如果$\boldsymbol{x} \in \mathbb{R}^D, \boldsymbol{h} \in \mathbb{R}^d$并且满足$d &lt; D$，则最佳的重构误差是</p>
<script type="math/tex; mode=display">
\min \mathbb{E}[||\boldsymbol{x} - \hat{\boldsymbol{x}}||^2] = \sum^D_{i = d+1} \lambda_i</script><p>因此，如果协方差矩阵的秩为$d$，则特征值$\lambda_{d+1}$到$\lambda_D$都为0，并且重构误差为0。</p>
<p>此外，我们还可以证明上述解可以通过在给定正交矩阵$\boldsymbol{W}$的情况下最大化$\boldsymbol{h}$元素的方差而不是最小化重构误差来获得。</p>
]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Theory</tag>
        <tag>PCA</tag>
        <tag>ICA</tag>
        <tag>Probabilistic PCA</tag>
        <tag>SFA</tag>
        <tag>Sparse Coding</tag>
        <tag>Factor Analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习模型-KerasApplications</title>
    <url>/archives/4981e084.html</url>
    <content><![CDATA[<p>参考：</p>
<blockquote>
<p><a href="https://github.com/keras-team/keras-applications" target="_blank" rel="noopener">Keras Applications</a><br><a href="https://keras.io/applications/#xception" target="_blank" rel="noopener">Models for image classification with weights trained on ImageNet</a><br><a href="https://blog.csdn.net/qq_40027052/article/details/79015827" target="_blank" rel="noopener">深度学习VGG模型核心拆解</a><br><a href="https://github.com/SnailTyan/deep-learning-papers-translation" target="_blank" rel="noopener">Deep Learning Papers Translation(CV)</a><br><a href="https://blog.csdn.net/Quincuntial/article/details/77263607" target="_blank" rel="noopener">ResNet论文翻译——中英文对照</a><br><a href="https://towardsdatascience.com/an-overview-of-resnet-and-its-variants-5281e2f56035" target="_blank" rel="noopener">An Overview of ResNet and its Variants</a><br><a href="https://blog.csdn.net/qq_38906523/article/details/80061075" target="_blank" rel="noopener">深度学习—-GoogLeNet</a><br><a href="https://blog.csdn.net/stesha_chen/article/details/82115429" target="_blank" rel="noopener">Inception-V4和Inception-Resnet论文阅读和代码解析</a><br><a href="https://blog.csdn.net/just_sort/article/details/79901885" target="_blank" rel="noopener">MobileNet 翻译及总结：用于移动视觉应用的高效卷积神经网络</a><br><a href="https://blog.csdn.net/u011974639/article/details/79199588" target="_blank" rel="noopener">轻量级网络—MobileNetV2论文解读</a><br><a href="https://blog.csdn.net/qq_14845119/article/details/83050862" target="_blank" rel="noopener">NASNet</a></p>
</blockquote>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/cnn.png" alt="cnn.png"></p>
<a id="more"></a>
<p>ImageNet项目是一个用于视觉对象识别软件研究的大型可视化数据库。超过1400万的图像URL被ImageNet手动注释，以指示图片中的对象；在至少一百万个图像中，还提供了边界框。ImageNet包含2万多个类别；一个典型的类别，如“气球”或“草莓”，包含数百个图像。第三方图像URL的注释数据库可以直接从ImageNet免费获得；但是，实际的图像不属于ImageNet。自2010年以来，ImageNet项目每年举办一次软件比赛，即ImageNet大规模视觉识别挑战赛（ILSVRC），软件程序竞相正确分类检测物体和场景。</p>
<h2 id="1-VGG16-amp-VGG19"><a href="#1-VGG16-amp-VGG19" class="headerlink" title="1. VGG16 &amp; VGG19"></a>1. VGG16 &amp; VGG19</h2><p><a href="https://arxiv.org/abs/1409.1556" target="_blank" rel="noopener">Very Deep Convolutional Networks for Large-Scale Image Recognition</a></p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/vgg.png" alt="vgg.png"></p>
<p>VGG模型结构：</p>
<ol>
<li>输入：$224 \times 224$ RGB图片</li>
<li>预处理：每个像素减去RGB均值</li>
<li>Filter：一般是$3 \times 3$，也有$1 \times 1$的变体；卷积层stride是1，pad方式为<code>same</code></li>
<li>MaxPooling：窗口大小$2\times2$，stride为$2\times2$</li>
<li>三个全连接层FC：前两层units个数为4096，最后一层为分类数（一般是1000）</li>
<li>softmax层：最后一层输出概率</li>
<li>激活函数：除最后一层外全是ReLU</li>
</ol>
<p>VGG模型Tricks：</p>
<ol>
<li>使用多个$3\times3$卷积层替代一个大size的卷积层（比如$7\times7$），3个$3\times3$卷积层与一个$7\times7$的卷积层的感受野是相同的，都是处理大小为$7\times7$的空间，但是对于相同数量C的输出channel来说，参数数量$3\times(3^2C^2)$是小于$7^2C^2$，同时参数维度更高；</li>
<li>可能使用$1\times1$卷积层，主要是对所有输入进行相同的线性变换；</li>
<li>训练过程使用mini-batch梯度下降，batch_size为256，weight_decay使用$L_2$约束，权重大小为$5\times 10^{-4}$，前两层FC的dropout设为0.5，学习率初始值为$10^{-2}$，当验证集accuracy不再减少时，学习率除以10；</li>
<li>首先训练A网络，A网络训练过程学习率不减少，使用A的前4层卷积层和最后3层FC初始化新的模型；使用均值为0标准差为0.005的高斯分布初始化参数；</li>
<li>图像裁剪以及rescale，为了得到224大小的输入，首先对原始图片进行rescale，rescale的size为$S \geqslant 224$，然后对rescale的图像进行随机裁剪；</li>
<li>rescale的大小$S$一般为256或384，预训练时为256；或者动态限制在$[256, 512]$之间，预训练时为384；</li>
<li>测试时rescale大小为$Q$，$Q$可以取$S$中的一个值；测试阶段把网络中原本的三个全连接层依次变为1个conv7x7，2个conv1x1，也就是三个卷积层，测试重用训练时的参数，使得测试得到的全卷积网络因为没有全连接的限制，因而可以接收任意宽或高为的输入。</li>
</ol>
<p>VGG模型总结：</p>
<ul>
<li>VGG本质上还是在CNN的基础上进行改动，没有脱离卷积网络的基础；</li>
<li>由于采取了state-of-the-art，根据实验采取了很多小细节的操作。</li>
</ul>
<h2 id="2-ResNet50-amp-ResNet101-amp-ResNet152"><a href="#2-ResNet50-amp-ResNet101-amp-ResNet152" class="headerlink" title="2. ResNet50 &amp; ResNet101 &amp; ResNet152"></a>2. ResNet50 &amp; ResNet101 &amp; ResNet152</h2><p><a href="https://arxiv.org/abs/1512.03385" target="_blank" rel="noopener">Deep Residual Learning for Image Recognition</a></p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/res.png" alt="res.png"></p>
<script type="math/tex; mode=display">
\boldsymbol{y} = F(\boldsymbol{x}, \boldsymbol{W}_i) + \boldsymbol{x}</script><p>对于输入$\boldsymbol{x}$来说，映射$H(\boldsymbol{x})$是预测输出的最优解，但是实际上我们通过深度学习得到的映射并不一定是完美解，利用残差$F(\boldsymbol{x}) = H(\boldsymbol{x}) - \boldsymbol{x}$这种思想，使用$F(\boldsymbol{x}) + \boldsymbol{x}$作为期望的输出。我觉得采用残差类似于决策树中的残差概念，在ResNet网络中，对于输入到输出中不变的部分或维度，利用残差可以很好的保留这部分稀疏性，训练过程中变化的部分会产生梯度，这种前提是输入输出维度相同；对于输入与输出维度不同的时候，ResNet采取两种策略：补0或使用线性映射$\boldsymbol{W}_s$匹配维度（由1 $\times$ 1卷积完成）。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/resnet.png" alt="resnet.png"></p>
<p>ResNet模型结构：</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/resnet0.png" alt="resnet0.png"></p>
<p>ResNet模型Tricks：</p>
<ol>
<li>当输入和输出具有相同的维度时，可以直接使用恒等快捷连接；</li>
<li>当维度增加，考虑两个选项：快捷连接仍然执行恒等映射，额外填充零输入以增加维度；投影快捷连接用于匹配维度（由1 $\times$ 1卷积完成）。对于这两个选项，当快捷连接跨越两种尺寸的特征图时，它们执行时步长为2；</li>
<li>调整图像大小，其较短的边在$[256,480]$之间进行随机采样；</li>
<li>224 $\times$ 224裁剪是从图像或其水平翻转中随机采样，并逐像素减去均值；</li>
<li>在每个卷积之后和激活之前，我们采用批量归一化；</li>
<li>标准颜色增强；</li>
<li>批大小为256；</li>
<li>学习速度从0.1开始，当误差稳定时学习率除以10，并且模型训练高达$60 \times 10^4$次迭代。我们使用的权重衰减为0.0001，动量为0.9；</li>
<li>不使用丢弃；</li>
<li>在测试阶段，为了比较学习我们采用标准的10-crop测试；</li>
<li>采用如$[40, 12]$中的全卷积形式，并在多尺度上对分数进行平均（图像归一化，短边位于${224, 256, 384, 480, 640}$中）；</li>
<li>更深的瓶颈结构，三层是1 $\times$ 1，3 $\times$ 3和1 $\times$ 1卷积，其中1 $\times$ 1层负责减小然后增加（恢复）维度，使3 $\times$ 3层成为具有较小输入/输出维度的瓶颈，两个设计具有相似的时间复杂度。</li>
</ol>
<p>ResNet模型总结：</p>
<ul>
<li>提出了利用残差优化网络的概念；</li>
<li>根据实验说明了，利用残差的神经网络的深度可以很大；</li>
<li>最后仅使用了一个全连接层。</li>
</ul>
<h2 id="3-ResNet50V2-amp-ResNet101V2-amp-ResNet152V2"><a href="#3-ResNet50V2-amp-ResNet101V2-amp-ResNet152V2" class="headerlink" title="3. ResNet50V2 &amp; ResNet101V2 &amp; ResNet152V2"></a>3. ResNet50V2 &amp; ResNet101V2 &amp; ResNet152V2</h2><p><a href="https://arxiv.org/abs/1603.05027" target="_blank" rel="noopener">Identity Mappings in Deep Residual Networks</a></p>
<p>ResNetV2在ResNet初代的基础上进行了更深一步的思考</p>
<script type="math/tex; mode=display">
\boldsymbol{y}_l = h(\boldsymbol{x}_l) + F(\boldsymbol{x}_l, \boldsymbol{W}_l)
\\
\boldsymbol{x}_{l+1} = f(\boldsymbol{y}_l)</script><p>$h$表示恒等映射，$F$是残差函数，$f$是ReLU</p>
<p>与初代不同的是，V2考虑如果$f$也是恒等映射的情况下，网络的性能</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/resnetv2-0.png" alt="resnetv2-0.png"></p>
<p>对比了以上几种的$f$，实验结果表明恒等映射的训练误差最小</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/resnetv2-1.png" alt="resnetv2-1.png"></p>
<p>在此基础上，分析了BN after addition，ReLU before addition，pre-activation方法作为$f$，研究$f$对ResNet效果的影响，效果自然是最后一个full pre-activation最好。</p>
<p>ResNetV2模型总结：</p>
<ul>
<li>在初代ResNet的基础上，通过实验进一步确定了恒等映射对残差网络性能有较好的提升；</li>
<li>对于不同的$f$作为恒等映射对性能的影响做出了实验性的结论，并且制定了一套处理流程。</li>
</ul>
<h2 id="4-ResNeXt50-amp-ResNeXt101"><a href="#4-ResNeXt50-amp-ResNeXt101" class="headerlink" title="4. ResNeXt50 &amp; ResNeXt101"></a>4. ResNeXt50 &amp; ResNeXt101</h2><p><a href="https://arxiv.org/abs/1611.05431" target="_blank" rel="noopener">Aggregated Residual Transformations for Deep Neural Networks</a></p>
<p> ResNet的一种变体ResNeXt，它具备以下构建块：</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/resnetxt.png" alt="resnetxt.png"></p>
<p>作者在论文中引入了一个叫作<strong>基数</strong>（cardinality）的超参数，指独立路径的数量，这提供了一种调整模型容量的新思路。实验表明，通过扩大基数值（而不是深度或宽度），准确率得到了高效提升。作者表示，与 Inception 相比，这个全新的架构更容易适应新的数据集或任务，因为它只有一个简单的范式和一个需要调整的超参数，而 Inception 需要调整很多超参数（比如每个路径的卷积层内核大小）。</p>
<p>ResNetXt模型总结：</p>
<ul>
<li>ResNetXt与ResNetV2考虑的方向不同，主要考虑卷积层的变换，采取“分裂 - 变换 - 合并”的策略，增加了一个维度cardinality。</li>
</ul>
<h2 id="5-InceptionV3"><a href="#5-InceptionV3" class="headerlink" title="5. InceptionV3"></a>5. InceptionV3</h2><p><a href="https://arxiv.org/abs/1512.00567" target="_blank" rel="noopener">Rethinking the Inception Architecture for Computer Vision</a></p>
<p>首先了解一下Inception结构，其目的是为了既能保持网络结构的稀疏性，又能利用密集矩阵的高计算性能</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/inception0.jpg" alt="inception0.jpg"></p>
<ol>
<li>采用不同大小的卷积核意味着不同大小的感受野，最后拼接意味着不同尺度特征的融合； </li>
<li>之所以卷积核大小采用1、3和5，主要是为了方便对齐。设定卷积步长stride=1之后，只要分别设定pad=0、1、2，那么卷积之后便可以得到相同维度的特征，然后这些特征就可以直接拼接在一起了； </li>
<li>文章说很多地方都表明pooling挺有效，所以Inception里面也嵌入了。 </li>
<li>网络越到后面，特征越抽象，而且每个特征所涉及的感受野也更大了，因此随着层数的增加，3x3和5x5卷积的比例也要增加。</li>
</ol>
<p>但是，使用5x5的卷积核仍然会带来巨大的计算量。 为此，文章借鉴NIN2，采用1x1卷积核来进行降维。<br>例如：上一层的输出为100x100x128，经过具有256个输出的5x5卷积层之后(stride=1，pad=2)，输出数据为100x100x256。其中，卷积层的参数为128x5x5x256。假如上一层输出先经过具有32个输出的1x1卷积层，再经过具有256个输出的5x5卷积层，那么最终的输出数据仍为为100x100x256，但卷积参数量已经减少为128x1x1x32 + 32x5x5x256，大约减少了4倍。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/inception1.jpg" alt="inception1.jpg"></p>
<p>下面的准则来源于大量的实验，因此包含一定的推测，但实际证明基本都是有效的</p>
<ol>
<li>避免表达瓶颈，特别是在网络靠前的地方。 信息流前向传播过程中显然不能经过高度压缩的层，即表达瓶颈。从input到output，feature map的宽和高基本都会逐渐变小，但是不能一下子就变得很小。比如你上来就来个kernel = 7, stride = 5 ,这样显然不合适。 另外输出的维度channel，一般来说会逐渐增多(每层的num_output)，否则网络会很难训练。（特征维度并不代表信息的多少，只是作为一种估计的手段）</li>
<li>高维特征更易处理。 高维特征更易区分，会加快训练。</li>
<li>可以在低维嵌入上进行空间汇聚而无需担心丢失很多信息。 比如在进行3x3卷积之前，可以对输入先进行降维而不会产生严重的后果。假设信息可以被简单压缩，那么训练就会加快。</li>
<li>平衡网络的宽度与深度。</li>
</ol>
<p>再到InceptionV2中，采用不对称卷积，n×1卷积核替代n×n卷积核，这种结构在前几层效果不太好，但对特征图大小为12~20的中间层效果明显。 </p>
<p>并且引入了Batch normal层，使用3×3替换5×5卷积核</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/inception2.png" alt="inception2.png"></p>
<p>InceptionV3，一个最重要的改进是分解（Factorization），将7x7分解成两个一维的卷积（1x7,7x1），3x3也是一样（1x3,3x1），这样的好处，既可以加速计算（多余的计算能力可以用来加深网络），又可以将1个conv拆成2个conv，使得网络深度进一步增加，增加了网络的非线性，还有值得注意的地方是网络输入从224x224变为了299x299，更加精细设计了35x35/17x17/8x8的模块。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/inception4.png" alt="inception4.png"></p>
<p>Inception模型总结：</p>
<ul>
<li>使用了集成方法的思想，将卷积行为变成并行的以增加不同维度特征间的联系；</li>
<li>提出了不对称卷积的思路；</li>
<li>引入了辅助分类器的概念，以改善非常深的网络的收敛，辅助分类器起着正则化项的作用；</li>
<li>使用平行的步长为2的块来缩减特征图的网格大小，缩减网格尺寸的同时扩展滤波器组的Inception模块；</li>
<li>通过标签平滑进行模型正则化。</li>
</ul>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/inception3.png" alt="inception3.png"></p>
<h2 id="6-InceptionResNetV2"><a href="#6-InceptionResNetV2" class="headerlink" title="6. InceptionResNetV2"></a>6. InceptionResNetV2</h2><p><a href="https://arxiv.org/abs/1602.07261" target="_blank" rel="noopener">Inception-v4, Inception-ResNet and the Impact of Residual Connections on Learning</a></p>
<p>提到InceptionResNetV2就必须提到Inception-v4，作者首先使用纯Inception Block构建了Inception-v4模型，其结构为</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/inceptionresnet6.png" alt="inceptionresnet6.png"></p>
<p>每个block的具体结构如下：（每个block中没有标记v的都表示same padding）</p>
<p><strong>Stem</strong>，InceptionResNetV2和Inception-v4共用</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/inceptionresnet0.png" alt="inceptionresnet0.png"></p>
<p><strong>Inception-A</strong></p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/inceptionresnet1.png" alt="inceptionresnet1.png"></p>
<p><strong>Inception-B</strong></p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/inceptionresnet2.png" alt="inceptionresnet2.png"></p>
<p><strong>Inception-C</strong></p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/inceptionresnet3.png" alt="inceptionresnet3.png"></p>
<p><strong>35 to 17 ReductionA</strong>，共用，但是具体filters个数根据不同模型而不同，参考表格</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/inceptionresnet4.png" alt="inceptionresnet4.png"></p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/inceptionresnet17.png" alt="inceptionresnet17.png"></p>
<p><strong>17 to 8 ReductionB</strong></p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/inceptionresnet5.png" alt="inceptionresnet5.png"></p>
<hr>
<p>接下来是InceptionResNetV1和InceptionResNetV2，V1和V2整体结构相同，细节的block有差异，InceptionResNetV2的Stem通用，InceptionResNetV1的Stem与其他不同</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/inceptionresnet12.png" alt="inceptionresnet12.png"></p>
<p><strong>Stem</strong>，仅限InceptionResNetV1</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/inceptionresnet11.png" alt="inceptionresnet11.png"></p>
<p><strong>Inception-ResNet-v1 Inception-ResNet-A</strong></p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/inceptionresnet7.png" alt="inceptionresnet7.png"></p>
<p><strong>Inception-ResNet-v1 Inception-ResNet-B</strong></p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/inceptionresnet8.png" alt="inceptionresnet8.png"></p>
<p><strong>Inception-ResNet-v1 Inception-ResNet-C</strong></p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/inceptionresnet10.png" alt="inceptionresnet10.png"></p>
<p><strong>35 to 17 ReductionA</strong>，共用，参考上面</p>
<p><strong>17 to 8 ReductionB</strong>，注意这里与V2的小区别，filters数量不同</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/inceptionresnet9.png" alt="inceptionresnet9.png"></p>
<hr>
<p><strong>Inception-ResNet-v2 Inception-ResNet-A</strong></p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/inceptionresnet13.png" alt="inceptionresnet13.png"></p>
<p><strong>Inception-ResNet-v2 Inception-ResNet-B</strong></p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/inceptionresnet14.png" alt="inceptionresnet14.png"></p>
<p><strong>Inception-ResNet-v2 Inception-ResNet-C</strong></p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/inceptionresnet16.png" alt="inceptionresnet16.png"></p>
<p><strong>35 to 17 ReductionA</strong>，共用，参考上面</p>
<p><strong>17 to 8 ReductionB</strong>，注意这里与V1的小区别，filters数量不同</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/inceptionresnet15.png" alt="inceptionresnet15.png"></p>
<hr>
<p>最后，作者发现如果filter的个数超过1000个，残差网络会变得不稳定，网络会在训练的早期就“死掉”，也就意味着在几万次迭代之后，avg_pool之前的最后几层网络参数全是0。解决方案是要么减小learning rate，要么对这些层增加额外的batch normalization。</p>
<p>作者又发现如果将残差部分缩放后再跟需要相加的层相加，会使网络在训练过程中更稳定。因此作者选择了一些缩放因子在0.1到0.3之间，用这个缩放因子去缩放残差网络，然后再做加法，如下图</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/inceptionresnet18.png" alt="inceptionresnet18.png"></p>
<p>InceptionResNetV2模型总结：</p>
<ul>
<li>结合ResNet的思想，构建了Inception-ResNet模块，既优化了训练过程，又可以扩大特征间的联系；</li>
<li>提出了缩小残差的思想。</li>
</ul>
<h2 id="7-Xception"><a href="#7-Xception" class="headerlink" title="7. Xception"></a>7. Xception</h2><p><a href="https://arxiv.org/abs/1610.02357" target="_blank" rel="noopener">Xception: Deep Learning with Depthwise Separable Convolutions</a></p>
<p>Xception从Inception进化而来，同时Xception是ResNeXt的一个变种</p>
<p>串行式group的module，被起名 separable convolution </p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/xception.png" alt="xception.png"></p>
<p>Xception模型结构：</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/xception1.png" alt="xception1.png"></p>
<p>实验结果，Xception在ImageNet上稍优于Inceptionv3，参数数量和Inceptionv3基本一致，速度也差不多。</p>
<p>Xception模型总结：</p>
<ul>
<li>使用串行group替代Inception的并行group。</li>
</ul>
<h2 id="8-MobileNet-alpha-0-25-0-50-0-75-1-0"><a href="#8-MobileNet-alpha-0-25-0-50-0-75-1-0" class="headerlink" title="8. MobileNet(alpha=0.25/0.50/0.75/1.0)"></a>8. MobileNet(alpha=0.25/0.50/0.75/1.0)</h2><p><a href="https://arxiv.org/abs/1704.04861" target="_blank" rel="noopener">MobileNets: Efficient Convolutional Neural Networks for Mobile Vision Applications</a></p>
<p>MobileNet的提出很明显是为了部署在移动设备上，与ImageNet比赛相比，移动设备对内存、运算速度等方面要求很高，精度要求可以适当降低，而传统的ImageNet比赛中取胜的模型的参数基本已经达到一个很高的程度，所以使用MobileNet在保持类似精度的条件下显著的减少模型参数和计算量成为另一个目标。</p>
<p>MobileNet引入了几个重要的技巧以降低运算量：</p>
<h3 id="8-1-Deep-wise-Separabe-深度可分离卷积"><a href="#8-1-Deep-wise-Separabe-深度可分离卷积" class="headerlink" title="8.1 Deep-wise Separabe 深度可分离卷积"></a>8.1 Deep-wise Separabe 深度可分离卷积</h3><!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/mobilenetv1-1.png" alt="mobilenetv1-1.png"></p>
<p>传统卷积考虑到通道数，对于输入通道数为$N$，输出通道数为$M$，输入长宽$D_K$，输出长宽$D_F$，则卷积层的计算量为</p>
<script type="math/tex; mode=display">
D_K \times D_K \times M \times N \times D_F \times D_F</script><p>若采用深度可分离卷积，首先使用2D卷积核对所有通道进行处理，再使用3D1×1卷积核处理之前输出的特征图，最终得到的输出是与传统卷积是相同的</p>
<p>计算量分为两部分</p>
<script type="math/tex; mode=display">
D_K \times D_K \times M \times D_F \times D_F
\\
M \times N \times D_F \times D_F</script><p>显然总计算量为上述两部分之和，那么与传统卷积计算量的比值为</p>
<script type="math/tex; mode=display">
\frac{1}{N} + \frac{1}{D_K^2}</script><p>MobileNet对3×3卷积进行这种改变使得计算量减少为原始的$\frac{1}{9}$，准确率仅下降一点。</p>
<h3 id="8-2-Network-Structure-and-Training-网络结构和训练"><a href="#8-2-Network-Structure-and-Training-网络结构和训练" class="headerlink" title="8.2 Network Structure and Training 网络结构和训练"></a>8.2 Network Structure and Training 网络结构和训练</h3><p>所有层之后都是BatchNormalization和ReLU非线性激活函数，但是最后的全连接层例外，它没有非线性激活函数，直接馈送到softmax层进行分类。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/mobilenetv1-2.png" alt="mobilenetv1-2.png"></p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/mobilenetv1.png" alt="mobilenetv1.png"></p>
<p>与训练大模型相反，我们较少地使用正则化和数据增加技术，因为小模型不容易过拟合。当训练MobileNets时，我们不使用sideheads或者labelsmoothing，通过限制croping的尺寸来减少图片扭曲。另外，我们发现重要的是在depthwise滤波器上放置很少或没有重量衰减（L2正则化），因为它们参数很少</p>
<h3 id="8-3-Width-Multiplier-Thinner-Models-alpha参数：更小的模型"><a href="#8-3-Width-Multiplier-Thinner-Models-alpha参数：更小的模型" class="headerlink" title="8.3 Width Multiplier: Thinner Models(alpha参数：更小的模型)"></a>8.3 Width Multiplier: Thinner Models(alpha参数：更小的模型)</h3><p>引入了一个非常简单的参数$\alpha$，称为width multiplier。这个参数widthmultiplier的作用是在每层均匀地减负网络。对于一个给定的层和widthmultiplierα，输入通道的数量从$M$变成$\alpha M$，输出通道的数量从$N$变成$\alpha N$。深度可分离卷积（以widthmultiplier参数$\alpha$为计）的计算复杂度：<br>$\alpha \in (0,1]$，通常设为1，0.75，0.5和0.25。$\alpha = 1$表示基准MobileNet，而$\alpha &lt; 1$则表示瘦身的MobileNets。Width multiplier有减少计算复杂度和参数数量（大概$\alpha$二次方）的作用。Width multiplier可以应用于任何模型结构，以定义一个具有合理准确性，延迟和尺寸的新的较小的模型。它用于定义新的简化结构，但需要重新进行训练。</p>
<h3 id="8-4-Resolution-Multiplier-Reduced-Representation"><a href="#8-4-Resolution-Multiplier-Reduced-Representation" class="headerlink" title="8.4 Resolution Multiplier: Reduced Representation"></a>8.4 Resolution Multiplier: Reduced Representation</h3><p>降低神经网络的第二个超参数是resolution multiplier ρ，简而言之就是作用于输出特征图大小（输出大小的系数），$\rho \in (0,1]$，通常设为224,192,160或者128。$\rho=1$是基本MobileNets而$\rho&lt;1$示瘦身的MobileNets。计算量</p>
<script type="math/tex; mode=display">
D_K \times D_K \times \alpha M \times \rho D_F \times \rho D_F + \alpha M \times \alpha N \times \rho D_F \times \rho D_F</script><p>MobileNet模型总结：</p>
<ul>
<li>提供了Width Multiplier和Resolution Multiplier两个参数控制模型大小；</li>
<li>提出了深度可分离卷积的思想。</li>
</ul>
<h2 id="9-MobileNetV2-alpha-0-35-0-50-0-75-1-0-1-3-1-4"><a href="#9-MobileNetV2-alpha-0-35-0-50-0-75-1-0-1-3-1-4" class="headerlink" title="9. MobileNetV2(alpha=0.35/0.50/0.75/1.0/1.3/1.4)"></a>9. MobileNetV2(alpha=0.35/0.50/0.75/1.0/1.3/1.4)</h2><p><a href="https://arxiv.org/abs/1801.04381" target="_blank" rel="noopener">MobileNetV2: Inverted Residuals and Linear Bottlenecks</a></p>
<p>MobileNetv2架构是基于倒置残差结构(inverted residual structure)，原本的残差结构的主分支是有三个卷积，两个逐点卷积通道数较多，而倒置的残差结构刚好相反，中间的卷积通道数(依旧使用深度分离卷积结构)较多，旁边的较小。此外，我们发现去除主分支中的非线性变换是有效的，这可以保持模型表现力。</p>
<p>MobileNetV2提出了manifold of interest（兴趣流形）概念，表示感兴趣的数据内容，但是目前无法定量描述，仅凭经验研究。</p>
<p>我们的目的是在低维依然保持manifold of interest，但是实际上是将矩阵映射到低维后再进行ReLU，最后在求逆投影回原来的维度时，这种manifold of interest会丢失很多的信息。论文针对这个问题使用linear bottleneck(即不使用ReLU激活，做了线性变换)的来代替原本的非线性激活变换。所以通过在卷积模块中后插入linear bottleneck来捕获兴趣流形。 实验证明，使用linear bottleneck可以防止非线性破坏太多信息。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/mobilenetv2-1.png" alt="mobilenetv2-1.png"></p>
<p>MobileNetv2的结构同样是将标准卷积拆分为深度卷积和逐点卷积，在逐点卷积后使用了接1×1卷积，该卷积使用线性变换，总称为一层低维linear bottleneck，其作用是将输入映射回低维空间。</p>
<p>考虑到倒残差结构Inverted residuals，对于Expansion layer(即linear到深度卷积部分)仅是伴随张量非线性变换的部分实现细节，我们可将shortcuts放在linear bottleneck之间连接</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/mobilenetv2-2.png" alt="mobilenetv2-2.png"></p>
<p>下表是bottleneck convolution的基本实现：</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/mobilenetv2-3.png" alt="mobilenetv2-3.png"></p>
<ul>
<li>首先是1×1 conv2d变换通道，后接ReLU6激活(ReLU6即最高输出为6，超过了会clip下来)</li>
<li>中间是深度卷积,后接ReLU</li>
<li>最后的1×1 conv2d后面不接ReLU了，而是论文提出的linear bottleneck</li>
</ul>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/mobilenetv2-4.png" alt="mobilenetv2-4.png"></p>
<p>可以看到相比与之前的残差模块，中间的深度卷积较宽，除了开始的升维的1×1 1×11×1卷积，做shortcut的1×1 1×11×1卷积通道数较少，呈现的是倒立状态，故称为Inverted residuals。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/mobilenetv2-5.png" alt="mobilenetv2-5.png"></p>
<p>训练细节：</p>
<ol>
<li>训练器：RMSPropOptimizer, decay and momentum都设置0.9</li>
<li>标准的权重衰减：4e-5</li>
<li>学习率：初始学习率为0.045,每个epoch后衰减0.98</li>
<li>batch_size：16GPU内设置96</li>
<li>其他细节：每层后使用BN层</li>
</ol>
<h2 id="10-DenseNet121-amp-DenseNet169-amp-DenseNet201"><a href="#10-DenseNet121-amp-DenseNet169-amp-DenseNet201" class="headerlink" title="10. DenseNet121 &amp; DenseNet169 &amp; DenseNet201"></a>10. DenseNet121 &amp; DenseNet169 &amp; DenseNet201</h2><p><a href="https://arxiv.org/abs/1608.06993" target="_blank" rel="noopener">Densely Connected Convolutional Networks</a></p>
<p>DenseNet的提出基于快速连接的思想，与ResNet异曲同工，它进一步利用了快捷连接的效果 - 它将所有层直接相互连接。在这种新颖的架构中，每层的输入由所有早期层的特征图组成，其输出传递给每个后续层。特征映射与深度级联聚合在一起。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/densenet1.png" alt="densenet1.png"></p>
<p>除了解决消失的渐变问题之外，作者认为这种架构还鼓励特征重用，使网络具有高参数效率。对此的一个简单解释是，身份映射的输出被添加到下一个块，如果两个层的特征映射具有非常不同的分布，则可能阻碍信息流。因此，连接特征映射可以保留所有特征映射并增加输出的方差，从而鼓励特征重用。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/densenet2.png" alt="densenet2.png"></p>
<p>遵循这个范例，我们知道第l层将具有$k \times（l-1）+ k_0$个输入要素图，其中$k_0$是输入图像中的通道数。作者使用了一个称为增长率（k）的超参数来防止网络过长，他们还使用1x1卷积瓶颈层来减少昂贵的3x3卷积之前的特征映射数量。整体结构如下表所示：</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/densenet0.png" alt="densenet0.png"></p>
<p>DenseNet模型总结：</p>
<ul>
<li>更远距离的快速连接。</li>
</ul>
<h2 id="11-NASNetLarge-amp-NASNetMobile"><a href="#11-NASNetLarge-amp-NASNetMobile" class="headerlink" title="11. NASNetLarge &amp; NASNetMobile"></a>11. NASNetLarge &amp; NASNetMobile</h2><p><a href="https://arxiv.org/abs/1707.07012" target="_blank" rel="noopener">Learning Transferable Architectures for Scalable Image Recognition</a></p>
<p>NasNet，是当前图像识别领域的最佳模型，这个模型并非是人为设计出来的，而是通过谷歌很早之前推出的AutoML自动训练出来的。</p>
<p>NasNet的组成由两种网络单元组合而成</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/nasnet1.png" alt="nasnet1.png"></p>
<p>这两种单元的堆叠方案如下：</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/nasnet0.png" alt="nasnet0.png"></p>
<p>搜索过程：</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/nasnet2.png" alt="nasnet2.png"></p>
<p>如上图所示，控制器RNN从搜索空间中以概率p预测网络结构A。worker单元，学习该网络直到收敛，并得到准确性R。最终将梯度p*R传递给RNN控制器进行梯度更新。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/nasnet3.png" alt="nasnet3.png"></p>
<p>控制器依次搜索隐藏状态，隐藏状态，何种操作，何种操作，何种组合方法，这5个方法和操作的组合。其中，每种方法，每种操作都对应于一个softmax损失。这样重复B次，得到一个最终block模块。最终的损失函数就有5B个。实验中最优的B=5。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/nasnet4.png" alt="nasnet4.png"></p>
<p>其中，黄色的可选的操作包括上图所示的13种操作。</p>
<p>最终论文得到了3个网络结构，分别为NASNet-A，NASNet-B， NASNet-C。</p>
<p>NASNet-A：</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/nasnet-a.png" alt="nasnet-a.png"></p>
<p>NASNet-B：</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/nasnet-b.png" alt="nasnet-b.png"></p>
<p>NASNet-C：</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/nasnet-c.png" alt="nasnet-c.png"></p>
<p>NasNet模型总结：</p>
<ul>
<li><p>设计了新的搜索空间，即NASNet search space，并在实验中搜索得到最优的网络结构NASNet</p>
</li>
<li><p>不管是乘-加计算量，还是参数量，NASNet都优于目前人工设计的网络结构</p>
</li>
<li><p>提出新的正则化技术，ScheduledDropPath，是DropPath方法的改进版，可以大大提高了模型的泛化能力。</p>
</li>
</ul>
<p>DropPath方法在训练过程中以随机概率p进行drop，该概率训练中保持不变。而ScheduledDropPath方法在训练过程线性的提高随机概率p。</p>
]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>Keras</tag>
        <tag>Model</tag>
      </tags>
  </entry>
  <entry>
    <title>TensorFlow-CIFAR10</title>
    <url>/archives/40b4de0.html</url>
    <content><![CDATA[<p>参考：</p>
<blockquote>
<p><a href="https://github.com/tensorflow/models/tree/master/tutorials/image/cifar10_estimator" target="_blank" rel="noopener">CIFAR-10 ResNet</a><br><a href="https://arxiv.org/abs/1512.03385" target="_blank" rel="noopener">Deep Residual Learning for Image Recognition</a></p>
</blockquote>
<p>源代码的参数完全按照论文<a href="https://arxiv.org/abs/1512.03385" target="_blank" rel="noopener">Deep Residual Learning for Image Recognition</a>描述指定。</p>
<p>CIFAR10项目下有6个py文件：<code>cifar10.py, cifar10_main.py, cifar10_model.py, cifar10_utils.py, generate_cifar10_tfrecords.py, model_base.py</code></p>
<a id="more"></a>
<p>先从<code>generate_cifar10_tfrecords.py</code>开始</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""这部分代码的功能是生成TFRecords，这是专门提供给TensorFlow的一种数据格式。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">代码功能包括下载图片数据并解压，生成train，validation，eval三个.tfrecords文件作为训练集、验证集和测试集</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> argparse <span class="comment"># 控制运行时参数，在__main__中使用</span></span><br><span class="line"><span class="keyword">import</span> os <span class="comment"># os.path.join 连接路径</span></span><br><span class="line"><span class="keyword">import</span> sys <span class="comment"># 获取系统相关信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tarfile <span class="comment"># 压缩/解压文件</span></span><br><span class="line"><span class="keyword">from</span> six.moves <span class="keyword">import</span> cPickle <span class="keyword">as</span> pickle <span class="comment"># 序列化数据</span></span><br><span class="line"><span class="keyword">from</span> six.moves <span class="keyword">import</span> xrange  <span class="comment"># python3中可以直接使用range，性能比python2中的range强</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">CIFAR_FILENAME = <span class="string">'cifar-10-python.tar.gz'</span></span><br><span class="line">CIFAR_DOWNLOAD_URL = <span class="string">'https://www.cs.toronto.edu/~kriz/'</span> + CIFAR_FILENAME <span class="comment"># 从这个url下载原始数据</span></span><br><span class="line">CIFAR_LOCAL_FOLDER = <span class="string">'cifar-10-batches-py'</span> <span class="comment"># 解压到本地的路径</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_and_extract</span><span class="params">(data_dir)</span>:</span></span><br><span class="line">  <span class="comment"># download CIFAR-10 if not already downloaded.</span></span><br><span class="line">  <span class="comment"># maybe_download已经被1.12版本废弃，替代方法的是直接在keras中load_data，参考 卷积神经网络-coding</span></span><br><span class="line">  tf.contrib.learn.datasets.base.maybe_download(CIFAR_FILENAME, data_dir,</span><br><span class="line">                                                CIFAR_DOWNLOAD_URL)</span><br><span class="line">  tarfile.open(os.path.join(data_dir, CIFAR_FILENAME),</span><br><span class="line">               <span class="string">'r:gz'</span>).extractall(data_dir)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据写入到TFRecords需要用到Feature，这是一种key-value的形式，同时我们可以定义value的类型，</span></span><br><span class="line"><span class="comment"># 一般有三种Int64List，BytesList，FloatList，顾名思义，value也必须是List形式</span></span><br><span class="line"><span class="comment"># 这里Int类型保存的是标签，Bytes类型保存图片数据，理论上来说，也可以用其他类型保存图片，</span></span><br><span class="line"><span class="comment"># 但是二进制字符串需要的空间比int或float小很多，而一张图片包含的数据量大，为了减小存储压力，</span></span><br><span class="line"><span class="comment"># 通常做法是将图片写为bytes类型，而label本身只是单值数字，所以可以用int。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_int64_feature</span><span class="params">(value)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_bytes_feature</span><span class="params">(value)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压后的文件包括data_batch_[1...5]和test_batch，这里将1到4作为训练集，5为验证集，</span></span><br><span class="line"><span class="comment"># 返回三种集合的文件名，这里的文件名没有后缀.XX</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_file_names</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="string">"""Returns the file names expected to exist in the input_dir."""</span></span><br><span class="line">  file_names = &#123;&#125;</span><br><span class="line">  file_names[<span class="string">'train'</span>] = [<span class="string">'data_batch_%d'</span> % i <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>, <span class="number">5</span>)]</span><br><span class="line">  file_names[<span class="string">'validation'</span>] = [<span class="string">'data_batch_5'</span>]</span><br><span class="line">  file_names[<span class="string">'eval'</span>] = [<span class="string">'test_batch'</span>]</span><br><span class="line">  <span class="keyword">return</span> file_names</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据文件路径将序列化的原始数据读取出来，使用tf.gfile.Open，rb代表二进制读，</span></span><br><span class="line"><span class="comment"># sys.version_info判断是python2还是python3，调用pickle.load转成python数据结构</span></span><br><span class="line"><span class="comment"># 根据convert_to_tfrecord里的代码可知，是一个字典类型的数据被序列化了</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_pickle_from_file</span><span class="params">(filename)</span>:</span></span><br><span class="line">  <span class="keyword">with</span> tf.gfile.Open(filename, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">if</span> sys.version_info &gt;= (<span class="number">3</span>, <span class="number">0</span>):</span><br><span class="line">      data_dict = pickle.load(f, encoding=<span class="string">'bytes'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      data_dict = pickle.load(f)</span><br><span class="line">  <span class="keyword">return</span> data_dict</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入TFRecords的具体函数，两个参数都是文件的绝对路径</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_to_tfrecord</span><span class="params">(input_files, output_file)</span>:</span></span><br><span class="line">  <span class="string">"""Converts a file to TFRecords."""</span></span><br><span class="line">  print(<span class="string">'Generating %s'</span> % output_file)</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># tf.python_io.TFRecordWriter在1.12中是tf.io.TFRecordWriter，对文件处理时采用的方式是</span></span><br><span class="line">  <span class="comment"># with XX as xx，这很常见，因为可以避免忘记关闭文件</span></span><br><span class="line">  <span class="keyword">with</span> tf.python_io.TFRecordWriter(output_file) <span class="keyword">as</span> record_writer:</span><br><span class="line">    <span class="keyword">for</span> input_file <span class="keyword">in</span> input_files:</span><br><span class="line">      <span class="comment"># 这里用b'xxxx'是因为原始数据使用了bytes字符串作为key而不是str，也是为了减少存储空间</span></span><br><span class="line">      <span class="comment"># len(labels)可以知道有多少条数据或图片</span></span><br><span class="line">      data_dict = read_pickle_from_file(input_file)</span><br><span class="line">      data = data_dict[<span class="string">b'data'</span>]</span><br><span class="line">      labels = data_dict[<span class="string">b'labels'</span>]</span><br><span class="line">      num_entries_in_batch = len(labels)</span><br><span class="line">      <span class="comment"># 注意了，record_writer.write是一条数据一条数据地往tfrecords中写入</span></span><br><span class="line">      <span class="keyword">for</span> i <span class="keyword">in</span> range(num_entries_in_batch):</span><br><span class="line">        <span class="comment"># 写入地内容是tf.train.Example类型，对应上面地key-value形式</span></span><br><span class="line">        example = tf.train.Example(features=tf.train.Features(</span><br><span class="line">            feature=&#123;</span><br><span class="line">                <span class="string">'image'</span>: _bytes_feature(data[i].tobytes()), <span class="comment"># tobytes与tostring最终结果相同</span></span><br><span class="line">                <span class="string">'label'</span>: _int64_feature(labels[i])</span><br><span class="line">            &#125;))</span><br><span class="line">        <span class="comment"># SerializeToString序列化，必须步骤</span></span><br><span class="line">        record_writer.write(example.SerializeToString())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(data_dir)</span>:</span></span><br><span class="line">  print(<span class="string">'Download from &#123;&#125; and extract.'</span>.format(CIFAR_DOWNLOAD_URL))</span><br><span class="line">  <span class="comment"># 首先下载文件</span></span><br><span class="line">  download_and_extract(data_dir)</span><br><span class="line">  <span class="comment"># 获取文件名</span></span><br><span class="line">  file_names = _get_file_names()</span><br><span class="line">  <span class="comment"># 连接文件路径</span></span><br><span class="line">  input_dir = os.path.join(data_dir, CIFAR_LOCAL_FOLDER)</span><br><span class="line">  <span class="comment"># 分别对三种集合处理</span></span><br><span class="line">  <span class="keyword">for</span> mode, files <span class="keyword">in</span> file_names.items():</span><br><span class="line">    input_files = [os.path.join(input_dir, f) <span class="keyword">for</span> f <span class="keyword">in</span> files]</span><br><span class="line">    <span class="comment"># 保存的文件名为xxx.tfrecords</span></span><br><span class="line">    output_file = os.path.join(data_dir, mode + <span class="string">'.tfrecords'</span>)</span><br><span class="line">    <span class="comment"># 这里先删除已经存在的输出文件，不错</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      os.remove(output_file)</span><br><span class="line">    <span class="keyword">except</span> OSError:</span><br><span class="line">      <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># Convert to tf.train.Example and write the to TFRecords.</span></span><br><span class="line">    convert_to_tfrecord(input_files, output_file)</span><br><span class="line">  print(<span class="string">'Done!'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  <span class="comment"># 运行时参数控制，似乎可以使用tf.app.flags替代，只是指定了下载文件的路径</span></span><br><span class="line">  parser = argparse.ArgumentParser()</span><br><span class="line">  parser.add_argument(</span><br><span class="line">      <span class="string">'--data-dir'</span>,</span><br><span class="line">      type=str,</span><br><span class="line">      default=<span class="string">''</span>,</span><br><span class="line">      help=<span class="string">'Directory to download and extract CIFAR-10 to.'</span>)</span><br><span class="line"></span><br><span class="line">  args = parser.parse_args()</span><br><span class="line">  main(args.data_dir)</span><br></pre></td></tr></table></figure>
<p>通过运行上面的py文件，我们得到了三个TFRecords文件，使用TFRecords文件的好处有，与直接使用原始数据相比，TensorFlow模型读取TFReocrds文件更快，内存压力更小，要知道，模型训练速度的瓶颈可能不是运算能力而是IO，配合tf.data.Dataset更快。还有就是生成的TFRecords文件可能比原始文件大。</p>
<hr>
<p>然后是<code>cifar10.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""这个代码的功能就很简单了，读取TFReocrds，生成Dataset"""</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图片数据的原始形状，长宽为32，RGB图所以深度为3</span></span><br><span class="line">HEIGHT = <span class="number">32</span></span><br><span class="line">WIDTH = <span class="number">32</span></span><br><span class="line">DEPTH = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里定义一个类，超级方便后面的调用，封装了读取、处理数据一系列的方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cifar10DataSet</span><span class="params">(object)</span>:</span></span><br><span class="line">  <span class="string">"""Cifar10 data set.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  Described by http://www.cs.toronto.edu/~kriz/cifar.html.</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line">  <span class="comment"># __init__是python类的初始化方法，参数包括：data_dir即三个TFRecords文件的路径</span></span><br><span class="line">  <span class="comment"># subset指定是train，validation还是eval，从而生成指定的Dataset，</span></span><br><span class="line">  <span class="comment"># 训练时train和validation，测试时eval，use_distortion指定是否需要扰乱数据集，</span></span><br><span class="line">  <span class="comment"># 图片扰乱一般包括裁剪、旋转、平移、翻转、亮度等等方式调整数据，从而增加模型的鲁棒性</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data_dir, subset=<span class="string">'train'</span>, use_distortion=True)</span>:</span></span><br><span class="line">    self.data_dir = data_dir</span><br><span class="line">    self.subset = subset</span><br><span class="line">    self.use_distortion = use_distortion</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 获取文件路径名，返回了一个List类型</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_filenames</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.subset <span class="keyword">in</span> [<span class="string">'train'</span>, <span class="string">'validation'</span>, <span class="string">'eval'</span>]:</span><br><span class="line">      <span class="keyword">return</span> [os.path.join(self.data_dir, self.subset + <span class="string">'.tfrecords'</span>)]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="keyword">raise</span> ValueError(<span class="string">'Invalid data subset "%s"'</span> % self.subset)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 将单个tf.Example还原为float32的图片数据和int32的label数据</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">parser</span><span class="params">(self, serialized_example)</span>:</span></span><br><span class="line">    <span class="string">"""Parses a single tf.Example into image and label tensors."""</span></span><br><span class="line">    <span class="comment"># Dimensions of the images in the CIFAR-10 dataset.</span></span><br><span class="line">    <span class="comment"># See http://www.cs.toronto.edu/~kriz/cifar.html for a description of the</span></span><br><span class="line">    <span class="comment"># input format.</span></span><br><span class="line">    <span class="comment"># 在1.12版本使用tf.io.parse_single_example，调用方式很简单，</span></span><br><span class="line">    <span class="comment"># FixedLenFeature代表固定长度的数据，图片对应是字节数组，所以按tf.string格式转换</span></span><br><span class="line">    features = tf.parse_single_example(</span><br><span class="line">        serialized_example,</span><br><span class="line">        features=&#123;</span><br><span class="line">            <span class="string">'image'</span>: tf.FixedLenFeature([], tf.string),</span><br><span class="line">            <span class="string">'label'</span>: tf.FixedLenFeature([], tf.int64),</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="comment"># 得到的数据需要解码，按照无符号8bit格式</span></span><br><span class="line">    image = tf.decode_raw(features[<span class="string">'image'</span>], tf.uint8)</span><br><span class="line">    image.set_shape([DEPTH * HEIGHT * WIDTH])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Reshape from [depth * height * width] to [depth, height, width].</span></span><br><span class="line">    <span class="comment"># [depth, height, width]到[height, width, depth]，同时从uint8到float32</span></span><br><span class="line">    image = tf.cast(</span><br><span class="line">        tf.transpose(tf.reshape(image, [DEPTH, HEIGHT, WIDTH]), [<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>]),</span><br><span class="line">        tf.float32)</span><br><span class="line">    label = tf.cast(features[<span class="string">'label'</span>], tf.int32)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调用preprocess方法处理图片数据</span></span><br><span class="line">    image = self.preprocess(image)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> image, label</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 生成batch_size大小的Dataset</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">make_batch</span><span class="params">(self, batch_size)</span>:</span></span><br><span class="line">    <span class="string">"""Read the images and labels from 'filenames'."""</span></span><br><span class="line">    filenames = self.get_filenames()</span><br><span class="line">    <span class="comment"># Repeat infinitely.</span></span><br><span class="line">    <span class="comment"># 注意这里使用了tf.data.TFRecordDataset读取TFRecords文件，repeat进行复制</span></span><br><span class="line">    dataset = tf.data.TFRecordDataset(filenames).repeat()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用map对每一个TFRecordDataset中读取的Example进行parser，</span></span><br><span class="line">    <span class="comment"># num_parallel_calls指定并行处理的数量，这里等于batch_size</span></span><br><span class="line">    dataset = dataset.map(</span><br><span class="line">        self.parser, num_parallel_calls=batch_size)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练集需要shuffle，buffer_size等于数据集40%的总数量加上3个batch_size</span></span><br><span class="line">    <span class="keyword">if</span> self.subset == <span class="string">'train'</span>:</span><br><span class="line">      min_queue_examples = int(</span><br><span class="line">          Cifar10DataSet.num_examples_per_epoch(self.subset) * <span class="number">0.4</span>)</span><br><span class="line">      <span class="comment"># Ensure that the capacity is sufficiently large to provide good random</span></span><br><span class="line">      <span class="comment"># shuffling.</span></span><br><span class="line">      dataset = dataset.shuffle(buffer_size=min_queue_examples + <span class="number">3</span> * batch_size)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Batch it up.</span></span><br><span class="line">    dataset = dataset.batch(batch_size)</span><br><span class="line">    iterator = dataset.make_one_shot_iterator()</span><br><span class="line">    image_batch, label_batch = iterator.get_next()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> image_batch, label_batch</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 如果是train数据集，且扰动为真，resize_image_with_crop_or_pad填充图像到40长宽</span></span><br><span class="line">  <span class="comment"># 1.12版本tf.image.random_crop随机裁剪到32长宽</span></span><br><span class="line">  <span class="comment"># random_flip_left_right随机翻转图片</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">preprocess</span><span class="params">(self, image)</span>:</span></span><br><span class="line">    <span class="string">"""Preprocess a single image in [height, width, depth] layout."""</span></span><br><span class="line">    <span class="keyword">if</span> self.subset == <span class="string">'train'</span> <span class="keyword">and</span> self.use_distortion:</span><br><span class="line">      <span class="comment"># Pad 4 pixels on each dimension of feature map, done in mini-batch</span></span><br><span class="line">      image = tf.image.resize_image_with_crop_or_pad(image, <span class="number">40</span>, <span class="number">40</span>)</span><br><span class="line">      image = tf.random_crop(image, [HEIGHT, WIDTH, DEPTH])</span><br><span class="line">      image = tf.image.random_flip_left_right(image)</span><br><span class="line">    <span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 静态方法，保存的是数据集大小，不需要实例</span></span><br><span class="line"><span class="meta">  @staticmethod</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">num_examples_per_epoch</span><span class="params">(subset=<span class="string">'train'</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> subset == <span class="string">'train'</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">45000</span> <span class="comment"># 这里可能写错了？40000</span></span><br><span class="line">    <span class="keyword">elif</span> subset == <span class="string">'validation'</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">5000</span> <span class="comment"># 这里可能写错了？10000</span></span><br><span class="line">    <span class="keyword">elif</span> subset == <span class="string">'eval'</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">10000</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="keyword">raise</span> ValueError(<span class="string">'Invalid data subset "%s"'</span> % subset)</span><br></pre></td></tr></table></figure>
<p>上面的代码主要是为了训练模型提供Dataset，生成Dataset的过程中已经进行了数据扰动，而且这个类适用于三种不同的数据集。</p>
<hr>
<p>接着是<code>cifar10_utils.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">提供了运行时对模型的run_config，有很多部分是需要替换和丢弃的</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">import</span> six</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tensorflow.python.platform <span class="keyword">import</span> tf_logging <span class="keyword">as</span> logging        <span class="comment"># 1.12版本 tf.logging.info</span></span><br><span class="line"><span class="keyword">from</span> tensorflow.core.framework <span class="keyword">import</span> node_def_pb2                  <span class="comment"># 1.12版本 tf.NodeDef</span></span><br><span class="line"><span class="keyword">from</span> tensorflow.python.framework <span class="keyword">import</span> device <span class="keyword">as</span> pydev             <span class="comment"># 1.12版本 tf.DeviceSpec</span></span><br><span class="line"><span class="keyword">from</span> tensorflow.python.training <span class="keyword">import</span> basic_session_run_hooks      <span class="comment"># 1.12版本 tf.train.SecondOrStepTimer/tf.train.SessionRunArgs</span></span><br><span class="line"><span class="keyword">from</span> tensorflow.python.training <span class="keyword">import</span> session_run_hook             <span class="comment"># 1.12版本 tf.train.SessionRunHook</span></span><br><span class="line"><span class="keyword">from</span> tensorflow.python.training <span class="keyword">import</span> training_util                <span class="comment"># 1.12版本 tf.train.get_global_step</span></span><br><span class="line"><span class="keyword">from</span> tensorflow.python.training <span class="keyword">import</span> device_setter                <span class="comment"># 1.12版本 tf.train.replica_device_setter</span></span><br><span class="line"><span class="keyword">from</span> tensorflow.contrib.learn.python.learn <span class="keyword">import</span> run_config        <span class="comment"># 1.12版本 tf.estimator.RunConfig</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.12版本使用tf.estimator.RunConfig，废弃tf.contrib.learn.RunConfig，</span></span><br><span class="line"><span class="comment"># 而且在tf.estimator.RunConfig可以直接调用，不需要重写，此部分略过</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RunConfig</span><span class="params">(tf.contrib.learn.RunConfig)</span>:</span> </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">uid</span><span class="params">(self, whitelist=None)</span>:</span></span><br><span class="line">    <span class="string">"""Generates a 'Unique Identifier' based on all internal fields.</span></span><br><span class="line"><span class="string">    Caller should use the uid string to check `RunConfig` instance integrity</span></span><br><span class="line"><span class="string">    in one session use, but should not rely on the implementation details, which</span></span><br><span class="line"><span class="string">    is subject to change.</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">      whitelist: A list of the string names of the properties uid should not</span></span><br><span class="line"><span class="string">        include. If `None`, defaults to `_DEFAULT_UID_WHITE_LIST`, which</span></span><br><span class="line"><span class="string">        includes most properties user allowes to change.</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">      A uid string.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> whitelist <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">      whitelist = run_config._DEFAULT_UID_WHITE_LIST</span><br><span class="line"></span><br><span class="line">    state = &#123;k: v <span class="keyword">for</span> k, v <span class="keyword">in</span> self.__dict__.items() <span class="keyword">if</span> <span class="keyword">not</span> k.startswith(<span class="string">'__'</span>)&#125;</span><br><span class="line">    <span class="comment"># Pop out the keys in whitelist.</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> whitelist:</span><br><span class="line">      state.pop(<span class="string">'_'</span> + k, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    ordered_state = collections.OrderedDict(</span><br><span class="line">        sorted(state.items(), key=<span class="keyword">lambda</span> t: t[<span class="number">0</span>]))</span><br><span class="line">    <span class="comment"># For class instance without __repr__, some special cares are required.</span></span><br><span class="line">    <span class="comment"># Otherwise, the object address will be used.</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'_cluster_spec'</span> <span class="keyword">in</span> ordered_state:</span><br><span class="line">      ordered_state[<span class="string">'_cluster_spec'</span>] = collections.OrderedDict(</span><br><span class="line">         sorted(ordered_state[<span class="string">'_cluster_spec'</span>].as_dict().items(),</span><br><span class="line">                key=<span class="keyword">lambda</span> t: t[<span class="number">0</span>])</span><br><span class="line">      )</span><br><span class="line">    <span class="keyword">return</span> <span class="string">', '</span>.join(</span><br><span class="line">        <span class="string">'%s=%r'</span> % (k, v) <span class="keyword">for</span> (k, v) <span class="keyword">in</span> six.iteritems(ordered_state)) </span><br><span class="line"></span><br><span class="line"><span class="comment"># ExamplesPerSecondHook提供了在训练时输出xx examples/sec的功能，</span></span><br><span class="line"><span class="comment"># 本质上是tf.train.StepCounterHook乘以batch_size，所以可以使用StepCounterHook替换，</span></span><br><span class="line"><span class="comment"># 或者使用tf.train.LoggingTensorHook记录</span></span><br><span class="line"><span class="comment"># 使用tf.train.SessionRunHook替换继承的父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExamplesPerSecondHook</span><span class="params">(session_run_hook.SessionRunHook)</span>:</span></span><br><span class="line">  <span class="string">"""Hook to print out examples per second.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Total time is tracked and then divided by the total number of steps</span></span><br><span class="line"><span class="string">    to get the average step time and then batch_size is used to determine</span></span><br><span class="line"><span class="string">    the running average of examples per second. The examples per second for the</span></span><br><span class="line"><span class="string">    most recent interval is also logged.</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line">  <span class="comment"># Hook的继承都差不多，主要包括几个方法，而且Hook一般用在Estimator中，与keras的callback有点不同</span></span><br><span class="line">  <span class="comment"># __init__，begin，before_run，after_run</span></span><br><span class="line">  <span class="comment"># 从__init__参数可以看出，estimator的log形式是按照steps或secs来输出的，默认为100steps打印一次</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      self,</span></span></span><br><span class="line"><span class="function"><span class="params">      batch_size,</span></span></span><br><span class="line"><span class="function"><span class="params">      every_n_steps=<span class="number">100</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">      every_n_secs=None,)</span>:</span></span><br><span class="line">    <span class="string">"""Initializer for ExamplesPerSecondHook.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      Args:</span></span><br><span class="line"><span class="string">      batch_size: Total batch size used to calculate examples/second from</span></span><br><span class="line"><span class="string">      global time.</span></span><br><span class="line"><span class="string">      every_n_steps: Log stats every n steps.</span></span><br><span class="line"><span class="string">      every_n_secs: Log stats every n seconds.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 这个判断形式确保二者至少有一个</span></span><br><span class="line">    <span class="keyword">if</span> (every_n_steps <span class="keyword">is</span> <span class="literal">None</span>) == (every_n_secs <span class="keyword">is</span> <span class="literal">None</span>):</span><br><span class="line">      <span class="keyword">raise</span> ValueError(<span class="string">'exactly one of every_n_steps'</span></span><br><span class="line">                       <span class="string">' and every_n_secs should be provided.'</span>)</span><br><span class="line">    <span class="comment"># 1.12版本使用tf.train.SecondOrStepTimer作为触发器，每n步或者n秒触发一次</span></span><br><span class="line">    self._timer = basic_session_run_hooks.SecondOrStepTimer(</span><br><span class="line">        every_steps=every_n_steps, every_secs=every_n_secs)</span><br><span class="line">    <span class="comment"># 初始化time和steps</span></span><br><span class="line">    self._step_train_time = <span class="number">0</span></span><br><span class="line">    self._total_steps = <span class="number">0</span></span><br><span class="line">    self._batch_size = batch_size</span><br><span class="line"></span><br><span class="line">  <span class="comment"># tf.train.get_global_step替换，用一个_global_step_tensor记录训练steps，训练开始时执行begin方法</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">begin</span><span class="params">(self)</span>:</span></span><br><span class="line">    self._global_step_tensor = training_util.get_global_step()</span><br><span class="line">    <span class="keyword">if</span> self._global_step_tensor <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">      <span class="keyword">raise</span> RuntimeError(</span><br><span class="line">          <span class="string">'Global step should be created to use StepCounterHook.'</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># tf.train.SessionRunArgs替换，相当于把_global_step_tensor添加到Session.run()中</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">before_run</span><span class="params">(self, run_context)</span>:</span>  <span class="comment"># pylint: disable=unused-argument</span></span><br><span class="line">    <span class="keyword">return</span> basic_session_run_hooks.SessionRunArgs(self._global_step_tensor)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 在每一个step运行完成后通过触发器判断是否需要打印信息</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">after_run</span><span class="params">(self, run_context, run_values)</span>:</span></span><br><span class="line">    _ = run_context</span><br><span class="line">    <span class="comment"># 触发器与global_step对比</span></span><br><span class="line">    global_step = run_values.results</span><br><span class="line">    <span class="keyword">if</span> self._timer.should_trigger_for_step(global_step):</span><br><span class="line">      <span class="comment"># 获取两次触发器之间间隔的时间和steps</span></span><br><span class="line">      elapsed_time, elapsed_steps = self._timer.update_last_triggered_step(</span><br><span class="line">          global_step)</span><br><span class="line">      <span class="keyword">if</span> elapsed_time <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        steps_per_sec = elapsed_steps / elapsed_time</span><br><span class="line">        self._step_train_time += elapsed_time</span><br><span class="line">        self._total_steps += elapsed_steps</span><br><span class="line">        <span class="comment"># 用batch_size乘以steps/secs得到examples/secs得到平均值</span></span><br><span class="line">        average_examples_per_sec = self._batch_size * (</span><br><span class="line">            self._total_steps / self._step_train_time)</span><br><span class="line">        current_examples_per_sec = steps_per_sec * self._batch_size</span><br><span class="line">        <span class="comment"># Average examples/sec followed by current examples/sec</span></span><br><span class="line">        <span class="comment"># 1.12版本 tf.logging替换</span></span><br><span class="line">        logging.info(<span class="string">'%s: %g (%g), step = %g'</span>, <span class="string">'Average examples/sec'</span>,</span><br><span class="line">                     average_examples_per_sec, current_examples_per_sec,</span><br><span class="line">                     self._total_steps)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.12版本使用tf.train.replica_device_setter替换，这个方法是为了配置在不同的device上运行</span></span><br><span class="line"><span class="comment"># 比如CPU和GPU或者多GPU，默认只用一个CPU device</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">local_device_setter</span><span class="params">(num_devices=<span class="number">1</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                        ps_device_type=<span class="string">'cpu'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                        worker_device=<span class="string">'/cpu:0'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                        ps_ops=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                        ps_strategy=None)</span>:</span></span><br><span class="line">  <span class="keyword">if</span> ps_ops == <span class="literal">None</span>:</span><br><span class="line">    ps_ops = [<span class="string">'Variable'</span>, <span class="string">'VariableV2'</span>, <span class="string">'VarHandleOp'</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ps_strategy <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="comment"># 必须替换的方法，返回下一个任务的索引？</span></span><br><span class="line">    <span class="comment"># Returns the next ps task index for placement in round-robin order</span></span><br><span class="line">    ps_strategy = device_setter._RoundRobinStrategy(num_devices)</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> six.callable(ps_strategy):</span><br><span class="line">    <span class="keyword">raise</span> TypeError(<span class="string">"ps_strategy must be callable"</span>)</span><br><span class="line">  <span class="comment"># 获得device的规范名称，在with tf.device(DeviceSpec(job="train", ))中使用</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">_local_device_chooser</span><span class="params">(op)</span>:</span></span><br><span class="line">    current_device = pydev.DeviceSpec.from_string(op.device <span class="keyword">or</span> <span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">    node_def = op <span class="keyword">if</span> isinstance(op, node_def_pb2.NodeDef) <span class="keyword">else</span> op.node_def</span><br><span class="line">    <span class="keyword">if</span> node_def.op <span class="keyword">in</span> ps_ops:</span><br><span class="line">      ps_device_spec = pydev.DeviceSpec.from_string(</span><br><span class="line">          <span class="string">'/&#123;&#125;:&#123;&#125;'</span>.format(ps_device_type, ps_strategy(op)))</span><br><span class="line"></span><br><span class="line">      ps_device_spec.merge_from(current_device)</span><br><span class="line">      <span class="keyword">return</span> ps_device_spec.to_string()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      worker_device_spec = pydev.DeviceSpec.from_string(worker_device <span class="keyword">or</span> <span class="string">""</span>)</span><br><span class="line">      worker_device_spec.merge_from(current_device)</span><br><span class="line">      <span class="keyword">return</span> worker_device_spec.to_string()</span><br><span class="line">  <span class="keyword">return</span> _local_device_chooser</span><br></pre></td></tr></table></figure>
<p>这一部分的代码可以直接使用TensorFlow的函数替换，虽然重写也是可以的，了解了部分源码。</p>
<hr>
<p><code>model_base.py</code>里面是ResNet模型，这里不表，准备与其他模型例如VGG16，InceptionV3等等一起写一下。<br>这里看一下CIFAR10的模型<code>cifar10_model.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""Model class for Cifar10 Dataset."""</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> model_base</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于ResNet的CIFAR10模型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResNetCifar10</span><span class="params">(model_base.ResNet)</span>:</span></span><br><span class="line">  <span class="string">"""Cifar10 model with ResNetV1 and basic residual block."""</span></span><br><span class="line">  <span class="comment"># num_layers模型层数，is_training模型处于train状态还是eval状态，</span></span><br><span class="line">  <span class="comment"># data_format表示图片数据中Depth处于第几个维度</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,</span></span></span><br><span class="line"><span class="function"><span class="params">               num_layers,</span></span></span><br><span class="line"><span class="function"><span class="params">               is_training,</span></span></span><br><span class="line"><span class="function"><span class="params">               batch_norm_decay,</span></span></span><br><span class="line"><span class="function"><span class="params">               batch_norm_epsilon,</span></span></span><br><span class="line"><span class="function"><span class="params">               data_format=<span class="string">'channels_first'</span>)</span>:</span></span><br><span class="line">    super(ResNetCifar10, self).__init__(</span><br><span class="line">        is_training,</span><br><span class="line">        data_format,</span><br><span class="line">        batch_norm_decay,</span><br><span class="line">        batch_norm_epsilon</span><br><span class="line">    )</span><br><span class="line">    self.n = (num_layers - <span class="number">2</span>) // <span class="number">6</span></span><br><span class="line">    <span class="comment"># Add one in case label starts with 1. No impact if label starts with 0.</span></span><br><span class="line">    self.num_classes = <span class="number">10</span> + <span class="number">1</span></span><br><span class="line">    self.filters = [<span class="number">16</span>, <span class="number">16</span>, <span class="number">32</span>, <span class="number">64</span>]</span><br><span class="line">    self.strides = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>]</span><br><span class="line">  <span class="comment"># 前向传播，这里具体细节和ResNet相关，之后再分析，输出的x的维度是num_classes</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">forward_pass</span><span class="params">(self, x, input_data_format=<span class="string">'channels_last'</span>)</span>:</span></span><br><span class="line">    <span class="string">"""Build the core model within the graph."""</span></span><br><span class="line">    <span class="keyword">if</span> self._data_format != input_data_format:</span><br><span class="line">      <span class="keyword">if</span> input_data_format == <span class="string">'channels_last'</span>:</span><br><span class="line">        <span class="comment"># Computation requires channels_first.</span></span><br><span class="line">        x = tf.transpose(x, [<span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># Computation requires channels_last.</span></span><br><span class="line">        x = tf.transpose(x, [<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Image standardization.</span></span><br><span class="line">    x = x / <span class="number">128</span> - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    x = self._conv(x, <span class="number">3</span>, <span class="number">16</span>, <span class="number">1</span>)</span><br><span class="line">    x = self._batch_norm(x)</span><br><span class="line">    x = self._relu(x)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Use basic (non-bottleneck) block and ResNet V1 (post-activation).</span></span><br><span class="line">    res_func = self._residual_v1</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3 stages of block stacking.</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">      <span class="keyword">with</span> tf.name_scope(<span class="string">'stage'</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(self.n):</span><br><span class="line">          <span class="keyword">if</span> j == <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># First block in a stage, filters and strides may change.</span></span><br><span class="line">            x = res_func(x, <span class="number">3</span>, self.filters[i], self.filters[i + <span class="number">1</span>],</span><br><span class="line">                         self.strides[i])</span><br><span class="line">          <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># Following blocks in a stage, constant filters and unit stride.</span></span><br><span class="line">            x = res_func(x, <span class="number">3</span>, self.filters[i + <span class="number">1</span>], self.filters[i + <span class="number">1</span>], <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    x = self._global_avg_pool(x)</span><br><span class="line">    x = self._fully_connected(x, self.num_classes)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure>
<hr>
<p>最后是<code>cifar10_main.py</code>，包括train和eval部分功能，这里可能大部分代码需要重新写以适配新的版本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""ResNet model for classifying images from CIFAR-10 dataset.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Support single-host training with one or multiple devices.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ResNet as proposed in:</span></span><br><span class="line"><span class="string">Kaiming He, Xiangyu Zhang, Shaoqing Ren, Jian Sun</span></span><br><span class="line"><span class="string">Deep Residual Learning for Image Recognition. arXiv:1512.03385</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">CIFAR-10 as in:</span></span><br><span class="line"><span class="string">http://www.cs.toronto.edu/~kriz/cifar.html</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> functools <span class="comment"># 作用于或返回其他函数的函数</span></span><br><span class="line"><span class="keyword">import</span> itertools <span class="comment"># chain() 可以把一组迭代对象串联起来，形成一个更大的迭代器</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cifar10</span><br><span class="line"><span class="keyword">import</span> cifar10_model</span><br><span class="line"><span class="keyword">import</span> cifar10_utils</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> six</span><br><span class="line"><span class="keyword">from</span> six.moves <span class="keyword">import</span> xrange  <span class="comment"># pylint: disable=redefined-builtin</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置运行过程中所有函数能打印INFO级别的信息</span></span><br><span class="line">tf.logging.set_verbosity(tf.logging.INFO)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义Estimator需要一个model_fn，返回值为一个tf.estimator.EstimatorSpec，</span></span><br><span class="line"><span class="comment"># 这里使用了私有方法_resnet_model_fn，是一种很常见的方式，因为TensorFlow中很多地方的参数是方法名，</span></span><br><span class="line"><span class="comment"># 通过私有方法可以简单的实现，或者用lambda形式也可以</span></span><br><span class="line"><span class="comment"># 三个参数num_gpus使用的GPU数量，variable_strategy使用CPU还是GPU，num_workers多进程处理数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_model_fn</span><span class="params">(num_gpus, variable_strategy, num_workers)</span>:</span></span><br><span class="line">  <span class="string">"""Returns a function that will build the resnet model."""</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">_resnet_model_fn</span><span class="params">(features, labels, mode, params)</span>:</span></span><br><span class="line">    <span class="string">"""Resnet model body.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Support single host, one or more GPU training. Parameter distribution can</span></span><br><span class="line"><span class="string">    be either one of the following scheme.</span></span><br><span class="line"><span class="string">    1. CPU is the parameter server and manages gradient updates.</span></span><br><span class="line"><span class="string">    2. Parameters are distributed evenly across all GPUs, and the first GPU</span></span><br><span class="line"><span class="string">       manages gradient updates.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">      features: a list of tensors, one for each tower</span></span><br><span class="line"><span class="string">      labels: a list of tensors, one for each tower</span></span><br><span class="line"><span class="string">      mode: ModeKeys.TRAIN or EVAL</span></span><br><span class="line"><span class="string">      params: Hyperparameters suitable for tuning</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">      A EstimatorSpec object.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    is_training = (mode == tf.estimator.ModeKeys.TRAIN)</span><br><span class="line">    weight_decay = params.weight_decay <span class="comment"># 权重衰减</span></span><br><span class="line">    momentum = params.momentum <span class="comment"># 动量影响梯度下降速度，参考 深度学习-优化器</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># tower表示处于不同device的数据，比如使用tower_losses记录分别在不同的device上产生的损失</span></span><br><span class="line">    <span class="comment"># 包括CPU和GPUs</span></span><br><span class="line">    tower_features = features</span><br><span class="line">    tower_labels = labels</span><br><span class="line">    tower_losses = [] <span class="comment"># 损失</span></span><br><span class="line">    tower_gradvars = [] <span class="comment"># 梯度</span></span><br><span class="line">    tower_preds = [] <span class="comment"># 预测值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># NHWC是TensorFlow的默认设置，并且NCHW是使用cuDNN在NVIDIA GPU上训练时使用的最佳格式。</span></span><br><span class="line">    <span class="comment"># 最佳实践是构建可同时处理两种数据格式的模型。这简化了对GPU的训练，然后在CPU上运行推理。</span></span><br><span class="line">    <span class="comment"># 如果使用英特尔MKL优化编译TensorFlow，则会优化和支持许多操作，尤其是与基于CNN的模型相关的操作NCHW。</span></span><br><span class="line">    <span class="comment"># 如果不使用MKL，则在使用时某些操作在CPU上不受支持NCHW。</span></span><br><span class="line">    <span class="comment"># 这两种格式的简要历史是TensorFlow开始使用，NHWC因为它在CPU上速度稍快。</span></span><br><span class="line">    data_format = params.data_format</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data_format:</span><br><span class="line">      <span class="keyword">if</span> num_gpus == <span class="number">0</span>:</span><br><span class="line">        data_format = <span class="string">'channels_last'</span></span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">        data_format = <span class="string">'channels_first'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> num_gpus == <span class="number">0</span>:</span><br><span class="line">      num_devices = <span class="number">1</span></span><br><span class="line">      device_type = <span class="string">'cpu'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      num_devices = num_gpus</span><br><span class="line">      device_type = <span class="string">'gpu'</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># device的名称一般为'/cpu:0'或者'/gpu:1'</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num_devices):</span><br><span class="line">      worker_device = <span class="string">'/&#123;&#125;:&#123;&#125;'</span>.format(device_type, i)</span><br><span class="line">      <span class="keyword">if</span> variable_strategy == <span class="string">'CPU'</span>:</span><br><span class="line">        <span class="comment"># 注意这里需要使用tf.train.replica_device_setter替换</span></span><br><span class="line">        device_setter = cifar10_utils.local_device_setter(</span><br><span class="line">            worker_device=worker_device)</span><br><span class="line">      <span class="comment"># GreedyLoadBalancingStrategy懒加载策略，tf.contrib.training下只有两个策略</span></span><br><span class="line">      <span class="comment"># 另一个是RandomStrategy</span></span><br><span class="line">      <span class="keyword">elif</span> variable_strategy == <span class="string">'GPU'</span>:</span><br><span class="line">        device_setter = cifar10_utils.local_device_setter(</span><br><span class="line">            ps_device_type=<span class="string">'gpu'</span>,</span><br><span class="line">            worker_device=worker_device,</span><br><span class="line">            ps_strategy=tf.contrib.training.GreedyLoadBalancingStrategy(</span><br><span class="line">                num_gpus, tf.contrib.training.byte_size_load_fn))</span><br><span class="line">      <span class="keyword">with</span> tf.variable_scope(<span class="string">'resnet'</span>, reuse=bool(i != <span class="number">0</span>)):</span><br><span class="line">        <span class="keyword">with</span> tf.name_scope(<span class="string">'tower_%d'</span> % i) <span class="keyword">as</span> name_scope:</span><br><span class="line">          <span class="keyword">with</span> tf.device(device_setter):</span><br><span class="line">            <span class="comment"># 这里数据被预先分组了，比如均分给所有GPU，每个device只处理tower_features[i]和tower_labels[i]</span></span><br><span class="line">            <span class="comment"># 调用_tower_fn进行计算</span></span><br><span class="line">            loss, gradvars, preds = _tower_fn(</span><br><span class="line">                is_training, weight_decay, tower_features[i], tower_labels[i],</span><br><span class="line">                data_format, params.num_layers, params.batch_norm_decay,</span><br><span class="line">                params.batch_norm_epsilon)</span><br><span class="line">            <span class="comment"># 使用append把所有device的结果存入List中</span></span><br><span class="line">            tower_losses.append(loss)</span><br><span class="line">            tower_gradvars.append(gradvars)</span><br><span class="line">            tower_preds.append(preds)</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">              <span class="comment"># Only trigger batch_norm moving mean and variance update from</span></span><br><span class="line">              <span class="comment"># the 1st tower. Ideally, we should grab the updates from all</span></span><br><span class="line">              <span class="comment"># towers but these stats accumulate extremely fast so we can</span></span><br><span class="line">              <span class="comment"># ignore the other stats from the other towers without</span></span><br><span class="line">              <span class="comment"># significant detriment.</span></span><br><span class="line">              <span class="comment"># batch_norm更新需要执行UPDATE_OPS操作，不会自动进行</span></span><br><span class="line">              update_ops = tf.get_collection(tf.GraphKeys.UPDATE_OPS,</span><br><span class="line">                                             name_scope)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Now compute global loss and gradients.</span></span><br><span class="line">    gradvars = []</span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(<span class="string">'gradient_averaging'</span>):</span><br><span class="line">      all_grads = &#123;&#125;</span><br><span class="line">      <span class="keyword">for</span> grad, var <span class="keyword">in</span> itertools.chain(*tower_gradvars):</span><br><span class="line">        <span class="keyword">if</span> grad <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">          all_grads.setdefault(var, []).append(grad)</span><br><span class="line">      <span class="keyword">for</span> var, grads <span class="keyword">in</span> six.iteritems(all_grads):</span><br><span class="line">        <span class="comment"># Average gradients on the same device as the variables</span></span><br><span class="line">        <span class="comment"># to which they apply.</span></span><br><span class="line">        <span class="keyword">with</span> tf.device(var.device):</span><br><span class="line">          <span class="keyword">if</span> len(grads) == <span class="number">1</span>:</span><br><span class="line">            avg_grad = grads[<span class="number">0</span>]</span><br><span class="line">          <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 计算平均梯度，根据设备数来计算</span></span><br><span class="line">            avg_grad = tf.multiply(tf.add_n(grads), <span class="number">1.</span> / len(grads))</span><br><span class="line">        gradvars.append((avg_grad, var))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Device that runs the ops to apply global gradient updates.</span></span><br><span class="line">    consolidation_device = <span class="string">'/gpu:0'</span> <span class="keyword">if</span> variable_strategy == <span class="string">'GPU'</span> <span class="keyword">else</span> <span class="string">'/cpu:0'</span></span><br><span class="line">    <span class="keyword">with</span> tf.device(consolidation_device):</span><br><span class="line">      <span class="comment"># 计算梯度完成后还需要执行梯度下降的运算，默认是cpu或者gpu1号</span></span><br><span class="line">      <span class="comment"># Suggested learning rate scheduling from</span></span><br><span class="line">      <span class="comment"># https://github.com/ppwwyyxx/tensorpack/blob/master/examples/ResNet/cifar10-resnet.py#L155</span></span><br><span class="line">      <span class="comment"># 使用多进程读取数据</span></span><br><span class="line">      num_batches_per_epoch = cifar10.Cifar10DataSet.num_examples_per_epoch(</span><br><span class="line">          <span class="string">'train'</span>) // (params.train_batch_size * num_workers)</span><br><span class="line">      boundaries = [</span><br><span class="line">          num_batches_per_epoch * x</span><br><span class="line">          <span class="keyword">for</span> x <span class="keyword">in</span> np.array([<span class="number">82</span>, <span class="number">123</span>, <span class="number">300</span>], dtype=np.int64)</span><br><span class="line">      ]</span><br><span class="line">      <span class="comment"># 学习率阶段性下降</span></span><br><span class="line">      staged_lr = [params.learning_rate * x <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">0.1</span>, <span class="number">0.01</span>, <span class="number">0.002</span>]]</span><br><span class="line">      <span class="comment"># 在82steps后学习率减少到0.1倍，123后0.01倍，300后0.002倍</span></span><br><span class="line">      learning_rate = tf.train.piecewise_constant(tf.train.get_global_step(),</span><br><span class="line">                                                  boundaries, staged_lr)</span><br><span class="line">      <span class="comment"># 均值损失</span></span><br><span class="line">      loss = tf.reduce_mean(tower_losses, name=<span class="string">'loss'</span>)</span><br><span class="line">      <span class="comment"># ExamplesPerSecondHook打印训练速度</span></span><br><span class="line">      examples_sec_hook = cifar10_utils.ExamplesPerSecondHook(</span><br><span class="line">          params.train_batch_size, every_n_steps=<span class="number">10</span>)</span><br><span class="line">      <span class="comment"># 使用LoggingTensorHook打印learning_rate和loss</span></span><br><span class="line">      tensors_to_log = &#123;<span class="string">'learning_rate'</span>: learning_rate, <span class="string">'loss'</span>: loss&#125;</span><br><span class="line"></span><br><span class="line">      logging_hook = tf.train.LoggingTensorHook(</span><br><span class="line">          tensors=tensors_to_log, every_n_iter=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">      train_hooks = [logging_hook, examples_sec_hook]</span><br><span class="line">      <span class="comment"># 优化器使用MomentumOptimizer</span></span><br><span class="line">      optimizer = tf.train.MomentumOptimizer(</span><br><span class="line">          learning_rate=learning_rate, momentum=momentum)</span><br><span class="line">      <span class="comment"># 分布式优化器，暂时不了解</span></span><br><span class="line">      <span class="keyword">if</span> params.sync:</span><br><span class="line">        optimizer = tf.train.SyncReplicasOptimizer(</span><br><span class="line">            optimizer, replicas_to_aggregate=num_workers)</span><br><span class="line">        sync_replicas_hook = optimizer.make_session_run_hook(params.is_chief)</span><br><span class="line">        train_hooks.append(sync_replicas_hook)</span><br><span class="line"></span><br><span class="line">      <span class="comment"># Create single grouped train op</span></span><br><span class="line">      train_op = [</span><br><span class="line">          optimizer.apply_gradients(</span><br><span class="line">              gradvars, global_step=tf.train.get_global_step())</span><br><span class="line">      ]</span><br><span class="line">      train_op.extend(update_ops)</span><br><span class="line">      train_op = tf.group(*train_op)</span><br><span class="line">      <span class="comment"># concat横向连接</span></span><br><span class="line">      predictions = &#123;</span><br><span class="line">          <span class="string">'classes'</span>:</span><br><span class="line">              tf.concat([p[<span class="string">'classes'</span>] <span class="keyword">for</span> p <span class="keyword">in</span> tower_preds], axis=<span class="number">0</span>),</span><br><span class="line">          <span class="string">'probabilities'</span>:</span><br><span class="line">              tf.concat([p[<span class="string">'probabilities'</span>] <span class="keyword">for</span> p <span class="keyword">in</span> tower_preds], axis=<span class="number">0</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      stacked_labels = tf.concat(labels, axis=<span class="number">0</span>)</span><br><span class="line">      metrics = &#123;</span><br><span class="line">          <span class="string">'accuracy'</span>:</span><br><span class="line">              tf.metrics.accuracy(stacked_labels, predictions[<span class="string">'classes'</span>])</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="comment"># 返回EstimatorSpec</span></span><br><span class="line">    <span class="keyword">return</span> tf.estimator.EstimatorSpec(</span><br><span class="line">        mode=mode,</span><br><span class="line">        predictions=predictions,</span><br><span class="line">        loss=loss,</span><br><span class="line">        train_op=train_op,</span><br><span class="line">        training_hooks=train_hooks,</span><br><span class="line">        eval_metric_ops=metrics)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> _resnet_model_fn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算loss, gradvars, preds的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_tower_fn</span><span class="params">(is_training, weight_decay, feature, label, data_format,</span></span></span><br><span class="line"><span class="function"><span class="params">              num_layers, batch_norm_decay, batch_norm_epsilon)</span>:</span></span><br><span class="line">  <span class="string">"""Build computation tower (Resnet).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  Args:</span></span><br><span class="line"><span class="string">    is_training: true if is training graph.</span></span><br><span class="line"><span class="string">    weight_decay: weight regularization strength, a float.</span></span><br><span class="line"><span class="string">    feature: a Tensor.</span></span><br><span class="line"><span class="string">    label: a Tensor.</span></span><br><span class="line"><span class="string">    data_format: channels_last (NHWC) or channels_first (NCHW).</span></span><br><span class="line"><span class="string">    num_layers: number of layers, an int.</span></span><br><span class="line"><span class="string">    batch_norm_decay: decay for batch normalization, a float.</span></span><br><span class="line"><span class="string">    batch_norm_epsilon: epsilon for batch normalization, a float.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  Returns:</span></span><br><span class="line"><span class="string">    A tuple with the loss for the tower, the gradients and parameters, and</span></span><br><span class="line"><span class="string">    predictions.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line">  <span class="comment"># 构建模型</span></span><br><span class="line">  model = cifar10_model.ResNetCifar10(</span><br><span class="line">      num_layers,</span><br><span class="line">      batch_norm_decay=batch_norm_decay,</span><br><span class="line">      batch_norm_epsilon=batch_norm_epsilon,</span><br><span class="line">      is_training=is_training,</span><br><span class="line">      data_format=data_format)</span><br><span class="line">  <span class="comment"># 前向传播计算结果logits</span></span><br><span class="line">  logits = model.forward_pass(feature, input_data_format=<span class="string">'channels_last'</span>)</span><br><span class="line">  tower_pred = &#123;</span><br><span class="line">      <span class="string">'classes'</span>: tf.argmax(input=logits, axis=<span class="number">1</span>),</span><br><span class="line">      <span class="string">'probabilities'</span>: tf.nn.softmax(logits)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tower_loss = tf.losses.sparse_softmax_cross_entropy(</span><br><span class="line">      logits=logits, labels=label)</span><br><span class="line">  tower_loss = tf.reduce_mean(tower_loss)</span><br><span class="line"></span><br><span class="line">  model_params = tf.trainable_variables()</span><br><span class="line">  <span class="comment"># 对loss增加l2范数约束，衰减权重为weight_decay</span></span><br><span class="line">  tower_loss += weight_decay * tf.add_n(</span><br><span class="line">      [tf.nn.l2_loss(v) <span class="keyword">for</span> v <span class="keyword">in</span> model_params])</span><br><span class="line"></span><br><span class="line">  tower_grad = tf.gradients(tower_loss, model_params)</span><br><span class="line">  <span class="comment"># 返回值包括model_params模型参数</span></span><br><span class="line">  <span class="keyword">return</span> tower_loss, zip(tower_grad, model_params), tower_pred</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义输入函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">input_fn</span><span class="params">(data_dir,</span></span></span><br><span class="line"><span class="function"><span class="params">             subset,</span></span></span><br><span class="line"><span class="function"><span class="params">             num_shards,</span></span></span><br><span class="line"><span class="function"><span class="params">             batch_size,</span></span></span><br><span class="line"><span class="function"><span class="params">             use_distortion_for_training=True)</span>:</span></span><br><span class="line">  <span class="string">"""Create input graph for model.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  Args:</span></span><br><span class="line"><span class="string">    data_dir: Directory where TFRecords representing the dataset are located.</span></span><br><span class="line"><span class="string">    subset: one of 'train', 'validate' and 'eval'.</span></span><br><span class="line"><span class="string">    num_shards: num of towers participating in data-parallel training.</span></span><br><span class="line"><span class="string">    batch_size: total batch size for training to be divided by the number of</span></span><br><span class="line"><span class="string">    shards.</span></span><br><span class="line"><span class="string">    use_distortion_for_training: True to use distortions.</span></span><br><span class="line"><span class="string">  Returns:</span></span><br><span class="line"><span class="string">    two lists of tensors for features and labels, each of num_shards length.</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line">  <span class="keyword">with</span> tf.device(<span class="string">'/cpu:0'</span>):</span><br><span class="line">    use_distortion = subset == <span class="string">'train'</span> <span class="keyword">and</span> use_distortion_for_training</span><br><span class="line">    dataset = cifar10.Cifar10DataSet(data_dir, subset, use_distortion)</span><br><span class="line">    image_batch, label_batch = dataset.make_batch(batch_size)</span><br><span class="line">    <span class="keyword">if</span> num_shards &lt;= <span class="number">1</span>:</span><br><span class="line">      <span class="comment"># No GPU available or only 1 GPU.</span></span><br><span class="line">      <span class="keyword">return</span> [image_batch], [label_batch]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Note that passing num=batch_size is safe here, even though</span></span><br><span class="line">    <span class="comment"># dataset.batch(batch_size) can, in some cases, return fewer than batch_size</span></span><br><span class="line">    <span class="comment"># examples. This is because it does so only when repeating for a limited</span></span><br><span class="line">    <span class="comment"># number of epochs, but our dataset repeats forever.</span></span><br><span class="line">    <span class="comment"># 把image_batch分解为batch_size个张量，axis为0，刚好是batch_size的维度[i, x, x, x]，</span></span><br><span class="line">    <span class="comment"># 然后将这batch_size个张量根据循环报数规则分配给num_shards个进程</span></span><br><span class="line">    image_batch = tf.unstack(image_batch, num=batch_size, axis=<span class="number">0</span>)</span><br><span class="line">    label_batch = tf.unstack(label_batch, num=batch_size, axis=<span class="number">0</span>)</span><br><span class="line">    feature_shards = [[] <span class="keyword">for</span> i <span class="keyword">in</span> range(num_shards)]</span><br><span class="line">    label_shards = [[] <span class="keyword">for</span> i <span class="keyword">in</span> range(num_shards)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(batch_size):</span><br><span class="line">      idx = i % num_shards</span><br><span class="line">      feature_shards[idx].append(image_batch[i])</span><br><span class="line">      label_shards[idx].append(label_batch[i])</span><br><span class="line">    feature_shards = [tf.parallel_stack(x) <span class="keyword">for</span> x <span class="keyword">in</span> feature_shards]</span><br><span class="line">    label_shards = [tf.parallel_stack(x) <span class="keyword">for</span> x <span class="keyword">in</span> label_shards]</span><br><span class="line">    <span class="keyword">return</span> feature_shards, label_shards</span><br><span class="line"></span><br><span class="line"><span class="comment"># tf.contrib.learn.Experiment全部丢弃，需要用根据tf.estimator重新构建Estimator，</span></span><br><span class="line"><span class="comment"># 使用train_spec和eval_spec，调用tf.estimator.train_and_evaluate</span></span><br><span class="line"><span class="comment"># 同样这里使用了私有方法</span></span><br><span class="line"><span class="comment"># 重写</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_experiment_fn</span><span class="params">(data_dir,</span></span></span><br><span class="line"><span class="function"><span class="params">                      num_gpus,</span></span></span><br><span class="line"><span class="function"><span class="params">                      variable_strategy,</span></span></span><br><span class="line"><span class="function"><span class="params">                      use_distortion_for_training=True)</span>:</span></span><br><span class="line">  <span class="string">"""Returns an Experiment function.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  Experiments perform training on several workers in parallel,</span></span><br><span class="line"><span class="string">  in other words experiments know how to invoke train and eval in a sensible</span></span><br><span class="line"><span class="string">  fashion for distributed training. Arguments passed directly to this</span></span><br><span class="line"><span class="string">  function are not tunable, all other arguments should be passed within</span></span><br><span class="line"><span class="string">  tf.HParams, passed to the enclosed function.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  Args:</span></span><br><span class="line"><span class="string">      data_dir: str. Location of the data for input_fns.</span></span><br><span class="line"><span class="string">      num_gpus: int. Number of GPUs on each worker.</span></span><br><span class="line"><span class="string">      variable_strategy: String. CPU to use CPU as the parameter server</span></span><br><span class="line"><span class="string">      and GPU to use the GPUs as the parameter server.</span></span><br><span class="line"><span class="string">      use_distortion_for_training: bool. See cifar10.Cifar10DataSet.</span></span><br><span class="line"><span class="string">  Returns:</span></span><br><span class="line"><span class="string">      A function (tf.estimator.RunConfig, tf.contrib.training.HParams) -&gt;</span></span><br><span class="line"><span class="string">      tf.contrib.learn.Experiment.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      Suitable for use by tf.contrib.learn.learn_runner, which will run various</span></span><br><span class="line"><span class="string">      methods on Experiment (train, evaluate) based on information</span></span><br><span class="line"><span class="string">      about the current runner in `run_config`.</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">_experiment_fn</span><span class="params">(run_config, hparams)</span>:</span></span><br><span class="line">    <span class="string">"""Returns an Experiment."""</span></span><br><span class="line">    <span class="comment"># Create estimator.</span></span><br><span class="line">    train_input_fn = functools.partial(</span><br><span class="line">        input_fn,</span><br><span class="line">        data_dir,</span><br><span class="line">        subset=<span class="string">'train'</span>,</span><br><span class="line">        num_shards=num_gpus,</span><br><span class="line">        batch_size=hparams.train_batch_size,</span><br><span class="line">        use_distortion_for_training=use_distortion_for_training)</span><br><span class="line"></span><br><span class="line">    eval_input_fn = functools.partial(</span><br><span class="line">        input_fn,</span><br><span class="line">        data_dir,</span><br><span class="line">        subset=<span class="string">'eval'</span>,</span><br><span class="line">        batch_size=hparams.eval_batch_size,</span><br><span class="line">        num_shards=num_gpus)</span><br><span class="line"></span><br><span class="line">    num_eval_examples = cifar10.Cifar10DataSet.num_examples_per_epoch(<span class="string">'eval'</span>)</span><br><span class="line">    <span class="keyword">if</span> num_eval_examples % hparams.eval_batch_size != <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">raise</span> ValueError(</span><br><span class="line">          <span class="string">'validation set size must be multiple of eval_batch_size'</span>)</span><br><span class="line"></span><br><span class="line">    train_steps = hparams.train_steps</span><br><span class="line">    eval_steps = num_eval_examples // hparams.eval_batch_size</span><br><span class="line"> </span><br><span class="line">    classifier = tf.estimator.Estimator(</span><br><span class="line">        model_fn=get_model_fn(num_gpus, variable_strategy,</span><br><span class="line">                              run_config.num_worker_replicas <span class="keyword">or</span> <span class="number">1</span>),</span><br><span class="line">        config=run_config,</span><br><span class="line">        params=hparams)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Create experiment.</span></span><br><span class="line">    <span class="keyword">return</span> tf.contrib.learn.Experiment(</span><br><span class="line">        classifier,</span><br><span class="line">        train_input_fn=train_input_fn,</span><br><span class="line">        eval_input_fn=eval_input_fn,</span><br><span class="line">        train_steps=train_steps,</span><br><span class="line">        eval_steps=eval_steps)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> _experiment_fn</span><br><span class="line"></span><br><span class="line"><span class="comment"># tf.contrib.learn.learn_runner.run要丢弃了，这里重写</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(job_dir, data_dir, num_gpus, variable_strategy,</span></span></span><br><span class="line"><span class="function"><span class="params">         use_distortion_for_training, log_device_placement, num_intra_threads,</span></span></span><br><span class="line"><span class="function"><span class="params">         **hparams)</span>:</span></span><br><span class="line">  <span class="comment"># The env variable is on deprecation path, default is set to off.</span></span><br><span class="line">  os.environ[<span class="string">'TF_SYNC_ON_FINISH'</span>] = <span class="string">'0'</span></span><br><span class="line">  os.environ[<span class="string">'TF_ENABLE_WINOGRAD_NONFUSED'</span>] = <span class="string">'1'</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Session configuration.</span></span><br><span class="line">  sess_config = tf.ConfigProto(</span><br><span class="line">      allow_soft_placement=<span class="literal">True</span>,</span><br><span class="line">      log_device_placement=log_device_placement,</span><br><span class="line">      intra_op_parallelism_threads=num_intra_threads,</span><br><span class="line">      gpu_options=tf.GPUOptions(force_gpu_compatible=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">  config = cifar10_utils.RunConfig(</span><br><span class="line">      session_config=sess_config, model_dir=job_dir)</span><br><span class="line">  tf.contrib.learn.learn_runner.run(</span><br><span class="line">      get_experiment_fn(data_dir, num_gpus, variable_strategy,</span><br><span class="line">                        use_distortion_for_training),</span><br><span class="line">      run_config=config,</span><br><span class="line">      hparams=tf.contrib.training.HParams(</span><br><span class="line">          is_chief=config.is_chief,</span><br><span class="line">          **hparams))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面全是配置运行时参数</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  parser = argparse.ArgumentParser()</span><br><span class="line">  parser.add_argument(</span><br><span class="line">      <span class="string">'--data-dir'</span>,</span><br><span class="line">      type=str,</span><br><span class="line">      required=<span class="literal">True</span>,</span><br><span class="line">      help=<span class="string">'The directory where the CIFAR-10 input data is stored.'</span>)</span><br><span class="line">  parser.add_argument(</span><br><span class="line">      <span class="string">'--job-dir'</span>,</span><br><span class="line">      type=str,</span><br><span class="line">      required=<span class="literal">True</span>,</span><br><span class="line">      help=<span class="string">'The directory where the model will be stored.'</span>)</span><br><span class="line">  parser.add_argument(</span><br><span class="line">      <span class="string">'--variable-strategy'</span>,</span><br><span class="line">      choices=[<span class="string">'CPU'</span>, <span class="string">'GPU'</span>],</span><br><span class="line">      type=str,</span><br><span class="line">      default=<span class="string">'CPU'</span>,</span><br><span class="line">      help=<span class="string">'Where to locate variable operations'</span>)</span><br><span class="line">  parser.add_argument(</span><br><span class="line">      <span class="string">'--num-gpus'</span>,</span><br><span class="line">      type=int,</span><br><span class="line">      default=<span class="number">1</span>,</span><br><span class="line">      help=<span class="string">'The number of gpus used. Uses only CPU if set to 0.'</span>)</span><br><span class="line">  parser.add_argument(</span><br><span class="line">      <span class="string">'--num-layers'</span>,</span><br><span class="line">      type=int,</span><br><span class="line">      default=<span class="number">44</span>,</span><br><span class="line">      help=<span class="string">'The number of layers of the model.'</span>)</span><br><span class="line">  parser.add_argument(</span><br><span class="line">      <span class="string">'--train-steps'</span>,</span><br><span class="line">      type=int,</span><br><span class="line">      default=<span class="number">80000</span>,</span><br><span class="line">      help=<span class="string">'The number of steps to use for training.'</span>)</span><br><span class="line">  parser.add_argument(</span><br><span class="line">      <span class="string">'--train-batch-size'</span>,</span><br><span class="line">      type=int,</span><br><span class="line">      default=<span class="number">128</span>,</span><br><span class="line">      help=<span class="string">'Batch size for training.'</span>)</span><br><span class="line">  parser.add_argument(</span><br><span class="line">      <span class="string">'--eval-batch-size'</span>,</span><br><span class="line">      type=int,</span><br><span class="line">      default=<span class="number">100</span>,</span><br><span class="line">      help=<span class="string">'Batch size for validation.'</span>)</span><br><span class="line">  parser.add_argument(</span><br><span class="line">      <span class="string">'--momentum'</span>,</span><br><span class="line">      type=float,</span><br><span class="line">      default=<span class="number">0.9</span>,</span><br><span class="line">      help=<span class="string">'Momentum for MomentumOptimizer.'</span>)</span><br><span class="line">  parser.add_argument(</span><br><span class="line">      <span class="string">'--weight-decay'</span>,</span><br><span class="line">      type=float,</span><br><span class="line">      default=<span class="number">2e-4</span>,</span><br><span class="line">      help=<span class="string">'Weight decay for convolutions.'</span>)</span><br><span class="line">  parser.add_argument(</span><br><span class="line">      <span class="string">'--learning-rate'</span>,</span><br><span class="line">      type=float,</span><br><span class="line">      default=<span class="number">0.1</span>,</span><br><span class="line">      help=<span class="string">"""\</span></span><br><span class="line"><span class="string">      This is the inital learning rate value. The learning rate will decrease</span></span><br><span class="line"><span class="string">      during training. For more details check the model_fn implementation in</span></span><br><span class="line"><span class="string">      this file.\</span></span><br><span class="line"><span class="string">      """</span>)</span><br><span class="line">  parser.add_argument(</span><br><span class="line">      <span class="string">'--use-distortion-for-training'</span>,</span><br><span class="line">      type=bool,</span><br><span class="line">      default=<span class="literal">True</span>,</span><br><span class="line">      help=<span class="string">'If doing image distortion for training.'</span>)</span><br><span class="line">  parser.add_argument(</span><br><span class="line">      <span class="string">'--sync'</span>,</span><br><span class="line">      action=<span class="string">'store_true'</span>,</span><br><span class="line">      default=<span class="literal">False</span>,</span><br><span class="line">      help=<span class="string">"""\</span></span><br><span class="line"><span class="string">      If present when running in a distributed environment will run on sync mode.\</span></span><br><span class="line"><span class="string">      """</span>)</span><br><span class="line">  parser.add_argument(</span><br><span class="line">      <span class="string">'--num-intra-threads'</span>,</span><br><span class="line">      type=int,</span><br><span class="line">      default=<span class="number">0</span>,</span><br><span class="line">      help=<span class="string">"""\</span></span><br><span class="line"><span class="string">      Number of threads to use for intra-op parallelism. When training on CPU</span></span><br><span class="line"><span class="string">      set to 0 to have the system pick the appropriate number or alternatively</span></span><br><span class="line"><span class="string">      set it to the number of physical CPU cores.\</span></span><br><span class="line"><span class="string">      """</span>)</span><br><span class="line">  parser.add_argument(</span><br><span class="line">      <span class="string">'--num-inter-threads'</span>,</span><br><span class="line">      type=int,</span><br><span class="line">      default=<span class="number">0</span>,</span><br><span class="line">      help=<span class="string">"""\</span></span><br><span class="line"><span class="string">      Number of threads to use for inter-op parallelism. If set to 0, the</span></span><br><span class="line"><span class="string">      system will pick an appropriate number.\</span></span><br><span class="line"><span class="string">      """</span>)</span><br><span class="line">  parser.add_argument(</span><br><span class="line">      <span class="string">'--data-format'</span>,</span><br><span class="line">      type=str,</span><br><span class="line">      default=<span class="literal">None</span>,</span><br><span class="line">      help=<span class="string">"""\</span></span><br><span class="line"><span class="string">      If not set, the data format best for the training device is used. </span></span><br><span class="line"><span class="string">      Allowed values: channels_first (NCHW) channels_last (NHWC).\</span></span><br><span class="line"><span class="string">      """</span>)</span><br><span class="line">  parser.add_argument(</span><br><span class="line">      <span class="string">'--log-device-placement'</span>,</span><br><span class="line">      action=<span class="string">'store_true'</span>,</span><br><span class="line">      default=<span class="literal">False</span>,</span><br><span class="line">      help=<span class="string">'Whether to log device placement.'</span>)</span><br><span class="line">  parser.add_argument(</span><br><span class="line">      <span class="string">'--batch-norm-decay'</span>,</span><br><span class="line">      type=float,</span><br><span class="line">      default=<span class="number">0.997</span>,</span><br><span class="line">      help=<span class="string">'Decay for batch norm.'</span>)</span><br><span class="line">  parser.add_argument(</span><br><span class="line">      <span class="string">'--batch-norm-epsilon'</span>,</span><br><span class="line">      type=float,</span><br><span class="line">      default=<span class="number">1e-5</span>,</span><br><span class="line">      help=<span class="string">'Epsilon for batch norm.'</span>)</span><br><span class="line">  args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> args.num_gpus &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">assert</span> tf.test.is_gpu_available(), <span class="string">"Requested GPUs but none found."</span></span><br><span class="line">  <span class="keyword">if</span> args.num_gpus &lt; <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">raise</span> ValueError(</span><br><span class="line">        <span class="string">'Invalid GPU count: \"--num-gpus\" must be 0 or a positive integer.'</span>)</span><br><span class="line">  <span class="keyword">if</span> args.num_gpus == <span class="number">0</span> <span class="keyword">and</span> args.variable_strategy == <span class="string">'GPU'</span>:</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'num-gpus=0, CPU must be used as parameter server. Set'</span></span><br><span class="line">                     <span class="string">'--variable-strategy=CPU.'</span>)</span><br><span class="line">  <span class="keyword">if</span> (args.num_layers - <span class="number">2</span>) % <span class="number">6</span> != <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'Invalid --num-layers parameter.'</span>)</span><br><span class="line">  <span class="keyword">if</span> args.num_gpus != <span class="number">0</span> <span class="keyword">and</span> args.train_batch_size % args.num_gpus != <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'--train-batch-size must be multiple of --num-gpus.'</span>)</span><br><span class="line">  <span class="keyword">if</span> args.num_gpus != <span class="number">0</span> <span class="keyword">and</span> args.eval_batch_size % args.num_gpus != <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'--eval-batch-size must be multiple of --num-gpus.'</span>)</span><br><span class="line"></span><br><span class="line">  main(**vars(args))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>Estimator</tag>
        <tag>CNN</tag>
        <tag>CIFAR-10</tag>
      </tags>
  </entry>
  <entry>
    <title>语音识别-DNN-HMM混合系统</title>
    <url>/archives/cbc488cf.html</url>
    <content><![CDATA[<p>参考：</p>
<blockquote>
<p>《解析深度学习-语音识别实践》第6章 深度神经网络-隐马尔可夫模型混合系统</p>
</blockquote>
<p><strong>语音识别过程：切除首尾端静音-&gt;声音划分为帧-&gt;对每一帧提取MFCC特征-&gt;若干帧对应一个状态-&gt;三个状态组成一个音素-&gt;若干音素组成单词</strong></p>
<h2 id="1-DNN-HMM混合系统"><a href="#1-DNN-HMM混合系统" class="headerlink" title="1. DNN-HMM混合系统"></a>1. DNN-HMM混合系统</h2><p>在前面的<code>语音识别-GMM</code>和<code>语音识别-HMM</code>中我们已经知道了，对于音频数据，经过提取特征处理后，通过GMM得到状态，然后通过HMM描述语音信号的动态变化，以预测输出。得益于DNN强大的表现学习能力，使用DNN替代GMM用于估计观察特征的概率，这样的语音识别系统性能远优于传统的GMM-HMM系统。</p>
<a id="more"></a>
<h3 id="1-1-结构"><a href="#1-1-结构" class="headerlink" title="1.1 结构"></a>1.1 结构</h3><!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/0db2c447fb5d8b64e.png" alt="0db2c447fb5d8b64e.png"></p>
<p>HMM对语音信号的序列特性进行建模，DNN对所有聚类后的状态（聚类后的三音素状态）的<strong>似然度</strong>进行建模。</p>
<p>在给定声学观察特征的条件下，我们用DNN的每个输出节点来估计连续密度HMM的某个状态的后验概率（类似于DNN的softmax输出，包括所有状态的概率，取最大值对应的状态）。DNN-HMM有两个额外的好处：训练过程可以使用维特比算法，解码通常也非常高效。</p>
<p>对上下文相关因素的后验概率建模为</p>
<script type="math/tex; mode=display">
p(s_i,c_j|\boldsymbol{x}_t) = p(s_i|\boldsymbol{x}_t)p(c_j|s_i,\boldsymbol{x}_t)</script><p>或者</p>
<script type="math/tex; mode=display">
p(s_i,c_j|\boldsymbol{x}_t) = p(c_j|\boldsymbol{x}_t)p(s_i|c_j,\boldsymbol{x}_t)</script><p>其中$\boldsymbol{x}_t$是在$t$时刻的声学观察值，$c_j$是聚类后的上下文种类${ c_1, …, c_J }$中的一种，$s_i$是一个上下文无关的音素或音素中的状态。</p>
<p>为了提升性能：</p>
<ol>
<li>把传统的浅层神经网络替换成深层神经网络（可选择的预训练）；</li>
<li>使用聚类后的状态（绑定后的三音素状态）替代单音素状态作为神经网络的输出单元。</li>
</ol>
<p>这种改善后的模型称为CD-DNN-HMM，对于所有的状态$s \in [1, S]$，我们只训练一个完整的DNN来估计状态的后验概率$p(q<em>t = s|\boldsymbol{x}_t)$。这和传统的GMM是不同的，因为GMM框架下，我们会使用其多个不同的GMM对不同的状态建模。除此之外，典型的DNN输入不是单一的一帧，而是一个$2w+1$（如9 ~ 13）帧大小的窗口特征$\boldsymbol{x}_t = [\boldsymbol{o}</em>{\max (0, t-w)}…\boldsymbol{o}<em>t…\boldsymbol{o}</em>{\min (T, t+w)}]$，这使得相邻帧的信息可以被有效地利用。</p>
<h3 id="1-2-用CD-DNN-HMM解码"><a href="#1-2-用CD-DNN-HMM解码" class="headerlink" title="1.2 用CD-DNN-HMM解码"></a>1.2 用CD-DNN-HMM解码</h3><p>解码过程中HMM需要似然度$p(\boldsymbol{x}_t|q_t)$，而不是后验概率：</p>
<script type="math/tex; mode=display">
p(\boldsymbol{x}_t|q_t = s) = \frac{p(q_t = s|\boldsymbol{x}_t)p(\boldsymbol{x}_t)}{p(s)}</script><p>其中$p(s) = \frac{T_s}{T}$是从训练集中统计地每个状态（聚类后地状态）的先验概率，$T_s$是标记属于状态$s$的帧数，$T$是总帧数。$p(\boldsymbol{x}_t)$是与字词序无关的，计算时可以忽略，得到近似缩放过的似然度$\bar{p}(\boldsymbol{x}_t|q_t) = \frac{p(q_t=s|\boldsymbol{x}_t)}{p(s)}$。</p>
<p>在CD-DNN-HMM解码出的字词序列$\hat{w}$由以下公式确定</p>
<script type="math/tex; mode=display">
\hat{w} = \underset{w}{\arg \max} p(w|\boldsymbol{x}) = \underset{w}{\arg \max} \frac{p(\boldsymbol{x}|w)p(w)}{p(\boldsymbol{x})}
\\
= \underset{w}{\arg \max} p(\boldsymbol{x}|w)p(w)</script><p>其中$p(w)$是语言模型（LM）概率，以及</p>
<script type="math/tex; mode=display">
p(\boldsymbol{x}|w) = \sum_qp(\boldsymbol{x},q|w)p(q|w)
\\
\approx \pi(q_0) \prod^T_{t=1}a_{q_{t-1}q_t} \prod^T_{t=0}\frac{p(q_t|\boldsymbol{x}_t)}{p(q_t)}</script><p>是声学模型（AM）的概率，其中$p(q<em>t|\boldsymbol{x}_t)$由DNN计算得出，$p(q_t)$是状态先验概率，这个概率也是训练过程中训练出来的（就是把观测值（特征向量）网状态上对齐，跟某个状态对齐的观测值的个数占比就是这个状态的先验概率），$\pi(q_0)$和$a</em>{q_{t-1}q_t}$分别是状态初始概率和状态转移概率，各自由HMM决定。语音模型权重稀疏$\lambda$用于平衡声学和语言模型得分，最终解码路径由以下公式确定</p>
<script type="math/tex; mode=display">
\hat{w} = \underset{w}{\arg \max} [\log p(\boldsymbol{x}|w) + \lambda \log p(w)]</script><h3 id="1-3-CD-DNN-HMM训练过程"><a href="#1-3-CD-DNN-HMM训练过程" class="headerlink" title="1.3 CD-DNN-HMM训练过程"></a>1.3 CD-DNN-HMM训练过程</h3><p>CD-DNN-HMM包含三个组成部分，一个深度神经网络dnn，一个隐马尔可夫模型hmm以及一个状态先验概率分布prior。</p>
<ol>
<li>首先训练一个状态共享的三音素 GMM-HMM 系统,使用决策树来决定如何共享状态。设训练完成的系统为 gmm-hmm。</li>
<li>用步骤 1 得到的 gmm-hmm 初始化一个新隐马尔可夫模型(包括转移概率,观测概率,隐马尔可夫模型的状态),并生成一个 DNN-HMM 模型,设该模型为 dnn-hmm1。</li>
<li>预训练 dnn-hmm1 系统中的深度神经网络,得到的深度神经网络为ptdnn。</li>
<li>使用 gmm-hmm 系统对语音训练数据作排列(即求出训练数据对应哪个隐马尔可夫模型中的状态),得到的数据设为 align-raw。</li>
<li>使用步骤 4 得到的数据对 ptdnn的参数作微调(可以使用随机梯度下降算法)。设得到的深度神经网络为 dnn。</li>
<li>利用 dnn 与 dnn-hmm1 和最大似然算法重新估计隐马尔可夫中的参数(转移概率,观测概率),设新得到的系统为 dnn-hmm2。</li>
<li>如果步骤 6 的精度不再提高则退出算法,否则使用 dnn 和 dnn-hmm2产生新的语音训练数据的排列数据,然后回到步骤 5。</li>
<li>利用训练数据估计概率$p(q_t)$的值</li>
</ol>
<h3 id="1-4-上下文窗口的影响"><a href="#1-4-上下文窗口的影响" class="headerlink" title="1.4 上下文窗口的影响"></a>1.4 上下文窗口的影响</h3><p>使用一个窗（典型的是9到13）包含的全部帧特征作为CD-DNN-HMM的输入可以实现优异的性能。</p>
]]></content>
      <categories>
        <category>Speech Recognition</category>
      </categories>
      <tags>
        <tag>Theory</tag>
        <tag>DNN-HMM</tag>
      </tags>
  </entry>
  <entry>
    <title>循环神经网络-coding</title>
    <url>/archives/28da5216.html</url>
    <content><![CDATA[<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment"># ==============================================================================</span></span><br><span class="line"><span class="string">"""数据清洗</span></span><br><span class="line"><span class="string">版本：</span></span><br><span class="line"><span class="string">    Python：3.6.7</span></span><br><span class="line"><span class="string">参考：</span></span><br><span class="line"><span class="string">    https://www.gushiwen.org/</span></span><br><span class="line"><span class="string">将爬取到的古诗词数据进行清洗，包括content注释部分的清除，特殊符号的清除，换行符等清除，</span></span><br><span class="line"><span class="string">最终目标是将content转换为一行的仅包含中文、标点符号的内容。</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># read_csv不能直接读路径，需要赋给path再读，很奇怪</span></span><br><span class="line">path = <span class="string">r'E:\pythonprojects\craft\code\RNN\shici.csv'</span></span><br><span class="line">df = pd.read_csv(path)</span><br><span class="line">df.head(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># VSCode使用#%%可以将代码划分为cell，直接可以运行，等同于jupyter notebook</span></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"><span class="comment"># 需要将content中的一些特殊符号删掉或者转换为其他字符，比如换行符\n删掉，</span></span><br><span class="line"><span class="comment"># 各种括号转换为英文括号然后通过正则式删除，需要使用re进行转换</span></span><br><span class="line">symbol_dict = &#123;<span class="string">'\n'</span>: <span class="string">''</span>, <span class="string">' '</span>: <span class="string">''</span>, <span class="string">'\u3000'</span>: <span class="string">''</span>, <span class="string">'\ue112'</span>: <span class="string">''</span>, <span class="string">'\ue83d'</span>: <span class="string">''</span>,</span><br><span class="line">    <span class="string">'\ue85d'</span>: <span class="string">''</span>, <span class="string">'\ue85f'</span>: <span class="string">''</span>, <span class="string">'〖'</span>: <span class="string">''</span>, <span class="string">'𬞞'</span>: <span class="string">''</span>, <span class="string">'②'</span>: <span class="string">''</span>,</span><br><span class="line">    <span class="string">'■'</span>: <span class="string">''</span>, <span class="string">'□'</span>: <span class="string">''</span>, <span class="string">'◇'</span>: <span class="string">''</span>, <span class="string">'#'</span>: <span class="string">''</span>, <span class="string">'＊'</span>: <span class="string">''</span>, <span class="string">'＿'</span>: <span class="string">''</span>,</span><br><span class="line">    <span class="string">'&lt;'</span>: <span class="string">''</span>, <span class="string">'&gt;'</span>: <span class="string">''</span>, <span class="string">'¤'</span>: <span class="string">''</span>, <span class="string">'á'</span>: <span class="string">''</span>, <span class="string">'è'</span>: <span class="string">''</span>, <span class="string">'ì'</span>: <span class="string">''</span>,</span><br><span class="line">    <span class="string">'í'</span>: <span class="string">''</span>, <span class="string">'ù'</span>: <span class="string">''</span>, <span class="string">'—'</span>: <span class="string">''</span>, <span class="string">'﹑'</span>: <span class="string">','</span>, <span class="string">'!'</span>: <span class="string">'！'</span>, <span class="string">':'</span>: <span class="string">'：'</span>,</span><br><span class="line">    <span class="string">'．'</span>: <span class="string">'.'</span>, <span class="string">'?'</span>: <span class="string">'？'</span>, <span class="string">'‘'</span>: <span class="string">"'"</span>, <span class="string">','</span>: <span class="string">'，'</span>, <span class="string">'.'</span>: <span class="string">'。'</span>, </span><br><span class="line">    <span class="string">'’'</span>: <span class="string">"'"</span>, <span class="string">'“'</span>: <span class="string">'"'</span>, <span class="string">'”'</span>: <span class="string">'"'</span>, <span class="string">';'</span>: <span class="string">'；'</span>, <span class="string">'（'</span>: <span class="string">'('</span>, <span class="string">'）'</span>: <span class="string">')'</span>,</span><br><span class="line">    <span class="string">'【'</span>: <span class="string">'('</span>, <span class="string">'】'</span>: <span class="string">')'</span>, <span class="string">'〔'</span>: <span class="string">'('</span>, <span class="string">'〕'</span>: <span class="string">')'</span>, <span class="string">'·'</span>: <span class="string">''</span>&#125;</span><br><span class="line"><span class="comment"># 生成re的pattern，symbol_format是处理特殊字符替换的pattern</span></span><br><span class="line">rep = &#123;re.escape(k): v <span class="keyword">for</span> k, v <span class="keyword">in</span> symbol_dict.items()&#125;</span><br><span class="line">symbol_format = re.compile(<span class="string">'|'</span>.join(rep.keys()))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_data</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="string">"""利用正则式以及re处理数据，结合DataFrame.apply使用</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        data: 输入数据str</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        data: 处理完成后的数据str</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 第一步特殊字符转换</span></span><br><span class="line">    data = symbol_format.sub(<span class="keyword">lambda</span> x: rep[re.escape(x.group(<span class="number">0</span>))], data)</span><br><span class="line">    <span class="comment"># 第二步删除括号及括号中的所有内容</span></span><br><span class="line">    data = re.sub(<span class="string">u"\\&#123;.*?\\&#125;|\\[.*?\\]|\\(.*?\\)"</span>, <span class="string">""</span>, data)</span><br><span class="line">    <span class="comment"># 第三步删除大小写字母及数字</span></span><br><span class="line">    data = re.sub(<span class="string">r'[a-zA-Z0-9]+'</span>, <span class="string">''</span>, data)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"><span class="comment"># 依照上述过程清洗数据，使用apply</span></span><br><span class="line">df[<span class="string">'content'</span>] = df[<span class="string">'content'</span>].apply(process_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将清洗完成后的content转换为set和list，set用于确定字典，list用于确定特征向量</span></span><br><span class="line"><span class="comment"># 这里就直接保存在原始数据中了，便于对比</span></span><br><span class="line">set_format = <span class="keyword">lambda</span> x: set(x)</span><br><span class="line">list_format = <span class="keyword">lambda</span> x: list(x)</span><br><span class="line"></span><br><span class="line">df[<span class="string">'content_set'</span>] = df[<span class="string">'content'</span>].map(set_format)</span><br><span class="line">df[<span class="string">'content_list'</span>] = df[<span class="string">'content'</span>].map(list_format)</span><br><span class="line">df.head(<span class="number">5</span>)</span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line">df.to_csv(<span class="string">'data.csv'</span>, index=<span class="number">0</span>) <span class="comment"># index=0表示不保存索引</span></span><br></pre></td></tr></table></figure>
<p><img src="http://114.116.9.65:7777/images/2020/01/19/09b4f5b23d50bed18.png" alt="09b4f5b23d50bed18.png"></p>
<p><img src="http://114.116.9.65:7777/images/2020/01/19/13264cee7ad8e879c.png" alt="13264cee7ad8e879c.png"></p>
]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>RNN</tag>
        <tag>LSTM</tag>
      </tags>
  </entry>
  <entry>
    <title>决策树-coding</title>
    <url>/archives/120687ac.html</url>
    <content><![CDATA[<h2 id="1-数据集说明"><a href="#1-数据集说明" class="headerlink" title="1. 数据集说明"></a>1. 数据集说明</h2><h3 id="1-1-多分类数据集-酒类"><a href="#1-1-多分类数据集-酒类" class="headerlink" title="1.1 多分类数据集-酒类"></a>1.1 多分类数据集-酒类</h3><ul>
<li>数据来源：<code>sklearn.datasets.load_wine</code>；</li>
<li>数据集形状：总计178个样本，每个样本由13个属性表示，以及target表示酒类型0-2，三种类别不是均等的，class_0 (59), class_1 (71), class_2 (48)，所有属性值均为number，详情可调用<code>load_wine()[&#39;DESCR&#39;]</code>了解每个属性的具体含义；</li>
<li>数据集划分：随机选出20%数据作为测试集，不做验证集要求；</li>
<li>性能度量：accuracy或ROC。</li>
</ul>
<a id="more"></a>
<p><a href="http://sklearn.apachecn.org/#/docs/11" target="_blank" rel="noopener">1.10. 决策树</a></p>
<ul>
<li>对于拥有大量特征的数据决策树会出现过拟合的现象。获得一个合适的样本比例和特征数量十分重要，因为在高维空间中只有少量的样本的树是十分容易过拟合的。 </li>
<li>考虑事先进行降维(PCA，ICA，使您的树更好地找到具有分辨性的特征。 </li>
<li>通过export功能可以可视化您的决策树。使用 max_depth=3 作为初始树深度，让决策树知道如何适应您的数据，然后再增加树的深度。</li>
<li>请记住，填充树的样本数量会增加树的每个附加级别。使用max_depth来控制输的大小防止过拟合。</li>
<li>通过使用 min_samples_split 和 min_samples_leaf 来控制叶节点上的样本数量。当这个值很小时意味着生成的决策树将会过拟合，然而当这个值很大时将会不利于决策树的对样本的学习。所以尝试 min_samples_leaf=5 作为初始值。如果样本的变化量很大，可以使用浮点数作为这两个参数中的百分比。两者之间的主要区别在于 min_samples_leaf 保证叶结点中最少的采样数，而 min_samples_split 可以创建任意小的叶子，尽管在文献中 min_samples_split 更常见。 </li>
<li>在训练之前平衡您的数据集，以防止决策树偏向于主导类.可以通过从每个类中抽取相等数量的样本来进行类平衡，或者优选地通过将每个类的样本权重 (sample_weight) 的和归一化为相同的值。还要注意的是，基于权重的预修剪标准 (min_weight_fraction_leaf) 对于显性类别的偏倚偏小，而不是不了解样本权重的标准，如 min_samples_leaf。</li>
<li>如果样本被加权，则使用基于权重的预修剪标准 min_weight_fraction_leaf 来优化树结构将更容易，这确保叶节点包含样本权重的总和的至少一部分。</li>
<li>所有的决策树内部使用 np.float32 数组 ，如果训练数据不是这种格式，将会复制数据集。</li>
<li>如果输入的矩阵X为稀疏矩阵，建议您在调用fit之前将矩阵X转换为稀疏的csc_matrix ,在调用predict之前将 csr_matrix 稀疏。当特征在大多数样本中具有零值时，与密集矩阵相比，稀疏矩阵输入的训练时间可以快几个数量级。</li>
</ul>
<h2 id="2-借助Pandas使用Python实现决策树"><a href="#2-借助Pandas使用Python实现决策树" class="headerlink" title="2. 借助Pandas使用Python实现决策树"></a>2. 借助Pandas使用Python实现决策树</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment"># ==============================================================================</span></span><br><span class="line"><span class="string">"""使用Python实现决策树</span></span><br><span class="line"><span class="string">版本：</span></span><br><span class="line"><span class="string">    Python：3.6.7</span></span><br><span class="line"><span class="string">参考：</span></span><br><span class="line"><span class="string">    https://github.com/apachecn/AiLearning</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> log</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_wine</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">pd.set_option(<span class="string">'precision'</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_dataset</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""加载数据集以及特征名称</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        train_data: 构造决策树的训练集</span></span><br><span class="line"><span class="string">        test_data: 用于剪枝和测试的测试集</span></span><br><span class="line"><span class="string">        features: 数据特征名称</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    raw_data = load_wine()</span><br><span class="line">    data = raw_data[<span class="string">'data'</span>]</span><br><span class="line">    target = raw_data[<span class="string">'target'</span>]</span><br><span class="line"></span><br><span class="line">    print(raw_data[<span class="string">'DESCR'</span>])</span><br><span class="line">    features = raw_data[<span class="string">'feature_names'</span>]</span><br><span class="line">    x_train, x_test, y_train, y_test = train_test_split(</span><br><span class="line">        data, target, test_size=<span class="number">0.2</span>, random_state=<span class="number">2018</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用Pandas便于计算和处理数据</span></span><br><span class="line">    train_data = pd.DataFrame(x_train, columns=raw_data[<span class="string">'feature_names'</span>])</span><br><span class="line">    test_data = pd.DataFrame(x_test, columns=raw_data[<span class="string">'feature_names'</span>])</span><br><span class="line">    <span class="comment"># 将label列添加进DataFrame中</span></span><br><span class="line">    train_data[<span class="string">'label'</span>] = y_train</span><br><span class="line">    test_data[<span class="string">'label'</span>] = y_test</span><br><span class="line">    <span class="comment"># 调用describe获取数据信息</span></span><br><span class="line">    <span class="comment"># train_data.describe()</span></span><br><span class="line">    <span class="keyword">return</span> train_data, test_data, features</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cal_ent</span><span class="params">(dataframe)</span>:</span></span><br><span class="line">    <span class="string">"""计算以label为目标的信息熵</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        dataframe: 数据集DataFrame</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        ent_data: 信息熵的值</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    ent_data = <span class="number">0.0</span></span><br><span class="line">    <span class="comment"># value_counts返回label列下的值和对应的出现次数，Series类型</span></span><br><span class="line">    value_counts = dataframe[<span class="string">'label'</span>].value_counts()</span><br><span class="line">    <span class="comment"># Series可以使用items()遍历</span></span><br><span class="line">    <span class="keyword">for</span> _, value <span class="keyword">in</span> value_counts.items():</span><br><span class="line">        prob = value / len(dataframe)</span><br><span class="line">        ent_data += - prob * log(prob, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> ent_data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split_data</span><span class="params">(dataframe, feature, threshold)</span>:</span></span><br><span class="line">    <span class="string">"""根据阈值划分数据集</span></span><br><span class="line"><span class="string">    对于连续值的特征，采用插队的方式选出threshold，将数据集划分为小于threshold和</span></span><br><span class="line"><span class="string">    大于threshold的两部分。</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        dataframe: 数据集DataFrame</span></span><br><span class="line"><span class="string">        feature: 特征名称str</span></span><br><span class="line"><span class="string">        threshold: 特征阈值float</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        greater_data: 大于阈值的DataFrame</span></span><br><span class="line"><span class="string">        less_data: 小于阈值的DataFrame</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    greater_data = dataframe[dataframe[feature] &gt; threshold].reset_index(drop=<span class="literal">True</span>)</span><br><span class="line">    less_data = dataframe[dataframe[feature] &lt; threshold].reset_index(drop=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> greater_data, less_data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choose_best_feature</span><span class="params">(dataframe, features)</span>:</span></span><br><span class="line">    <span class="string">"""根据ID3算法选择信息增益最大的特征</span></span><br><span class="line"><span class="string">    对于特征为连续值的情况，每一个特征用过之后可以在后面继续作为划分特征。</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        dataframe: 数据集DataFrame</span></span><br><span class="line"><span class="string">        features: 所有特征名称list</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        best_feature: 最优划分特征名称</span></span><br><span class="line"><span class="string">        best_threshold: 最优划分特征的最优阈值</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    base_ent = cal_ent(dataframe)</span><br><span class="line">    best_feature = <span class="literal">None</span></span><br><span class="line">    best_threshold = <span class="number">0.0</span></span><br><span class="line">    best_info_gain = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> feature <span class="keyword">in</span> features:</span><br><span class="line">        <span class="comment"># print('当前特征为：&#123;&#125;'.format(feature))</span></span><br><span class="line">        sorted_values = sorted(dataframe[feature].values)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(sorted_values) - <span class="number">1</span>):</span><br><span class="line">            threshold = round((sorted_values[i] + sorted_values[i + <span class="number">1</span>]) / <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">            greater_data, less_data = split_data(dataframe, feature, threshold)</span><br><span class="line">            prob_g = len(greater_data) / len(dataframe)</span><br><span class="line">            prob_l = len(less_data) / len(dataframe)</span><br><span class="line">            tmp_ent = - prob_g * cal_ent(greater_data) - prob_l * cal_ent(less_data)</span><br><span class="line">            info_gain = base_ent - tmp_ent</span><br><span class="line">            <span class="keyword">if</span> info_gain &gt; best_info_gain:</span><br><span class="line">                best_feature = feature</span><br><span class="line">                best_info_gain = info_gain</span><br><span class="line">                best_threshold = threshold</span><br><span class="line">            <span class="comment"># print(('当前阈值为：&#123;:.4f&#125;，'</span></span><br><span class="line">            <span class="comment">#     '信息增益为：&#123;:.4f&#125;，'</span></span><br><span class="line">            <span class="comment">#     '最佳信息增益为：&#123;:.4f&#125;').format(</span></span><br><span class="line">            <span class="comment">#     threshold,</span></span><br><span class="line">            <span class="comment">#     info_gain,</span></span><br><span class="line">            <span class="comment">#     best_info_gain))</span></span><br><span class="line">    <span class="keyword">return</span> best_feature, best_threshold</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">majority_label</span><span class="params">(dataframe)</span>:</span></span><br><span class="line">    <span class="string">"""返回DataFrame中label列下出现次数最多的标签</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        dataframe: 数据集DataFrame</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        出现次数最多的标签以及标签种类数量</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># value_counts默认降序，以label为index，以出现次数为value</span></span><br><span class="line">    value_counts = dataframe[<span class="string">'label'</span>].value_counts()</span><br><span class="line">    <span class="keyword">return</span> value_counts.index.tolist()[<span class="number">0</span>], len(value_counts)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_tree</span><span class="params">(dataframe, features, min_samples_split=<span class="number">3</span>)</span>:</span></span><br><span class="line">    <span class="string">"""递归构建决策树</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        dataframe: 数据集DataFrame</span></span><br><span class="line"><span class="string">        features: 所有特征名称list</span></span><br><span class="line"><span class="string">        min_samples_split: 最小划分子集</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        my_tree: 决策树dict</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    label, label_category_count = majority_label(dataframe)</span><br><span class="line">    <span class="comment"># 停止条件1：DataFrame中所有label都相同</span></span><br><span class="line">    <span class="keyword">if</span> label_category_count <span class="keyword">is</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> label</span><br><span class="line">    <span class="comment"># 停止条件2：DataFrame包含的样本数小于min_samples_split</span></span><br><span class="line">    <span class="keyword">if</span> len(dataframe) &lt; min_samples_split:</span><br><span class="line">        <span class="keyword">return</span> label</span><br><span class="line"></span><br><span class="line">    best_feature, best_threshold = choose_best_feature(dataframe, features)</span><br><span class="line">    tree_node = best_feature + <span class="string">'&gt;'</span> + str(best_threshold)</span><br><span class="line">    my_tree = &#123;tree_node: &#123;&#125;&#125;</span><br><span class="line"></span><br><span class="line">    greater_data, less_data = split_data(dataframe, best_feature, best_threshold)</span><br><span class="line"></span><br><span class="line">    my_tree[tree_node][<span class="string">'true'</span>] = create_tree(greater_data, features, min_samples_split)</span><br><span class="line">    my_tree[tree_node][<span class="string">'false'</span>] = create_tree(less_data, features, min_samples_split)</span><br><span class="line">    <span class="comment"># print(my_tree)</span></span><br><span class="line">    <span class="keyword">return</span> my_tree</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">classify</span><span class="params">(input_tree, test_data)</span>:</span></span><br><span class="line">    <span class="string">"""对testData进行分类</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        input_tree: 构建的决策树dict</span></span><br><span class="line"><span class="string">        test_data: 测试数据dict</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        label: testData对应的预测标签</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    get_node = list(input_tree.keys())[<span class="number">0</span>]</span><br><span class="line">    feature = get_node.split(<span class="string">'&gt;'</span>)[<span class="number">0</span>]</span><br><span class="line">    threshold = float(get_node.split(<span class="string">'&gt;'</span>)[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    branches = input_tree[get_node]</span><br><span class="line">    key = <span class="string">'true'</span> <span class="keyword">if</span> test_data[feature] &gt; threshold <span class="keyword">else</span> <span class="string">'false'</span></span><br><span class="line"></span><br><span class="line">    sub_tree = branches[key]</span><br><span class="line">    <span class="keyword">if</span> isinstance(sub_tree, dict):</span><br><span class="line">        label = classify(sub_tree, test_data)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        label = sub_tree</span><br><span class="line">    <span class="keyword">return</span> label</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_tree</span><span class="params">(input_tree, filename)</span>:</span></span><br><span class="line">    <span class="string">"""保存决策树"""</span></span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">'wb'</span>) <span class="keyword">as</span> file:</span><br><span class="line">        pickle.dump(input_tree, file)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_tree</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="string">"""加载决策树"""</span></span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">'rb'</span>) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="keyword">return</span> pickle.load(file)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_accuracy</span><span class="params">(input_tree, test_data)</span>:</span></span><br><span class="line">    <span class="string">"""测试决策树对测试集的准确率"""</span></span><br><span class="line">    length = len(test_data)</span><br><span class="line">    score = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line">        result = classify(input_tree, test_data.loc[i]) == int(test_data.loc[i][<span class="string">'label'</span>])</span><br><span class="line">        score += int(result) / length</span><br><span class="line">    <span class="keyword">return</span> round(score, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_major</span><span class="params">(majority, test_data)</span>:</span></span><br><span class="line">    <span class="string">"""测试集标签为majority的准确率"""</span></span><br><span class="line">    length = len(test_data)</span><br><span class="line">    score = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line">        result = majority == test_data.loc[i][<span class="string">'label'</span>]</span><br><span class="line">        score += int(result) / length</span><br><span class="line">    <span class="keyword">return</span> round(score, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post_pruning_tree</span><span class="params">(input_tree, dataframe, test_data)</span>:</span></span><br><span class="line">    <span class="string">"""后剪枝操作</span></span><br><span class="line"><span class="string">    以递归的方式进行后剪枝</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        input_tree: 输入需要进行后剪枝的决策树</span></span><br><span class="line"><span class="string">        dataframe: 训练数据集</span></span><br><span class="line"><span class="string">        test_data: 测试数据集</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        后剪枝决策树</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    get_node = list(input_tree.keys())[<span class="number">0</span>]</span><br><span class="line">    feature = get_node.split(<span class="string">'&gt;'</span>)[<span class="number">0</span>]</span><br><span class="line">    threshold = float(get_node.split(<span class="string">'&gt;'</span>)[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    branches = input_tree[get_node]</span><br><span class="line"></span><br><span class="line">    g_data, l_data = split_data(dataframe, feature, threshold)</span><br><span class="line">    g_data_test, l_data_test = split_data(test_data, feature, threshold)</span><br><span class="line">    <span class="comment"># 分支判断</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(branches[<span class="string">'true'</span>], dict):</span><br><span class="line">        input_tree[get_node][<span class="string">'true'</span>] = post_pruning_tree(branches[<span class="string">'true'</span>], g_data, g_data_test)</span><br><span class="line">    <span class="keyword">if</span> isinstance(branches[<span class="string">'false'</span>], dict):</span><br><span class="line">        input_tree[get_node][<span class="string">'false'</span>] = post_pruning_tree(branches[<span class="string">'false'</span>], l_data, l_data_test)</span><br><span class="line"></span><br><span class="line">    majority, _ = majority_label(dataframe)</span><br><span class="line">    <span class="comment"># 递归返回</span></span><br><span class="line">    <span class="keyword">if</span> test_accuracy(input_tree, test_data) &gt; test_major(majority, test_data):</span><br><span class="line">        <span class="keyword">return</span> input_tree</span><br><span class="line">    <span class="keyword">return</span> majority</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""主函数"""</span></span><br><span class="line">    train_data, test_data, features = load_dataset()</span><br><span class="line">    tree = create_tree(train_data, features, min_samples_split=<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">'未剪枝决策树准确率：&#123;&#125;'</span>.format(test_accuracy(tree, test_data)))</span><br><span class="line">    pruned_tree = post_pruning_tree(tree, train_data, test_data)</span><br><span class="line">    print(<span class="string">'后剪枝决策树准确率：&#123;&#125;'</span>.format(test_accuracy(pruned_tree, test_data)))</span><br><span class="line">    <span class="comment"># 保存决策树</span></span><br><span class="line">    save_tree(pruned_tree, <span class="string">'my_tree.txt'</span>)</span><br><span class="line">    <span class="comment"># 从文件中读取决策树</span></span><br><span class="line">    tree_loaded = load_tree(<span class="string">'my_tree.txt'</span>)</span><br><span class="line">    print(<span class="string">'加载剪枝决策树准确率：&#123;&#125;'</span>.format(test_accuracy(tree_loaded, test_data)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>未剪枝决策树准确率：0.583333<br>后剪枝决策树准确率：0.722222<br>加载剪枝决策树准确率：0.722222</p>
</blockquote>
<h2 id="3-使用sklearn的DecisionTreeClassifier"><a href="#3-使用sklearn的DecisionTreeClassifier" class="headerlink" title="3. 使用sklearn的DecisionTreeClassifier"></a>3. 使用sklearn的DecisionTreeClassifier</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment"># ==============================================================================</span></span><br><span class="line"><span class="string">"""使用sklearn实现决策树</span></span><br><span class="line"><span class="string">版本：</span></span><br><span class="line"><span class="string">    Python：3.6.7</span></span><br><span class="line"><span class="string">参考：</span></span><br><span class="line"><span class="string">    https://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html#sklearn.tree.DecisionTreeClassifier</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_wine</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> tree</span><br><span class="line"></span><br><span class="line">raw_data = load_wine()</span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(</span><br><span class="line">    raw_data.data, raw_data.target, test_size=<span class="number">0.2</span>, random_state=<span class="number">2019</span>)</span><br><span class="line">clf = tree.DecisionTreeClassifier(criterion=<span class="string">'entropy'</span>)</span><br><span class="line">clf.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'测试集准确率：&#123;:.4f&#125;'</span>.format(clf.score(X_test, y_test)))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>测试集准确率：0.9167</p>
</blockquote>
]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>Decision Tree</tag>
        <tag>Code</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习-损失函数</title>
    <url>/archives/e6c50c31.html</url>
    <content><![CDATA[<p>参考：</p>
<blockquote>
<p><a href="https://www.tensorflow.org/api_docs/python/tf/losses" target="_blank" rel="noopener">Tensorflow API</a><br><a href="https://blog.csdn.net/weixin_37136725/article/details/79291818" target="_blank" rel="noopener">损失函数</a><br><a href="https://www.cnblogs.com/massquantity/p/8964029.html" target="_blank" rel="noopener">常见回归和分类损失函数比较</a></p>
</blockquote>
<p><strong>所有的损失都是reduce_sum处理的，log运算以e为底</strong></p>
<h2 id="1-absolute-difference"><a href="#1-absolute-difference" class="headerlink" title="1. absolute_difference"></a>1. absolute_difference</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tf.losses.absolute_difference(</span><br><span class="line">    labels,</span><br><span class="line">    predictions,</span><br><span class="line">    weights&#x3D;1.0,</span><br><span class="line">    scope&#x3D;None,</span><br><span class="line">    loss_collection&#x3D;tf.GraphKeys.LOSSES,</span><br><span class="line">    reduction&#x3D;Reduction.SUM_BY_NONZERO_WEIGHTS</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>绝对值损失，差距不会被平方缩放。</p>
<script type="math/tex; mode=display">
loss = |label - prediction|</script><a id="more"></a>
<h2 id="2-cosine-distance"><a href="#2-cosine-distance" class="headerlink" title="2. cosine_distance"></a>2. cosine_distance</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tf.losses.cosine_distance(</span><br><span class="line">    labels,</span><br><span class="line">    predictions,</span><br><span class="line">    axis&#x3D;None,</span><br><span class="line">    weights&#x3D;1.0,</span><br><span class="line">    scope&#x3D;None,</span><br><span class="line">    loss_collection&#x3D;tf.GraphKeys.LOSSES,</span><br><span class="line">    reduction&#x3D;Reduction.SUM_BY_NONZERO_WEIGHTS,</span><br><span class="line">    dim&#x3D;None</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>余弦距离，用向量空间中两个向量夹角的余弦值作为衡量两个个体间差异的大小的度量。</p>
<p>使用前提：labels和predictions已经标准化</p>
<script type="math/tex; mode=display">
\cos <\boldsymbol{x, y}> = \frac{\sum x_iy_i}{|\boldsymbol{x}||\boldsymbol{y}|}</script><h2 id="3-hinge-loss"><a href="#3-hinge-loss" class="headerlink" title="3. hinge_loss"></a>3. hinge_loss</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tf.losses.hinge_loss(</span><br><span class="line">    labels,</span><br><span class="line">    logits,</span><br><span class="line">    weights&#x3D;1.0,</span><br><span class="line">    scope&#x3D;None,</span><br><span class="line">    loss_collection&#x3D;tf.GraphKeys.LOSSES,</span><br><span class="line">    reduction&#x3D;Reduction.SUM_BY_NONZERO_WEIGHTS</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>铰链损失，常用于SVM中，参考<code>支持向量机</code></p>
<h2 id="4-huber-loss"><a href="#4-huber-loss" class="headerlink" title="4. huber_loss"></a>4. huber_loss</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tf.losses.huber_loss(</span><br><span class="line">    labels,</span><br><span class="line">    predictions,</span><br><span class="line">    weights&#x3D;1.0,</span><br><span class="line">    delta&#x3D;1.0,</span><br><span class="line">    scope&#x3D;None,</span><br><span class="line">    loss_collection&#x3D;tf.GraphKeys.LOSSES,</span><br><span class="line">    reduction&#x3D;Reduction.SUM_BY_NONZERO_WEIGHTS</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>Huber loss是为了增强平方误差损失函数对噪声（或叫离群点）的鲁棒性提出的。通过设置<code>delta</code>阈值，对阈值以外的误差进行约束，以达到削弱离群值对损失的巨大影响。</p>
<script type="math/tex; mode=display">
loss = 
\left\{\begin{matrix}
0.5 \times x^2, \quad  |x| \leqslant d\\ 
0.5 \times d^2 + d(|x| - d), \quad    |x| > d 
\end{matrix}\right.
\\
x = label - prediction,d = delta</script><h2 id="5-log-loss"><a href="#5-log-loss" class="headerlink" title="5. log_loss"></a>5. log_loss</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tf.losses.log_loss(</span><br><span class="line">    labels,</span><br><span class="line">    predictions,</span><br><span class="line">    weights&#x3D;1.0,</span><br><span class="line">    epsilon&#x3D;1e-07,</span><br><span class="line">    scope&#x3D;None,</span><br><span class="line">    loss_collection&#x3D;tf.GraphKeys.LOSSES,</span><br><span class="line">    reduction&#x3D;Reduction.SUM_BY_NONZERO_WEIGHTS</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>对数损失，对每一个样本$(\boldsymbol{x}, y)$来说</p>
<script type="math/tex; mode=display">
loss = y\log(f(\boldsymbol{x}) + \epsilon) - (1- y)\log(1-f(\boldsymbol{x}) + \epsilon)</script><p>$\epsilon$是为了防止出现$\log 0$</p>
<h2 id="6-mean-pairwise-squared-error"><a href="#6-mean-pairwise-squared-error" class="headerlink" title="6. mean_pairwise_squared_error"></a>6. mean_pairwise_squared_error</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tf.losses.mean_pairwise_squared_error(</span><br><span class="line">    labels,</span><br><span class="line">    predictions,</span><br><span class="line">    weights&#x3D;1.0,</span><br><span class="line">    scope&#x3D;None,</span><br><span class="line">    loss_collection&#x3D;tf.GraphKeys.LOSSES</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>与mean_squared_error不同的是，这是predictions和labels的对应元素之间的差异的量度，mean_pairwise_squared_error是predictions和labels对应元素对之间的差异的量度。</p>
<p>如果$labels= [a,b,c]$和$predictions= [x,y,z]$，则将三对差值相加以计算$loss：loss = \frac{1}{3}[ ((a-b) - (x-y)).^2 + ((a-c) - (x-z)).^2 + ((b-c) - (y-z)).^2 ]$</p>
<p>由于输入具有形状[batch_size, d0, … dN]，因此在每个批处理示例中计算相应的对，但不在批次内的样本之间计算。例如，如果predictions表示一批16个维度为[batch_size,100,200]的灰度图像，则会从每个图像中提取一对配对集，而不是跨图像绘制。</p>
<h2 id="7-mean-squared-error"><a href="#7-mean-squared-error" class="headerlink" title="7. mean_squared_error"></a>7. mean_squared_error</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tf.losses.mean_squared_error(</span><br><span class="line">    labels,</span><br><span class="line">    predictions,</span><br><span class="line">    weights&#x3D;1.0,</span><br><span class="line">    scope&#x3D;None,</span><br><span class="line">    loss_collection&#x3D;tf.GraphKeys.LOSSES,</span><br><span class="line">    reduction&#x3D;Reduction.SUM_BY_NONZERO_WEIGHTS</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>均方误差MSE，显然，误差平方和的均值，若在此基础上做开方运算则得到均方根误差RMSE，常用于回归任务。</p>
<script type="math/tex; mode=display">
loss = (label - prediction)^2</script><h2 id="8-sigmoid-cross-entropy"><a href="#8-sigmoid-cross-entropy" class="headerlink" title="8. sigmoid_cross_entropy"></a>8. sigmoid_cross_entropy</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tf.losses.sigmoid_cross_entropy(</span><br><span class="line">    multi_class_labels,</span><br><span class="line">    logits,</span><br><span class="line">    weights&#x3D;1.0,</span><br><span class="line">    label_smoothing&#x3D;0,</span><br><span class="line">    scope&#x3D;None,</span><br><span class="line">    loss_collection&#x3D;tf.GraphKeys.LOSSES,</span><br><span class="line">    reduction&#x3D;Reduction.SUM_BY_NONZERO_WEIGHTS</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>sigmoid交叉熵，本质上还是调用<code>tf.nn.sigmoid_cross_entropy_with_logits</code>，由于有<code>label_smoothing</code>的存在，若其不为0，则需要对labels进行平滑处理（整体向$\frac{1}{2}$缩放）；注意这里用的是logits而不是predictions，因为使用sigmoid_cross_entropy的输出层不需要经过sigmoid激活函数，在计算损失sigmoid_cross_entropy的函数内部会先对logits进行sigmoid运算。常用于二分类。</p>
<p><code>new_multiclass_labels = multiclass_labels * (1 - label_smoothing) + 0.5 * label_smoothing</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tf.nn.sigmoid_cross_entropy_with_logits(</span><br><span class="line">    _sentinel&#x3D;None,</span><br><span class="line">    labels&#x3D;None,</span><br><span class="line">    logits&#x3D;None,</span><br><span class="line">    name&#x3D;None</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>令<code>x = logits, z = labels</code></p>
<script type="math/tex; mode=display">
z * -\log(sigmoid(x)) + (1 - z) * -\log(1 - sigmoid(x))
\\
= z * -\log(1 / (1 + \exp(-x))) + (1 - z) * -\log(\exp(-x) / (1 + \exp(-x)))
\\
= z * \log(1 + \exp(-x)) + (1 - z) * (-\log(\exp(-x)) + \log(1 + \exp(-x)))
\\
= z * \log(1 + \exp(-x)) + (1 - z) * (x + \log(1 + \exp(-x))
\\
= (1 - z) * x + \log(1 + \exp(-x))
\\
= x - x * z + \log(1 + \exp(-x))</script><p>若$x &lt; 0$，为了避免$\exp(-x)$溢出，修正上式为</p>
<script type="math/tex; mode=display">
x - x * z + \log(1 + \exp(-x))
\\
= \log(\exp(x)) - x * z + \log(1 + \exp(-x))
\\
= - x * z + \log(1 + \exp(x))</script><p>于是最终使用的公式为</p>
<script type="math/tex; mode=display">
loss = \max(x, 0) - x * z + \log(1 + \exp(-abs(x)))</script><h2 id="9-softmax-cross-entropy"><a href="#9-softmax-cross-entropy" class="headerlink" title="9. softmax_cross_entropy"></a>9. softmax_cross_entropy</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tf.losses.softmax_cross_entropy(</span><br><span class="line">    onehot_labels,</span><br><span class="line">    logits,</span><br><span class="line">    weights&#x3D;1.0,</span><br><span class="line">    label_smoothing&#x3D;0,</span><br><span class="line">    scope&#x3D;None,</span><br><span class="line">    loss_collection&#x3D;tf.GraphKeys.LOSSES,</span><br><span class="line">    reduction&#x3D;Reduction.SUM_BY_NONZERO_WEIGHTS</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>softmax交叉熵，本质上还是调用<code>tf.nn.softmax_cross_entropy_with_logits_v2</code>，由于有<code>label_smoothing</code>的存在，若其不为0，则需要对labels进行平滑处理（整体向$\frac{1}{numclasses}$缩放），而且label是onehot类型，与logits的形状相同；注意这里用的是logits而不是predictions，logits是未归一化的对数概率，而且使用softmax_cross_entropy的输出层不需要经过softmax激活函数，在计算损失softmax_cross_entropy的函数内部会先对logits进行softmax运算。常用于多分类。</p>
<p><code>new_onehot_labels = onehot_labels * (1 - label_smoothing) + label_smoothing / num_classes</code></p>
<h2 id="10-sparse-softmax-cross-entropy"><a href="#10-sparse-softmax-cross-entropy" class="headerlink" title="10. sparse_softmax_cross_entropy"></a>10. sparse_softmax_cross_entropy</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tf.losses.sparse_softmax_cross_entropy(</span><br><span class="line">    labels,</span><br><span class="line">    logits,</span><br><span class="line">    weights&#x3D;1.0,</span><br><span class="line">    scope&#x3D;None,</span><br><span class="line">    loss_collection&#x3D;tf.GraphKeys.LOSSES,</span><br><span class="line">    reduction&#x3D;Reduction.SUM_BY_NONZERO_WEIGHTS</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>softmax交叉熵，本质上还是调用<code>tf.nn.sparse_softmax_cross_entropy_with_logits</code>，注意label是普通的数字类型，范围在$[0, numclasses-1]$；这里用的是logits而不是predictions，logits是未归一化的对数概率，而且使用sparse_softmax_cross_entropy的输出层不需要经过softmax激活函数，在计算损失sparse_softmax_cross_entropy的函数内部会先对logits进行softmax运算。常用于多分类。</p>
<h2 id="11-常见回归和分类损失函数"><a href="#11-常见回归和分类损失函数" class="headerlink" title="11. 常见回归和分类损失函数"></a>11. 常见回归和分类损失函数</h2><p>这一部分仅考虑损失函数形式$L(y, f(\boldsymbol{x}))$</p>
<h3 id="11-1-回归问题"><a href="#11-1-回归问题" class="headerlink" title="11.1 回归问题"></a>11.1 回归问题</h3><ul>
<li>平方损失：$(y - f(\boldsymbol{x}))^2$</li>
<li>绝对值损失：$|y - f(\boldsymbol{x})|$</li>
<li>Huber损失：参考<code>4. huber_loss</code></li>
</ul>
<p>其中最常用的是平方损失，然而其缺点是对于异常点会施以较大的惩罚，因而不够robust。如果有较多异常点，则绝对值损失表现较好，但绝对值损失的缺点是在$y−f(\boldsymbol{x})=0$处不连续可导，因而不容易优化。</p>
<p>Huber损失是对二者的综合，当$|y−f(\boldsymbol{x})|$小于一个事先指定的值$delta$时，变为平方损失，大于$delta$时，则变成类似于绝对值损失，因此也是比较robust的损失函数。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/0554cfeb35d912975.png" alt="0554cfeb35d912975.png"></p>
<h3 id="11-2-分类问题"><a href="#11-2-分类问题" class="headerlink" title="11.2 分类问题"></a>11.2 分类问题</h3><p>对于二分类问题，$y \in {−1,+1}$，损失函数常表示为关于$yf(\boldsymbol{x})$的单调递减形式。$yf(\boldsymbol{x})$ 被称为$margin$，其作用类似于回归问题中的残差$y−f(\boldsymbol{x})$。</p>
<ul>
<li>0-1损失</li>
</ul>
<script type="math/tex; mode=display">
L(y,f(\boldsymbol{x})) = \left\{\begin{matrix} 0 \qquad if \;\; yf(\boldsymbol{x})\geq0 \\ 1 \qquad if \;\; yf(\boldsymbol{x}) < 0\end{matrix}\right.</script><p>0-1损失对每个错分类点都施以相同的惩罚，这样那些“错的离谱”的点并不会收到大的关注，这在直觉上不是很合适。另外0-1损失不连续、非凸，优化困难，因而常使用其他的代理损失函数进行优化。</p>
<ul>
<li>Logistic损失</li>
</ul>
<script type="math/tex; mode=display">
L(y,f(\boldsymbol{x})) = \log(1+e^{-yf(\boldsymbol{x})})</script><p>利用极大似然法可证明最小化Logistic损失等价于最大化准确率，在二分类问题中logistic loss和交叉熵损失是等价的，二者区别只是标签$y$的定义不同。</p>
<ul>
<li>Hinge损失</li>
</ul>
<script type="math/tex; mode=display">
L(y,f(\boldsymbol{x})) = \max(0,1-yf(\boldsymbol{x}))</script><p>参考<code>支持向量机</code></p>
<ul>
<li>指数损失</li>
</ul>
<script type="math/tex; mode=display">
L(y,f(\boldsymbol{x})) = e^{-yf(\boldsymbol{x})}</script><p>指数损失Exponential loss为AdaBoost中使用的损失函数，使用exponential loss能比较方便地利用加法模型推导出AdaBoost算法 (具体推导过程)。然而其和squared loss一样，对异常点敏感，不够robust。</p>
<ul>
<li>Modified Huber损失</li>
</ul>
<script type="math/tex; mode=display">
L(y,f(\boldsymbol{x})) = \left \{\begin{matrix} max(0,1-yf(\boldsymbol{x}))^2 \qquad if \;\;yf(\boldsymbol{x})\geq-1 \\ \qquad-4yf(\boldsymbol{x}) \qquad\qquad\;\; if\;\; yf(\boldsymbol{x})<-1\end{matrix}\right.\qquad</script><p>modified huber loss结合了hinge loss和logistic loss的优点，既能在$yf(\boldsymbol{x})&gt;1$时产生稀疏解提高训练效率，又能进行概率估计。另外其对于$(yf(\boldsymbol{x})&lt;−1)$ 样本的惩罚以线性增加，这意味着受异常点的干扰较少，比较robust。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/189e05fbe446cc434.png" alt="189e05fbe446cc434.png"></p>
<p>从上图可以看出上面介绍的这些损失函数都可以看作是0-1损失的单调连续近似函数，而因为这些损失函数通常是凸的连续函数，因此常用来代替0-1损失进行优化。它们的相同点是都随着$margin \rightarrow - \infty$而加大惩罚；不同点在于，logistic loss和hinge loss都是线性增长，而exponential loss是以指数增长。</p>
<p>值得注意的是上图中modified huber loss的走向和exponential loss差不多，并不能看出其robust的属性。其实这和算法时间复杂度一样，成倍放大了之后才能体现出巨大差异：</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/27e17cc3eb44fa376.png" alt="27e17cc3eb44fa376.png"></p>
]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Theory</tag>
        <tag>Tensorflow</tag>
        <tag>Loss</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习-激活函数</title>
    <url>/archives/a1207629.html</url>
    <content><![CDATA[<p>参考：</p>
<blockquote>
<p><a href="https://tensorflow.google.cn/api_docs/python/tf/keras/activations" target="_blank" rel="noopener">Tensorflow API</a><br><a href="http://m.elecfans.com/article/678118.html" target="_blank" rel="noopener">13种神经网络激活函数</a><br><a href="https://www.cnblogs.com/toone/p/8574294.html" target="_blank" rel="noopener">线性模型和非线性模型的区别，以及激活函数的作用</a></p>
</blockquote>
<p><strong>为什么神经网络可以拟合非线性模型，什么是非线性模型，与线性模型的区别是什么？</strong></p>
<ol>
<li>线性模型不一定是一条直线（logistic），但是分类的决策边界一定是一条直线，参考<code>线性模型</code>；</li>
<li>区分线性模型与非线性模型，主要还是看自变量受到几个参数的影响，如果自变量被两个或以上参数影响，那么此模型就是非线性模型；</li>
<li>参考广义线性模型，一个简单的神经网络的输出与输入的关系$\boldsymbol{y} = g_1^{-1}(\boldsymbol{w_1}^Tg_2^{-1}(\boldsymbol{w_2}^T\boldsymbol{x} + b_2) + b_1)$，对于任意激活函数$\boldsymbol{g}^{-1}$来说，自变量或输入$\boldsymbol{x}$可能受到至少两个参数（来自$\boldsymbol{w_1,w_2}$）的影响，所以神经网络可以拟合非线性的模型；</li>
<li>激活函数的选择，能对输入进行约束，求导方便。</li>
</ol>
<a id="more"></a>
<h2 id="1-linear"><a href="#1-linear" class="headerlink" title="1. linear"></a>1. linear</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tf.keras.activations.linear(x)</span><br></pre></td></tr></table></figure>
<p>线性激活函数，输出和输入成比例。线性激活函数的问题在于，它的导数是常数，梯度也是常数，梯度下降无法工作。</p>
<script type="math/tex; mode=display">
f(x) = x</script><!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/linear22dc05c43fe34722.png" alt="linear22dc05c43fe34722.png"></p>
<h2 id="2-elu"><a href="#2-elu" class="headerlink" title="2. elu"></a>2. elu</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tf.keras.activations.elu(</span><br><span class="line">    x,</span><br><span class="line">    alpha&#x3D;1.0</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>ELU（Exponential Linear Unit，指数线性单元）尝试加快学习速度。基于ELU，有可能得到比ReLU更高的分类精确度。这里$\alpha$是一个超参数（限制：$\alpha \geqslant 0$）。</p>
<script type="math/tex; mode=display">
f(x) = 
\left\{\begin{matrix}
\alpha(e^x-1), \quad  x < 0\\ 
x, \quad    x \geqslant 0 
\end{matrix}\right.</script><!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/elu.png" alt="elu.png"></p>
<h2 id="3-hard-sigmoid"><a href="#3-hard-sigmoid" class="headerlink" title="3. hard_sigmoid"></a>3. hard_sigmoid</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tf.keras.activations.hard_sigmoid(x)</span><br></pre></td></tr></table></figure>
<p>比sigmoid函数计算更快</p>
<script type="math/tex; mode=display">
f(x) = 
\left\{\begin{matrix}
0, \quad  x < -2.5\\ 
0.2 \times x + 0.5, \quad  -2.5 \leqslant x \leqslant 2.5\\
1, \quad    x > 2.5 
\end{matrix}\right.</script><h2 id="4-relu"><a href="#4-relu" class="headerlink" title="4. relu"></a>4. relu</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tf.keras.activations.relu(</span><br><span class="line">    x,</span><br><span class="line">    alpha&#x3D;0.0,</span><br><span class="line">    max_value&#x3D;None,</span><br><span class="line">    threshold&#x3D;0</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>整流线性函数，默认情况$\max(x, 0)$，训练速度比tanh快6倍。当输入值小于零时，输出值为零。当输入值大于等于零时，输出值等于输入值。当输入值为正数时，导数为1，因此不会出现sigmoid函数反向传播时的挤压效应。</p>
<script type="math/tex; mode=display">
f(x) = 
\left\{\begin{matrix}
max\_value, \quad  x \geqslant max\_value\\ 
x, \quad  threshold \leqslant x < max\_value \\
alpha \times (x - threshold), \quad otherwise
\end{matrix}\right.</script><p>默认情况导数</p>
<script type="math/tex; mode=display">
f'(x) = 
\left\{\begin{matrix}
0, \quad  x < 0\\ 
1, \quad    x \geqslant 0 
\end{matrix}\right.</script><p>不幸的是，ReLU在训练时可能很脆弱，可能“死亡”。例如，通过ReLU神经元的较大梯度可能导致权重更新过头，导致神经元再也不会因为任何数据点激活。如果这一情况发生了，经过这一单元的梯度从此以后将永远为零。也就是说，ReLU单元可能在训练中不可逆地死亡，因为它们被从数据流形上踢出去了。例如，你可能发现，如果学习率设置过高，40%的网络可能“死亡”（即神经元在整个训练数据集上永远不会激活）。设置一个合适的学习率可以缓解这一问题。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/relu.png" alt="relu.png"></p>
<h3 id="4-1-Leaky-ReLU函数"><a href="#4-1-Leaky-ReLU函数" class="headerlink" title="4.1 Leaky ReLU函数"></a>4.1 Leaky ReLU函数</h3><p>Leaky ReLU让单元未激活时能有一个很小的非零梯度。这里，很小的非零梯度是0.01。</p>
<script type="math/tex; mode=display">
f(x) = 
\left\{\begin{matrix}
0.01x, \quad  x < 0\\ 
x, \quad    x \geqslant 0 
\end{matrix}\right.</script><p>导数</p>
<script type="math/tex; mode=display">
f'(x) = 
\left\{\begin{matrix}
0.01, \quad  x < 0\\ 
1, \quad    x \geqslant 0 
\end{matrix}\right.</script><!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/leaky.png" alt="leaky.png"></p>
<h3 id="4-2-PReLU函数"><a href="#4-2-PReLU函数" class="headerlink" title="4.2 PReLU函数"></a>4.2 PReLU函数</h3><p>PReLU（Parametric Rectified Linear Unit）函数类似Leaky ReLU，只不过将系数（很小的非零梯度）作为激活函数的参数，该参数和网络的其他参数一样，在训练过程中学习。</p>
<script type="math/tex; mode=display">
f(x) = 
\left\{\begin{matrix}
\alpha x, \quad  x < 0\\ 
x, \quad    x \geqslant 0 
\end{matrix}\right.</script><h3 id="4-3-RReLU函数"><a href="#4-3-RReLU函数" class="headerlink" title="4.3 RReLU函数"></a>4.3 RReLU函数</h3><p>RReLU也类似Leaky ReLU，只不过系数（较小的非零梯度）在训练中取一定范围内的随机值，在测试时固定。</p>
<script type="math/tex; mode=display">
f(x_{ij}) =  
\left\{\begin{matrix}
\alpha_{ij} x_{ij}, \quad  x < 0\\ 
x_{ij}, \quad    x \geqslant 0 
\end{matrix}\right.</script><!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/rand.png" alt="rand.png"></p>
<h3 id="4-4-SReLU函数"><a href="#4-4-SReLU函数" class="headerlink" title="4.4 SReLU函数"></a>4.4 SReLU函数</h3><p>SReLU（S-shaped Rectified Linear Activation Unit，S型修正线性激活单元）由三个分段线性函数组成。系数$t_l, a_l, t_r, a_r$作为参数，将在网络训练中学习。</p>
<script type="math/tex; mode=display">
f_{t_l, a_l, t_r, a_r}(x) = 
\left\{\begin{matrix}
t_l + a_l(x - t_l), \quad  x \leqslant t_l\\ 
x \quad t_l < x < t_r \\
t_r + a_r(x - t_r), \quad    x \geqslant t_r
\end{matrix}\right.</script><!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/srelu.png" alt="srelu.png"></p>
<h2 id="5-selu"><a href="#5-selu" class="headerlink" title="5. selu"></a>5. selu</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tf.keras.activations.selu(x)</span><br></pre></td></tr></table></figure>
<p>SELU（Scaled Exponential Linear Unit，拉伸指数线性单元）是ELU经过拉伸的版本。</p>
<script type="math/tex; mode=display">
f(x) = scale \times elu(x, alpha)
\\
alpha = 1.6732632423543772848170429916717
\\
scale = 1.0507009873554804934193349852946</script><h2 id="6-sigmoid"><a href="#6-sigmoid" class="headerlink" title="6. sigmoid"></a>6. sigmoid</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tf.keras.activations.sigmoid(x)</span><br></pre></td></tr></table></figure>
<p>sigmoid激活函数，常用于二分类任务的输出层。它有梯度消失问题。在一定epoch数目之后，网络拒绝学习，或非常缓慢地学习，因为输入$x$导致输出$y$中非常小的改动，计算sigmoid函数的导数非常简单。</p>
<p>就神经网络的反向传播过程而言，每层（至少）挤入四分之一的误差。因此，网络越深，越多关于数据的知识将“丢失”。某些输出层的“较大”误差可能不会影响相对较浅的层中的神经元的突触权重（“较浅”意味着接近输入层）。</p>
<script type="math/tex; mode=display">
f(x) = \frac{1}{1 + e^{-x}}</script><p>导数为</p>
<script type="math/tex; mode=display">
f'(x) = f(x)(1-f(x))</script><!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/sigmoid.png" alt="sigmoid.png"></p>
<h2 id="7-softmax"><a href="#7-softmax" class="headerlink" title="7. softmax"></a>7. softmax</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tf.keras.activations.softmax(</span><br><span class="line">    x,</span><br><span class="line">    axis&#x3D;-1</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>softmax函数将原始值转换为后验分布，可用于衡量确定性。类似sigmoid，softmax将每个单元的输出值挤压到0和1之间。不过，softmax同时确保输出的总和等于1。</p>
<script type="math/tex; mode=display">
\sigma(z)_j = \frac{e^{z_j}}{\sum^K_{k=1}e^{z_k}}</script><p>交叉熵对参数的偏导数为</p>
<script type="math/tex; mode=display">
\frac{\partial L}{\partial z_i} = \sigma(z)_i - y_i</script><!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/softmax.png" alt="softmax.png"></p>
<h2 id="8-softplus"><a href="#8-softplus" class="headerlink" title="8. softplus"></a>8. softplus</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tf.keras.activations.softplus(x)</span><br></pre></td></tr></table></figure>
<p>SoftPlus函数的导数为逻辑（logistic）函数。大体上，ReLU和SoftPlus很相似，只不过SoftPlus在接近零处平滑可微。另外，计算ReLU及其导数要比SoftPlus容易很多。</p>
<script type="math/tex; mode=display">
f(x) = \ln (1+e^x)</script><p>导数为</p>
<script type="math/tex; mode=display">
f'(x) = \frac{1}{1+e^{-x}}</script><h2 id="9-softsign"><a href="#9-softsign" class="headerlink" title="9. softsign"></a>9. softsign</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tf.keras.activations.softsign(x)</span><br></pre></td></tr></table></figure>
<p>平滑的sign函数，求导更方便。</p>
<script type="math/tex; mode=display">
f(x) = \frac{x}{|x| + 1}</script><h2 id="10-tanh"><a href="#10-tanh" class="headerlink" title="10. tanh"></a>10. tanh</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tf.keras.activations.tanh(x)</span><br></pre></td></tr></table></figure>
<p>tanh函数是拉伸过的sigmoid函数，以零为中心，因此导数更陡峭。tanh比sigmoid激活函数收敛得更快。</p>
<script type="math/tex; mode=display">
f(x) = \tanh(x) = \frac{2}{1+e^{-2x}} - 1</script><p>导数</p>
<script type="math/tex; mode=display">
f'(x) = 1 - (f(x))^2</script><!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/tanh.png" alt="tanh.png"></p>
<h2 id="11-阶跃函数"><a href="#11-阶跃函数" class="headerlink" title="11. 阶跃函数"></a>11. 阶跃函数</h2><p>通常只在单层感知器上有用，单层感知器是神经网络的早期形式，可用于分类线性可分的数据。这些函数可用于二元分类任务。</p>
<script type="math/tex; mode=display">
f(x) = 
\left\{\begin{matrix}
0, \quad  x < 0\\ 
1, \quad  x \geqslant 0
\end{matrix}\right.</script><!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/jieyue.png" alt="jieyue.png"></p>
<h2 id="12-APL函数"><a href="#12-APL函数" class="headerlink" title="12. APL函数"></a>12. APL函数</h2><p>APL（Adaptive Piecewise Linear，自适应分段线性）函数</p>
<script type="math/tex; mode=display">
f(x) = \max(x, 0) + \sum^S_{s=1}a_i^s\max(0, -x+b^s_i)</script><!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/apl.png" alt="apl.png"></p>
<p>选择激活函数时，优先选择ReLU及其变体，而不是sigmoid或tanh。同时ReLU及其变体训练起来更快。如果ReLU导致神经元死亡，使用Leaky ReLU或者ReLU的其他变体。sigmoid和tanh受到消失梯度问题的困扰，不应该在隐藏层中使用。隐藏层使用ReLU及其变体较好。使用容易求导和训练的激活函数。</p>
]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Theory</tag>
        <tag>Tensorflow</tag>
        <tag>Activation</tag>
      </tags>
  </entry>
  <entry>
    <title>卷积神经网络-coding</title>
    <url>/archives/467d5b64.html</url>
    <content><![CDATA[<h2 id="1-数据集说明"><a href="#1-数据集说明" class="headerlink" title="1. 数据集说明"></a>1. 数据集说明</h2><h3 id="1-1-多分类图像数据集-MNIST"><a href="#1-1-多分类图像数据集-MNIST" class="headerlink" title="1.1 多分类图像数据集-MNIST"></a>1.1 多分类图像数据集-MNIST</h3><ul>
<li>数据来源：<code>tf.keras.datasets.mnist.load_data</code>；</li>
<li>数据集形状：训练集60000个样本，测试集10000个样本，每个样本包括两个部分：图片数据和标签，每个样本的图片数据是一个$28 \times 28$的数组，即灰度图像，大小范围0~255，标签是图片对应的数字0~9，数据集中每个数字出现不是均等的，训练集<code>0: 5923, 1: 6742, 2: 5958, 3: 6131, 4: 5842, 5: 5421, 6: 5918, 7: 6265, 8: 5851, 9: 5949</code>，测试集<code>0: 980, 1: 1135, 2: 1032, 3: 1010, 4: 982, 5: 892, 6: 958, 7: 1028, 8: 974, 9: 1009</code>；</li>
<li>数据集划分：在训练集中随机选出20%数据作为验证集，剩下80%用于训练，验证集用于调整超参数以及网络架构；</li>
<li>性能度量：accuracy。</li>
</ul>
<h3 id="1-2-二分类图像数据集-kaggle-dog-amp-cat"><a href="#1-2-二分类图像数据集-kaggle-dog-amp-cat" class="headerlink" title="1.2 二分类图像数据集-kaggle dog &amp; cat"></a>1.2 二分类图像数据集-kaggle dog &amp; cat</h3><ul>
<li>数据来源：<a href="https://www.kaggle.com/c/dogs-vs-cats-redux-kernels-edition/data" target="_blank" rel="noopener"><code>Dogsvs.CatsRedux:KernelsEdition|Kaggle</code></a>；</li>
<li>数据集形状：训练集25000个样本，测试集12500个样本，每个样本都是一张彩色图片，大小不定，训练集中图片名称即包含标签信息，测试集无标签，最后需要提交预测的结果到kaggle进行评分，预测结果为图片标签为<code>dog</code>的概率；</li>
<li>数据集划分：在训练集中随机选出20%数据作为验证集，剩下80%用于训练，验证集用于调整超参数以及网络架构；</li>
<li>性能度量：交叉熵或accuracy。</li>
</ul>
<h3 id="1-3-多分类数据集-CIFAR-10"><a href="#1-3-多分类数据集-CIFAR-10" class="headerlink" title="1.3 多分类数据集-CIFAR-10"></a>1.3 多分类数据集-CIFAR-10</h3><ul>
<li>数据来源：<code>tf.keras.datasets.cifar10.load_data</code>；</li>
<li>数据集形状：训练集50000个样本，测试集10000个样本，每个样本包括两个部分：图片数据和标签，每个样本的图片数据是一个$32 \times 32 \times 3$的数组，即彩色图像，大小范围0~255，标签是图片对应的种类0~9，分别对应<code>airplane, automobile, bird, cat, deer, dog, frog, horse, ship, truck</code>，数据集中每个种类出现是均等的；</li>
<li>数据集划分：在训练集中随机选出20%数据作为验证集，剩下80%用于训练，验证集用于调整超参数以及网络架构；</li>
<li>性能度量：accuracy。</li>
</ul>
<a id="more"></a>
<h2 id="2-Tensorflow卷积神经网络应用"><a href="#2-Tensorflow卷积神经网络应用" class="headerlink" title="2. Tensorflow卷积神经网络应用"></a>2. Tensorflow卷积神经网络应用</h2><p>参考：</p>
<blockquote>
<p><a href="https://github.com/aymericdamien/TensorFlow-Examples/" target="_blank" rel="noopener"><code>Github-TensorFlow-Examples</code></a><br><a href="https://www.tensorflow.org/tutorials/" target="_blank" rel="noopener"><code>Tensorflow Tutorials</code></a></p>
</blockquote>
<h3 id="2-1-Eager模式实现手写数字分类"><a href="#2-1-Eager模式实现手写数字分类" class="headerlink" title="2.1 Eager模式实现手写数字分类"></a>2.1 Eager模式实现手写数字分类</h3><p><strong>数据集使用的是Tensorflow下的MNIST</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, print_function, division</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># Eager模式必须手动开启，2.0版本将会是默认，Eager模型可以边运行边观察结果</span></span><br><span class="line">tf.enable_eager_execution()</span><br><span class="line">tfe = tf.contrib.eager</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Tensorflow version: '</span>, tf.VERSION, <span class="string">'\n'</span>, <span class="string">'Eager mode: '</span>, tf.executing_eagerly())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置超参数</span></span><br><span class="line">learning_rate = <span class="number">1e-4</span></span><br><span class="line">num_steps = <span class="number">20000</span></span><br><span class="line">batch_size = <span class="number">64</span></span><br><span class="line">display_step = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">num_classes = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据</span></span><br><span class="line">(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'train size:'</span>, x_train.shape, y_train.shape)</span><br><span class="line">print(<span class="string">'test size:'</span>, x_test.shape, y_test.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里需要reshape图片，原始图片是28*28，这里转换成28*28*1，标签需要转换成onehot变量便于后面计算交叉熵，axis=-1，可以使标签转换成m*depth的形状</span></span><br><span class="line">x_train = tf.reshape(tf.cast(x_train, tf.float32), shape=[<span class="number">-1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>])</span><br><span class="line">x_test = tf.reshape(tf.cast(x_test, tf.float32), shape=[<span class="number">-1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>])</span><br><span class="line">y_train = tf.one_hot(y_train, depth=<span class="number">10</span>, axis=<span class="number">-1</span>)</span><br><span class="line">y_test = tf.one_hot(y_test, depth=<span class="number">10</span>, axis=<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造输入的dataset，注意Eager模式需要使用tfe调用迭代器Iterator</span></span><br><span class="line">dataset = tf.data.Dataset.from_tensor_slices((x_train, y_train)).shuffle(<span class="number">1000</span>).batch(batch_size)</span><br><span class="line">dataset_iter = tfe.Iterator(dataset)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个CNN类，Eager模式需要继承自tfe.Network，推荐废弃，使用keras取代</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CNN</span><span class="params">(tfe.Network)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(CNN, self).__init__()</span><br><span class="line">        self.conv2d_1 = self.track_layer(</span><br><span class="line">            tf.layers.Conv2D(<span class="number">32</span>, <span class="number">5</span>, padding=<span class="string">'SAME'</span>, activation=<span class="string">'relu'</span>))</span><br><span class="line">        self.conv2d_2 = self.track_layer(</span><br><span class="line">            tf.layers.Conv2D(<span class="number">64</span>, <span class="number">5</span>, padding=<span class="string">'SAME'</span>, activation=<span class="string">'relu'</span>))</span><br><span class="line">        self.maxpool = self.track_layer(</span><br><span class="line">            tf.layers.MaxPooling2D(<span class="number">2</span>, <span class="number">2</span>, padding=<span class="string">'SAME'</span>))</span><br><span class="line">        self.flatten = self.track_layer(</span><br><span class="line">            tf.layers.Flatten()) </span><br><span class="line">        self.fclayer = self.track_layer(</span><br><span class="line">            tf.layers.Dense(<span class="number">1024</span>, activation=<span class="string">'relu'</span>))</span><br><span class="line">        self.dropout = self.track_layer(</span><br><span class="line">            tf.layers.Dropout(<span class="number">0.5</span>))</span><br><span class="line">        self.out_layer = self.track_layer(</span><br><span class="line">            tf.layers.Dense(num_classes))</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, x, training=True)</span>:</span></span><br><span class="line">        x = self.conv2d_1(x)</span><br><span class="line">        x = self.maxpool(x)</span><br><span class="line">        x = self.conv2d_2(x)</span><br><span class="line">        x = self.maxpool(x)</span><br><span class="line">        x = self.flatten(x)</span><br><span class="line">        x = self.fclayer(x)</span><br><span class="line">        <span class="keyword">if</span> training:</span><br><span class="line">            x = self.dropout(x)</span><br><span class="line">        <span class="keyword">return</span> self.out_layer(x)</span><br><span class="line"></span><br><span class="line">cnn = CNN()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义损失函数，softmax_cross_entropy_with_logits_v2包含两步，首先计算softmax，再计算交叉熵，需要注意</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loss_fn</span><span class="params">(inference_fn, inputs, labels)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(</span><br><span class="line">        logits = inference_fn(inputs), labels = labels))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义计算准确率的函数，这里通过argmax取softmax中最高的那个概率的索引，也就是对应的数字</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">accuracy_fn</span><span class="params">(inference_fn, inputs, labels, training)</span>:</span></span><br><span class="line">    prediction = tf.nn.softmax(inference_fn(inputs, training))</span><br><span class="line">    correct_pred = tf.equal(tf.argmax(prediction, <span class="number">1</span>), tf.argmax(labels, <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> tf.reduce_mean(tf.cast(correct_pred, tf.float32))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Eager模式的梯度计算方式implicit_gradients</span></span><br><span class="line">optimizer = tf.train.AdamOptimizer(learning_rate=learning_rate)</span><br><span class="line">grad = tfe.implicit_gradients(loss_fn)</span><br><span class="line"></span><br><span class="line">average_loss = <span class="number">0.</span></span><br><span class="line">average_acc = <span class="number">0.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> step <span class="keyword">in</span> range(num_steps):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        d = dataset_iter.next()</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        dataset_iter = tfe.Iterator(dataset)</span><br><span class="line">        d = dataset_iter.next()</span><br><span class="line"></span><br><span class="line">    x_batch = d[<span class="number">0</span>]</span><br><span class="line">    y_batch = tf.cast(d[<span class="number">1</span>], tf.int64)</span><br><span class="line"></span><br><span class="line">    batch_loss = loss_fn(cnn, x_batch, y_batch)</span><br><span class="line">    average_loss += batch_loss</span><br><span class="line"></span><br><span class="line">    batch_accuracy = accuracy_fn(cnn, x_batch, y_batch, <span class="literal">False</span>)</span><br><span class="line">    average_acc += batch_accuracy</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> step == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">"Initial loss= &#123;:.6f&#125;"</span>.format(average_loss))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Eager模式参数梯度下降</span></span><br><span class="line">    optimizer.apply_gradients(grad(cnn, x_batch, y_batch))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (step + <span class="number">1</span>) % display_step == <span class="number">0</span> <span class="keyword">or</span> step == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> step &gt; <span class="number">0</span>:</span><br><span class="line">            average_loss /= display_step</span><br><span class="line">            average_acc /= display_step</span><br><span class="line">        print(<span class="string">"Step:"</span>, <span class="string">'%04d'</span> % (step + <span class="number">1</span>), <span class="string">" loss="</span>,</span><br><span class="line">              <span class="string">"&#123;:.6f&#125;"</span>.format(average_loss), <span class="string">" accuracy="</span>,</span><br><span class="line">              <span class="string">"&#123;:.4f&#125;"</span>.format(average_acc))</span><br><span class="line">        average_loss = <span class="number">0.</span></span><br><span class="line">        average_acc = <span class="number">0.</span></span><br><span class="line">        </span><br><span class="line">test_acc = accuracy_fn(cnn, x_test, y_test, <span class="literal">False</span>)</span><br><span class="line">print(<span class="string">'Testset accuracy: &#123;:.4f&#125;'</span>.format(test_acc))</span><br></pre></td></tr></table></figure>
<p>训练时间有点长</p>
<p><code>Testset accuracy: 0.9916</code></p>
<h3 id="2-2-Keras实现手写数字分类"><a href="#2-2-Keras实现手写数字分类" class="headerlink" title="2.2 Keras实现手写数字分类"></a>2.2 Keras实现手写数字分类</h3><p>使用Keras一方面可以简化代码，比如神经网络模型构建过程简化，Dropout层自动判断属于train阶段还是evaluate阶段，另一方面输出结果自动显示，不需要手动print。所以，推荐使用keras或者其他自定义estimator完成机器学习任务。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, print_function, division</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> layers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">'Tensorflow version: '</span>, tf.VERSION)</span><br><span class="line"></span><br><span class="line">learning_rate = <span class="number">1e-4</span></span><br><span class="line">steps_per_epoch = <span class="number">1000</span> <span class="comment"># 一般等于 样本总数/batch_size</span></span><br><span class="line">batch_size = <span class="number">64</span></span><br><span class="line">epochs = <span class="number">20</span> <span class="comment"># 训练轮数，即循环使用整个数据集的次数</span></span><br><span class="line"></span><br><span class="line">num_classes = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里缩放了图像的灰度值，为了加速收敛，为了满足model的输入形状，reshape为(28,28,1)，这里不需要将标签转换为onehot类型</span></span><br><span class="line">(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()</span><br><span class="line">x_train , x_test = x_train / <span class="number">255.</span> , x_test / <span class="number">255.</span></span><br><span class="line">x_train = tf.reshape(x_train, [<span class="number">-1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>])</span><br><span class="line">x_test = tf.reshape(x_test, [<span class="number">-1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>])</span><br><span class="line">print(<span class="string">'train size:'</span>, x_train.shape, y_train.shape)</span><br><span class="line">print(<span class="string">'test size:'</span>, x_test.shape, y_test.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建dataset，增加了repeat，是为了可以循环使用数据集</span></span><br><span class="line">dataset = tf.data.Dataset.from_tensor_slices((x_train, y_train)).shuffle(<span class="number">1000</span>).batch(batch_size).repeat()</span><br><span class="line"></span><br><span class="line"><span class="comment"># keras构建模型的方式就很简单了，直接选择需要的layer堆叠起来</span></span><br><span class="line">model = keras.Sequential([</span><br><span class="line">    <span class="comment"># Conv2D卷积层，需要定义filters，kernel_size，strides，padding，activation，首层还需要input_shape，必须是(height, width, channel)</span></span><br><span class="line">    layers.Conv2D(<span class="number">32</span>, <span class="number">5</span>, padding=<span class="string">'SAME'</span>, activation=<span class="string">'relu'</span>, input_shape=(<span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)),</span><br><span class="line">    <span class="comment"># MaxPool2D池化层，需要定义pool_size，strides，padding</span></span><br><span class="line">    layers.MaxPool2D(<span class="number">2</span>, padding=<span class="string">'SAME'</span>),</span><br><span class="line">    layers.Conv2D(<span class="number">64</span>, <span class="number">5</span>, padding=<span class="string">'SAME'</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    layers.MaxPool2D(<span class="number">2</span>, padding=<span class="string">'SAME'</span>),</span><br><span class="line"></span><br><span class="line">    layers.Flatten(),</span><br><span class="line">    layers.Dense(<span class="number">1024</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    <span class="comment"># Dropout丢弃层，这里的0.5是丢弃率，有些函数里是保留率，需要注意</span></span><br><span class="line">    layers.Dropout(<span class="number">0.5</span>),</span><br><span class="line">    layers.Dense(num_classes, activation=<span class="string">'softmax'</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置优化器optimizer，损失函数loss，这里使用sparse_categorical_crossentropy是因为label为数字，categorical_crossentropy对应label为onehot，以及evaluate时使用的准则metrics</span></span><br><span class="line">model.compile(</span><br><span class="line">    optimizer=tf.keras.optimizers.Adam(lr=learning_rate),</span><br><span class="line">    loss=<span class="string">'sparse_categorical_crossentropy'</span>,</span><br><span class="line">    metrics=[<span class="string">'accuracy'</span>]</span><br><span class="line">)</span><br><span class="line"><span class="comment"># summary会展示模型的结构，包括每一层参数个数，每一层输入形状</span></span><br><span class="line">model.summary()</span><br><span class="line"></span><br><span class="line">model.fit(dataset, epochs=epochs, steps_per_epoch=steps_per_epoch)</span><br><span class="line"></span><br><span class="line">model.evaluate(x_test, y_test, steps=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>使用CPU训练大概一个半小时</p>
<blockquote>
<p>loss: 0.0226<br>accuracy: 0.9925</p>
</blockquote>
<h3 id="2-3-基于Keras使用预训练的网络实现猫狗识别"><a href="#2-3-基于Keras使用预训练的网络实现猫狗识别" class="headerlink" title="2.3 基于Keras使用预训练的网络实现猫狗识别"></a>2.3 基于Keras使用预训练的网络实现猫狗识别</h3><p>首先导入需要的库，这里我们可以直接使用keras自带的已经训练好的网络，比如VGG16</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.applications.vgg16 <span class="keyword">import</span> VGG16</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> layers</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> Sequential </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os <span class="comment"># 用于文件路径</span></span><br><span class="line"><span class="keyword">import</span> shutil <span class="comment"># 用于文件复制</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'Tensorflow version: '</span>, tf.VERSION)</span><br></pre></td></tr></table></figure>
<p>然后设置一些可能会用到的超参数，这里训练集25000张图片等于<code>batch_size * steps_per_epoch</code>，以及图片长宽</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">learning_rate = <span class="number">1e-4</span></span><br><span class="line">batch_size = <span class="number">20</span></span><br><span class="line">epochs = <span class="number">30</span></span><br><span class="line">steps_per_epoch = <span class="number">1250</span></span><br><span class="line">img_height = <span class="number">150</span></span><br><span class="line">img_width = <span class="number">150</span></span><br><span class="line">img_channels = <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>为了测试代码，我们先不使用整个数据集，而是从原始数据集中划分出一小部分数据进行测试（需要修改上面的超参数），在确定代码无误后，我们需要修改这部分代码，因为训练集是完整的train文件夹</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 我们从原始的train文件夹下，分别选择猫和狗的前2000张作为训练集，之后的500作为验证集</span></span><br><span class="line">base_dir = <span class="string">'C:/Users/Admin/Downloads/dogvscat'</span></span><br><span class="line">original_dir = os.path.join(base_dir, <span class="string">'train'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择的图片存放在small文件夹下</span></span><br><span class="line">train_dir = os.path.join(base_dir, <span class="string">'small_train'</span>)</span><br><span class="line">eval_dir = os.path.join(base_dir, <span class="string">'small_eval'</span>)</span><br><span class="line">test_dir = os.path.join(base_dir, <span class="string">'test'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(train_dir):</span><br><span class="line">    os.mkdir(train_dir)</span><br><span class="line">    os.mkdir(eval_dir)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2500</span>):</span><br><span class="line">    name = <span class="string">'cat.&#123;&#125;.jpg'</span>.format(i)</span><br><span class="line">    src = os.path.join(original_dir, name)</span><br><span class="line">    <span class="keyword">if</span> i &lt; <span class="number">2000</span>:</span><br><span class="line">        dst = os.path.join(train_dir, name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dst = os.path.join(eval_dir, name)</span><br><span class="line">    shutil.copyfile(src, dst) <span class="comment"># 复制图片</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2500</span>):</span><br><span class="line">    name = <span class="string">'dog.&#123;&#125;.jpg'</span>.format(i)</span><br><span class="line">    src = os.path.join(original_dir, name)</span><br><span class="line">    <span class="keyword">if</span> i &lt; <span class="number">2000</span>:</span><br><span class="line">        dst = os.path.join(train_dir, name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dst = os.path.join(eval_dir, name)</span><br><span class="line">    shutil.copyfile(src, dst)</span><br></pre></td></tr></table></figure>
<p>准备输入数据，包括两部分，一个是图片绝对路径，一个是标签（dog为1，cat为0）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个shuffle函数，使用np.random.permutation生成随机序列，保证路径与标签一一对应</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unison_shuffled_copies</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    a = np.array(a)</span><br><span class="line">    b = np.array(b)</span><br><span class="line">    <span class="keyword">assert</span> len(a) == len(b)</span><br><span class="line">    p = np.random.permutation(len(a))</span><br><span class="line">    <span class="keyword">return</span> a[p], b[p]</span><br><span class="line"></span><br><span class="line">files = os.listdir(train_dir)</span><br><span class="line">train_files = [os.path.join(train_dir, name) <span class="keyword">for</span> name <span class="keyword">in</span> files]</span><br><span class="line">train_labels = np.array([<span class="string">'dog'</span> <span class="keyword">in</span> name <span class="keyword">for</span> name <span class="keyword">in</span> files]).astype(np.float)</span><br><span class="line">train_files, train_labels = unison_shuffled_copies(train_files, train_labels)</span><br><span class="line"></span><br><span class="line">files = os.listdir(eval_dir)</span><br><span class="line">eval_files = [os.path.join(eval_dir, name) <span class="keyword">for</span> name <span class="keyword">in</span> files]</span><br><span class="line">eval_labels = np.array([<span class="string">'dog'</span> <span class="keyword">in</span> name <span class="keyword">for</span> name <span class="keyword">in</span> files]).astype(np.float)</span><br><span class="line">eval_files, eval_labels = unison_shuffled_copies(eval_files, eval_labels)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个地方应该是bug，Tensorflow version 1.12.0，keras的model使用predict需要target和label，而label对于需要预测的数据来说无意义，随便设置为-1</span></span><br><span class="line">files = [<span class="string">'&#123;&#125;.jpg'</span>.format(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">12501</span>)]</span><br><span class="line">test_files = [os.path.join(test_dir, name) <span class="keyword">for</span> name <span class="keyword">in</span> files]</span><br><span class="line">test_labels = np.array([<span class="number">-1</span>] * len(files)).astype(np.float) <span class="comment"># 理论上不需要这个</span></span><br></pre></td></tr></table></figure>
<p>我们需要把图片绝对路径转换为图片数据，在输入函数中解决</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">image_input_fn</span><span class="params">(filenames, labels=None, shuffle=False, repeat_count=<span class="number">1</span>, batch_size=<span class="number">1</span>)</span>:</span></span><br><span class="line">    <span class="comment"># 读取数据，解码，resize图片，归一化（这里只是除以255）</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_read_img</span><span class="params">(filename, label=None)</span>:</span></span><br><span class="line">        img_raw = tf.read_file(filename)</span><br><span class="line">        img = tf.image.decode_image(img_raw, channels=<span class="number">3</span>)</span><br><span class="line">        img.set_shape([<span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>]) <span class="comment"># decode_image需要，decode_jpeg不需要</span></span><br><span class="line">        img = tf.image.resize_images(img, [img_height, img_width])</span><br><span class="line">        img = tf.divide(img, <span class="number">255.</span>)</span><br><span class="line">        img.set_shape([img_height, img_width, img_channels])</span><br><span class="line">        <span class="comment"># 理论上测试数据集的label为空，但是keras不允许，对应上面的bug</span></span><br><span class="line">        <span class="keyword">if</span> label <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> img</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> img, label</span><br><span class="line">    <span class="keyword">if</span> labels <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        dataset = tf.data.Dataset.from_tensor_slices(filenames)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dataset = tf.data.Dataset.from_tensor_slices((filenames, labels))</span><br><span class="line">    dataset = dataset.map(_read_img)</span><br><span class="line">    <span class="keyword">if</span> shuffle:</span><br><span class="line">        dataset = dataset.shuffle(<span class="number">2000</span>)</span><br><span class="line">    dataset = dataset.batch(batch_size).repeat(repeat_count)</span><br><span class="line">    <span class="keyword">return</span> dataset</span><br></pre></td></tr></table></figure>
<p>定义训练模型，我这里定义了两个注释掉的部分是使用预训练VGG16，VGG16的参数不变，仅训练连接层的参数，这样需要的内存比较小；没有注释的部分是自定义的model</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vgg16 = VGG16(</span></span><br><span class="line"><span class="comment">#     weights='imagenet',</span></span><br><span class="line"><span class="comment">#     include_top=False,</span></span><br><span class="line"><span class="comment">#     input_shape=(img_height, img_width, img_channels))</span></span><br><span class="line"><span class="comment"># model = Sequential([</span></span><br><span class="line"><span class="comment">#     vgg16,</span></span><br><span class="line"><span class="comment">#     layers.Flatten(),</span></span><br><span class="line"><span class="comment">#     layers.Dropout(0.5),</span></span><br><span class="line"><span class="comment">#     layers.Dense(1, activation='sigmoid')</span></span><br><span class="line"><span class="comment"># ])</span></span><br><span class="line"><span class="comment"># vgg16.trainable = False</span></span><br><span class="line"></span><br><span class="line">model = Sequential([</span><br><span class="line">    layers.Conv2D(<span class="number">32</span>, <span class="number">5</span>, <span class="number">2</span>, padding=<span class="string">'SAME'</span>, activation=<span class="string">'relu'</span>, input_shape=(img_height, img_width, img_channels)),</span><br><span class="line">    layers.MaxPool2D(strides=<span class="number">2</span>, padding=<span class="string">'SAME'</span>),</span><br><span class="line">    layers.Dropout(<span class="number">0.3</span>),</span><br><span class="line"></span><br><span class="line">    layers.Conv2D(<span class="number">64</span>, <span class="number">5</span>, <span class="number">2</span>, padding=<span class="string">'SAME'</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    layers.MaxPool2D(strides=<span class="number">2</span>, padding=<span class="string">'SAME'</span>),</span><br><span class="line">    layers.Dropout(<span class="number">0.3</span>),</span><br><span class="line">    </span><br><span class="line">    layers.Conv2D(<span class="number">128</span>, <span class="number">5</span>, <span class="number">2</span>, padding=<span class="string">'SAME'</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    layers.MaxPool2D(strides=<span class="number">2</span>, padding=<span class="string">'SAME'</span>),</span><br><span class="line">    layers.Dropout(<span class="number">0.3</span>),</span><br><span class="line"></span><br><span class="line">    layers.Flatten(),</span><br><span class="line">    layers.Dense(<span class="number">1024</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    layers.Dropout(<span class="number">0.5</span>),</span><br><span class="line">    layers.Dense(<span class="number">1</span>, activation=<span class="string">'sigmoid'</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">model.summary()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里使用Adam优化器，对比了RMSProp，Adam收敛速度快一些</span></span><br><span class="line">model.compile(</span><br><span class="line">    optimizer=tf.train.AdamOptimizer(learning_rate),</span><br><span class="line">    loss=<span class="string">'binary_crossentropy'</span>,</span><br><span class="line">    metrics=[<span class="string">'acc'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里调用了callback，保存checkpoint，monitor和save_best_only保证了只在val_loss减小的情况下保存模型参数，period指定了保存的时机，每5个epoch保存一次</span></span><br><span class="line">MODEL_DIR = <span class="string">'./model/'</span></span><br><span class="line">checkpoint_path = MODEL_DIR + <span class="string">"cp-&#123;epoch:04d&#125;.ckpt"</span></span><br><span class="line">cp_callback = tf.keras.callbacks.ModelCheckpoint(checkpoint_path, </span><br><span class="line">                                                monitor=<span class="string">'val_loss'</span>,</span><br><span class="line">                                                save_best_only=<span class="literal">True</span>,</span><br><span class="line">                                                verbose=<span class="number">1</span>, </span><br><span class="line">                                                save_weights_only=<span class="literal">True</span>, </span><br><span class="line">                                                period=<span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<p>开始训练，测试，保存最终结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 中途停止可以使用下面这行重新加载参数，cp-0015视具体情况修改</span></span><br><span class="line"><span class="comment"># model.load_weights('./model/cp-0015.ckpt')</span></span><br><span class="line"></span><br><span class="line">model.fit(</span><br><span class="line">    image_input_fn(</span><br><span class="line">        train_files, </span><br><span class="line">        train_labels,</span><br><span class="line">        shuffle=<span class="literal">True</span>, </span><br><span class="line">        repeat_count=epochs,</span><br><span class="line">        batch_size=batch_size), </span><br><span class="line">    validation_data=image_input_fn(</span><br><span class="line">        eval_files,</span><br><span class="line">        eval_labels,</span><br><span class="line">        shuffle=<span class="literal">False</span>,</span><br><span class="line">        repeat_count=epochs,</span><br><span class="line">        batch_size=<span class="number">50</span>), <span class="comment"># batch_size * validation_steps应当等于验证集大小</span></span><br><span class="line">    epochs=epochs,</span><br><span class="line">    steps_per_epoch=steps_per_epoch,</span><br><span class="line">    validation_steps=<span class="number">20</span>,</span><br><span class="line">    callbacks=[cp_callback])</span><br><span class="line"></span><br><span class="line">result = model.predict(</span><br><span class="line">    image_input_fn(</span><br><span class="line">        test_files,</span><br><span class="line">        test_labels, <span class="comment"># 这个地方是个bug</span></span><br><span class="line">        shuffle=<span class="literal">False</span>,</span><br><span class="line">        batch_size=<span class="number">50</span>), </span><br><span class="line">        steps=<span class="number">250</span>) <span class="comment"># batch_size * steps应当等于测试集大小，这里调整可以减小内存需要</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据kaggle的经验，限制结果在[0.005, 0.995]之间有助于增加分数</span></span><br><span class="line">path = <span class="string">'./submission1.csv'</span></span><br><span class="line">counter = range(<span class="number">1</span>, len(result) + <span class="number">1</span>)</span><br><span class="line">result = np.array(result, np.float)</span><br><span class="line">result = np.squeeze(result)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">limit</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0.005</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.005</span></span><br><span class="line">    <span class="keyword">elif</span> x &gt; <span class="number">0.995</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.995</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">'id'</span>: counter, <span class="string">'label'</span>: result&#125;)</span><br><span class="line">df[<span class="string">'label'</span>] = df[<span class="string">'label'</span>].map(limit)</span><br><span class="line"></span><br><span class="line">file = df.to_csv(path_or_buf=<span class="literal">None</span>, index=<span class="literal">None</span>)</span><br><span class="line"><span class="keyword">with</span> tf.gfile.Open(path, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(file)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Mission Accomplished!'</span>)</span><br></pre></td></tr></table></figure>
<p>在train完整训练集上，我们使用自定义model训练40轮后得到的分数为</p>
<blockquote>
<p>0.24594</p>
</blockquote>
<p>在train完整训练集上，我们使用VGG16训练10轮后得到的分数为（还有进步空间，前10%大约0.04左右，差距很大）</p>
<blockquote>
<p>0.21975</p>
</blockquote>
<p>但是使用VGG16时有一个明显的问题，设置VGG16模型的参数不参与训练，但是每一次迭代都在计算这一层，也就是说我们浪费了很多时间重复计算。所以接下来我们考虑先使用VGG16或者其他模型对训练集图片生成新的特征向量，再对特征向量建立输出，这样就只需要计算一次VGG16层。</p>
<h3 id="2-4-使用预训练模型fine-tuning完成猫狗识别"><a href="#2-4-使用预训练模型fine-tuning完成猫狗识别" class="headerlink" title="2.4 使用预训练模型fine-tuning完成猫狗识别"></a>2.4 使用预训练模型fine-tuning完成猫狗识别</h3><p>参考：</p>
<blockquote>
<p><a href="https://www.jianshu.com/p/1bc2abe88388" target="_blank" rel="noopener">Kaggle猫狗大战准确率Top 2%webapp部署</a></p>
</blockquote>
<p>代码根据参考做了修改和完善，补充了一些忽略掉的地方</p>
<p>首先，需要移动图片文件</p>
<p>原始图片路径：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dogvscat:</span><br><span class="line">    train:</span><br><span class="line">        cat.0.jpg</span><br><span class="line">        cat.1.jpg</span><br><span class="line">        ...</span><br><span class="line">        dog.0.jpg</span><br><span class="line">        ...</span><br><span class="line">    test:</span><br><span class="line">        1.jpg</span><br><span class="line">        2.jpg</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>
<p>需要变成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dogvscat:</span><br><span class="line">    img_train:</span><br><span class="line">        cat:</span><br><span class="line">            cat.0.jpg</span><br><span class="line">            ...</span><br><span class="line">        dog:</span><br><span class="line">            dog.0.jpg</span><br><span class="line">            ...</span><br><span class="line">    img_test:</span><br><span class="line">        test:</span><br><span class="line">            1.jpg</span><br><span class="line">            ...</span><br></pre></td></tr></table></figure>
<p>test数据很简单，复制一下就行了，对于train数据来说，需要将dog和cat分别放在各自的文件夹中，这里很简单，用<code>shutil.copyfile</code>拷贝就行了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line">path = <span class="string">'train'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">12500</span>):</span><br><span class="line">    name = <span class="string">'dog.&#123;&#125;.jpg'</span>.format(i)</span><br><span class="line">    src = os.path.join(path, name)</span><br><span class="line">    dst = os.path.join(os.path.join(<span class="string">'img_train'</span>, <span class="string">'dog'</span>), name)</span><br><span class="line">    shutil.copyfile(src, dst)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">12500</span>):</span><br><span class="line">    name = <span class="string">'cat.&#123;&#125;.jpg'</span>.format(i)</span><br><span class="line">    src = os.path.join(path, name)</span><br><span class="line">    dst = os.path.join(os.path.join(<span class="string">'img_train'</span>, <span class="string">'cat'</span>), name)</span><br><span class="line">    shutil.copyfile(src, dst)</span><br></pre></td></tr></table></figure>
<p>然后使用<code>ImageDataGenerator</code>和与训练好的模型生成特征向量并保存为<code>.h5</code>文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""使用预训练好的模型inception_v3，resnet50，mobilenet_v2或者其他模型也可以，单个模型也可以"""</span></span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> keras.applications <span class="keyword">import</span> inception_v3</span><br><span class="line"><span class="keyword">from</span> keras.applications <span class="keyword">import</span> resnet50</span><br><span class="line"><span class="keyword">from</span> keras.applications <span class="keyword">import</span> mobilenet_v2</span><br><span class="line"><span class="keyword">from</span> keras.preprocessing.image <span class="keyword">import</span> ImageDataGenerator</span><br><span class="line"><span class="keyword">import</span> h5py</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_gap</span><span class="params">(MODEL, image_size, preprocess_input)</span>:</span></span><br><span class="line">    width = image_size[<span class="number">0</span>]</span><br><span class="line">    height = image_size[<span class="number">1</span>]</span><br><span class="line">    input_tensor = keras.Input((height, width, <span class="number">3</span>))</span><br><span class="line">    x = input_tensor</span><br><span class="line">    <span class="comment"># include_top为False表示不需要最后的全连接层做预测，对于最后的数据使用avg池化处理</span></span><br><span class="line">    base_model = MODEL(input_tensor=x, weights=<span class="string">'imagenet'</span>, include_top=<span class="literal">False</span>, pooling=<span class="string">'avg'</span>)</span><br><span class="line">    model = keras.Model(inputs=base_model.input, outputs=base_model.output)</span><br><span class="line">    <span class="comment"># ImageDataGenerator需要对数据进行预处理，不同的模型预处理方式不同，比如可能需要减去均值等等，我们这里直接传入模型自带的preprocess_input方法</span></span><br><span class="line">    gen = ImageDataGenerator(preprocessing_function=preprocess_input)</span><br><span class="line">    <span class="comment"># flow_from_directory第一个参数表示图片路径，会自动寻找分类，这里指定classes=['cat', 'dog']，也就是cat标签为0，dog标签为1，class_mode='sparse'表示使用数字作为标签而不是onehot变量，batch_size视内存决定</span></span><br><span class="line">    train_generator = gen.flow_from_directory(<span class="string">"img_train"</span>, image_size, shuffle=<span class="literal">False</span>, classes=[<span class="string">'cat'</span>, <span class="string">'dog'</span>], class_mode=<span class="string">'sparse'</span>,</span><br><span class="line">                                              batch_size=<span class="number">50</span>)</span><br><span class="line">    <span class="comment"># 同理，test文件夹不需要标签，但是也必须放在test文件夹下，表示标签数量为1，flow_from_directory读取文件的方式是os.listdir()，文件名顺序与实际读取顺序不同，所以是个伏笔，需要记录这个信息</span></span><br><span class="line">    test_generator = gen.flow_from_directory(<span class="string">"img_test"</span>, image_size, shuffle=<span class="literal">False</span>,</span><br><span class="line">                                             batch_size=<span class="number">50</span>, class_mode=<span class="literal">None</span>)</span><br><span class="line">    <span class="comment"># 这里我处理了test数据的文件名，因为kaggle的结果是按照文件名顺序排序的，我们必须最后将预测结果排序后再上传</span></span><br><span class="line">    filenames = test_generator.filenames</span><br><span class="line">    index = [int(re.split(<span class="string">'[/.]'</span>, name)[<span class="number">1</span>]) <span class="keyword">for</span> name <span class="keyword">in</span> filenames]</span><br><span class="line">    <span class="comment"># compile是无效的，但是不调用无法执行predict_generator</span></span><br><span class="line">    model.compile(</span><br><span class="line">        loss=<span class="string">'binary_crossentropy'</span>,</span><br><span class="line">        optimizer=<span class="string">'adam'</span>,</span><br><span class="line">        metrics=[<span class="string">'acc'</span>]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    train = model.predict_generator(train_generator, verbose=<span class="number">1</span>)</span><br><span class="line">    test = model.predict_generator(test_generator, verbose=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 将结果写入h5文件中，注意保存了4种数据，这里MODEL.__name__是无效的，始终为wrapper，所以后面不能同时执行</span></span><br><span class="line">    <span class="keyword">with</span> h5py.File(<span class="string">"gap_%s.h5"</span>%MODEL.__name__) <span class="keyword">as</span> h:</span><br><span class="line">        h.create_dataset(<span class="string">"train"</span>, data=train)</span><br><span class="line">        h.create_dataset(<span class="string">"test"</span>, data=test)</span><br><span class="line">        h.create_dataset(<span class="string">"label"</span>, data=train_generator.classes)</span><br><span class="line">        h.create_dataset(<span class="string">"index"</span>, data=index)</span><br><span class="line"><span class="comment"># 每次执行一个模型的特征映射需要手动修改文件名</span></span><br><span class="line">write_gap(inception_v3.InceptionV3, (<span class="number">299</span>, <span class="number">299</span>), inception_v3.preprocess_input)</span><br><span class="line"></span><br><span class="line"><span class="comment"># write_gap(resnet50.ResNet50, (224, 224), resnet50.preprocess_input)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># write_gap(mobilenet_v2.MobileNetV2, (224, 224), mobilenet_v2.preprocess_input)</span></span><br></pre></td></tr></table></figure>
<p>可以使用以下代码测试<code>.h5</code>文件是否正确</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> h5py</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x_train = []</span><br><span class="line">y_train = []</span><br><span class="line">x_test = []</span><br><span class="line">x_index = []</span><br><span class="line"><span class="keyword">with</span> h5py.File(<span class="string">'gap_MobileNetV2.h5'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> h:</span><br><span class="line">    x_train.append(np.array(h[<span class="string">'train'</span>]))</span><br><span class="line">    x_test.append(np.array(h[<span class="string">'test'</span>]))</span><br><span class="line">    y_train = np.array(h[<span class="string">'label'</span>])</span><br><span class="line">    x_index = np.array(h[<span class="string">'index'</span>])</span><br><span class="line"></span><br><span class="line">x_train = np.array(x_train)</span><br><span class="line">x_test = np.array(x_test)</span><br><span class="line"></span><br><span class="line">print(x_train.shape, x_test.shape, y_train.shape, x_index.shape)</span><br><span class="line">print(x_train[<span class="number">0</span>], y_train[<span class="number">0</span>])</span><br><span class="line">print(x_index[:<span class="number">10</span>], x_test[:<span class="number">10</span>])</span><br></pre></td></tr></table></figure>
<p>这样我们得到了三个<code>.h5</code>文件，<code>gap_MobileNetV2.h5, gap_InceptionV3.h5, gap_ResNet50.h5</code>，然后读取数据，重新构建模型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#%%</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> h5py</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 这里在mac上如果需要使用三个模型需要设置这个环境变量，不然报错</span></span><br><span class="line"><span class="comment"># OMP: Error #15: Initializing libomp.dylib, but found libiomp5.dylib already initialized.</span></span><br><span class="line">os.environ[<span class="string">"KMP_DUPLICATE_LIB_OK"</span>]=<span class="string">"TRUE"</span></span><br><span class="line"></span><br><span class="line">x_train = []</span><br><span class="line">y_train = []</span><br><span class="line">x_test = []</span><br><span class="line">x_index = []</span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> [<span class="string">'gap_InceptionV3.h5'</span>, <span class="string">'gap_ResNet50.h5'</span>, <span class="string">'gap_MobileNetV2.h5'</span>]:</span><br><span class="line">    <span class="keyword">with</span> h5py.File(filename, <span class="string">'r'</span>) <span class="keyword">as</span> h:</span><br><span class="line">        x_train.append(np.array(h[<span class="string">'train'</span>]))</span><br><span class="line">        x_test.append(np.array(h[<span class="string">'test'</span>]))</span><br><span class="line">        y_train = np.array(h[<span class="string">'label'</span>])</span><br><span class="line">        x_index = np.array(h[<span class="string">'index'</span>])</span><br><span class="line"></span><br><span class="line">x_train = np.concatenate(x_train, axis=<span class="number">1</span>)</span><br><span class="line">x_test = np.concatenate(x_test, axis=<span class="number">1</span>)</span><br><span class="line">y_train = np.array(y_train)</span><br><span class="line">x_index = np.array(x_index)</span><br><span class="line">print(x_train.shape, x_test.shape, y_train.shape, x_index.shape)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unison_shuffled_copies</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    a = np.array(a)</span><br><span class="line">    b = np.array(b)</span><br><span class="line">    <span class="keyword">assert</span> len(a) == len(b)</span><br><span class="line">    p = np.random.permutation(len(a))</span><br><span class="line">    <span class="keyword">return</span> a[p], b[p]</span><br><span class="line"></span><br><span class="line">x_train, y_train = unison_shuffled_copies(x_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型很简单，将三个特征向量拼接起来，然后dropout，最后输出sigmoid</span></span><br><span class="line">model = keras.Sequential([</span><br><span class="line">    keras.layers.Dropout(<span class="number">0.5</span>, input_shape=(x_train.shape[<span class="number">-1</span>],)),</span><br><span class="line">    keras.layers.Dense(<span class="number">1</span>, activation=<span class="string">'sigmoid'</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">model.compile(</span><br><span class="line">    loss=<span class="string">'binary_crossentropy'</span>,</span><br><span class="line">    optimizer=tf.train.AdamOptimizer(),</span><br><span class="line">    metrics=[<span class="string">'acc'</span>]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">model.fit(</span><br><span class="line">    x=x_train,</span><br><span class="line">    y=y_train,</span><br><span class="line">    batch_size=<span class="number">128</span>,</span><br><span class="line">    epochs=<span class="number">8</span>,</span><br><span class="line">    validation_split=<span class="number">0.2</span>,</span><br><span class="line">    callbacks=[keras.callbacks.TensorBoard(log_dir=<span class="string">'./log'</span>)]</span><br><span class="line">)</span><br><span class="line">model.save(<span class="string">'model.h5'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line">result = model.predict(x_test)</span><br><span class="line"></span><br><span class="line">path = <span class="string">'./submission.csv'</span></span><br><span class="line">counter = x_index</span><br><span class="line">result = np.array(result, np.float)</span><br><span class="line">result = np.squeeze(result)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">limit</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0.005</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.005</span></span><br><span class="line">    <span class="keyword">elif</span> x &gt; <span class="number">0.995</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.995</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">'id'</span>: counter, <span class="string">'label'</span>: result&#125;)</span><br><span class="line">df[<span class="string">'label'</span>] = df[<span class="string">'label'</span>].map(limit)</span><br><span class="line">df = df.sort_values(by=<span class="string">'id'</span>) <span class="comment"># 这里对应上文提到的，根据文件名排序</span></span><br><span class="line">file = df.to_csv(path_or_buf=<span class="literal">None</span>, index=<span class="literal">None</span>)</span><br><span class="line"><span class="keyword">with</span> tf.gfile.Open(path, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(file)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Mission Accomplished!'</span>)</span><br></pre></td></tr></table></figure>
<p>kaggle分数：</p>
<blockquote>
<p>0.04071</p>
</blockquote>
<h3 id="2-5-自定义Estimator-CIFAR10识别"><a href="#2-5-自定义Estimator-CIFAR10识别" class="headerlink" title="2.5 自定义Estimator-CIFAR10识别"></a>2.5 自定义Estimator-CIFAR10识别</h3><p>参考：</p>
<blockquote>
<p><a href="https://www.tensorflow.org/tutorials/images/deep_cnn" target="_blank" rel="noopener">高级卷积神经网络</a><br><a href="https://github.com/tensorflow/models/tree/master/tutorials/image/cifar10_estimator" target="_blank" rel="noopener">CIFAR-10 ResNet</a></p>
</blockquote>
<p><strong>首先分析一下Google官网的CIFAR-10源码</strong></p>
<p><a href="http://zhoutao822.coding.me/2018/12/13/TensorFlow-CIFAR10/"><code>TnesorFlow-CIFAR10</code></a></p>
<p><strong>然后开始修改代码适配自己的环境</strong></p>
<p><code>generate_cifar10_tfrecords.py</code>少量修改</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ==============================================================================</span></span><br><span class="line"><span class="string">"""根据cifar10数据集生成TFRecords文件</span></span><br><span class="line"><span class="string">版本：</span></span><br><span class="line"><span class="string">    TensorFlow：1.12</span></span><br><span class="line"><span class="string">    Python：3.6.7</span></span><br><span class="line"><span class="string">使用keras.datasets.cifar10.load_data()获得数据，训练集中划分后20%作为验证集，</span></span><br><span class="line"><span class="string">通过TFRecordWriter写入到三个文件中：train.tfrecords, validation.tfrecords, </span></span><br><span class="line"><span class="string">eval.tfrecords，运行时参数data_dir指定生成文件的路径。</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"></span><br><span class="line">FLAGS = tf.app.flags.FLAGS</span><br><span class="line">tf.app.flags.DEFINE_string(</span><br><span class="line">    <span class="string">'data_dir'</span>, <span class="string">'./cifar10'</span>, <span class="string">'Directory to generate tfrecords to.'</span>)</span><br><span class="line">FILE_NAMES = [<span class="string">'train'</span>, <span class="string">'validation'</span>, <span class="string">'eval'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_int64_feature</span><span class="params">(value)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_bytes_feature</span><span class="params">(value)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_to_tfrecord</span><span class="params">(x, y, output_file)</span>:</span></span><br><span class="line">    <span class="string">"""生成tfrecords"""</span></span><br><span class="line">    <span class="keyword">with</span> tf.io.TFRecordWriter(output_file) <span class="keyword">as</span> writer:</span><br><span class="line">        data_length = len(y)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(data_length):</span><br><span class="line">            example = tf.train.Example(features=tf.train.Features(</span><br><span class="line">                feature=&#123;</span><br><span class="line">                    <span class="comment"># 通过keras获得的数据集的image是uint8类型的数据</span></span><br><span class="line">                    <span class="string">'image'</span>: _bytes_feature(x[i].tobytes()),</span><br><span class="line">                    <span class="comment"># 通过keras获得的数据集的label是[xxx, 1]的形状，类型int32，</span></span><br><span class="line">                    <span class="comment"># 需要y[i, 0]获得标签数值，类型转换为int64，</span></span><br><span class="line">                    <span class="comment"># tfrecords只支持Int64List，没有Int32List</span></span><br><span class="line">                    <span class="string">'label'</span>: _int64_feature(y[i, <span class="number">0</span>].astype(np.int64))</span><br><span class="line">                &#125;))</span><br><span class="line">            writer.write(example.SerializeToString())</span><br><span class="line">    print(<span class="string">'Generate &#123;&#125; success!'</span>.format(output_file))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(data_dir)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    参数：</span></span><br><span class="line"><span class="string">        data_dir：tfrecords文件保存路径</span></span><br><span class="line"><span class="string">    功能：</span></span><br><span class="line"><span class="string">        主函数，包括生成文件夹，获取数据，划分数据，生成tfrecords文件</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(data_dir):</span><br><span class="line">        os.mkdir(data_dir)</span><br><span class="line">    print(<span class="string">'Start to generate tfrecords in &#123;&#125;.'</span>.format(data_dir))</span><br><span class="line">    <span class="comment"># 调用keras.datasets.cifar10.load_data()获得数据</span></span><br><span class="line">    (x_train, y_train), (x_test, y_test) = keras.datasets.cifar10.load_data()</span><br><span class="line">    <span class="comment"># 这里划分前80%的数据做训练集，20%验证集，理论上要shuffle，</span></span><br><span class="line">    <span class="comment"># 这里我感觉不shuffle也行</span></span><br><span class="line">    split_index = int(len(y_train) * <span class="number">0.8</span>)</span><br><span class="line">    <span class="keyword">assert</span> len(x_train) == len(y_train)</span><br><span class="line">    val_data = x_train[split_index:], y_train[split_index:]</span><br><span class="line">    train_data = x_train[:split_index], y_train[:split_index]</span><br><span class="line">    eval_data = x_test, y_test</span><br><span class="line">    <span class="keyword">for</span> mode, data <span class="keyword">in</span> zip(FILE_NAMES, [train_data, val_data, eval_data]):</span><br><span class="line">        output_file = os.path.join(data_dir, mode + <span class="string">'.tfrecords'</span>)</span><br><span class="line">        x, y = data</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            os.remove(output_file)</span><br><span class="line">        <span class="keyword">except</span> OSError:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        convert_to_tfrecord(x, y, output_file)</span><br><span class="line">    print(<span class="string">'Done!'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 通过tensorflow的flags产生运行时参数，简单一些</span></span><br><span class="line">    main(FLAGS.data_dir)</span><br></pre></td></tr></table></figure>
<p><code>cifar10.py</code>少量修改</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ==============================================================================</span></span><br><span class="line"><span class="string">"""生成CIFAR10 Dataset</span></span><br><span class="line"><span class="string">版本：</span></span><br><span class="line"><span class="string">    TensorFlow：1.12</span></span><br><span class="line"><span class="string">    Python：3.6.7</span></span><br><span class="line"><span class="string">读取tfrecords文件，对图片和标签的数据类型进行调整，对图片进行扰乱处理，比如裁剪、</span></span><br><span class="line"><span class="string">亮度调整、对比度调整和翻转等操作，shuffle和batch，make_batch返回一个batch的数据，</span></span><br><span class="line"><span class="string">此部分代码改动较少。</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">HEIGHT = <span class="number">32</span></span><br><span class="line">WIDTH = <span class="number">32</span></span><br><span class="line">DEPTH = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cifar10DataSet</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""通过一个类来管理dataset"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data_dir, subset=<span class="string">'train'</span>, use_distortion=True)</span>:</span></span><br><span class="line">        self.data_dir = data_dir</span><br><span class="line">        self.subset = subset</span><br><span class="line">        self.use_distortion = use_distortion</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_filenames</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.subset <span class="keyword">in</span> [<span class="string">'train'</span>, <span class="string">'validation'</span>, <span class="string">'eval'</span>]:</span><br><span class="line">            <span class="keyword">return</span> [os.path.join(self.data_dir, self.subset + <span class="string">'.tfrecords'</span>)]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'Invalid data subset &#123;&#125;'</span>.format(self.subset))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parser</span><span class="params">(self, example)</span>:</span></span><br><span class="line">        <span class="string">"""读取tfrecords文件，类型转换，shape调整"""</span></span><br><span class="line">        features = tf.parse_single_example(</span><br><span class="line">            example, </span><br><span class="line">            features=&#123;</span><br><span class="line">                <span class="string">'image'</span>: tf.FixedLenFeature([], tf.string),</span><br><span class="line">                <span class="string">'label'</span>: tf.FixedLenFeature([], tf.int64)</span><br><span class="line">            &#125;)</span><br><span class="line">        image = tf.decode_raw(features[<span class="string">'image'</span>], tf.uint8)</span><br><span class="line">        image.set_shape([DEPTH * HEIGHT * WIDTH])</span><br><span class="line"></span><br><span class="line">        image = tf.cast(</span><br><span class="line">            tf.transpose(tf.reshape(image, [DEPTH, HEIGHT, WIDTH]), [<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>]),</span><br><span class="line">            tf.float32)</span><br><span class="line">        label = tf.cast(features[<span class="string">'label'</span>], tf.int32)</span><br><span class="line"></span><br><span class="line">        image = self.preprocess(image)</span><br><span class="line">        <span class="keyword">return</span> image, label</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preprocess</span><span class="params">(self, image)</span>:</span></span><br><span class="line">        <span class="string">"""对train数据集进行扰乱，包括裁剪、亮度调整、对比度调整和翻转等操作"""</span></span><br><span class="line">        <span class="keyword">if</span> self.subset == <span class="string">'train'</span> <span class="keyword">and</span> self.use_distortion:</span><br><span class="line">            image = tf.image.resize_image_with_crop_or_pad(image, <span class="number">40</span>, <span class="number">40</span>)</span><br><span class="line">            image = tf.random_crop(image, [HEIGHT, WIDTH, DEPTH]) <span class="comment"># 裁剪</span></span><br><span class="line">            image = tf.image.random_flip_left_right(image) <span class="comment"># 左右翻转</span></span><br><span class="line">            <span class="comment"># image = tf.image.random_brightness(image, max_delta=10) # 亮度</span></span><br><span class="line">            <span class="comment"># image = tf.image.random_contrast(image, lower=0.2, upper=1.8) # 对比度</span></span><br><span class="line">            <span class="comment"># image = tf.image.random_hue(image, max_delta=0.1) # 色相</span></span><br><span class="line">            <span class="comment"># image = tf.image.random_flip_up_down(image) # 上下翻转</span></span><br><span class="line">            <span class="comment"># image = tf.image.random_saturation(image, 0, 5) # 饱和度</span></span><br><span class="line">            <span class="comment"># image = tf.image.random_jpeg_quality(image, 50, 90) # 噪声，jpeg质量</span></span><br><span class="line">        <span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_batch</span><span class="params">(self, batch_size)</span>:</span></span><br><span class="line">        <span class="string">"""通过TFRecordDataset读取文件，shuffle和batch数据集，返回一个batch的数据"""</span></span><br><span class="line">        filenames = self.get_filenames()</span><br><span class="line">        dataset = tf.data.TFRecordDataset(filenames).repeat()</span><br><span class="line">        <span class="comment"># num_parallel_calls并行处理，加速IO</span></span><br><span class="line">        dataset = dataset.map(</span><br><span class="line">            self.parser, num_parallel_calls=batch_size)</span><br><span class="line">        <span class="comment"># 缓冲池的大小设计</span></span><br><span class="line">        <span class="keyword">if</span> self.subset == <span class="string">'train'</span>:</span><br><span class="line">            min_queue_examples = int(</span><br><span class="line">                Cifar10DataSet.num_examples_per_epoch(self.subset) * <span class="number">0.4</span>)</span><br><span class="line">            dataset = dataset.shuffle(buffer_size=min_queue_examples + <span class="number">3</span> * batch_size)</span><br><span class="line"></span><br><span class="line">        dataset = dataset.batch(batch_size)</span><br><span class="line">        iterator = dataset.make_one_shot_iterator()</span><br><span class="line">        image_batch, label_batch = iterator.get_next()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> image_batch, label_batch</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">num_examples_per_epoch</span><span class="params">(subset=<span class="string">'train'</span>)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> subset == <span class="string">'train'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">40000</span> <span class="comment"># 对源码进行了修改</span></span><br><span class="line">        <span class="keyword">elif</span> subset == <span class="string">'validation'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">10000</span></span><br><span class="line">        <span class="keyword">elif</span> subset == <span class="string">'eval'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">10000</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'Invalid data subset "%s"'</span> % subset)</span><br></pre></td></tr></table></figure>
<p>通过下面的代码测试<code>Cifar10DataSet</code>是否正确</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> cifar10</span><br><span class="line">sess = tf.Session()</span><br><span class="line"></span><br><span class="line">dataset = cifar10.Cifar10DataSet(<span class="string">'./cifar10'</span>)</span><br><span class="line">data = dataset.make_batch(<span class="number">16</span>)</span><br><span class="line">img, label = sess.run(data)</span><br><span class="line"></span><br><span class="line">print(img.shape, label)</span><br></pre></td></tr></table></figure>
<p><strong>这里我修改成了仅使用CPU训练的模式</strong></p>
<p><code>model_base.py</code>和<code>cifar10_model.py</code>没有修改，<code>cifar10_main_cpu.py</code>大量修改</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ==============================================================================</span></span><br><span class="line"><span class="string">"""使用CPU进行训练的main文件</span></span><br><span class="line"><span class="string">版本：</span></span><br><span class="line"><span class="string">    TensorFlow：1.12</span></span><br><span class="line"><span class="string">    Python：3.6.7</span></span><br><span class="line"><span class="string">定义运行时参数，仅使用CPU进行训练和验证</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cifar10</span><br><span class="line"><span class="keyword">import</span> cifar10_model</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">tf.logging.set_verbosity(tf.logging.INFO)</span><br><span class="line">FLAGS = tf.app.flags.FLAGS</span><br><span class="line">tf.app.flags.DEFINE_string(</span><br><span class="line">    <span class="string">'data_dir'</span>, <span class="string">'./cifar10'</span>, <span class="string">'Directory to generate tfrecords to.'</span>)</span><br><span class="line">tf.app.flags.DEFINE_string(</span><br><span class="line">    <span class="string">'job_dir'</span>, <span class="string">'./tmp'</span>, <span class="string">'Directory to generate model to.'</span>)</span><br><span class="line">tf.app.flags.DEFINE_integer(</span><br><span class="line">    <span class="string">'train_steps'</span>, <span class="number">1000</span>, <span class="string">'Train steps.'</span>)</span><br><span class="line">tf.app.flags.DEFINE_integer(</span><br><span class="line">    <span class="string">'eval_steps'</span>, <span class="number">100</span>, <span class="string">'Eval steps.'</span>)  <span class="comment"># eval_steps * eval_batch_size最好等于eval数据集大小</span></span><br><span class="line">tf.app.flags.DEFINE_integer(</span><br><span class="line">    <span class="string">'train_batch_size'</span>, <span class="number">128</span>, <span class="string">'Train batch size.'</span>)</span><br><span class="line">tf.app.flags.DEFINE_integer(</span><br><span class="line">    <span class="string">'eval_batch_size'</span>, <span class="number">100</span>, <span class="string">'Eval batch size.'</span>)    </span><br><span class="line">tf.app.flags.DEFINE_integer(</span><br><span class="line">    <span class="string">'num_layers'</span>, <span class="number">44</span>, <span class="string">'The number of layers of the model.'</span>) </span><br><span class="line">tf.app.flags.DEFINE_float(</span><br><span class="line">    <span class="string">'learning_rate'</span>, <span class="number">0.1</span>, <span class="string">'Learning rate value.'</span>) </span><br><span class="line">tf.app.flags.DEFINE_integer(</span><br><span class="line">    <span class="string">'decay_steps'</span>, <span class="number">1000</span>, <span class="string">'The number of learning rate decay steps.'</span>)   </span><br><span class="line">tf.app.flags.DEFINE_float(</span><br><span class="line">    <span class="string">'decay_rate'</span>, <span class="number">0.9</span>, <span class="string">'Decay rate value.'</span>)   </span><br><span class="line">tf.app.flags.DEFINE_boolean(</span><br><span class="line">    <span class="string">'use_distortion_for_training'</span>, <span class="literal">True</span>, <span class="string">'If doing image distortion for training.'</span>) </span><br><span class="line">tf.app.flags.DEFINE_float(</span><br><span class="line">    <span class="string">'batch_norm_decay'</span>, <span class="number">0.997</span>, <span class="string">'Decay for batch norm.'</span>)   </span><br><span class="line">tf.app.flags.DEFINE_float(</span><br><span class="line">    <span class="string">'batch_norm_epsilon'</span>, <span class="number">1e-5</span>, <span class="string">'Epsilon for batch norm.'</span>)   </span><br><span class="line">tf.app.flags.DEFINE_integer(</span><br><span class="line">    <span class="string">'num_inter_threads'</span>, <span class="number">6</span>, <span class="string">'Number of threads to use for inter-op parallelism.'</span>)</span><br><span class="line">tf.app.flags.DEFINE_integer(</span><br><span class="line">    <span class="string">'num_intra_threads'</span>, <span class="number">6</span>, <span class="string">'Number of threads to use for intra-op parallelism.'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_model_fn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""返回Estimator的model_fn"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_resnet_model_fn</span><span class="params">(features, labels, mode, params)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        返回包含Resnet模型的EstimatorSpec，只有train和evaluate方法，</span></span><br><span class="line"><span class="string">        没有predict方法，优化器使用Adam，learning rate会自动衰减</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            features：一个batch的image数据</span></span><br><span class="line"><span class="string">            labels：一个batch的label数据</span></span><br><span class="line"><span class="string">            mode：调用train还是evaluate</span></span><br><span class="line"><span class="string">            params：其他运行参数</span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            tf.estimator.EstimatorSpec</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        is_training = (mode == tf.estimator.ModeKeys.TRAIN)</span><br><span class="line">        decay_steps = params[<span class="string">'decay_steps'</span>] <span class="comment"># 学习率衰减的steps</span></span><br><span class="line">        decay_rate = params[<span class="string">'decay_rate'</span>] <span class="comment"># 学习率衰减率</span></span><br><span class="line">        learning_rate = params[<span class="string">'learning_rate'</span>]</span><br><span class="line"></span><br><span class="line">        loss, preds = _calc_fn(</span><br><span class="line">            is_training, features, labels,</span><br><span class="line">            params[<span class="string">'num_layers'</span>], params[<span class="string">'batch_norm_decay'</span>],</span><br><span class="line">            params[<span class="string">'batch_norm_epsilon'</span>])</span><br><span class="line">        <span class="comment"># batch_norm需要更新</span></span><br><span class="line">        update_ops = tf.get_collection(tf.GraphKeys.UPDATE_OPS)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 使用tf.train.exponential_decay实现学习率衰减，</span></span><br><span class="line">        <span class="comment"># 以默认情况，80000steps后学习率衰减为0.0002，与原始代码近似</span></span><br><span class="line">        learning_rate = tf.train.exponential_decay(</span><br><span class="line">            learning_rate=learning_rate,</span><br><span class="line">            global_step=tf.train.get_global_step(),</span><br><span class="line">            decay_steps=decay_steps,</span><br><span class="line">            decay_rate=decay_rate</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># tensor_to_log是dict类型，且key为tensor的name</span></span><br><span class="line">        avg_loss = tf.reduce_mean(loss)</span><br><span class="line">        avg_loss = tf.identity(avg_loss, name=<span class="string">'loss'</span>)</span><br><span class="line">        tensor_to_log = &#123;<span class="string">'learning_rate'</span>: learning_rate, <span class="string">'loss'</span>: avg_loss&#125;</span><br><span class="line">        logging_hook = tf.train.LoggingTensorHook(</span><br><span class="line">            tensors=tensor_to_log, every_n_iter=<span class="number">100</span>)</span><br><span class="line">        </span><br><span class="line">        counter_hook = tf.train.StepCounterHook(every_n_steps=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">        train_hooks = [logging_hook, counter_hook]</span><br><span class="line"></span><br><span class="line">        optimizer = tf.train.AdamOptimizer(learning_rate=learning_rate)</span><br><span class="line"></span><br><span class="line">        train_op = [</span><br><span class="line">            optimizer.minimize(</span><br><span class="line">                loss, global_step=tf.train.get_global_step())</span><br><span class="line">        ]</span><br><span class="line">        train_op.extend(update_ops)</span><br><span class="line">        train_op = tf.group(*train_op)</span><br><span class="line"></span><br><span class="line">        predictions = &#123;</span><br><span class="line">            <span class="string">'classes'</span>: preds[<span class="string">'classes'</span>],</span><br><span class="line">            <span class="string">'probabilities'</span>: preds[<span class="string">'probabilities'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        metrics = &#123;</span><br><span class="line">            <span class="string">'accuracy'</span>:</span><br><span class="line">                tf.metrics.accuracy(labels, predictions[<span class="string">'classes'</span>])</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tf.estimator.EstimatorSpec(</span><br><span class="line">            mode=mode,</span><br><span class="line">            predictions=predictions,</span><br><span class="line">            loss=loss,</span><br><span class="line">            train_op=train_op,</span><br><span class="line">            training_hooks=train_hooks,</span><br><span class="line">            eval_metric_ops=metrics)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _resnet_model_fn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_calc_fn</span><span class="params">(is_training, feature, label, </span></span></span><br><span class="line"><span class="function"><span class="params">            num_layers, batch_norm_decay, batch_norm_epsilon)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    获取model，简单计算</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        is_training：判断是train还是evaluate</span></span><br><span class="line"><span class="string">        feature：一个batch的image数据</span></span><br><span class="line"><span class="string">        label：一个batch的label数据</span></span><br><span class="line"><span class="string">        num_layers：Resnet层数</span></span><br><span class="line"><span class="string">        batch_norm_decay：Resnet参数</span></span><br><span class="line"><span class="string">        batch_norm_epsilon：Resnet参数</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        loss：一个batch的softmax_cross_entropy</span></span><br><span class="line"><span class="string">        pred：字典类型包括一个batch的标签和概率</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    model = cifar10_model.ResNetCifar10(</span><br><span class="line">        num_layers,</span><br><span class="line">        batch_norm_decay=batch_norm_decay,</span><br><span class="line">        batch_norm_epsilon=batch_norm_epsilon,</span><br><span class="line">        is_training=is_training,</span><br><span class="line">        data_format=<span class="string">'channels_last'</span>)</span><br><span class="line">    logits = model.forward_pass(feature, input_data_format=<span class="string">'channels_last'</span>)</span><br><span class="line">    pred = &#123;</span><br><span class="line">        <span class="string">'classes'</span>: tf.argmax(input=logits, axis=<span class="number">1</span>),</span><br><span class="line">        <span class="string">'probabilities'</span>: tf.nn.softmax(logits)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    loss = tf.losses.sparse_softmax_cross_entropy(</span><br><span class="line">        logits=logits, labels=label)</span><br><span class="line">    <span class="keyword">return</span> loss, pred</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">input_fn</span><span class="params">(data_dir,</span></span></span><br><span class="line"><span class="function"><span class="params">            subset,</span></span></span><br><span class="line"><span class="function"><span class="params">            batch_size,</span></span></span><br><span class="line"><span class="function"><span class="params">            use_distortion_for_training=True)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    输入函数，可以用于train数据集合eval数据集</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        data_dir：tfrecords文件所在的文件夹</span></span><br><span class="line"><span class="string">        subset：判断是train还是evaluate</span></span><br><span class="line"><span class="string">        batch_size：一个batch的大小</span></span><br><span class="line"><span class="string">        use_distortion_for_training：是否对数据进行扰动</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        image_batch：一个batch的image数据</span></span><br><span class="line"><span class="string">        label_batch：一个batch的label数据</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    use_distortion = subset == <span class="string">'train'</span> <span class="keyword">and</span> use_distortion_for_training</span><br><span class="line">    dataset = cifar10.Cifar10DataSet(data_dir, subset, use_distortion)</span><br><span class="line">    image_batch, label_batch = dataset.make_batch(batch_size)</span><br><span class="line">    <span class="keyword">return</span> image_batch, label_batch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(flags)</span>:</span></span><br><span class="line">    <span class="comment"># 为了调用多线程运行，需要使用tf.ConfigProto，</span></span><br><span class="line">    <span class="comment"># device_count指定最多使用多少devices，比如CPU，最多仅支持1；</span></span><br><span class="line">    <span class="comment"># 如果有多个GPU，可以指定最多使用其中的多少个，键值对形式</span></span><br><span class="line">    <span class="comment"># intra_op_parallelism_threads 控制运算符op内部的并行</span></span><br><span class="line">    <span class="comment"># inter_op_parallelism_threads 控制多个运算符op之间的并行计算</span></span><br><span class="line">    <span class="comment"># 线程数最好根据CPU的核心数来决定</span></span><br><span class="line">    run_config = tf.ConfigProto(</span><br><span class="line">        device_count=&#123;<span class="string">"CPU"</span>: <span class="number">1</span>&#125;,</span><br><span class="line">        intra_op_parallelism_threads=flags.num_intra_threads,</span><br><span class="line">        inter_op_parallelism_threads=flags.num_inter_threads)</span><br><span class="line">    <span class="comment"># tf.ConfigProto不能直接添加到Estimator中，</span></span><br><span class="line">    <span class="comment"># 需要使用tf.estimator.RunConfig包裹一下，顺便指定模型存储路径model_dir</span></span><br><span class="line">    config = tf.estimator.RunConfig(</span><br><span class="line">        model_dir=flags.job_dir,</span><br><span class="line">        session_config=run_config)</span><br><span class="line">    <span class="comment"># tf.estimator.Estimator的params必须是dict类型</span></span><br><span class="line">    classifier = tf.estimator.Estimator(</span><br><span class="line">        model_fn=get_model_fn(),</span><br><span class="line">        config=config,</span><br><span class="line">        params=&#123;</span><br><span class="line">            <span class="string">'decay_steps'</span>: flags.decay_steps,</span><br><span class="line">            <span class="string">'decay_rate'</span>: flags.decay_rate,</span><br><span class="line">            <span class="string">'num_layers'</span>: flags.num_layers,</span><br><span class="line">            <span class="string">'batch_norm_decay'</span>: flags.batch_norm_decay,</span><br><span class="line">            <span class="string">'batch_norm_epsilon'</span>: flags.batch_norm_epsilon,</span><br><span class="line">            <span class="string">'train_batch_size'</span>: flags.train_batch_size,</span><br><span class="line">            <span class="string">'learning_rate'</span>: flags.learning_rate</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="comment"># 循环多次以观察eval的变化，防止过拟合</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line">        classifier.train(input_fn=<span class="keyword">lambda</span>: input_fn(</span><br><span class="line">            flags.data_dir, <span class="string">'train'</span>, flags.train_batch_size), </span><br><span class="line">            steps=flags.train_steps)</span><br><span class="line">        classifier.evaluate(input_fn=<span class="keyword">lambda</span>: input_fn(</span><br><span class="line">            flags.data_dir, <span class="string">'eval'</span>, flags.eval_batch_size),</span><br><span class="line">            steps=flags.eval_steps)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(FLAGS.data_dir):</span><br><span class="line">        os.mkdir(FLAGS.data_dir)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(FLAGS.job_dir):</span><br><span class="line">        os.mkdir(FLAGS.job_dir)        </span><br><span class="line">    main(FLAGS)</span><br></pre></td></tr></table></figure>
<p>首先通过<code>generate_cifar10_tfrecords.py</code>生成tfrecords文件，然后运行<code>cifar10_main_cpu.py</code>，同时可以自行指定各种参数，也可以使用默认值。</p>
<hr>
<p>修改代码以适配多GPU环境，<code>cifar10_main_gpu.py</code>在源码的基础上小作修改</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ==============================================================================</span></span><br><span class="line"><span class="string">"""使用GPU进行训练的main文件，包括分布式，实际功能未测试</span></span><br><span class="line"><span class="string">版本：</span></span><br><span class="line"><span class="string">    TensorFlow：1.12</span></span><br><span class="line"><span class="string">    Python：3.6.7</span></span><br><span class="line"><span class="string">定义运行时参数，仅使用GPU进行训练和验证</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cifar10</span><br><span class="line"><span class="keyword">import</span> cifar10_model</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">tf.logging.set_verbosity(tf.logging.INFO)</span><br><span class="line">FLAGS = tf.app.flags.FLAGS</span><br><span class="line">tf.app.flags.DEFINE_string(</span><br><span class="line">    <span class="string">'data_dir'</span>, <span class="string">'./cifar10'</span>, <span class="string">'Directory to generate tfrecords to.'</span>)</span><br><span class="line">tf.app.flags.DEFINE_string(</span><br><span class="line">    <span class="string">'job_dir'</span>, <span class="string">'./tmp1'</span>, <span class="string">'Directory to generate model to.'</span>)</span><br><span class="line">tf.app.flags.DEFINE_string(</span><br><span class="line">    <span class="string">'variable_strategy'</span>, <span class="string">'CPU'</span>, <span class="string">'Where to locate variable operations'</span>)</span><br><span class="line">tf.app.flags.DEFINE_integer(</span><br><span class="line">    <span class="string">'train_steps'</span>, <span class="number">20000</span>, <span class="string">'Train steps.'</span>)</span><br><span class="line">tf.app.flags.DEFINE_integer(</span><br><span class="line">    <span class="string">'num_gpus'</span>, <span class="number">0</span>, <span class="string">'The number of gpus used. Uses only CPU if set to 0.'</span>)</span><br><span class="line">tf.app.flags.DEFINE_integer(</span><br><span class="line">    <span class="string">'eval_steps'</span>, <span class="number">100</span>, <span class="string">'Eval steps.'</span>)  <span class="comment"># eval_steps * eval_batch_size最好等于eval数据集大小</span></span><br><span class="line">tf.app.flags.DEFINE_integer(</span><br><span class="line">    <span class="string">'train_batch_size'</span>, <span class="number">128</span>, <span class="string">'Train batch size.'</span>)</span><br><span class="line">tf.app.flags.DEFINE_integer(</span><br><span class="line">    <span class="string">'eval_batch_size'</span>, <span class="number">100</span>, <span class="string">'Eval batch size.'</span>)    </span><br><span class="line">tf.app.flags.DEFINE_integer(</span><br><span class="line">    <span class="string">'num_layers'</span>, <span class="number">44</span>, <span class="string">'The number of layers of the model.'</span>) </span><br><span class="line">tf.app.flags.DEFINE_float(</span><br><span class="line">    <span class="string">'learning_rate'</span>, <span class="number">0.1</span>, <span class="string">'Learning rate value.'</span>) </span><br><span class="line">tf.app.flags.DEFINE_float(</span><br><span class="line">    <span class="string">'weight_decay'</span>, <span class="number">2e-4</span>, <span class="string">'Weight decay for convolutions.'</span>) </span><br><span class="line">tf.app.flags.DEFINE_integer(</span><br><span class="line">    <span class="string">'decay_steps'</span>, <span class="number">2000</span>, <span class="string">'The number of learning rate decay steps.'</span>)   </span><br><span class="line">tf.app.flags.DEFINE_float(</span><br><span class="line">    <span class="string">'decay_rate'</span>, <span class="number">0.96</span>, <span class="string">'Decay rate value.'</span>)   </span><br><span class="line">tf.app.flags.DEFINE_string(</span><br><span class="line">    <span class="string">'data_format'</span>, <span class="literal">None</span>, <span class="string">"""If not set, the data format best for the training device is used. </span></span><br><span class="line"><span class="string">    Allowed values: channels_first (NCHW) channels_last (NHWC)."""</span>)</span><br><span class="line">tf.app.flags.DEFINE_boolean(</span><br><span class="line">    <span class="string">'log_device_placement'</span>, <span class="literal">False</span>, <span class="string">'Whether to log device placement.'</span>) </span><br><span class="line">tf.app.flags.DEFINE_boolean(</span><br><span class="line">    <span class="string">'sync'</span>, <span class="literal">False</span>, <span class="string">'If present when running in a distributed environment will run on sync mode.'</span>) </span><br><span class="line">tf.app.flags.DEFINE_boolean(</span><br><span class="line">    <span class="string">'use_distortion_for_training'</span>, <span class="literal">True</span>, <span class="string">'If doing image distortion for training.'</span>) </span><br><span class="line">tf.app.flags.DEFINE_float(</span><br><span class="line">    <span class="string">'batch_norm_decay'</span>, <span class="number">0.997</span>, <span class="string">'Decay for batch norm.'</span>)   </span><br><span class="line">tf.app.flags.DEFINE_float(</span><br><span class="line">    <span class="string">'batch_norm_epsilon'</span>, <span class="number">1e-5</span>, <span class="string">'Epsilon for batch norm.'</span>)   </span><br><span class="line">tf.app.flags.DEFINE_integer(</span><br><span class="line">    <span class="string">'num_inter_threads'</span>, <span class="number">6</span>, <span class="string">'Number of threads to use for inter-op parallelism.'</span>)</span><br><span class="line">tf.app.flags.DEFINE_integer(</span><br><span class="line">    <span class="string">'num_intra_threads'</span>, <span class="number">6</span>, <span class="string">'Number of threads to use for intra-op parallelism.'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_model_fn</span><span class="params">(num_gpus, variable_strategy, num_workers)</span>:</span></span><br><span class="line">    <span class="string">"""返回Estimator的model_fn"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_resnet_model_fn</span><span class="params">(features, labels, mode, params)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        返回包含Resnet模型的EstimatorSpec，只有train和evaluate方法，</span></span><br><span class="line"><span class="string">        没有predict方法，优化器使用Adam，learning rate会自动衰减</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            features：一个batch的image数据</span></span><br><span class="line"><span class="string">            labels：一个batch的label数据</span></span><br><span class="line"><span class="string">            mode：调用train还是evaluate</span></span><br><span class="line"><span class="string">            params：其他运行参数</span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            tf.estimator.EstimatorSpec</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        is_training = (mode == tf.estimator.ModeKeys.TRAIN)</span><br><span class="line">        decay_steps = params[<span class="string">'decay_steps'</span>] <span class="comment"># 学习率衰减的steps</span></span><br><span class="line">        decay_rate = params[<span class="string">'decay_rate'</span>] <span class="comment"># 学习率衰减率</span></span><br><span class="line">        learning_rate = params[<span class="string">'learning_rate'</span>]</span><br><span class="line">        weight_decay = params[<span class="string">'weight_decay'</span>]</span><br><span class="line">        <span class="comment"># 多GPU需要分别计算不同设备的loss和梯度，再综合起来</span></span><br><span class="line">        tower_features = features</span><br><span class="line">        tower_labels = labels</span><br><span class="line">        tower_losses = []</span><br><span class="line">        tower_gradvars = []</span><br><span class="line">        tower_preds = []</span><br><span class="line"></span><br><span class="line">        data_format = params[<span class="string">'data_format'</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data_format:</span><br><span class="line">            <span class="keyword">if</span> num_gpus == <span class="number">0</span>:</span><br><span class="line">                data_format = <span class="string">'channels_last'</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                data_format = <span class="string">'channels_first'</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> num_gpus == <span class="number">0</span>:</span><br><span class="line">            num_devices = <span class="number">1</span></span><br><span class="line">            device_type = <span class="string">'cpu'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            num_devices = num_gpus</span><br><span class="line">            device_type = <span class="string">'gpu'</span></span><br><span class="line">        <span class="comment"># Todo GPU部分代码没有测试，不知道是不是对的</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(num_devices):</span><br><span class="line">            worker_device = <span class="string">'/&#123;&#125;:&#123;&#125;'</span>.format(device_type, i)</span><br><span class="line">            <span class="keyword">if</span> variable_strategy == <span class="string">'CPU'</span>:</span><br><span class="line">                device_setter = tf.train.replica_device_setter(</span><br><span class="line">                    worker_device=worker_device)</span><br><span class="line">            <span class="keyword">elif</span> variable_strategy == <span class="string">'GPU'</span>:</span><br><span class="line">                device_setter = tf.train.replica_device_setter(</span><br><span class="line">                    worker_device=worker_device,</span><br><span class="line">                    ps_strategy=tf.contrib.training.GreedyLoadBalancingStrategy(</span><br><span class="line">                        num_gpus, tf.contrib.training.byte_size_load_fn))</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'resnet'</span>, reuse=bool(i != <span class="number">0</span>)):</span><br><span class="line">                <span class="keyword">with</span> tf.name_scope(<span class="string">'tower_%d'</span> % i) <span class="keyword">as</span> name_scope:</span><br><span class="line">                    <span class="keyword">with</span> tf.device(device_setter):</span><br><span class="line">                        loss, gradvars, preds = _calc_fn(</span><br><span class="line">                            is_training, weight_decay, tower_features[i], </span><br><span class="line">                            tower_labels[i], data_format, params[<span class="string">'num_layers'</span>], </span><br><span class="line">                            params[<span class="string">'batch_norm_decay'</span>], params[<span class="string">'batch_norm_epsilon'</span>])</span><br><span class="line">                        tower_losses.append(loss)</span><br><span class="line">                        tower_gradvars.append(gradvars)</span><br><span class="line">                        tower_preds.append(preds)</span><br><span class="line">                        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">                            <span class="comment"># batch_norm需要更新</span></span><br><span class="line">                            update_ops = tf.get_collection(</span><br><span class="line">                                tf.GraphKeys.UPDATE_OPS, name_scope)</span><br><span class="line">        </span><br><span class="line">        gradvars = []</span><br><span class="line">        <span class="keyword">with</span> tf.name_scope(<span class="string">'gradient_averaging'</span>):</span><br><span class="line">            all_grads = &#123;&#125;</span><br><span class="line">            <span class="keyword">for</span> grad, var <span class="keyword">in</span> itertools.chain(*tower_gradvars):</span><br><span class="line">                <span class="keyword">if</span> grad <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                    all_grads.setdefault(var, []).append(grad)</span><br><span class="line">            <span class="keyword">for</span> var, grads <span class="keyword">in</span> all_grads.items():</span><br><span class="line">                <span class="keyword">with</span> tf.device(var.device):</span><br><span class="line">                    <span class="keyword">if</span> len(grads) == <span class="number">1</span>:</span><br><span class="line">                        avg_grad = grads[<span class="number">0</span>]</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        avg_grad = tf.multiply(tf.add_n(grads), <span class="number">1.</span> / len(grads))</span><br><span class="line">                gradvars.append((avg_grad, var))</span><br><span class="line"></span><br><span class="line">        consolidation_device = <span class="string">'/gpu:0'</span> <span class="keyword">if</span> variable_strategy == <span class="string">'GPU'</span> <span class="keyword">else</span> <span class="string">'/cpu:0'</span></span><br><span class="line">        <span class="keyword">with</span> tf.device(consolidation_device):</span><br><span class="line">            <span class="comment"># 使用tf.train.exponential_decay实现学习率衰减</span></span><br><span class="line">            learning_rate = tf.train.exponential_decay(</span><br><span class="line">                learning_rate=learning_rate,</span><br><span class="line">                global_step=tf.train.get_global_step(),</span><br><span class="line">                decay_steps=decay_steps,</span><br><span class="line">                decay_rate=decay_rate</span><br><span class="line">            )</span><br><span class="line">            loss = tf.reduce_mean(tower_losses, name=<span class="string">'loss'</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># tensor_to_log是dict类型，且key为tensor的name</span></span><br><span class="line">            tensor_to_log = &#123;<span class="string">'learning_rate'</span>: learning_rate, <span class="string">'loss'</span>: loss&#125;</span><br><span class="line">            logging_hook = tf.train.LoggingTensorHook(</span><br><span class="line">                tensors=tensor_to_log, every_n_iter=<span class="number">100</span>)</span><br><span class="line">        </span><br><span class="line">            counter_hook = tf.train.StepCounterHook(every_n_steps=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">            train_hooks = [logging_hook, counter_hook]</span><br><span class="line"></span><br><span class="line">            optimizer = tf.train.AdamOptimizer(learning_rate=learning_rate)</span><br><span class="line">            <span class="comment"># Todo，分布式代码没有测试</span></span><br><span class="line">            <span class="keyword">if</span> params[<span class="string">'sync'</span>]:</span><br><span class="line">                optimizer = tf.train.SyncReplicasOptimizer(</span><br><span class="line">                    optimizer, replicas_to_aggregate=num_workers)</span><br><span class="line">                sync_replicas_hook = optimizer.make_session_run_hook(params[<span class="string">'is_chief'</span>])</span><br><span class="line">                train_hooks.append(sync_replicas_hook)</span><br><span class="line">            train_op = [</span><br><span class="line">                optimizer.apply_gradients(</span><br><span class="line">                    gradvars, global_step=tf.train.get_global_step())</span><br><span class="line">            ]</span><br><span class="line">            train_op.extend(update_ops)</span><br><span class="line">            train_op = tf.group(*train_op)</span><br><span class="line"></span><br><span class="line">            predictions = &#123;</span><br><span class="line">                <span class="string">'classes'</span>: </span><br><span class="line">                    tf.concat([p[<span class="string">'classes'</span>] <span class="keyword">for</span> p <span class="keyword">in</span> tower_preds], axis=<span class="number">0</span>),</span><br><span class="line">                <span class="string">'probabilities'</span>: </span><br><span class="line">                    tf.concat([p[<span class="string">'probabilities'</span>] <span class="keyword">for</span> p <span class="keyword">in</span> tower_preds], axis=<span class="number">0</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            stacked_labels = tf.concat(labels, axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">            metrics = &#123;</span><br><span class="line">                <span class="string">'accuracy'</span>:</span><br><span class="line">                    tf.metrics.accuracy(stacked_labels, predictions[<span class="string">'classes'</span>])</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> tf.estimator.EstimatorSpec(</span><br><span class="line">            mode=mode,</span><br><span class="line">            predictions=predictions,</span><br><span class="line">            loss=loss,</span><br><span class="line">            train_op=train_op,</span><br><span class="line">            training_hooks=train_hooks,</span><br><span class="line">            eval_metric_ops=metrics)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _resnet_model_fn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_calc_fn</span><span class="params">(is_training, weight_decay, feature, label, data_format,</span></span></span><br><span class="line"><span class="function"><span class="params">            num_layers, batch_norm_decay, batch_norm_epsilon)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    获取model，简单计算</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        is_training：判断是train还是evaluate</span></span><br><span class="line"><span class="string">        weight_decay：l2损失系数</span></span><br><span class="line"><span class="string">        feature：一个batch的image数据</span></span><br><span class="line"><span class="string">        label：一个batch的label数据</span></span><br><span class="line"><span class="string">        data_format：channels_last (NHWC) or channels_first (NCHW)</span></span><br><span class="line"><span class="string">        num_layers：Resnet层数</span></span><br><span class="line"><span class="string">        batch_norm_decay：Resnet参数</span></span><br><span class="line"><span class="string">        batch_norm_epsilon：Resnet参数</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        loss：一个batch的softmax_cross_entropy</span></span><br><span class="line"><span class="string">        pred：字典类型包括一个batch的标签和概率</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    model = cifar10_model.ResNetCifar10(</span><br><span class="line">        num_layers,</span><br><span class="line">        batch_norm_decay=batch_norm_decay,</span><br><span class="line">        batch_norm_epsilon=batch_norm_epsilon,</span><br><span class="line">        is_training=is_training,</span><br><span class="line">        data_format=data_format)</span><br><span class="line">    logits = model.forward_pass(feature, input_data_format=<span class="string">'channels_last'</span>)</span><br><span class="line">    pred = &#123;</span><br><span class="line">        <span class="string">'classes'</span>: tf.argmax(input=logits, axis=<span class="number">1</span>),</span><br><span class="line">        <span class="string">'probabilities'</span>: tf.nn.softmax(logits)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    loss = tf.losses.sparse_softmax_cross_entropy(</span><br><span class="line">        logits=logits, labels=label)</span><br><span class="line">    loss = tf.reduce_mean(loss)</span><br><span class="line"></span><br><span class="line">    model_params = tf.trainable_variables()</span><br><span class="line">    loss += weight_decay * tf.add_n([tf.nn.l2_loss(v) <span class="keyword">for</span> v <span class="keyword">in</span> model_params])</span><br><span class="line">    grad = tf.gradients(loss, model_params)</span><br><span class="line">    <span class="keyword">return</span> loss, zip(grad, model_params), pred</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">input_fn</span><span class="params">(data_dir,</span></span></span><br><span class="line"><span class="function"><span class="params">            subset,</span></span></span><br><span class="line"><span class="function"><span class="params">            num_shards,</span></span></span><br><span class="line"><span class="function"><span class="params">            batch_size,</span></span></span><br><span class="line"><span class="function"><span class="params">            use_distortion_for_training=True)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    输入函数，可以用于train数据集合eval数据集</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        data_dir：tfrecords文件所在的文件夹</span></span><br><span class="line"><span class="string">        subset：判断是train还是evaluate</span></span><br><span class="line"><span class="string">        batch_size：一个batch的大小</span></span><br><span class="line"><span class="string">        use_distortion_for_training：是否对数据进行扰动</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        image_batch：一个batch的image数据</span></span><br><span class="line"><span class="string">        label_batch：一个batch的label数据</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">with</span> tf.device(<span class="string">'/cpu:0'</span>):</span><br><span class="line">        use_distortion = subset == <span class="string">'train'</span> <span class="keyword">and</span> use_distortion_for_training</span><br><span class="line">        dataset = cifar10.Cifar10DataSet(data_dir, subset, use_distortion)</span><br><span class="line">        image_batch, label_batch = dataset.make_batch(batch_size)</span><br><span class="line">        <span class="keyword">if</span> num_shards &lt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> [image_batch], [label_batch] <span class="comment"># 必须返回list，对应_calc_fn的参数</span></span><br><span class="line">        <span class="comment"># 均分训练数据给不同的设备</span></span><br><span class="line">        image_batch = tf.unstack(image_batch, num=batch_size, axis=<span class="number">0</span>)</span><br><span class="line">        label_batch = tf.unstack(label_batch, num=batch_size, axis=<span class="number">0</span>)</span><br><span class="line">        feature_shards = [[] <span class="keyword">for</span> i <span class="keyword">in</span> range(num_shards)]</span><br><span class="line">        label_shards = [[] <span class="keyword">for</span> i <span class="keyword">in</span> range(num_shards)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(batch_size):</span><br><span class="line">            idx = i % num_shards</span><br><span class="line">            feature_shards[idx].append(image_batch[i])</span><br><span class="line">            label_shards[idx].append(label_batch[i])</span><br><span class="line">        feature_shards = [tf.parallel_stack(x) <span class="keyword">for</span> x <span class="keyword">in</span> feature_shards]</span><br><span class="line">        label_shards = [tf.parallel_stack(x) <span class="keyword">for</span> x <span class="keyword">in</span> label_shards]</span><br><span class="line">        <span class="keyword">return</span> feature_shards, label_shards</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(flags)</span>:</span></span><br><span class="line">    <span class="comment"># The env variable is on deprecation path, default is set to off.</span></span><br><span class="line">    os.environ[<span class="string">'TF_SYNC_ON_FINISH'</span>] = <span class="string">'0'</span></span><br><span class="line">    os.environ[<span class="string">'TF_ENABLE_WINOGRAD_NONFUSED'</span>] = <span class="string">'1'</span></span><br><span class="line">    <span class="comment"># 为了调用多线程运行，需要使用tf.ConfigProto，</span></span><br><span class="line">    <span class="comment"># device_count指定最多使用多少devices，比如CPU，最多仅支持1；</span></span><br><span class="line">    <span class="comment"># 如果有多个GPU，可以指定最多使用其中的多少个，键值对形式</span></span><br><span class="line">    <span class="comment"># intra_op_parallelism_threads 控制运算符op内部的并行</span></span><br><span class="line">    <span class="comment"># inter_op_parallelism_threads 控制多个运算符op之间的并行计算</span></span><br><span class="line">    run_config = tf.ConfigProto(</span><br><span class="line">        device_count=&#123;<span class="string">"CPU"</span>: <span class="number">1</span>, <span class="string">"GPU"</span>: <span class="number">0</span>&#125;,</span><br><span class="line">        allow_soft_placement=<span class="literal">True</span>, <span class="comment"># GPU显存相关，自动增加</span></span><br><span class="line">        log_device_placement=flags.log_device_placement,</span><br><span class="line">        gpu_options=tf.GPUOptions(force_gpu_compatible=<span class="literal">True</span>),</span><br><span class="line">        intra_op_parallelism_threads=flags.num_intra_threads,</span><br><span class="line">        inter_op_parallelism_threads=flags.num_inter_threads)</span><br><span class="line">    <span class="comment"># tf.ConfigProto不能直接添加到Estimator中，</span></span><br><span class="line">    <span class="comment"># 需要使用tf.estimator.RunConfig包裹一下，顺便指定模型存储路径model_dir</span></span><br><span class="line">    config = tf.estimator.RunConfig(</span><br><span class="line">        model_dir=flags.job_dir,</span><br><span class="line">        session_config=run_config)</span><br><span class="line">    <span class="comment"># tf.estimator.Estimator的params必须是dict类型</span></span><br><span class="line">    classifier = tf.estimator.Estimator(</span><br><span class="line">        model_fn=get_model_fn(</span><br><span class="line">            flags.num_gpus, </span><br><span class="line">            flags.variable_strategy, </span><br><span class="line">            config.num_worker_replicas <span class="keyword">or</span> <span class="number">1</span>),</span><br><span class="line">        config=config,</span><br><span class="line">        params=&#123;</span><br><span class="line">            <span class="string">'decay_steps'</span>: flags.decay_steps,</span><br><span class="line">            <span class="string">'decay_rate'</span>: flags.decay_rate,</span><br><span class="line">            <span class="string">'num_layers'</span>: flags.num_layers,</span><br><span class="line">            <span class="string">'weight_decay'</span>: flags.weight_decay,</span><br><span class="line">            <span class="string">'batch_norm_decay'</span>: flags.batch_norm_decay,</span><br><span class="line">            <span class="string">'batch_norm_epsilon'</span>: flags.batch_norm_epsilon,</span><br><span class="line">            <span class="string">'train_batch_size'</span>: flags.train_batch_size,</span><br><span class="line">            <span class="string">'learning_rate'</span>: flags.learning_rate,</span><br><span class="line">            <span class="string">'data_format'</span>: flags.data_format,</span><br><span class="line">            <span class="string">'sync'</span>: flags.sync,</span><br><span class="line">            <span class="string">'is_chief'</span>:config.is_chief</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="comment"># 循环多次以观察eval的变化，防止过拟合</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        classifier.train(input_fn=<span class="keyword">lambda</span>: input_fn(</span><br><span class="line">            flags.data_dir, <span class="string">'train'</span>, flags.num_gpus, flags.train_batch_size), </span><br><span class="line">            steps=flags.train_steps)</span><br><span class="line">        classifier.evaluate(input_fn=<span class="keyword">lambda</span>: input_fn(</span><br><span class="line">            flags.data_dir, <span class="string">'eval'</span>, flags.num_gpus, flags.eval_batch_size),</span><br><span class="line">            steps=flags.eval_steps)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(FLAGS.data_dir):</span><br><span class="line">        os.mkdir(FLAGS.data_dir)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(FLAGS.job_dir):</span><br><span class="line">        os.mkdir(FLAGS.job_dir)      </span><br><span class="line">    <span class="comment"># 下面是对参数的一些约束，比如使用GPU数量与ResNet网络层数的逻辑约束等</span></span><br><span class="line">    <span class="keyword">if</span> FLAGS.num_gpus &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">assert</span> tf.test.is_gpu_available(), <span class="string">'Requested GPUs but none found.'</span></span><br><span class="line">    <span class="keyword">if</span> FLAGS.num_gpus &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(</span><br><span class="line">        <span class="string">'Invalid GPU count: \"--num-gpus\" must be 0 or a positive integer.'</span>)</span><br><span class="line">    <span class="keyword">if</span> FLAGS.num_gpus == <span class="number">0</span> <span class="keyword">and</span> FLAGS.variable_strategy == <span class="string">'GPU'</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">'num-gpus=0, CPU must be used as parameter server. Set'</span></span><br><span class="line">                     <span class="string">'--variable-strategy=CPU.'</span>)</span><br><span class="line">    <span class="keyword">if</span> (FLAGS.num_layers - <span class="number">2</span>) % <span class="number">6</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">'Invalid --num-layers parameter.'</span>)</span><br><span class="line">    <span class="keyword">if</span> FLAGS.num_gpus != <span class="number">0</span> <span class="keyword">and</span> FLAGS.train_batch_size % FLAGS.num_gpus != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">'--train-batch-size must be multiple of --num-gpus.'</span>)</span><br><span class="line">    <span class="keyword">if</span> FLAGS.num_gpus != <span class="number">0</span> <span class="keyword">and</span> FLAGS.eval_batch_size % FLAGS.num_gpus != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">'--eval-batch-size must be multiple of --num-gpus.'</span>)</span><br><span class="line">    <span class="keyword">if</span> cifar10.Cifar10DataSet.num_examples_per_epoch(<span class="string">'eval'</span>) % FLAGS.eval_batch_size != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">'validation set size must be multiple of eval_batch_size'</span>)</span><br><span class="line"></span><br><span class="line">    tf.app.run(main(FLAGS))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>Estimator</tag>
        <tag>Keras</tag>
        <tag>CNN</tag>
        <tag>MNIST</tag>
        <tag>CIFAR-10</tag>
        <tag>Kaggle dog &amp; cat</tag>
      </tags>
  </entry>
  <entry>
    <title>语音识别-RBM和DBN</title>
    <url>/archives/850721b0.html</url>
    <content><![CDATA[<p>参考：</p>
<blockquote>
<p>《解析深度学习-语音识别实践》第5章 高级模型初始化技术<br><a href="https://github.com/exacity/deeplearningbook-chinese" target="_blank" rel="noopener">《深度学习》第20章 深度生成模型</a></p>
</blockquote>
<p><strong>语音识别过程：切除首尾端静音-&gt;声音划分为帧-&gt;对每一帧提取MFCC特征-&gt;若干帧对应一个状态-&gt;三个状态组成一个音素-&gt;若干音素组成单词</strong></p>
<h2 id="1-受限玻尔兹曼机"><a href="#1-受限玻尔兹曼机" class="headerlink" title="1. 受限玻尔兹曼机"></a>1. 受限玻尔兹曼机</h2><p>在介绍受限玻尔兹曼机RBM之前，先了解一下玻尔兹曼机。</p>
<h3 id="1-1-玻尔兹曼机"><a href="#1-1-玻尔兹曼机" class="headerlink" title="1.1 玻尔兹曼机"></a>1.1 玻尔兹曼机</h3><p>玻尔兹曼机最初作为一种广义的“联结主义”引入，用来学习二值向量上的任意概率分布。也就是说，我们的目标是计算一组二值向量数据（只包含0和1）的概率分布情况。</p>
<p>首先在$d$维二值随机向量$\boldsymbol{x} \in {0,1 }^{d \times 1}$上定义玻尔兹曼机。玻尔兹曼机是一种基于能量的模型（玄学？），意味着我们可以使用能量函数定义联合概率分布：</p>
<script type="math/tex; mode=display">
P(\boldsymbol{x}) = \frac{\exp (-E(\boldsymbol{x}))}{Z}</script><p>其中$E(\boldsymbol{x})$是能量函数，$Z$是确保概率和为1的配分函数。玻尔兹曼机的能量函数如下：</p>
<script type="math/tex; mode=display">
E(\boldsymbol{x}) = -\boldsymbol{x}^T\boldsymbol{U}\boldsymbol{x} - \boldsymbol{b}^T\boldsymbol{x}</script><p>其中$\boldsymbol{U}$是模型参数的权重矩阵，$\boldsymbol{b}$是偏置向量。</p>
<p>在一般情况下，根据观察到的样本的情况，我们可以很容易计算上面的表达式，但是它限制了观察到的变量和权重矩阵描述的变量之间相互作用的类型。具体来说，这意味着一个单元的概率由<br>其他单元值的线性模型（逻辑回归）给出。</p>
<p>当不是所有变量都能被观察到时，玻尔兹曼机作用更强。我们将单元分为两个子集：可见单元$\boldsymbol{v}$和隐藏单元$\boldsymbol{h}$。则能量函数变为</p>
<script type="math/tex; mode=display">
E(\boldsymbol{v}, \boldsymbol{h}) = -\boldsymbol{v}^T\boldsymbol{R}\boldsymbol{v} - \boldsymbol{v}^T\boldsymbol{W}\boldsymbol{h}-\boldsymbol{h}^T\boldsymbol{S}\boldsymbol{h} - \boldsymbol{b}^T\boldsymbol{v} - \boldsymbol{c}^T\boldsymbol{h}</script><p>玻尔兹曼机的学习算法通常基于最大似然，当基于最大似然的学习规则训练时，连接两个单元的特定权重的更新仅取决于这两个单元在不同分布下收集的统计信息：$P<em>{model}(\boldsymbol{v})$和$\hat{P}</em>{data}(\boldsymbol{v})P_{model}(\boldsymbol{h}|\boldsymbol{v})$。网络的其余部分参与塑造这些统计信息，但权重可以在完全不知道网络其余部分的情况下更新。</p>
<a id="more"></a>
<h3 id="1-2-受限玻尔兹曼机"><a href="#1-2-受限玻尔兹曼机" class="headerlink" title="1.2 受限玻尔兹曼机"></a>1.2 受限玻尔兹曼机</h3><!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/rbm0.png" alt="rbm0.png"></p>
<p>RBM是包含一层可观察变量和单层潜变量的无向概率图模型，它是一个二分图，观察层或潜层中的任何单元之间不允许存在连接。令观察层由一组$n_v$个二值随机变量组成，我们统称为向量$\boldsymbol{v} \in {0, 1}^{n_v \times 1}$。我们将$n_h$个二值随机变量的潜在或隐藏层记为$\boldsymbol{h} \in {0, 1}^{n_h \times 1}$，$\boldsymbol{b}\in {0, 1}^{n_v \times 1}$和$\boldsymbol{c} \in {0, 1}^{n_h \times 1}$分别是可见层和隐藏层的偏置向量。其能量函数为</p>
<script type="math/tex; mode=display">
E(\boldsymbol{v}, \boldsymbol{h}) = -\boldsymbol{b}^T\boldsymbol{v} - \boldsymbol{c}^T\boldsymbol{h} - \boldsymbol{v}^T\boldsymbol{W}\boldsymbol{h}</script><p>若$\boldsymbol{v} \in \mathbb{R}^{n_v \times1}$，即可见层取实值，则能量函数变为</p>
<script type="math/tex; mode=display">
E(\boldsymbol{v}, \boldsymbol{h}) = \frac{1}{2}(\boldsymbol{v} - \boldsymbol{b})^T(\boldsymbol{v} - \boldsymbol{b}) - \boldsymbol{c}^T\boldsymbol{h} - \boldsymbol{v}^T\boldsymbol{W}\boldsymbol{h}</script><p>其联合概率分布为</p>
<script type="math/tex; mode=display">
P(\boldsymbol{v}, \boldsymbol{h}) = \frac{\exp (-E(\boldsymbol{v}, \boldsymbol{h}))}{Z}
\\
Z = \sum_\boldsymbol{v}\sum_\boldsymbol{h}\exp \{ -E(\boldsymbol{v},\boldsymbol{h}) \}</script><p>显然，若能穷举状态，则计算$Z$是很方便的，但是问题在于很难穷举所有状态，因此需要更好的方法计算$Z$。</p>
<h3 id="1-3-条件分布"><a href="#1-3-条件分布" class="headerlink" title="1.3 条件分布"></a>1.3 条件分布</h3><p>要注意的是，我们的目标是挖掘观测变量的潜在信息，需要求解的是观测变量分布概率，然而$P(\boldsymbol{v})$是难解的，但基于隐藏变量的条件分布的采样和计算是相对简单的。</p>
<script type="math/tex; mode=display">
P(\boldsymbol{h}|\boldsymbol{v}) = \frac{P(\boldsymbol{h}, \boldsymbol{v})}{P(\boldsymbol{v})}
\\
= \frac{1}{P(\boldsymbol{v})} \frac{1}{Z} \exp (\boldsymbol{b}^T\boldsymbol{v} + \boldsymbol{c}^T\boldsymbol{h} + \boldsymbol{v}^T\boldsymbol{W}\boldsymbol{h})
\\
= \frac{1}{Z'}\exp (\boldsymbol{c}^T\boldsymbol{h} + \boldsymbol{v}^T\boldsymbol{W}\boldsymbol{h}), \quad Z' = \frac{\partial Z}{\partial \boldsymbol{h}}
\\
=\frac{1}{Z'}\exp (\sum^{n_h}_{j=1}c_jh_j + \sum^{n_h}_{j=1}\boldsymbol{v}^T\boldsymbol{W}_{:,j}h_j)
\\
=\frac{1}{Z'} \prod^{n_h}_{j=1}\exp (c_jh_j + \boldsymbol{v}^T\boldsymbol{W}_{:,j}h_j)
\\
= \prod^{n_h}_{j=1}P(h_j|\boldsymbol{v})</script><p>又因为$h_j$是二值的，所以</p>
<script type="math/tex; mode=display">
P(h_j = 1|\boldsymbol{v}) = \frac{\tilde{P}(h_j = 1|\boldsymbol{v})}{\tilde{P}(h_j = 0|\boldsymbol{v}) + \tilde{P}(h_j = 1|\boldsymbol{v})}
\\
= \frac{\exp(c_j + \boldsymbol{v}^T\boldsymbol{W}_{:,j})}{\exp(0) + \exp(c_j + \boldsymbol{v}^T\boldsymbol{W}_{:,j})}
\\
=\sigma(c_j + \boldsymbol{v}^T\boldsymbol{W}_{:,j})</script><p>$\sigma$是Sigmoid函数。</p>
<p>扩展一下</p>
<script type="math/tex; mode=display">
P(\boldsymbol{h} = \boldsymbol{1}|\boldsymbol{v}) = \sigma(\boldsymbol{c} + \boldsymbol{W}^T\boldsymbol{v})</script><p>由此得到关于隐藏层的完全条件分布表达为因子形式</p>
<script type="math/tex; mode=display">
P(\boldsymbol{h}|\boldsymbol{v}) = \prod^{n_h}_{j=1}\sigma((2\boldsymbol{h}-1)\odot(\boldsymbol{c} + \boldsymbol{W}^T\boldsymbol{v}))_j</script><p>$\boldsymbol{v}$和$\boldsymbol{h}$是类似的，可以得到</p>
<script type="math/tex; mode=display">
P(\boldsymbol{v}|\boldsymbol{h}) = \prod^{n_v}_{i=1}\sigma((2\boldsymbol{v}-1)\odot(\boldsymbol{b} + \boldsymbol{W}\boldsymbol{h}))_i</script><p>对高斯可见层神经元，条件概率$P(\boldsymbol{h} = \boldsymbol{1}|\boldsymbol{v})$相同，而$P(\boldsymbol{v}|\boldsymbol{h})$为</p>
<script type="math/tex; mode=display">
P(\boldsymbol{v}|\boldsymbol{h}) = N(\boldsymbol{v};\boldsymbol{b} + \boldsymbol{W}\boldsymbol{h}, \boldsymbol{I})</script><h3 id="1-4-受限玻尔兹曼机的属性"><a href="#1-4-受限玻尔兹曼机的属性" class="headerlink" title="1.4 受限玻尔兹曼机的属性"></a>1.4 受限玻尔兹曼机的属性</h3><p>讲了这么多，RBM有什么用呢，一个RBM可以用来学习输入集合的概率分布。我们的目标是获得可见层变量的概率分布，也就是说可以将RBM作为其他模型的前置组件，经过RBM我们获得了输入数据的概率分布，依据这些信息，再构建一个模型进行训练，这样的模型训练效果应当更好。</p>
<p>首先定义一个自由能量的量</p>
<script type="math/tex; mode=display">
F(\boldsymbol{v}) = - \log (\sum_{\boldsymbol{h}}\exp(-E(\boldsymbol{v}, \boldsymbol{h})))</script><p>使用$F(\boldsymbol{v})$，我们可以把边缘概率$P(\boldsymbol{v})$写成</p>
<script type="math/tex; mode=display">
P(\boldsymbol{v}) = \sum_{\boldsymbol{h}}P(\boldsymbol{v}, \boldsymbol{h})
\\
= \sum_\boldsymbol{h}\frac{\exp(-E(\boldsymbol{v}, \boldsymbol{h}))}{Z}
\\
=\frac{\exp(-F(\boldsymbol{v}))}{\sum_v\exp(-F(v))}</script><p>若可见层取实值，则边缘概率密度为</p>
<script type="math/tex; mode=display">
p_0(\boldsymbol{v}) = \frac{\exp(-\frac{1}{2}(\boldsymbol{v} - \boldsymbol{b})^T(\boldsymbol{v} - \boldsymbol{b}))}{Z_0}</script><p>当RBM不包含隐藏层神经元时，这是一个均值为$\boldsymbol{b}$，方差为1的高斯分布。</p>
<p>若隐藏层神经元数量为$n$，我们可以得到</p>
<script type="math/tex; mode=display">
p_n(\boldsymbol{v}) = \frac{\sum_\boldsymbol{h}\exp(-E_n(\boldsymbol{v}, \boldsymbol{h}))}{Z_n}
\\
=\frac{\prod^n_{i=1}\sum^1_{h_i=0}\exp(c_ih_i + h_i\boldsymbol{v}^T\boldsymbol{W}_{:,i})}{Z_n}
\\
=\frac{\prod^{n-1}_{i=1}\sum^1_{h_i=0}\exp(c_ih_i + h_i\boldsymbol{v}^T\boldsymbol{W}_{:,i})(1+ \exp(c_n+ \boldsymbol{v}^T\boldsymbol{W}_{:,n}))}{Z_n}
\\
= p_{n-1}(\boldsymbol{v})\frac{Z_{n-1}}{Z_n}(1+ \exp(c_n+ \boldsymbol{v}^T\boldsymbol{W}_{:,n}))
\\
= p_{n-1}(\boldsymbol{v})\frac{Z_{n-1}}{Z_n}+ p_{n-1}(\boldsymbol{v})\frac{Z_{n-1}}{Z_n}\exp(c_n+ \boldsymbol{v}^T\boldsymbol{W}_{:,n})</script><p>上式是一个递归式，假如我们加入新的隐层神经元为第$n$个。我们将$p<em>{n-1}(\boldsymbol{v})\frac{Z</em>{n-1}}{Z<em>n}+ p</em>{n-1}(\boldsymbol{v})\frac{Z<em>{n-1}}{Z_n}\exp(c_n+ \boldsymbol{v}^T\boldsymbol{W}</em>{:,n})$分为两部分，前一部分是$n-1$个隐层神经元的混合高斯分布缩放，后一部分是增加新的隐层神经元导致的$n-1$个隐层神经元的混合高斯分布偏移，偏移量由$\boldsymbol{W}_{:,n}$决定，因此可以将$p_n(\boldsymbol{v})$看作是两个混合高斯模型的叠加。<strong>由于此式是递归式</strong>，也就意味着最终概率分布包含的高斯成分数量$N_n$与隐层神经元个数$n$相比是指数形式增长的（大概是$N_n = 2^n$）。</p>
<p>因此，RBM把可见层输入表示成了一个由多个方差为1的高斯分量组成的混合高斯模型，这些高斯分量的个数是指数级的。与GMM相比，RBM使用了更多的混合分量。然而，GMM可以为不同的高斯分量使用不同的方差来表示这个分布。结论就是高斯-伯努利RBM可以像混合高斯模型一样表示实值数据的分布，RBM可以替换GMM。</p>
<p>由于RBM的隐层神经元为二值向量，因此很适合用在词袋模型的任务中，比如根据文章内容，判断文章主题，可见层为文章内容，隐层神经元表示主题。因此可以用于推荐系统。</p>
<h3 id="1-5-训练受限玻尔兹曼机"><a href="#1-5-训练受限玻尔兹曼机" class="headerlink" title="1.5 训练受限玻尔兹曼机"></a>1.5 训练受限玻尔兹曼机</h3><p>训练RBM使用随机梯度下降SGD来极小化负对数似然NLL</p>
<script type="math/tex; mode=display">
J_{NLL}(\boldsymbol{W}, \boldsymbol{b}, \boldsymbol{c};\boldsymbol{v}) = -\log P(\boldsymbol{v}) = F(\boldsymbol{v}) + \log \sum_v\exp(-F(v))</script><p>更新的参数$(\boldsymbol{W}, \boldsymbol{b}, \boldsymbol{c})$，$\eta$为学习率，更新方式相同</p>
<script type="math/tex; mode=display">
\boldsymbol{W}_{t+1} \leftarrow \boldsymbol{W}_t - \eta \bigtriangleup \boldsymbol{W}_t</script><p>而且考虑惯性系数$\gamma$</p>
<script type="math/tex; mode=display">
\bigtriangleup\boldsymbol{W}_t = \gamma\bigtriangleup\boldsymbol{W}_{t-1} + (1-\gamma)\frac{1}{M_b}\sum^{M_b}_{m=1}\bigtriangledown_{\boldsymbol{W}_t}J_{NLL}(\boldsymbol{W}, \boldsymbol{b}, \boldsymbol{c};\boldsymbol{v}^m)</script><p>这里$M_b$是batch大小，$\bigtriangledown J$是负对数似然对参数的梯度，其他两个参数$\boldsymbol{b},\boldsymbol{c}$与上式相同。</p>
<p>与DNN不同，RBM的对数似然梯度不适合精确计算。负对数似然对于任意模型参数的导数的一般形式为</p>
<script type="math/tex; mode=display">
\bigtriangledown_\theta J_{NLL}(\boldsymbol{W, b, c;v}) = - [\left \langle \frac{\partial E(\boldsymbol{v, h})}{\partial\theta} \right \rangle_{data} - \left \langle \frac{\partial E(\boldsymbol{v, h})}{\partial\theta} \right \rangle_{model}]</script><p>$\left \langle x \right \rangle<em>{data}$和$\left \langle x \right \rangle</em>{model}$分别是从数据和最终模型中估计$x$的期望值。特别地，对于可见层神经元-隐层神经元的权重，有</p>
<script type="math/tex; mode=display">
\bigtriangledown_{w_{ji}} J_{NLL}(\boldsymbol{W, b, c;v}) = - [\left \langle v_ih_j \right \rangle_{data} - \left \langle v_ih_j \right \rangle_{model}]</script><p>第一个期望是训练数据中可见层神经元$v_i$和隐层神经元$h_j$同时取1的频率，第二个期望是以最终模型定义的分布来求得的。当隐层神经元未知时，第二个期望的计算时间是与高斯成分的数量相关，也就是指数级的，因此需要换一种方法。</p>
<p>最有效的是对比散度算法CD。对可见层神经元-隐藏层神经元权重的梯度的一步对比散度近似是</p>
<script type="math/tex; mode=display">
\bigtriangledown_{w_{ji}} J_{NLL}(\boldsymbol{W, b, c;v}) = - [\left \langle v_ih_j \right \rangle_{data} - \left \langle v_ih_j \right \rangle_{\infty}]
\\
\approx - [\left \langle v_ih_j \right \rangle_{data} - \left \langle v_ih_j \right \rangle_{1}]</script><p>这里$\left \langle \cdot \right \rangle<em>{\infty}$和$\left \langle \cdot \right \rangle</em>{1}$分别表示在吉布斯采样器运行了无穷次和一次之后得到的采样上估计的期望。</p>
<p>采样过程和对比散度算法：</p>
<ul>
<li>第一步，吉布斯采样器通过一个数据样本初始化；</li>
<li>接着，依据之前证明的后验概率$P(\boldsymbol{h}|\boldsymbol{v})$由可见层采样生成一个隐藏层采样；</li>
<li>根据RBM类型是伯努利-伯努利RBM还是高斯-伯努利RBM，使用不同的公式定义的后验概率$P(\boldsymbol{v}|\boldsymbol{h})$，基于隐藏层采样继续生成一个可见层采样；</li>
<li>重复上述过程。</li>
</ul>
<p>如果吉布斯采样器运行无穷次，则真实期望$\left \langle v<em>ih_j \right \rangle</em>{model}$可以从老化阶段之后生成的采样中估计</p>
<script type="math/tex; mode=display">
\left \langle v_ih_j \right \rangle_{model} \approx \frac{1}{N} \sum^{N_{burn}+N}_{n=N_{burn}+1} v_i^nh_j^n</script><p>这里$N<em>{burn}$是达到老化阶段所需的步数，$N$是老化之后的采样次数（可能是巨大的）。然而运行很多步吉布斯采样器是低效的。我们可以只运行一次，用一个非常粗略的近似$\left \langle v_ih_j \right \rangle</em>{1}$来估计$\left \langle v<em>ih_j \right \rangle</em>{model}$</p>
<p>然而$\left \langle v<em>ih_j \right \rangle</em>{1}$具有很大的方差。为了减小方差，我们可以基于以下公式估计$\left \langle v<em>ih_j \right \rangle</em>{model}$，这里取等号是因为二值向量</p>
<script type="math/tex; mode=display">
\boldsymbol{h}^0 \sim P(\boldsymbol{h}|\boldsymbol{v}^0)
\\
\boldsymbol{v}^1 = \mathbb{E}(\boldsymbol{v}|\boldsymbol{h}^0) = P(\boldsymbol{v}|\boldsymbol{h}^0)
\\
\boldsymbol{h}^1 = \mathbb{E}(\boldsymbol{h}|\boldsymbol{v}^1) = P(\boldsymbol{h}|\boldsymbol{v}^1)</script><p>这里$\sim$表示从中采样，$\boldsymbol{v}^0$是训练集的一个采样，我们采用平均场逼近方法直接生成采样$\boldsymbol{v}^1,\boldsymbol{h}^1$。换句话说，这些采样可以取实数值。同样的技巧也可以应用在</p>
<script type="math/tex; mode=display">
\left \langle v_ih_j \right \rangle_{data} \approx \left \langle v_ih_j \right \rangle_{0} = v_i^0\mathbb{E}_j(\boldsymbol{h}|\boldsymbol{v}^0) = v_i^0P_j(\boldsymbol{h}|\boldsymbol{v}^0)</script><p>在伯努利-伯努利RBM中，模型参数$\boldsymbol{b},\boldsymbol{c}$的更新规则可以简单地替换合适梯度导出。</p>
<script type="math/tex; mode=display">
\bigtriangledown_{\boldsymbol{W}}J_{NLL}(\boldsymbol{W, b, c;v}) = - [\left \langle \boldsymbol{h}\boldsymbol{v}^T \right \rangle_{data} - \left \langle \boldsymbol{h}\boldsymbol{v}^T \right \rangle_{model}]
\\
\bigtriangledown_{\boldsymbol{b}}J_{NLL}(\boldsymbol{W, b, c;v}) = - [\left \langle \boldsymbol{v} \right \rangle_{data} - \left \langle \boldsymbol{v} \right \rangle_{model}]
\\
\bigtriangledown_{\boldsymbol{c}}J_{NLL}(\boldsymbol{W, b, c;v}) = - [\left \langle \boldsymbol{h} \right \rangle_{data} - \left \langle \boldsymbol{h} \right \rangle_{model}]</script><p>CD算法也可以用来训练高斯-伯努利RBM。唯一的区别是，在高斯-伯努利RBM中，使用高斯分布的后验分布$P(\boldsymbol{v}|\boldsymbol{h})$的期望值$\mathbb{E}(\boldsymbol{v}|\boldsymbol{h})$。</p>
<blockquote>
<p>使用对比散度算法训练RBM</p>
<p>1.procedure TrainRBMWithCD(M个样本，N是CD数，吉布斯采样器迭代次数)</p>
<blockquote>
<p>2.随机初始化$(\boldsymbol{W}_0,\boldsymbol{b}_0,\boldsymbol{c}_0)$</p>
<p>3.$while$ 停止训练准则未达到 $do$ （达到最大迭代次数或训练准则提升很小就停止）</p>
<blockquote>
<p>4.随机选择一个$M_b$个样本的小批量$\boldsymbol{O}$</p>
<p>5.$\boldsymbol{V}^0 \leftarrow \boldsymbol{O}$</p>
<p>6.$\boldsymbol{H}^0 \leftarrow P(\boldsymbol{H}|\boldsymbol{V}^0)$</p>
<p>7.$\bigtriangledown_{\boldsymbol{W}}J \leftarrow \boldsymbol{H}^0(\boldsymbol{V}^0)^T$</p>
<p>8.$\bigtriangledown_{\boldsymbol{b}}J \leftarrow sumrow(\boldsymbol{V}^0)$</p>
<p>9.$\bigtriangledown_{\boldsymbol{c}}J \leftarrow sumrow(\boldsymbol{H}^0)$</p>
<p>10.$for$ $n \leftarrow 0; n &lt; N; n \leftarrow n + 1$ $do$</p>
<blockquote>
<p>11.$\boldsymbol{H}^n \leftarrow \mathbb{I}(\boldsymbol{H}^n &gt; rand(0, 1)) \quad$      采样，$\mathbb{I}$是指示函数</p>
<p>12.$\boldsymbol{V}^{n+1} \leftarrow P(\boldsymbol{V}|\boldsymbol{H}^n)$</p>
<p>13.$\boldsymbol{H}^{n+1} \leftarrow P(\boldsymbol{H}|\boldsymbol{V}^{n+1})$</p>
</blockquote>
<p>14.$end$ $for$</p>
<p>15.$\bigtriangledown<em>{\boldsymbol{W}}J \leftarrow \bigtriangledown</em>{\boldsymbol{W}}J - \boldsymbol{H}^N(\boldsymbol{V}^N)^T$</p>
<p>16.$\bigtriangledown<em>{\boldsymbol{b}}J \leftarrow \bigtriangledown</em>{\boldsymbol{b}}J - sumrow(\boldsymbol{V}^0)$</p>
<p>17.$\bigtriangledown<em>{\boldsymbol{c}}J \leftarrow \bigtriangledown</em>{\boldsymbol{c}}J - sumrow(\boldsymbol{H}^0)$</p>
<p>18.$\boldsymbol{W}_{t+1} \leftarrow \boldsymbol{W}_t + \frac{\eta}{M_b}\bigtriangleup\boldsymbol{W}_t$</p>
<p>19.$\boldsymbol{b}_{t+1} \leftarrow \boldsymbol{b}_t + \frac{\eta}{M_b}\bigtriangleup\boldsymbol{b}_t$</p>
<p>20.$\boldsymbol{c}_{t+1} \leftarrow \boldsymbol{c}_t + \frac{\eta}{M_b}\bigtriangleup\boldsymbol{c}_t$</p>
</blockquote>
<p>21.$end$ $while$</p>
<p>22.返回 $rbm = (\boldsymbol{W}, \boldsymbol{b}, \boldsymbol{c})$</p>
</blockquote>
<p>23.$end$ $procedure$</p>
</blockquote>
<h2 id="2-深度置信网络预训练"><a href="#2-深度置信网络预训练" class="headerlink" title="2. 深度置信网络预训练"></a>2. 深度置信网络预训练</h2><p>预训练的目的是为了初始化某个深度模型，比如DNN的初始值；这是由于神经网络对初始值敏感，不同的初始值可能会导致梯度下降到局部极小，但是通过预训练初始化的DNN在梯度下降过程中更容易达到全局最小。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/dbn.png" alt="dbn.png"></p>
<p>深度置信网络（深度信念网络）DBN是第一批成功应用到深度架构训练的非卷积模型之一。DBN是从RBM衍生出的深度模型，首先我们知道一个RBM是由一个可见层和一个隐藏层组成的，那么这个隐藏层可以看作是更上一层的RBM的可见层，依此类推，我们就构建出一个深度置信网络DBN，RBM与RBM之间的权重是共享的。在这个网络中，顶层是一个无向图RBM，而下面的层次构成了一个有向图生成模型。</p>
<p>对于这样一个DBN，我们的训练过程是：对每个数据向量$\boldsymbol{v}$，我们先计算一个隐藏层神经元期望激活值的向量（它等价于概率）$\boldsymbol{h}$；我们把这些隐藏层期望值作为训练数据来训练一个新的RBM（更上一层）。这样，每个RBM的权重都可以用来从前一层的输出中提取特征。一旦我们停止训练，我们就拥有了一个DBN所有层权重的初始值，而这个DBN隐藏层的层数刚好等于我们训练的RBM的数量。这个DBN可以进一步通过wake-sleep算法模型进行精细调整。</p>
<p>具有$l$个隐藏层的DBN包含$l$个权重矩阵：$\boldsymbol{W}^{(1)},…,\boldsymbol{W}^{(l)}$。同时也包含$l+1$个偏置向量：$\boldsymbol{b}^{(0)},…,\boldsymbol{b}^{(l)}$，其中$\boldsymbol{b}^{(0)}$是可见层的偏置。DBN表示的概率分布由下式给出：</p>
<script type="math/tex; mode=display">
P(\boldsymbol{h}^{(l)},\boldsymbol{h}^{(l-1)}) \propto (\boldsymbol{b}^{(l)^T}\boldsymbol{h}^{(l)} + \boldsymbol{b}^{(l-1)^T}\boldsymbol{h}^{(l-1)} + \boldsymbol{h}^{(l-1)^T}\boldsymbol{W}^{(l)}\boldsymbol{h}^{(l)})
\\
P(h_i^{(k)} = 1|\boldsymbol{h}^{(k+1)}) = \sigma(b_i^{(k)} + \boldsymbol{W}_{:,i}^{(k+1)^T}\boldsymbol{h}^{(k+1)}), \quad \forall i,\forall k \in 1,...,l-2
\\
P(v_i = 1|\boldsymbol{h}^{(1)}) = \sigma(b_i^{(0)} + \boldsymbol{W}_{:,i}^{(1)^T}\boldsymbol{h}^{(1)}), \quad \forall i</script><p>在实值可见单元的情况下，替换</p>
<script type="math/tex; mode=display">
\boldsymbol{v} \sim N(\boldsymbol{v};\boldsymbol{b}^{(0)} + \boldsymbol{W}^{(1)^T}\boldsymbol{h}^{(1)}, \boldsymbol{\beta}^{-1})</script><p>为了便于处理，$\boldsymbol{\beta}$为对角形式。</p>
<p>训练过程表示：</p>
<ul>
<li>先使用对比散度CD训练第一层RBM（可见层+第一隐藏层）以最大化$\mathbb{E}<em>{\boldsymbol{v}\sim p</em>{data}}\log p(\boldsymbol{v})$；</li>
<li>训练第二层RBM（第一隐藏层+第二隐藏层）为近似最大化$\mathbb{E}<em>{\boldsymbol{v}\sim p</em>{data}}\mathbb{E}_{\boldsymbol{h}^{(1)} \sim p^{(1)}(\boldsymbol{h}^{(1)}|\boldsymbol{v})}\log p^{(2)}(\boldsymbol{h}^{(1)})$，其中$p^{(1)}$是第一个RBM的概率分布，$p^{(2)}$是第二个RBM的概率分布。</li>
</ul>
<p>上述过程可以无限重复，从而向DBN添加任意多层，这个过程可被视为提高数据在DBN下似然概率的变分下界。</p>
<p>我们会发现DBN计算过程中使用到了Sigmoid函数，十分类似由Sigmoid神经元构成的DNN。从这种视角看由Sigmoid神经元构成的DNN，我们发现DBN的权重可以用作DNN的初始权重。DBN和DNN之间的唯一区别实在DNN中使用了标注。基于此，在多分类DNN中，当预训练结束后，我们需要添加一个随机初始化的softmax输出层，并用反向传播算法鉴别性地精细调整网络中地所有权重。</p>
<p>使用DBN初始化DNN可能潜在地提高DNN在测试数据集上的性能的原因：</p>
<ol>
<li>DNN是高度非线性且非凸的，初始化点可能很大程度地影响最终模型；</li>
<li>预训练阶段使用的生成性准则与反向传播阶段使用的鉴别性准则不同，BP阶段相当于对模型进行了正则化；</li>
<li>预训练可以使用大量未标注数据，提供了半监督学习的机会。</li>
</ol>
<p><strong>实验证明，生成性预训练除了耗时以外，通常是有帮助的，在训练数据很小的时候格外有效。</strong></p>
<p>如果只使用一个隐藏层，DBN的预训练并不重要，预训练在有两个隐藏层的时候最有效。随着隐藏层数量的增加，预训练效果通常会减弱。这是因为DBN在预训练时使用了两个近似：</p>
<ol>
<li>在训练下一层的时候使用平均场逼近来生成目标；</li>
<li>学习模型参数的时候使用了近似的对比散度算法。</li>
</ol>
<p>显然，若使用DBN初始化基于ReLU的DNN，效果将大打折扣，因为两者并无联系。</p>
<h2 id="3-降噪自动编码器预训练"><a href="#3-降噪自动编码器预训练" class="headerlink" title="3. 降噪自动编码器预训练"></a>3. 降噪自动编码器预训练</h2><p>自动编码器是基于<strong>没有标注</strong>的训练数据集$\mathbb{S} = { (\boldsymbol{v}^m) | 1 \leqslant m \leqslant M }$，找到一个$N_h$维隐藏层表示$\boldsymbol{h} = f(\boldsymbol{v})\in \mathbb{R}^{N_h \times 1}$，通过它可以使用最小均方误差MSE把初始化的$N_v$维信号$\boldsymbol{v}$重建为$\tilde{\boldsymbol{v}} = g(\boldsymbol{h})$。</p>
<script type="math/tex; mode=display">
J_{MSE}(\boldsymbol{W, b};\mathbb{S}) = \frac{1}{M}\sum^M_{m=1}\frac{1}{2}||\tilde{\boldsymbol{v}}^m - \boldsymbol{v}^m||^2</script><p>理论上$f$和$g$可以是任意函数。与主成分分析PCA不同的是，自动编码器有获取输入分布的多重模态属性的潜力。降噪自动编码器只有一个隐藏层。</p>
<p>与DBN不同的是，DBN是主动获取训练数据的统计规律，自动编码器是让其自由发展，尽可能地减小重建误差，在这个过程中，编码器获得了从输入数据到隐藏层的统计特征，解码器获得了重建目标的能力。</p>
<p>那么问题来了，当隐藏层表示的维度高于输入特征的维度时，自动编码器就存在一个潜在的问题。如果除了最小化重建误差以外没有其他限制，自动编码器可能只学习到恒等函数，而没有提取出任何训练数据集中出现的统计规律。</p>
<p>这个问题的解决方式：</p>
<ul>
<li>对隐藏层添加稀疏性限制，强制使隐藏层大部分节点为0；</li>
<li>学习过程中添加随机扰动，在降噪自动编码器中使用这种方法，它强制隐藏层去发掘更多鲁棒特征，以及通过从一个损坏的版本重建输入以阻止它只学到恒等函数。</li>
</ul>
<p>损坏输入的方式，最简单的机制是随机选择输入条目（一半条目）把它们设置为0。<br>一个降噪自动编码器做了两件事情：保存输入中信息，并撤销随即损坏的影响。<br>注意到在RBM的对比散度训练过程中，采样步骤本质上执行的就是对输入的随机损坏过程。</p>
<p>类似与使用RBM，降噪自动编码器也可以用来预训练一个DNN，步骤类似，一层一层训练叠加。</p>
<h2 id="4-鉴别性预训练"><a href="#4-鉴别性预训练" class="headerlink" title="4. 鉴别性预训练"></a>4. 鉴别性预训练</h2><p>基于DBN以及降噪自动编码的预训练都是生成性预训练技术，其关键在于依靠其他判别准则生成初始化参数，鉴别性预训练DPT的训练方式完全不同。</p>
<p>最明显的一种是逐层BP，首先使用标注鉴别性训练一个单隐层的DNN，直到全部收敛；接着在第一隐层和输出层之间插入一个新的随机初始化的第二隐层，同样的训练至完全收敛；这样继续插入训练的过程直到得到所需数量的隐藏层。在绝大多数的条件下，逐层BP性能优于逐层贪心算法，这是由于逐层贪心不考虑之前的数据，它只对当前隐藏层负责。</p>
<p>但是，逐层BP的缺点是一些隐藏节点可能在训练收敛后会处于饱和状态，因此当新的隐藏层加入时很难对其进行进一步更新。这个限制可以通过每次加入新的隐藏层时，不让模型训练至收敛来缓解。一个典型的启发式方法是我们只使用要达到收敛所用数据的$\frac{1}{L}$来执行DPT，其中$L$是最终模型的总层数，在DPT中，其目标是调整权重使其接近一个较好的局部最优点，因此，DPT最好在可获得大量训练数据的时候使用。</p>
<h2 id="5-混合预训练"><a href="#5-混合预训练" class="headerlink" title="5. 混合预训练"></a>5. 混合预训练</h2><p>生成性预训练和鉴别性预训练各有千秋。生成性预训练没有和任务特定的目标函数绑定，它有助于减轻过拟合但不保证有助于鉴别性的模型精细化调整（BP）；鉴别性预训练直接最小化目标函数，然而如果没有规划好，低层权重可能向最终目标调整过多，而没有考虑到接下来添加的隐藏层。</p>
<p>为了解决上述问题，可以采用混合预训练方法。</p>
<script type="math/tex; mode=display">
J_{HYB}(\boldsymbol{W, b};\mathbb{S}) = J_{DISC}(\boldsymbol{W, b};\mathbb{S}) + \alpha J_{GEN}(\boldsymbol{W, b};\mathbb{S})</script><p>$\alpha$是插值权重。对于分类任务，鉴别性准则可以是交叉熵，对于回归任务，鉴别性准则可以是MSE。对于RBM，生成性准则可以是负对数似然，对于自动编码器，生成性准则可以是重建误差。</p>
<h2 id="6-采用丢弃法的预训练"><a href="#6-采用丢弃法的预训练" class="headerlink" title="6. 采用丢弃法的预训练"></a>6. 采用丢弃法的预训练</h2><p>dropout可以提升泛化性能，那么这启发我们使用dropout进行预训练。<br>使用0.3到0.5的dropout率，然后通过10到20轮训练数据来预训练一个DNN，接着把dropout设置为0继续训练DNN。这样初始化的DNN的错误率比RBM预训练的DNN相对降低了3%。</p>
]]></content>
      <categories>
        <category>Speech Recognition</category>
      </categories>
      <tags>
        <tag>Theory</tag>
        <tag>RBM</tag>
        <tag>DBN</tag>
        <tag>Pretraining</tag>
      </tags>
  </entry>
  <entry>
    <title>循环神经网络</title>
    <url>/archives/20417848.html</url>
    <content><![CDATA[<p>参考：</p>
<blockquote>
<p><a href="https://github.com/exacity/deeplearningbook-chinese" target="_blank" rel="noopener">《深度学习》第10章 序列建模：循环和递归网络</a><br><a href="https://blog.csdn.net/cassiePython/article/details/80389394" target="_blank" rel="noopener">回声状态网络(ESN)教程</a></p>
</blockquote>
<p>循环神经网络或RNN是一类用于处理序列数据的神经网络。正如卷积网络可以很容易地扩展到具有很大宽度和高度的图像，以及处理大小可变的图像，循环网络可以扩展到更长的序列（比不基于序列的特化网络长得多）。大多数循环网络也能处理可变长度的序列。</p>
<p>卷积操作允许网络跨时间共享参数，但是浅层的。卷积的输出是一个序列，其中输出中的每一项是相邻几项输入的函数。参数共享的概念体现在每个时间步中使用的相同卷积核。循环神经网络以不同的方式共享参数。输出的每一项是前一项的函数。输出的每一项对先前的输出应用相同的更新规则而产生。这种循环方式导致参数通过很深的计算图共享。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/rnn0.png" alt="rnn0.png"></p>
<a id="more"></a>
<h2 id="1-展开计算图"><a href="#1-展开计算图" class="headerlink" title="1. 展开计算图"></a>1. 展开计算图</h2><p>计算图是形式化一组计算结构的方式，如那些涉及将输入和参数映射到输出和损失的计算。</p>
<p>展开（unfolding）递归或循环计算得到的重复结构进行解释，这些重复结构通常对应于一个事件链。 展开（unfolding）这个计算图将导致深度网络结构中的参数共享。</p>
<p>使用$\boldsymbol{h}$表示网络的隐藏单元</p>
<script type="math/tex; mode=display">
\boldsymbol{h}^{(t)} = f(\boldsymbol{h}^{(t-1)}, \boldsymbol{x}^{(t)};\boldsymbol{\theta})</script><p>我们需要将任意长的序列$(\boldsymbol{x}^{(t)}, \boldsymbol{x}^{(t-1)},…,\boldsymbol{x}^{(2)}, \boldsymbol{x}^{(1)})$到以固定长度的向量$\boldsymbol{h}^{(t)}$。根据实际情况，我们往往并不需要保存全部序列的信息，所以仅仅存储足够预测句子其余部分的信息。最苛刻的情况是要求$\boldsymbol{h}^{(t)}$足够风骨，并能大致恢复输入序列。</p>
<p>展开图的大小取决于序列长度。用一个函数$g^{(t)}$代表经$t$步展开后的循环：</p>
<script type="math/tex; mode=display">
\boldsymbol{h}^{(t)} = g^{(t)}(\boldsymbol{x}^{(t)}, \boldsymbol{x}^{(t-1)},...,\boldsymbol{x}^{(2)}, \boldsymbol{x}^{(1)})
\\
= f(\boldsymbol{h}^{(t-1)}, \boldsymbol{x}^{(t)};\boldsymbol{\theta})</script><p>函数$g^{(t)}$将全部过去序列作为输入来生成当前状态，但是展开的循环架构允许我们将$g^{(t)}$分解为函数$f$的重复应用。因此，展开过程引入两个主要优点：</p>
<ol>
<li>无论序列的长度，学成的模型始终具有相同的输入大小，因为它指定的是从一种状态到另一种状态的转移，而不是在可变长度的历史状态上操作。</li>
<li>我们可以在每个时间步使用相同参数的相同转移函数$f$。</li>
</ol>
<p>这两个因素使得学习在所有时间步和所有序列长度上操作单一的模型$f$是可能的，而不需要在所有可能时间步学习独立的模型$g^{(t)}$。学习单一的共享模型允许泛化到没有见过的序列长度（没有出现在训练集中），并且估计模型所需的训练样本远远少于不带参数共享的模型。</p>
<h2 id="2-循环神经网络"><a href="#2-循环神经网络" class="headerlink" title="2. 循环神经网络"></a>2. 循环神经网络</h2><!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/rnn1.png" alt="rnn1.png"></p>
<p>从图中可知，循环神经网络使用了三个权重矩阵$\boldsymbol{U, W, V}$，矩阵$\boldsymbol{U}$对输入进行处理，矩阵$\boldsymbol{W}$对状态转移进行处理，矩阵$\boldsymbol{V}$对输出进行处理；非常类似于马尔可夫链。</p>
<p>循环神经网络的设计模式包括以下几种：</p>
<ol>
<li>每个时间步都有输出，并且隐藏单元之间有循环连接的循环网络；</li>
<li>每个时间步都产生一个输出，只有当前时刻的输出到下个时刻的隐藏单元之间有循环连接的循环网络；</li>
<li>隐藏单元之间存在循环连接，但读取整个序列后产生单个输出的循环网络。</li>
</ol>
<h3 id="2-1-前向传播"><a href="#2-1-前向传播" class="headerlink" title="2.1 前向传播"></a>2.1 前向传播</h3><p>假设：</p>
<ul>
<li>隐藏单元的激活函数未双曲正切函数tanh；</li>
<li>输出$\boldsymbol{o}$是离散变量可能值的非标准化对数概率，如用于预测词或字符的onehot形式；</li>
<li>预测值$\hat{\boldsymbol{y}}$是对输出进行softmax处理后得到的标准化向量；</li>
<li>RNN从特定的初始状态$\boldsymbol{h}^{(0)}$开始前向传播。</li>
</ul>
<p>则从$t=1$到$t=\tau$的每个时间步，更新方程为</p>
<script type="math/tex; mode=display">
\boldsymbol{a}^{(t)} = \boldsymbol{b} + \boldsymbol{W}\boldsymbol{h}^{(t-1)}  + \boldsymbol{U}\boldsymbol{x}^{(t)}
\\
\boldsymbol{h}^{(t)} = \tanh(\boldsymbol{a}^{(t)})
\\
\boldsymbol{o}^{(t)} = \boldsymbol{c} + \boldsymbol{V}\boldsymbol{h}^{(t)}
\\
\hat{\boldsymbol{y}}^{(t)} = softmax(\boldsymbol{o}^{(t)})</script><p>偏置向量$\boldsymbol{b, c}$分别对应于输入到隐藏和隐藏到输出的连接。我们将一个输入序列映射到相同长度的输出序列。总损失就是所有时间步的损失之和。例如$L^{(t)}$为给定的$\boldsymbol{x}^{(1)},…,\boldsymbol{x}^{(t)}$后$\boldsymbol{y}^{(t)}$的负对数似然，则</p>
<script type="math/tex; mode=display">
L(\{ \boldsymbol{x}^{(1)},...,\boldsymbol{x}^{(\tau)} \}, \{ \boldsymbol{y}^{(1)},...,\boldsymbol{y}^{(\tau)} \})
\\
= \sum_t L^{(t)}
\\
= - \sum_t \log p_{model}(\boldsymbol{y}^{(t)}|\{ \boldsymbol{x}^{(1)},...,\boldsymbol{x}^{(t)} \})</script><p>关于各个参数计算这个损失函数的梯度是计算成本很高的操作。梯度计算涉及执行一次前向传播，接着是由右到左的反向传播。运行时间是$O(\tau)$，并且不能通过并行化来降低，因为前向传播图是固有循序的；每个时间步只能一前一后地计算。前向传播中的各个状态必须保存，直到它们反向传播中被再次使用，因此内存代价也是$O(\tau)$。应用于展开图且代价为$O(\tau)$的反向传播算法称为<strong>通过时间反向传播BPTT</strong>。</p>
<h3 id="2-2-导师驱动过程和输出循环网络"><a href="#2-2-导师驱动过程和输出循环网络" class="headerlink" title="2.2 导师驱动过程和输出循环网络"></a>2.2 导师驱动过程和输出循环网络</h3><!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/rnn2.png" alt="rnn2.png"></p>
<p>这个网络在一个时间步的输出和下一个时间步的隐藏单元间存在循环网络，这就导致了丢失了隐藏单元到隐藏单元间对于序列变化的信息。但是优点在于基于训练集提供的输出的理想值，我们没有必要计算前一时刻的输出，所以我们可以并行计算所有时间步的梯度。</p>
<p>由输出反馈到模型而产生循环连接的模型可用<strong>导师驱动过程</strong>进行训练。训练模型时，导师驱动过程不再使用最大似然准则，而在时刻$t+1$接收真实值$y^{(t)}$作为输入。我们可以通过检查两个时间步的序列得知这一点。条件最大似然准则是</p>
<script type="math/tex; mode=display">
\log p(\boldsymbol{y}^{(1)},\boldsymbol{y}^{(2)}|\boldsymbol{x}^{(1)},\boldsymbol{x}^{(2)})
\\
\log p(\boldsymbol{y}^{(2)}|\boldsymbol{y}^{(1)},\boldsymbol{x}^{(1)},\boldsymbol{x}^{(2)}) + \log p(\boldsymbol{y}^{(1)}|\boldsymbol{x}^{(1)},\boldsymbol{x}^{(2)})</script><!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/rnn3.png" alt="rnn3.png"></p>
<p>我们使用导师驱动过程的最初动机是为了在缺乏隐藏到隐藏连接的模型中避免通过时间反向传播。只要模型一个时间步的输出与下一时间步计算的值存在连接，导师驱动过程仍然可以应用到这些存在隐藏到隐藏连接的模型。然而，只要隐藏单元成为较早时间步的函数，BPTT算法是必要的。因此训练某些模型时要同时使用导师驱动过程和BPTT。</p>
<p>如果之后网络在开环 (open-loop) 模式下使用，即网络输出（或输出分布的样本）反馈作为输入，那么完全使用导师驱动过程进行训练的缺点就会出现。如上图所示，训练过程中的反馈与实际部署时的反馈是不同的。</p>
<p>在这种情况下，训练期间该网络看到的输入与测试时看到的会有很大的不同。减轻此问题的一种方法是同时使用导师驱动过程和自由运行的输入进行训练，例如在展开循环的输出到输入路径上预测几个步骤的正确目标值。</p>
<p>通过这种方式，网络可以学会考虑在训练时没有接触到的输入条件（如自由运行模式下，自身生成自身），以及将状态映射回使网络几步之后生成正确输出的状态。另外一种方式是通过随意选择生成值或真实的数据值作为输入以减小训练时和测试时看到的输入之间的差别。这种方法利用了课程学习策略，逐步使用更多生成值作为输入。</p>
<h3 id="2-3-计算循环神经网络的梯度"><a href="#2-3-计算循环神经网络的梯度" class="headerlink" title="2.3 计算循环神经网络的梯度"></a>2.3 计算循环神经网络的梯度</h3><p>回顾一下前向传播的公式</p>
<script type="math/tex; mode=display">
\boldsymbol{a}^{(t)} = \boldsymbol{b} + \boldsymbol{W}\boldsymbol{h}^{(t-1)}  + \boldsymbol{U}\boldsymbol{x}^{(t)}
\\
\boldsymbol{h}^{(t)} = \tanh(\boldsymbol{a}^{(t)})
\\
\boldsymbol{o}^{(t)} = \boldsymbol{c} + \boldsymbol{V}\boldsymbol{h}^{(t)}
\\
\hat{\boldsymbol{y}}^{(t)} = softmax(\boldsymbol{o}^{(t)})</script><p>我们做出的假设是：真实值和输入值都是onehot变量（对应于字或者词的字典模型），预测值是形状相同的概率输出，考虑onehot的每一位$i$，损失$L^{(t)}$为</p>
<script type="math/tex; mode=display">
L^{(t)} = -\sum_iy_i^{(t)}\log \hat{y}^{(t)}_i</script><p>再考虑整体损失</p>
<script type="math/tex; mode=display">
L(\{ \boldsymbol{x}^{(1)},...,\boldsymbol{x}^{(\tau)} \}, \{ \boldsymbol{y}^{(1)},...,\boldsymbol{y}^{(\tau)} \})
\\
= \sum_t L^{(t)}</script><p>可以得到</p>
<script type="math/tex; mode=display">
\frac{\partial L}{\partial L^{(t)}} = 1
\\
(\bigtriangledown_{\boldsymbol{o}^{(t)}}L)_i = \frac{\partial L}{\partial o^{(t)}_i} = \frac{\partial L}{\partial L^{(t)}}\frac{\partial L^{(t)}}{\partial o_i^{(t)}} = \hat{y}^{(t)}_i - \boldsymbol{1}_{i, y^{(t)}}</script><p>上面的式子其实并不复杂，对于onehot变量来说，$\boldsymbol{y}^{(t)}$中只有一位为1，其余位都为0，也就是说，对于$\boldsymbol{o}^{(t)}$来说，梯度简单到就是预测值与真实值的差值。具体证明参考<code>深度学习-激活函数</code>。</p>
<p>基于上式，我们可以对最后的时间步$\tau$的$\boldsymbol{h}^{(\tau)}$进行求导计算</p>
<script type="math/tex; mode=display">
\bigtriangledown_{\boldsymbol{h}^{(\tau)}}L = \boldsymbol{V}^T\bigtriangledown_{\boldsymbol{o}^{(\tau)}}L</script><p>然后，计算从时刻$t= \tau - 1$到$t=1$反向迭代，通过时间反向传播梯度，由于$\boldsymbol{h}^{(t)}(t &lt; \tau)$同时存在于$\boldsymbol{o}^{(t)}$和$\boldsymbol{h}^{(t+1)}$中，因此梯度计算需要考虑两个部分</p>
<script type="math/tex; mode=display">
\bigtriangledown_{\boldsymbol{h}^{(t)}}L=(\frac{\partial \boldsymbol{h}^{(t+1)}}{\partial \boldsymbol{h}^{(t)}})^T(\bigtriangledown_{\boldsymbol{h}^{(t+1)}}L) + (\frac{\partial \boldsymbol{o}^{(t)}}{\partial \boldsymbol{h}^{(t)}})^T(\bigtriangledown_{\boldsymbol{o}^{(t)}}L)
\\
= \boldsymbol{W}^T(\bigtriangledown_{\boldsymbol{h}^{(t+1)}}L)diag(1-(\boldsymbol{h}^{(t+1)})^2) + \boldsymbol{V}^T(\bigtriangledown_{\boldsymbol{o}^{(t)}}L)</script><p>$\tanh$求导参考<code>深度学习-激活函数</code>，其中$diag(1-(\boldsymbol{h}^{(t+1)})^2)$表示包含元素$1-(h_i^{(t+1)})^2$的对角矩阵。</p>
<p>其他参数是时间步共享的，那么需要使用$t$时刻的虚拟变量$\boldsymbol{W}^{(t)}$作为$\boldsymbol{W}$的副本，然后计算在时间步$t$权重对梯度的贡献。</p>
<script type="math/tex; mode=display">
\bigtriangledown_\boldsymbol{c}L = \sum_t(\frac{\partial \boldsymbol{o}^{(t)}}{\partial \boldsymbol{c}})^T\bigtriangledown_{\boldsymbol{o}^{(t)}}L = \sum_t\bigtriangledown_{\boldsymbol{o}^{(t)}}L
\\
\bigtriangledown_\boldsymbol{b}L = \sum_t(\frac{\partial \boldsymbol{h}^{(t)}}{\partial \boldsymbol{b}})^T\bigtriangledown_{\boldsymbol{h}^{(t)}}L = \sum_t diag(1-(\boldsymbol{h}^{(t)})^2) \bigtriangledown_{\boldsymbol{h}^{(t)}}L
\\
\bigtriangledown_\boldsymbol{V}L = \sum_t\sum_i(\frac{\partial L}{\partial o_i^{(t)}})\bigtriangledown_{\boldsymbol{V}^{(t)}}o_i^{(t)} = \sum_t (\bigtriangledown_{\boldsymbol{o}^{(t)}}L) \boldsymbol{h}^{(t)^T}
\\
\bigtriangledown_\boldsymbol{W}L = \sum_t\sum_i(\frac{\partial L}{\partial h_i^{(t)}})\bigtriangledown_{\boldsymbol{W}^{(t)}}h_i^{(t)}
= \sum_t diag(1-(\boldsymbol{h}^{(t)})^2) (\bigtriangledown_{\boldsymbol{h}^{(t)}}L)\boldsymbol{h}^{(t-1)^T}
\\
\bigtriangledown_\boldsymbol{U}L = \sum_t\sum_i(\frac{\partial L}{\partial h_i^{(t)}})\bigtriangledown_{\boldsymbol{U}^{(t)}}h_i^{(t)}
= \sum_t diag(1-(\boldsymbol{h}^{(t)})^2) (\bigtriangledown_{\boldsymbol{h}^{(t)}}L)\boldsymbol{x}^{(t)^T}</script><h3 id="2-4-作为有向图模型的循环网络"><a href="#2-4-作为有向图模型的循环网络" class="headerlink" title="2.4 作为有向图模型的循环网络"></a>2.4 作为有向图模型的循环网络</h3><p>本节描述没有输入$\boldsymbol{x}$的情况下，RNN如何对应于有向图模型。</p>
<p>与前馈网络类似，原则上循环网络几乎可以使用任何损失。但必须根据任务来选择损失。如前馈网络，我们通常希望将RNN的输出解释为一个概率分布，并且我们通常使用与分布相关联的交叉熵来定义损失。均方误差是与单位高斯分布的输出相关联的交叉熵损失，例如前馈网络中所使用的。</p>
<p>若不考虑输入$x$，仅考虑输出$y^{(t)}$与之前序列的关系，我们可以得到一个全连接图模型，这种情况下，计算的是链式条件概率，比较类似马尔可夫链</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/rnn4.png" alt="rnn4.png"></p>
<p>若考虑引入隐藏的状态变量，则可以利用$\boldsymbol{h}$保存历史的信息，由于参数共享，RNN 的参数数目为$O(1)$且是序列长度的函数。我们可以调节RNN的参数数量来控制模型容量，但不用被迫与序列长度成比例。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/rnn5.png" alt="rnn5.png"></p>
<p>循环网络为减少的参数数目付出的代价是优化参数可能变得困难。</p>
<p>在循环网络中使用的参数共享的前提是相同参数可用于不同时间步的假设。也就是说，假设给定时刻$t$的变量后，时刻$t + 1$变量的条件概率分布是平稳的，这意味着之前的时间步与下个时间步之间的关系并不依赖于$t$。虽然$t$可以用作额外的输入。</p>
<p>为了完整描述将RNN作为图模型的观点，我们必须描述如何从模型采样。我们需要执行的主要操作是简单地从每一时间步的条件分布采样。</p>
<ol>
<li>在训练样本$\boldsymbol{x}^{(\tau)}$后增加一个特殊符号，当产生该符号时，停止训练；</li>
<li>模型中引入一个额外的伯努利输出，表示在每个时间步决定继续生成或停止生成。新的输出单元通常使用 sigmoid 单元，并通过交叉熵训练。在这种方法中，sigmoid 被训练为最大化正确预测的对数似然，即在每个时间步序列决定结束或继续；</li>
<li>将一个额外的输出添加到模型并预测整数$\tau$本身。模型可以采出$\tau$的值，然后采$\tau$步有价值的数据。这种方法需要在每个时间步的循环更新中增加一个额外输入，使得循环更新知道它是否是靠近所产生序列的末尾。这种额外的输入可以是$\tau$的值，也可以是$\tau - t$即剩下时间步的数量。</li>
</ol>
<h3 id="2-5-基于上下文的RNN序列建模"><a href="#2-5-基于上下文的RNN序列建模" class="headerlink" title="2.5 基于上下文的RNN序列建模"></a>2.5 基于上下文的RNN序列建模</h3><p>本节描述输入$\boldsymbol{x}$为单个向量的情况下，RNN的模型。</p>
<p>那么我们可以将$\boldsymbol{x}$看作产生$\boldsymbol{y}$序列RNN的额外输入。常见做法是：</p>
<ol>
<li>在每个时刻作为一个额外输入，即每个时刻都输入相同的$\boldsymbol{x}$；</li>
<li>作为初始状态，即根据输入$\boldsymbol{x}$预测后面所有的序列；</li>
<li>结合两种方式。</li>
</ol>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/rnn6.png" alt="rnn6.png"></p>
<p>对于1，输入到隐藏向量之间通过矩阵$\boldsymbol{R}$参数化，这类RNN适用于很多任务如图注，其中单个图像作为模型的输入，然后产生描述图像的词序列。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/rnn7.png" alt="rnn7.png"></p>
<p>将可变长度的$\boldsymbol{x}$值序列映射到相同长度的$\boldsymbol{y}$值序列上分布的条件循环神经网络。</p>
<h2 id="3-双向RNN"><a href="#3-双向RNN" class="headerlink" title="3. 双向RNN"></a>3. 双向RNN</h2><p>目前为止考虑的RNN有一种因果结构，即时刻$t$的状态只能从过去的序列$\boldsymbol{x}^{(1)},…,\boldsymbol{x}^{(t-1)}$以及当前输入$\boldsymbol{x}^{(t)}$捕获。或者在$\boldsymbol{y}$可用的情况下允许过去的$\boldsymbol{y}$影响当前状态的模型。</p>
<p>在许多应用中，输出$\boldsymbol{y}^{(t)}$的预测可能依赖于整个输入序列。可能需要从更远的未来寻找信息区分它们。比如语音识别，音素的判断。</p>
<p>双向RNN就是这样被发明了。双向RNN结合时间上从序列起点开始移动的RNN和另一个时间上从序列末尾开始移动的RNN。其中$\boldsymbol{h}^{(t)}$代表通过时间向前移动的子RNN的状态，$\boldsymbol{g}^{(t)}$代表通过时间向后移动的子RNN的状态。这允许输出单元$\boldsymbol{o}^{(t)}$能够计算同时依赖于过去和未来且对时刻$t$的输入值最敏感的表示，而不必指定$t$周围固定大小的窗口（这是前馈网络、卷积网络或具有固定大小的先行缓存器的常规RNN所必须要做的）。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/rnn8.png" alt="rnn8.png"></p>
<p>扩展这个想法到2维输入，如图象，由4个RNN组成，沿四个方向：上下左右。实际上，对于这样的RNN，前向传播公式可以写成表示使用卷积的形式，计算自底向上到每一层的输入（在整合横向相互作用的特征图的循环传播之前）。</p>
<h2 id="4-基于编码-解码的序列到序列架构"><a href="#4-基于编码-解码的序列到序列架构" class="headerlink" title="4. 基于编码-解码的序列到序列架构"></a>4. 基于编码-解码的序列到序列架构</h2><p>目的将可变长度序列映射到另一可变长度序列。</p>
<p>我们经常将RNN的输入称为“上下文”。我们希望产生此上下文的表示$C$。这<br>个上下文$C$可能是一个概括输入序列$\boldsymbol{X} = (\boldsymbol{x}^{(1)},…,\boldsymbol{x}^{(n_x)})$的向量或者向量序列。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/rnn9.png" alt="rnn9.png"></p>
<p>编码-解码或者序列到序列的架构，基本思路：</p>
<ol>
<li>编码器或输入RNN处理输入序列，编码器输出上下文$C$（通常是最终隐藏状态的简单函数）；</li>
<li>解码器或输出RNN则以固定长度的向量为条件产生输出序列$\boldsymbol{Y} = (\boldsymbol{y}^{(1)},…,\boldsymbol{y}^{(n_y)})$。</li>
</ol>
<p>序列长度$n<em>x,n_y$可以彼此不同。两个RNN共同训练以最大化$\log P(\boldsymbol{y}^{(1)},…,\boldsymbol{y}^{(n_y)}|\boldsymbol{x}^{(1)},…,\boldsymbol{x}^{(n_x)})$（关于训练集中所有$\boldsymbol{x}$和$\boldsymbol{y}$对的平均）。编码器RNN的最后一个状态$\boldsymbol{h}</em>{n_x}$通常被当作输入的表示$C$并作为解码器RNN的输入。</p>
<p>这里并不强制要求编码器与解码器的隐藏层具有相同的大小。</p>
<p>此架构的一个明显不足是，编码器RNN输出的上下文$C$的维度太小而难以适当地概括一个长序列。<br>让$C$成为可变长度的序列，而不是一个固定大小的向量；<br>将序列$C$的元素和输出序列的元素相关联的<strong>注意力机制</strong>。</p>
<h2 id="5-深度循环网络"><a href="#5-深度循环网络" class="headerlink" title="5. 深度循环网络"></a>5. 深度循环网络</h2><p>大多数RNN中的计算可以分解为三块参数及其相关的变换：</p>
<ol>
<li>从输入到隐藏状态；</li>
<li>从前一隐藏状态到下一隐藏状态；</li>
<li>从隐藏状态到输出。</li>
</ol>
<p>深度RNN，简而言之就是将MLP引入到RNN前向传播过程中与参数矩阵有关的位置。一般来说，简单的RNN的三个参数矩阵$\boldsymbol{U,W,V}$形状应该是$输入向量的维度 \times 输出向量的维度$，若需要保存更多的信息，我们只能简单的靠增加维度来实现，但是这样对运算来说是不合理的，显然，我们可以考虑将DNN引入进来，以增加参数矩阵的深度。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/rnn10.png" alt="rnn10.png"></p>
<ol>
<li>如图a，分解隐藏状态的层次；</li>
<li>如图b，分别对三个参数矩阵应用MLP，这会导致隐藏状态到下一隐藏状态的路径加倍；</li>
<li>如图c，引入跳跃连接缓解路径问题。</li>
</ol>
<h2 id="6-递归神经网络"><a href="#6-递归神经网络" class="headerlink" title="6. 递归神经网络"></a>6. 递归神经网络</h2><p>递归神经网络代表循环网络的另一个扩展，它被构造为深的树状结构而不是RNN的链状结构，因此是不同类型的计算图。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/rnn11.png" alt="rnn11.png"></p>
<p>这类网络的潜在用途-学习推论。递归网络已成功地应用于输入是数据结构的神经网络。<br>递归网络的一个明显优势是，对于具有相同长度$\tau$的序列，深度（通过非线性操作的组合数量来衡量）可以急剧地从$\tau$减小为$O(\log \tau)$，这可能有助于解决长期依赖。<br>一个悬而未决的问题是如何以最佳的方式构造树。一种选择是使用不依赖于数据的树结构，如平衡二叉树。在某些应用领域，外部方法可以为选择适当的树结构提供借鉴。例如，处理自然语言的句子时，用于递归网络的树结构可以被固定为句子语法分析树的结构（可以由自然语言语法分析程序提供）。理想的情况下，人们希望学习器自行发现和推断适合于任意给定输入的树结构。</p>
<h2 id="7-长期依赖的挑战"><a href="#7-长期依赖的挑战" class="headerlink" title="7. 长期依赖的挑战"></a>7. 长期依赖的挑战</h2><p>长期依赖的挑战根本问题是，经过许多阶段传播后的梯度倾向于消失（大部分情况）或爆炸（很少，但对优化过程影响很大）。</p>
<p>循环神经网络所使用的函数组合有点像矩阵乘法，可以认为</p>
<script type="math/tex; mode=display">
\boldsymbol{h}^{(t)} = \boldsymbol{W}^T\boldsymbol{h}^{(t-1)}</script><p>是一个简单的、缺少非线性激活函数和输入的循环神经网络。根据递推关系</p>
<script type="math/tex; mode=display">
\boldsymbol{h}^{(t)} = (\boldsymbol{W}^t)^T\boldsymbol{h}^{(0)}</script><p>而当$\boldsymbol{W}$符合下列形式的特征分解</p>
<script type="math/tex; mode=display">
\boldsymbol{W} = \boldsymbol{Q\Lambda Q}^T</script><p>其中$\boldsymbol{Q}$正交，循环型可进一步简化为</p>
<script type="math/tex; mode=display">
\boldsymbol{h}^{(t)} = \boldsymbol{Q}^T\boldsymbol{\Lambda}^t\boldsymbol{Qh}^{(0)}</script><p>显然，$\boldsymbol{\Lambda}$中小于1的特征值会衰减到0，大于1的特征值会激增。任何不与最大特征向量对齐的$\boldsymbol{h}^{(0)}$的部分将最终被丢弃。</p>
<p>如果每个时刻使用不同的权重$w^{(t)}$，情况就不同了。假设$w^{(t)}$的值是随机生成的，各自独立且均值为0方差为$v$，乘积的方差为$O(v^n)$。如果我们希望最终结果的方差为$v^<em>$，我们就可以选择单个方差为$v=\sqrt[n]{v^</em>}$的权重。因此，非常深的前馈网络通过精心设计的比例可以避免梯度消失和爆炸问题。</p>
<p>为了储存记忆并对小扰动具有鲁棒性，RNN必须进入参数空间中的梯度消失区域。具体来说，每当模型能够表示长期依赖时，长期相互作用的梯度幅值就会变得指数小（相比短期相互作用的梯度幅值）。这并不意味着这是不可能学习的，由于长期依赖关系的信号很容易被短期相关性产生的最小波动隐藏，因而学习长期依赖可能需要很长的时间。</p>
<h2 id="8-回声状态网络"><a href="#8-回声状态网络" class="headerlink" title="8. 回声状态网络"></a>8. 回声状态网络</h2><p>从$\boldsymbol{h}^{(t-1)}$到$\boldsymbol{h}^{(t)}$的循环权重映射以及从$\boldsymbol{x}^{(t)}$到$\boldsymbol{h}^{(t)}$的输入权重映射是循环网络中最难学习的参数。<br>避免这种困难的方法是设定循环隐藏单元，使其能很好地捕捉过去输入历史，并且只学习输出权重。</p>
<p>回声状态网络ESN以及流体状态机就是基于上述思想的模型。ESN和流体状态机都被称为<strong>储层计算</strong>，因为隐藏单元形成了可能捕获输入历史不同方面的临时特征池。</p>
<p>储层计算循环网络类似于核机器，这是思考它们的一种方式：它们将任意长度的序列（到时刻$t$的输入历史）映射为一个长度固定的向量（循环状态$\boldsymbol{h}^{(t)}$），之后可以施加一个线性预测算子（通常是一个线性回归）以解决感兴趣的问题。训练准则就可以很容易地设计为输出权重的凸函数。例如，如果输出是从隐藏单元到输出目标的线性回归，训练准则就是均方误差，由于是凸的就可以用简单的学习算法可靠地解决。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/rnn12.png" alt="rnn12.png"></p>
<p>网络结构依次是输入层、储备池和输出层，所谓的储备池就是中间的部分。这个储备池的特点是: (1)储备池中神经元的连接状态是随机的，即神经元之间是否建立连接并不是我们人工确定的；(2)储备池中的连接权重是固定的，不像传统的MLP网络使用梯度下降进行权重的更新。这样做的好处是：(1)大大降低了训练的计算量；(2)一定程度上避免了梯度下降的优化算法中出现的局部极小情况；(3)此外，在很多问题上确实有着不错的建模能力。ESN的基本思想就是由储备池生成一个随输入不断变化的复杂动态空间，当这个状态空间足够复杂时，就可以利用这些内部状态, 线性地组合处所需要的对应输出~(实际上就是传统的MLP拟合的能力)。</p>
<p>最初的想法是使状态到状态转换函数的Jacobian矩阵的特征值接近1。循环网络的一个重要特征就是Jacobian矩阵的特征值谱$\boldsymbol{J}^{(t)} = \frac{\partial s^{(t)}}{\partial s^{(t-1)}}$。特别重要的是$\boldsymbol{J}^{(t)}$的<strong>谱半径</strong>，定义为特征值的最大绝对值。</p>
<p>同理，在矩阵$\boldsymbol{J}$不随$t$改变的简单情况下，矩阵$\boldsymbol{J}$大于1的的特征值会导致偏差指数增大，小于1的会导致偏差变得指数小。</p>
<p>当非线性存在时，非线性的导数将在许多时间步后接近0，并有助于防止因过大的谱半径而导致的爆炸。事实上，关于回声状态网络的最近工作提倡使用远大于1的谱半径。</p>
<p>需要注意的是，$\boldsymbol{W}$和$\boldsymbol{J}$都不需要是对称的（尽管它们是实方阵），因此它们可能有复的特征值和特征向量，其中虚数分量对应于潜在的振荡行为（如果迭代地应用同一Jacobian）。即使$\boldsymbol{h}^{(t)}$或$\boldsymbol{h}^{(t)}$中有趣的小变化在反向传播中是实值的，它们仍可以用这样的复数基表示。</p>
<p>非线性映射情况时，Jacobian会在每一步任意变化。因此，动态量变得更加复杂。然而，一个小的初始变化多步之后仍然会变成一个大的变化。纯线性和非线性情况的一个不同之处在于使用压缩非线性（如$\tanh$）可以使循环动态量有界。注意，即使前向传播动态量有界，反向传播的动态量仍然可能无界，例如，当$\tanh$序列都在它们状态中间的线性部分，并且由谱半径大于1的权重矩阵连接。然而，所有$\tanh$单元同时位于它们的线性激活点是非常罕见的。</p>
<p>回声状态网络的策略是简单地固定权重使其具有一定的谱半径如3，其中信息通过时间前向传播，但会由于饱和非线性单元（如$\tanh$）的稳定作用而不会爆炸。</p>
<p><strong>ESN的构造过程</strong></p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/rnn13.png" alt="rnn13.png"></p>
<h2 id="9-渗漏单元和其他多时间尺度的策略"><a href="#9-渗漏单元和其他多时间尺度的策略" class="headerlink" title="9. 渗漏单元和其他多时间尺度的策略"></a>9. 渗漏单元和其他多时间尺度的策略</h2><p>处理长期依赖的一种方法是设计工作在多个时间尺度的模型，使模型的某些部分在细粒度时间尺度上操作并能处理小细节，而其他部分在粗时间尺度上操作并能把遥远过去的信息更有效地传递过来。存在多种同时构建粗细时间尺度的策略。这些策略包括在时间轴增加跳跃连接，“渗漏单元”使用不同时间常数整合信号，并去除一些用于建模细粒度时间尺度的连接。</p>
<h3 id="9-1-时间维度的跳跃连接"><a href="#9-1-时间维度的跳跃连接" class="headerlink" title="9.1 时间维度的跳跃连接"></a>9.1 时间维度的跳跃连接</h3><p>将循环网络延时，从$t$到$t+1$延长到从$t$到$t+d$，那么梯度下降的速度与$\frac{\tau}{d}$相关而不是$\tau$。虽然仍然存在指数爆炸的可能性，但是时间跨度变长了，算法捕捉到更长的依赖性。</p>
<h3 id="9-2-渗漏单元和一系列不同时间尺度"><a href="#9-2-渗漏单元和一系列不同时间尺度" class="headerlink" title="9.2 渗漏单元和一系列不同时间尺度"></a>9.2 渗漏单元和一系列不同时间尺度</h3><p>渗漏单元：参数更新方式为$\mu^{(t)} \leftarrow \alpha \mu^{(t-1)} + (1-\alpha)v^{(t)}$。其目的是通过一个累积的滑动平均值$\mu^{(t)}$模拟滑动平均，从而达到记住过去的信息，当$\alpha$接近1时，滑动平均值能记住过去很长一段时间的信息，当$\alpha$接近0时，关于过去的信息被迅速丢弃。</p>
<p>一般通过两种基本策略设置渗漏单元使用的时间常数。一种策略是手动将其固定为常数，例如在初始化时从某些分布采样它们的值。另一种策略是使时间常数成为自由变量，并学习出来。在不同时间尺度使用这样的渗漏单元似乎能帮助学习长期依赖。</p>
<h3 id="9-3-删除连接"><a href="#9-3-删除连接" class="headerlink" title="9.3 删除连接"></a>9.3 删除连接</h3><p>处理长期依赖另一种方法是在多个时间尺度组织RNN状态的想法，信息在较慢的时间尺度上更容易长距离流动。</p>
<p>这个想法与之前讨论的时间维度上的跳跃连接不同，因为它涉及主动删除长度为一的连接并用更长的连接替换它们。以这种方式修改的单元被迫在长时间尺度上运作。而通过时间跳跃连接是添加边。收到这种新连接的单元，可以学习在长时间尺度上运作，但也可以选择专注于自己其他的短期连接。</p>
<p>强制一组循环单元在不同时间尺度上运作有不同的方式。一种选择是使循环单元变成渗漏单元，但不同的单元组关联不同的固定时间尺度。另一种选择是使显式且离散的更新发生在不同的时间，不同的单元组有不同的频率。</p>
<h2 id="10-长短期记忆和其他门控RNN"><a href="#10-长短期记忆和其他门控RNN" class="headerlink" title="10. 长短期记忆和其他门控RNN"></a>10. 长短期记忆和其他门控RNN</h2><p>实际应用中常使用基于<strong>长短期记忆</strong>和基于<strong>门控循环单元</strong>的网络。</p>
<p>像渗漏单元一样，门控RNN想法也是基于生成通过时间的路径，其中导数既不消失也不发生爆炸。渗漏单元通过手动选择常量的连接权重或参数化的连接权重来达到这一目的。门控RNN将其推广为在每个时间步都可能改变的连接权重。</p>
<p>渗漏单元允许网络在较长持续时间内积累信息（诸如用于特定特征或类的线索）。然而，一旦该信息被使用，让神经网络遗忘旧的状态可能是有用的。例如，如果一个序列是由子序列组成，我们希望渗漏单元能在各子序列内积累线索，我们需要将状态设置为0以忘记旧状态的机制。我们希望神经网络学会决定何时清除状态，而不是手动决定。这就是门控RNN要做的事。</p>
<h3 id="10-1-LSTM"><a href="#10-1-LSTM" class="headerlink" title="10.1 LSTM"></a>10.1 LSTM</h3><p>长短期记忆，通过引入自循环以产生梯度长时间持续流动的路径。同时空过另一个隐藏单元实现门控自循环的权重，累积的时间尺度可以动态地改变。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/rnn15.png" alt="rnn15.png"></p>
<p>LSTM循环网络除了外部的RNN循环外，还具有内部的LSTM细胞循环，因此LSTM不是简单地向输入和循环单元的仿射变换之后施加一个逐元素的非线性。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/rnn14.png" alt="rnn14.png"></p>
<ul>
<li>最下方的<code>input, input gate, forget gate, output gate</code>的输入都是相同的，一个是当前时刻的输入$\boldsymbol{x}^{(t)}$，另一个是前一时刻的隐藏单元$\boldsymbol{h}^{(t-1)}$；</li>
<li>最重要的部分是状态单元$s_i^{(t)}$，也就是<code>self-loop</code>对应的位置，此处自环的权重（或相关联的时间常数）由遗忘门$f_i^{(t)}$控制，由sigmoid单元将权重设置为0和1之间的值：<script type="math/tex; mode=display">
f_i^{(t)} = \sigma(b_i^f + \sum_jU^f_{i,j}x_j^{(t)} + \sum_jW^f_{i,j}h_j^{(t-1)})</script></li>
<li>其中$\boldsymbol{x}^{(t)}$是当前输入向量，$\boldsymbol{h}^t$是当前隐藏层向量，$\boldsymbol{b}^f, \boldsymbol{U}^f, \boldsymbol{W}^f$分别是偏置、输入权重和遗忘门的循环权重；</li>
<li>状态单元更新方式为：</li>
</ul>
<script type="math/tex; mode=display">
s_i^{(t)} = f_i^{(t)}s_i^{(t-1)} + g_i^{(t)}\sigma(b_i + \sum_j U_{i,j}x_j^{(t)} + \sum_j W_{i,j}h_j^{(t-1)})</script><ul>
<li>外部输入门单元$g_i^{(t)}$的更新方式：</li>
</ul>
<script type="math/tex; mode=display">
g_i^{(t)} = \sigma(b_i^g + \sum_j U^g_{i,j}x_j^{(t)} + \sum_j W^g_{i,j}h_j^{(t-1)})</script><ul>
<li>输出门$q_i^{(t)}$控制LSTM细胞的输出$h_i^{(t)}$：</li>
</ul>
<script type="math/tex; mode=display">
h_i^{(t)} = \tanh(s_i^{(t)})q_i^{(t)}
\\
q_i^{(t)} = \sigma(b_i^o + \sum_jU^o_{i,j}x_j^{(t)} + \sum_jW^o_{i,j}h_j^{(t-1)})</script><ul>
<li>在LSTM变体中，可以选择使用状态单元$s_i^{(t)}$作为额外的输入，输入到第$i$个单元的三个门，同时也需要额外的三个参数。</li>
</ul>
<p>LSTM网络比简单的循环架构更易于学习长期依赖。</p>
<h3 id="10-2-其他门控RNN"><a href="#10-2-其他门控RNN" class="headerlink" title="10.2 其他门控RNN"></a>10.2 其他门控RNN</h3><p>门控RNN的单元被称为门控循环单元GRU。与LSTM的主要区别是，单个门控单元同时控制遗忘因子和更新状态单元的决定。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/rnn16.jpg" alt="rnn16.jpg"></p>
<script type="math/tex; mode=display">
h_i^{(t)} = u_i^{(t-1)}h_i^{(t-1)} + (1-u_i^{t-1})\sigma(b_i + \sum_jU_{i,j}x_j^{(t)} + \sum_jW_{i,j}r_j^{(t-1)}h_j^{(t-1)})</script><p>其中$\boldsymbol{u}$代表更新门，$\boldsymbol{r}$表示复位门（重置门）</p>
<script type="math/tex; mode=display">
u_i^{(t)} = \sigma(b_i^u + \sum_jU^u_{i,j}x_j^{(t)} + \sum_jW^u_{i,j}h_j^{(t)})
\\
r_i^{(t)} = \sigma(b_i^r + \sum_jU^r_{i,j}x_j^{(t)} + \sum_jW^r_{i,j}h_j^{(t)})</script><p>复位和更新门能独立地“忽略”状态向量的一部分。更新门像条件渗漏累积器一样可以线性门控任意维度，从而选择将它复制（在sigmoid的一个极端）或完全由新的“目标状态”值（朝向渗漏累积器的收敛方向）替换并完全忽略它（在另一个极端）。复位门控制当前状态中哪些部分用于计算下一个目标状态，在过去状态和未来状态之间引入了附加的非线性效应。</p>
<p>围绕这一主题可以设计更多的变种。例如复位门（或遗忘门）的输出可以在多个隐藏单元间共享。或者，全局门的乘积（覆盖一整组的单元，例如整一层）和一个局部门（每单元）可用于结合全局控制和局部控制。然而，一些调查发现这些LSTM和GRU架构的变种，在广泛的任务中难以明显地同时击败这两个原始架构。</p>
<h2 id="11-优化长期依赖"><a href="#11-优化长期依赖" class="headerlink" title="11. 优化长期依赖"></a>11. 优化长期依赖</h2><p>二阶导数可能在一阶导数消失的同时消失。二阶优化算法可以大致被理解为将一阶导数除以二阶导数（在更高维数，由梯度乘以Hessian的逆）。如果二阶导数与一阶导数以类似的速率收缩，那么一阶和二阶导数的比率可保持相对恒定。不幸的是，二阶方法有许多缺点，包括高的计算成本、需要一个大的小批量、并且倾向于被吸引到鞍点。</p>
<p>使用较简单的方法可以达到类似的结果，例如经过谨慎初始化的Nesterov动量法。应用于LSTM时，这两种方法在很大程度上会被单纯的 SGD（甚至没有动量）取代。这是机器学习中一个延续的主题，设计一个易于优化模型通常比设计出更加强大的优化算法更容易。</p>
<h3 id="11-1-截断梯度"><a href="#11-1-截断梯度" class="headerlink" title="11.1 截断梯度"></a>11.1 截断梯度</h3><!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/rnn17.png" alt="rnn17.png"></p>
<p>由于RNN中存在$\boldsymbol{h}^{(t)}$的循环，因此在梯度下降时很容易遇到临界值为1的情况，当参数大于1时，梯度下降很大，导致参数更新步伐很大。因此，需要在这样的悬崖使用更小的学习率以中和梯度下降的速度。</p>
<p>一个简单的解决方案是<strong>截断梯度</strong>。一种方式是在参数更新之前，逐元素地截断小批量产生地参数梯度；另一种是在参数更新之前截断梯度$\boldsymbol{g}$地范数$||\boldsymbol{g}||$</p>
<script type="math/tex; mode=display">
if \quad ||\boldsymbol{g}|| > v
\\
\boldsymbol{g} \leftarrow \frac{\boldsymbol{g}v}{||\boldsymbol{g}||}</script><p>其中$v$是范数上界，$\boldsymbol{g}$用来更新参数。</p>
<p>如果爆炸非常严重，梯度数值上为$Inf$或$Nan$（无穷大或不是一个数字），则可以采取大小为$v$的随机一步，通常会离开数值不稳定的状态。截断每小批量梯度范数不会改变单个小批量的梯度方向。然而，许多小批量使用范数截断梯度后的平均值不等同于截断真实梯度（使用所有的实例所形成的梯度）的范数。大导数范数的样本，和像这样的出现在同一小批量的样本，其对最终方向的贡献将消失。不像传统小批量梯度下降，其中真实梯度的方向是等于所有小批量梯度的平均。换句话说，传统的随机梯度下降使用梯度的无偏估计，而与使用范数截断的梯度下降引入了经验上是有用的启发式偏置。通过逐元素截断，更新的方向与真实梯度或小批量的梯度不再对齐，但是它仍然是一个下降方向。</p>
<h3 id="11-2-引导信息流的正则化"><a href="#11-2-引导信息流的正则化" class="headerlink" title="11.2 引导信息流的正则化"></a>11.2 引导信息流的正则化</h3><p>梯度截断有助于处理爆炸的梯度，但它无助于消失的梯度。为了解决消失的梯度问题并更好地捕获长期依赖，我们讨论了如下想法：在展开循环架构的计算图中，沿着与弧边相关联的梯度乘积接近1的部分创建路径。</p>
<p>实现这一点的一种方法是使用LSTM以及其他自循环和门控机制。另一个想法是正则化或约束参数，以引导“信息流”。</p>
<p>特别是即使损失函数只对序列尾部的输出作惩罚，我们也希望梯度向量$\bigtriangledown_{\boldsymbol{h}^{(t)}}L$在反向传播时能维持其幅度。形式上，我们要使</p>
<script type="math/tex; mode=display">
(\bigtriangledown_{\boldsymbol{h}^{(t)}}L)\frac{\partial \boldsymbol{h}^{(t)}}{\partial \boldsymbol{h}^{(t-1)}}</script><p>与</p>
<script type="math/tex; mode=display">
\bigtriangledown_{\boldsymbol{h}^{(t)}}L</script><p>一样大。在这个目标下，提出了以下正则项</p>
<script type="math/tex; mode=display">
\Omega = \sum_t(\frac{||(\bigtriangledown_{\boldsymbol{h}^{(t)}}L)\frac{\partial \boldsymbol{h}^{(t)}}{\partial \boldsymbol{h}^{(t-1)}}||}{||\bigtriangledown_{\boldsymbol{h}^{(t)}}L||} - 1)^2</script><p>计算这一梯度的正则项可能会出现困难，可以将后向传播向量$\bigtriangledown_{\boldsymbol{h}^{(t)}}L$考虑为恒值作为近似（为了计算正则化的目的，没有必要通过它们向后传播）。</p>
<h2 id="12-外显记忆"><a href="#12-外显记忆" class="headerlink" title="12. 外显记忆"></a>12. 外显记忆</h2><p>神经网络擅长存储隐性知识，但是他们很难记住事实。被存储在神经网络参数中之前，随机梯度下降需要多次提供相同的输入，即使如此，该输入也不会被特别精确地存储。Graves et al. (2014) 推测这是因为神经网络缺乏工作存储 (workingmemory) 系统，即类似人类为实现一些目标而明确保存和操作相关信息片段的系统。这种外显记忆组件将使我们的系统不仅能够快速“故意”地存储和检索具体的事实，也能利用他们循序推论。神经网络处理序列信息的需要，改变了每个步骤向网络注入输入的方式，长期以来推理能力被认为是重要的，而不是对输入做出自动的、直观的反应。</p>
<p>为了解决这一难题，引入了<strong>记忆网络</strong>，其中包括一组可以通过寻址机制来访问的记忆单元。记忆网络原本需要监督信号指示他们如何使用自己的记忆单元。需要明确的监督指示采取哪些行动而能学习从记忆单元读写任意内容，并通过使用基于内容的软注意机制，允许端到端的训练。这种软寻址机制已成为其他允许基于梯度优化的模拟算法机制的相关架构的标准。</p>
<p>每个记忆单元可以被认为是 LSTM 和 GRU 中记忆单元的扩展。不同的是，网络输出一个内部状态来选择从哪个单元读取或写入，正如数字计算机读取或写入到特定地址的内存访问。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/rnn18.png" alt="rnn18.png"></p>
<p>无论是软（允许反向传播）或随机硬性的，用于选择一个地址的机制与先前在机器翻译的背景下引入的注意力机制形式相同。甚至更早之前，注意力机制的想法就被引入了神经网络，在手写生成的情况下，有一个被约束为通过序列只向前移动的注意力机制。在机器翻译和记忆网络的情况下，每个步骤中关注的焦点可以移动到一个完全不同的地方 (相比之前的步骤)。</p>
]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Theory</tag>
        <tag>RNN</tag>
      </tags>
  </entry>
  <entry>
    <title>卷积神经网络</title>
    <url>/archives/c6767314.html</url>
    <content><![CDATA[<p>参考：</p>
<blockquote>
<p><a href="https://github.com/exacity/deeplearningbook-chinese" target="_blank" rel="noopener">《深度学习》第9章 卷积网络</a></p>
</blockquote>
<h2 id="1-卷积运算"><a href="#1-卷积运算" class="headerlink" title="1. 卷积运算"></a>1. 卷积运算</h2><script type="math/tex; mode=display">
s(t) = \int x(a)w(t-a)da</script><p>其中$t$是时间，$x(t)$是原始输入，$w(a)$是加权函数，$a$表示测量结果距当前时刻$t$的时间间隔。连起来就是，根据加权函数$w$，我们对原始输入$x$进行加权积分以求得一个更加平滑的输出$s$，积分区间一般为$[t-a, t]$，一般对时间来说，不会取$t$之后的区间，因为无法预测未来。</p>
<p>这种运算就叫做<strong>卷积</strong>，通常用$*$表示为</p>
<script type="math/tex; mode=display">
s(t) = (x * w)(t)</script><p>在卷积网络的术语中，函数$x$叫做输入，函数$w$叫做核函数，输出$s$有时被叫做特征映射。</p>
<p>实际上时间会被离散化，假设函数$x, w$都定义在整数时刻$t$上，我们只能取离散形式的卷积：</p>
<script type="math/tex; mode=display">
s(t) = (x * w)(t) = \sum^\infty_{a = -\infty} x(a)w(t-a)</script><a id="more"></a>
<p>在机器学习任务上，我们会在图像处理上使用卷积，例如把二维图像$I$作为输入，使用二维的核$K$：</p>
<script type="math/tex; mode=display">
S(i,j) = (I * K)(i, j) = \sum_m\sum_n I(m,n)K(i-m,j-n)</script><p>卷积是可交换的，所以上式等价于</p>
<script type="math/tex; mode=display">
S(i,j) = (K * I)(i, j) = \sum_m\sum_n I(i-m,j-n)K(m,n)</script><p>核矩阵$K$的维度相对$I$很小，使用核翻转，所以第二个式子更常用，也更好理解。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/cnn0.png" alt="cnn0.png"></p>
<p>卷积通常对应着一个非常稀疏的矩阵，这是因为核的大小通常远小于输入图像的大小。</p>
<h2 id="2-动机"><a href="#2-动机" class="headerlink" title="2. 动机"></a>2. 动机</h2><!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/cnn3.jpg" alt="cnn3.jpg"></p>
<p>卷积运算通过三个重要的思想来帮助改进机器学习系统：<strong>稀疏交互</strong>、<strong>参数共享</strong>、<strong>等变表示</strong>。另外卷积提供了一种处理大小可变的输入的方法。</p>
<ol>
<li><strong>稀疏交互</strong>：传统的DNN使用矩阵乘法建立输入与输出的连接关系。其中参数矩阵中每一个单独的参数都描述了一个输入单元与一个输出单元间的交互。这意味着每一个输出单元与每一个输入单元都产生交互。卷积网络具有稀疏交互的特征，即仅使用一个非常小的核来检测输入中有意义的特征，例如图像的边缘。具体的表现为，每一个卷积层定义多个filter（滤波器），每个filter检测输入的一种有意义的特征，比如可能有横线、竖线、圆角等等，在下一个卷积层进一步的提取特征形成卷积神经网络（还包括了操作）。那么我们仅需要保存这些filter的参数就相当于保存了整个神经网络，对比DNN，$m$个输入和$n$个输出，参数有$m \times n$且算法时间复杂度为$O(m \times n)$；稀疏连接限制每一个输出只有$k$个连接，参数有$k \times n$且算法时间复杂度为$O(k \times n)$，在实际应用中$k$比$m$小几个数量级，就能在机器学习任务中取得好的表现。</li>
<li><strong>参数共享</strong>：是指在一个模型的多个函数中使用相同的参数。作为参数共享的同义词，我们可以说一个网络含有<strong>绑定的权重</strong>，在卷积神经网络中，核的每一个元素都作用在输入的每一位置上（是否考虑边界像素取决于对边界决策的设计）。卷积运算中的参数共享保证了我们只需要学习一个参数集合，而不是对于每一位置都需要学习一个单独的参数集合。这样$k$的数量级才能小于$m$。</li>
<li><strong>等变表示</strong>：对于卷积，参数共享的特殊形式使得神经网络层具有对平移等变的性质。对于函数$f(x),g(x)$，若满足$f(g(x)) = g(f(x))$，则$f(x)$对于变换$g$具有等变性。例如令$g$是任意平移函数，那么先卷积再平移得到的结果与先平移再卷积得到的结果相同。但是另一些变换不是天然等变的，比如图像的缩放或者旋转变换，需要其他的一些机制来处理。</li>
</ol>
<h2 id="3-池化"><a href="#3-池化" class="headerlink" title="3. 池化"></a>3. 池化</h2><!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/cnn2.jpg" alt="cnn2.jpg"></p>
<p>卷积神经网络的一个典型层包括三层。第一级是并行计算的多个卷积产生一组线性激活响应；第二级中，每一个线性激活响应会通过一个非线性激活函数，例如ReLU；第三级中，使用池化函数进一步调整这一层的输出。</p>
<p>池化函数使用某一位置的相邻输出的总体统计特征来代替网络在该位置的输出。<br>例如，最大池化函数给出相邻矩形区域内的最大值。其他常用的池化函数包括相邻矩形区域内的平均值、$L_2$范数以及基于据中心像素距离的加权平均函数。</p>
<p>不管采用什么样的池化函数，当输入作出少量平移时，池化能够帮助输入的表示近似不变。对于平移的不变性是指当我们对输入进行少量平移时，经过池化函数后的大多数输出并不会发生改变。<strong>局部平移不变性是一个很有用的性质，尤其是当我们关心某个特征是否出现而不关心它出现的具体位置时</strong>。例如，当判定一张图像中是否包含人脸时，我们并不需要知道眼睛的精确像素位置，我们只需要知道有一只眼睛在脸的左边，有一只在右边就行了。但在一些其他领域，保存特征的具体位置却很重要。例如当我们想要寻找一个由两条边相交而成的拐角时，我们就需要很好地保存边的位置来判定它们是否相交。</p>
<p>使用池化可以看作是增加了一个无限强的先验：这一层学得的函数必须具有对少量平移的不变性。当这个假设成立时，池化可以极大地提高网络的统计效率。</p>
<p>用多个学得的过滤器和一个最大池化单元可以学得对旋转变换的不变性。</p>
<p>因为池化综合了全部邻居的反馈，这使得池化单元少于探测单元成为可能，我们可以通过综合池化区域的$k$个像素的统计特征而不是单个像素来实现。这种方法提高了网络的计算效率，因为下一层少了约$k$倍的输入。</p>
<h2 id="4-卷积与池化作为一种无限强的先验"><a href="#4-卷积与池化作为一种无限强的先验" class="headerlink" title="4. 卷积与池化作为一种无限强的先验"></a>4. 卷积与池化作为一种无限强的先验</h2><p>我们可以把卷积网络类比成全连接网络，但对于这个全连接网络的权重有一个无限强的先验。这个无限强的先验是说一个隐藏单元的权重必须和它邻居的权重相同，但可以在空间上移动。这个先验也要求除了那些处在隐藏单元的小的空间连续的接受域内的权重以外，其余的权重都为零。总之，我们可以把卷积的使用当作是对网络中一层的参数引入了一个无限强的先验概率分布。这个先验说明了该层应该学得的函数只包含局部连接关系并且对平移具有等变性。类似的，使用池化也是一个无限强的先验：每一个单元都具有对少量平移的不变性。</p>
<p>一个关键的洞察是卷积和池化可能导致欠拟合。与任何其他先验类似，卷积和池化只有当先验的假设合理且正确时才有用。如果一项任务依赖于保存精确的空间信息，那么在所有的特征上使用池化将会增大训练误差。</p>
<p>另一个关键洞察是当我们比较卷积模型的统计学习表现时，只能以基准中的其他卷积模型作为比较的对象。其他不使用卷积的模型即使我们把图像中的所有像素点都置换后依然有可能进行学习。</p>
<h2 id="5-基本卷积函数的变体"><a href="#5-基本卷积函数的变体" class="headerlink" title="5. 基本卷积函数的变体"></a>5. 基本卷积函数的变体</h2><p>有时会希望跳过核中的一些位置来降低计算的开销（相应的代价是提取特征没有先前那么好了）。我们可以把这一过程看作是对全卷积函数输出的下采样(downsampling)。如果我们只想在输出的每个方向上每间隔$s$个像素进行采样。我们把 s 称为下采样卷积的 步幅（stride）。当然也可以对每个移动方向定义不同的步幅。</p>
<p>在任何卷积网络的实现中都有一个重要性质，那就是能够隐含地对输入$V$用零进行填充 (pad) 使得它加宽。如果没有这个性质，表示的宽度在每一层就会缩减，缩减的幅度是比核少一个像素这么多。</p>
<p>三种零填充情况：</p>
<ol>
<li>第一种是无论怎样都不使用零填充的极端情况，并且卷积核只允许访问那些图像中能够完全包含整个核的位置，这称为有效（valid），卷积输出的大小在每一层都会缩减。如果输入的图像宽度是$m$，核的宽度是$k$，那么输出的宽度就会变成$m − k + 1$；</li>
<li>第二种特殊的情况是只进行足够的零填充来保持输出和输入具有相同的大小。这称为相同（same）卷积，这可能会导致边界像素存在一定程度的欠表示；</li>
<li>第三种极端情况产生了，称为 全（full）卷积。它进行了足够多的零填充使得每个像素在每个方向上恰好被访问了$k$次，最终输出图像的宽度为$m + k − 1$，在这种情况下，输出像素中靠近边界的部分相比于中间部分是更少像素的函数。这将导致学得一个在卷积特征映射的所有位置都表现不错的单核更为困难。</li>
</ol>
<p>通常零填充的最优数量（对于测试集的分类正确率）处于“有效卷积”和“相同卷积”之间的某个位置。</p>
<h3 id="5-1-非共享卷积"><a href="#5-1-非共享卷积" class="headerlink" title="5.1 非共享卷积"></a>5.1 非共享卷积</h3><p>非共享卷积并不是真正的卷积，只是利用局部连接的网络层。在这种情况下，我们的多层感知机对应的邻接矩阵是相同的，但每一个连接都有它自己的权重。它和具有一个小核的离散卷积运算很像，但并不横跨位置来共享参数。</p>
<p>当我们知道每一个特征都是一小块空间的函数并且相同的特征不会出现在所有的空间上时，局部连接层是很有用的。例如，如果我们想要辨别一张图片是否是人脸图像时，我们只需要去寻找嘴是否在图像下半部分即可。</p>
<h3 id="5-2-平铺卷积"><a href="#5-2-平铺卷积" class="headerlink" title="5.2 平铺卷积"></a>5.2 平铺卷积</h3><p>平铺卷积对卷积层和局部连接层进行了折衷。这里并不是对每一个空间位置的权重集合进行学习，我们学习一组核使得当我们在空间移动时它们可以循环利用。这意味着在近邻的位置上拥有不同的过滤器，就像局部连接层一样，但是对于这些参数的存储需求仅仅会增长常数倍，这个常数就是核的集合的大小，而不是整个输出的特征映射的大小。</p>
<p>我们一般也会在进行非线性运算前，对每个输出加入一些偏置项。这样就产生了如何在偏置项中共享参数的问题。对于局部连接层，很自然地对每个单元都给定它特有的偏置，对于平铺卷积，也很自然地用与核一样的平铺模式来共享参数。对于卷积层来说，通常的做法是在输出的每一个通道上都设置一个偏置，这个偏置在每个卷积映射的所有位置上共享。然而，如果输入是已知的固定大小，也可以在输出映射的每个位置学习一个单独的偏置。分离这些偏置可能会稍稍降低模型的统计效率，但同时也允许模型来校正图像中不同位置的统计差异。例如，当使用隐含的零填充时，图像边缘的探测单元接收到较少的输入，因此需要较大的偏置。</p>
<h2 id="6-结构化输出"><a href="#6-结构化输出" class="headerlink" title="6. 结构化输出"></a>6. 结构化输出</h2><p>卷积神经网络可以用于输出高维的结构化对象，而不仅仅是预测分类任务的类标签或回归任务的实数值。通常这个对象只是一个张量，由标准卷积层产生。例如，模型可以产生张量$\boldsymbol{S}$，其中$\boldsymbol{S}_{i,j,k}$是网络的输入像素$(j, k)$属于类$i$的概率。这允许模型标记图像中的每个像素，并绘制沿着单个对象轮廓的精确掩模。</p>
<p>对图像逐个像素标记的一种策略是先产生图像标签的原始猜测，然后使用相邻像素之间的交互来修正该原始猜测。重复这个修正步骤数次对应于在每一步使用相同的卷积，该卷积在深层网络的最后几层之间共享权重。这使得在层之间共享参数的连续的卷积层所执行的一系列运算，形成了一种特殊的循环神经网络。</p>
<p>一旦对每个像素都进行了预测，我们就可以使用各种方法来进一步处理这些预测，以便获得图像在区域上的分割。一般的想法是假设大片相连的像素倾向于对应着相同的标签。图模型可以描述相邻像素间的概率关系。或者，卷积网络可以被训练来最大化地近似图模型的训练目标。</p>
<h2 id="7-数据类型"><a href="#7-数据类型" class="headerlink" title="7. 数据类型"></a>7. 数据类型</h2><p>卷积网络使用的数据通常包含多个通道，每个通道是时间上或空间中某一点的不同观测量。</p>
<p>到目前为止，我们仅讨论了训练和测试数据中的每个样例都有相同的空间维度的情况。卷积网络的一个优点是它们还可以处理具有可变的空间尺度的输入。这些类型的输入不能用传统的基于矩阵乘法的神经网络来表示。这为卷积网络的使用提供了令人信服的理由，即使当计算开销和过拟合都不是主要问题时。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/cnn1.png" alt="cnn1.png"></p>
<p>注意，使用卷积处理可变尺寸的输入，仅对输入是因为包含对同种事物的不同量的观察 (时间上不同长度的记录，空间上不同宽度的观察等) 而导致的尺寸变化这种情况才有意义。如果输入是因为它可以选择性地包括不同种类的观察而具有可变尺寸，使用卷积是不合理的。例如，如果我们正在处理大学申请，并且我们的特征包括成绩等级和标准化测试分数，但不是每个申请人都进行了标准化测试，则使用相同的权重来对成绩特征和测试分数特征进行卷积是没有意义的。</p>
<h2 id="8-高效的卷积算法"><a href="#8-高效的卷积算法" class="headerlink" title="8. 高效的卷积算法"></a>8. 高效的卷积算法</h2><p>卷积等效于使用傅立叶变换将输入与核都转换到频域、执行两个信号的逐点相乘，再使用傅立叶逆变换转换回时域。对于某些问题的规模，这种算法可能比离散卷积的朴素实现更快。</p>
<p>将$d$维的核表示为$d$个一维向量，等价于组合$d$个一维卷积，那么多线程运算可以起到作用。</p>
<p>设计更快的执行卷积或近似卷积，而不损害模型准确性的方法，是一个活跃的研究领域。甚至仅提高前向传播效率的技术也是有用的，因为在商业环境中，通常部署网络比训练网络还要耗资源。</p>
<h2 id="9-随机或无监督的特征"><a href="#9-随机或无监督的特征" class="headerlink" title="9. 随机或无监督的特征"></a>9. 随机或无监督的特征</h2><p>通常，卷积网络训练中最昂贵的部分是学习特征。输出层的计算代价通常相对不高，因为在通过若干层池化之后作为该层输入的特征的数量较少。当使用梯度下降执行监督训练时，每步梯度计算需要完整地运行整个网络的前向传播和反向传播。减少卷积网络训练成本的一种方式是使用那些不是由监督方式训练得到的特征。</p>
<p>三种策略可以不通过监督训练而得到卷积核：</p>
<ol>
<li>简单随机初始化；</li>
<li>手动设计，例如检测指定方向或尺度边缘的核；</li>
<li>无监督标准，使用$k$均值聚类算法应用于小图像块，然后使用每个学得的中心作为卷积核。</li>
</ol>
<p>随机过滤器经常在卷积网络中表现得出乎意料得好说明，由卷积和随后的池化组成的层，当赋予随机权重时，自然地变得具有频率选择性和平移不变性。</p>
<p>一个中间方法是学习特征，但是使用那种不需要在每个梯度计算步骤中都进行完整的前向和反向传播的方法。与多层感知机一样，我们使用贪心逐层预训练，单独训练第一层，然后一次性地从第一层提取所有特征，之后用那些特征单独训练第二层，以此类推。</p>
]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Theory</tag>
        <tag>CNN</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习-正则化</title>
    <url>/archives/e0f10776.html</url>
    <content><![CDATA[<p>参考：</p>
<blockquote>
<p><a href="https://github.com/exacity/deeplearningbook-chinese" target="_blank" rel="noopener">《深度学习》第7章 深度学习中的正则化</a></p>
</blockquote>
<p>本章部分内容与<code>深度学习-实际问题</code>交叉。</p>
<p>机器学习的一个核心问题是设计一个不仅在训练数据上表现好，并且能在新输入上泛化好的算法。在机器学习中，许多策略显式地被设计来减少测试误差（可能会以增大训练误差为代价），这些策略被统称为正则化。</p>
<a id="more"></a>
<h2 id="1-参数范数惩罚"><a href="#1-参数范数惩罚" class="headerlink" title="1. 参数范数惩罚"></a>1. 参数范数惩罚</h2><p>对优化目标$J$添加一个参数惩罚项$\Omega(\theta)$，正则化后的目标函数记为</p>
<script type="math/tex; mode=display">
\hat{J}(\theta;\boldsymbol{X, y}) = J(\theta;\boldsymbol{X, y}) + \alpha\Omega(\theta)</script><p>其中$\alpha \in [0, \infty)$是权衡范数惩罚项$\Omega$和目标函数$J$相对贡献的超参数。显然，$\alpha$为0表示没有正则化，$\alpha$越大正则化惩罚越大。</p>
<p>通常只对<strong>权重</strong>做惩罚而不对偏置做正则惩罚，一是因为对所有权重进行等比例缩放可以实现偏置的修正，所以对偏置惩罚是多余的；二是因为正则化偏置参数可能会导致明显的欠拟合。</p>
<h3 id="1-1-L-2-参数正则化"><a href="#1-1-L-2-参数正则化" class="headerlink" title="1.1 $L^2$参数正则化"></a>1.1 $L^2$参数正则化</h3><p>即使用$L_2$范数作为正则项$\Omega(\theta) = \frac{1}{2}||\boldsymbol{w}||^2_2$，使权重更接近原点。其目标函数为</p>
<script type="math/tex; mode=display">
\tilde{J}(\boldsymbol{w};\boldsymbol{X,y}) = \frac{\alpha}{2}\boldsymbol{w}^T\boldsymbol{w} + J(\boldsymbol{w};\boldsymbol{X,y})</script><p>$L_2$正则化会根据$\frac{\lambda_i}{\lambda_i + \alpha}$因子缩放与$\boldsymbol{H}$第$i$个特征向量对齐的$\boldsymbol{w}^*$的分量。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/l1l2.jpg" alt="l1l2.jpg"></p>
<p>沿着$\boldsymbol{H}$特征值较大的方向（如$\lambda_i \gg \alpha$）正则化的影响较小，而$\lambda_i \ll \alpha$会收缩到几乎为0（但不是0）。<br>只有在显著减小目标函数方向上的参数会保留得相对完好。在无助于目标函数减小的方向上改变参数不会显著增加梯度。这种不重要的方向对应的分量会在训练过程中因正则化而衰减掉。</p>
<p>对于线性回归而言，代价函数是</p>
<script type="math/tex; mode=display">
(\boldsymbol{Xw} - \boldsymbol{y})^T(\boldsymbol{Xw} - \boldsymbol{y})</script><p>添加$L^2$正则项后，目标函数变为</p>
<script type="math/tex; mode=display">
(\boldsymbol{Xw} - \boldsymbol{y})^T(\boldsymbol{Xw} - \boldsymbol{y}) + \frac{1}{2}\alpha\boldsymbol{w}^T\boldsymbol{w}</script><p>那么方程解从</p>
<script type="math/tex; mode=display">
\boldsymbol{w} = (\boldsymbol{X}^T\boldsymbol{X})^{-1}\boldsymbol{X}^T\boldsymbol{y}</script><p>变成了</p>
<script type="math/tex; mode=display">
\boldsymbol{w} = (\boldsymbol{X}^T\boldsymbol{X} + \alpha\boldsymbol{I})^{-1}\boldsymbol{X}^T\boldsymbol{y}</script><p>由于$\boldsymbol{X}^T\boldsymbol{X}$对角项对应每个输入特征的方差，相当于我们对每一个方差都增加了一个相同的值$\alpha$，那么对$\boldsymbol{w}$来说，对应的权重会减小，但是由于每个特征的方差都是不同的，那么增加的值相对于原始方差是有差异的，若原始方差相对于$\alpha$就很大，那么对应的权重减幅较小，原始方差相对于增加的值很小，那么受到这个新增的值的影响，对应的权重减幅很大，几乎接近0但是不会为0。</p>
<h3 id="1-2-L-1-参数正则化"><a href="#1-2-L-1-参数正则化" class="headerlink" title="1.2 $L^1$参数正则化"></a>1.2 $L^1$参数正则化</h3><p>$L_1$范数正则化，正则项为</p>
<script type="math/tex; mode=display">
\Omega(\theta) = ||\boldsymbol{w}||_1 = \sum_i|w_i|</script><p>同理，其目标函数为</p>
<script type="math/tex; mode=display">
\tilde{J}(\boldsymbol{w};\boldsymbol{X, y}) = \alpha||\boldsymbol{w}||_1 + J(\boldsymbol{w};\boldsymbol{X, y})</script><p>对于每一维$i$：</p>
<script type="math/tex; mode=display">
w_i = sign(w_i^*)\max \{ |w_i^*| - \frac{\alpha}{H_{i,i}}, 0 \}</script><p>显然，当$w<em>i^* \leqslant \frac{\alpha}{H</em>{i,i}}$的时候，正则化会使$w_i$变成0，也就是说$L^1$正则化会产生更加<strong>稀疏</strong>的解。因此可以使用$L^1$正则化实现降维或者特征选择。</p>
<h2 id="2-作为约束的范数惩罚"><a href="#2-作为约束的范数惩罚" class="headerlink" title="2. 作为约束的范数惩罚"></a>2. 作为约束的范数惩罚</h2><p>上面介绍的参数范数惩罚未对正则项进行约束，如果我们想约束$\Omega$小于某个常数$k$，往往我们需要使用KKT条件（参考<code>支持向量机</code>）</p>
<script type="math/tex; mode=display">
L(\boldsymbol{\theta}, \alpha;\boldsymbol{X, y}) = J(\boldsymbol{\theta;X,y}) + \alpha(\Omega(\theta) - k)</script><p>这个约束问题的解由下式给出</p>
<script type="math/tex; mode=display">
\boldsymbol{\theta}^* = \underset{\boldsymbol{\theta}}{\arg \min} \underset{\alpha,\alpha \geqslant 0}{\max} L(\boldsymbol{\theta}, \alpha)</script><p>通过设置$k$，我们可以限制$L^2$范数在一个球内或者$L^1$范数的一个限制区域内。</p>
<h2 id="3-正则化和欠约束问题"><a href="#3-正则化和欠约束问题" class="headerlink" title="3. 正则化和欠约束问题"></a>3. 正则化和欠约束问题</h2><p>对矩阵$\boldsymbol{X}^T\boldsymbol{X}$求逆的前提是奇异的，那么对于那些非奇异矩阵，许多正则化方法对应求逆$\boldsymbol{X}^T\boldsymbol{X} + \alpha\boldsymbol{I}$，那么可以保证矩阵是奇异的。</p>
<p>同样的我们可以使用Moore-Penrose伪逆求解</p>
<script type="math/tex; mode=display">
\boldsymbol{X}^+ = \underset{\alpha \searrow 0}{\lim} (\boldsymbol{X}^T\boldsymbol{X} + \alpha\boldsymbol{I})^{-1}\boldsymbol{X}^T</script><p>实际计算没有基于这个定义，而是使用奇异值分解</p>
<script type="math/tex; mode=display">
\boldsymbol{A}^+ = \boldsymbol{VD}^+\boldsymbol{U}^T</script><p>其中矩阵$\boldsymbol{U,D,V}$是矩阵$\boldsymbol{A}$奇异值分解后得到的矩阵，对角矩阵$\boldsymbol{D}$的伪逆$\boldsymbol{D}^+$是其非零元素取倒数之后再转置得到的。</p>
<h2 id="4-数据集增强"><a href="#4-数据集增强" class="headerlink" title="4. 数据集增强"></a>4. 数据集增强</h2><p>让模型泛化能力更强的最好办法就是使用更多的数据进行训练，但是实际上我们的数据集往往是有限的。解决这个问题的一种方法是创建假的数据添加到训练集中。对于一些特定的机器学习任务，创建新的假数据相当简单。</p>
<ol>
<li>图像识别，对于图像来说，平移，旋转或缩放都是有效的，但是需要注意比如识别手写数字“6”和“9”，这里旋转180°是不合适的；</li>
<li>语音任务，人为手动在输入层注入噪声。</li>
</ol>
<h2 id="5-噪声鲁棒性"><a href="#5-噪声鲁棒性" class="headerlink" title="5. 噪声鲁棒性"></a>5. 噪声鲁棒性</h2><p>向输入添加方差极小的噪声等价于对权重施加范数惩罚。在一般情况下，注入噪声远比简单地收缩参数强大，特别是噪声被添加进隐藏单元。比如dropout算法就是这种做法地主要发展方向。</p>
<p>假设对网络的权重添加随机扰动$\epsilon_{\boldsymbol{w}} \in N(\boldsymbol{\epsilon};0,\eta\boldsymbol{I})$，那么我们的目标函数变为：</p>
<script type="math/tex; mode=display">
\tilde{J}_{\boldsymbol{W}} = \mathbb{E}_{p(\boldsymbol{x}, y, \epsilon_\boldsymbol{W})}[(\hat{y}_{\epsilon_\boldsymbol{W}}(\boldsymbol{x}) - y)^2]</script><p>它推动模型进入对权重小的变化相对不敏感的区域，找到的点不只是极小点，还是由平坦区域所包围的极小点。</p>
<h3 id="5-1-向输出目标注入噪声"><a href="#5-1-向输出目标注入噪声" class="headerlink" title="5.1 向输出目标注入噪声"></a>5.1 向输出目标注入噪声</h3><p>大多数数据集的$y$标签都有一定错误。错误的$y$不利于最大化似然对数。如何避免，使用一些小常数$\epsilon$，训练集标记$y$是正确的概率是$1-\epsilon$。</p>
<p>例如，<strong>标签平滑</strong>通过把确切分类目标从0到和1替换成$\frac{\epsilon}{k-1},1-\epsilon$，正则化具有$k$个输出的softmax函数的模型。使用softmax和明确的最大似然学习可能永远不会收敛-softmax函数永远无法真正预测0概率或1概率，因此预测更极端。通过使用权重衰减等其他正则化策略能够防止这种情况发生。</p>
<h2 id="6-半监督学习"><a href="#6-半监督学习" class="headerlink" title="6. 半监督学习"></a>6. 半监督学习</h2><p>参考<code>语音识别-RBM和DBN</code>，通过预训练获得输入数据的统计特征。在预训练过程中使用大量的未标记数据。</p>
<h2 id="7-多任务学习"><a href="#7-多任务学习" class="headerlink" title="7. 多任务学习"></a>7. 多任务学习</h2><p>多任务学习是通过合并几个任务中的样例来提高泛化的一种方式。当模型的一部分被多个额外的任务共享时，这部分将被约束为良好的值（共享合理），通常会带来更好的泛化能力。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/multi-task_learning.png" alt="multi-task_learning.png"></p>
<p>该模型通常可以分为两类参数：</p>
<ol>
<li>具体任务的参数（从各自任务的样本中实现良好的泛化）；</li>
<li>所有任务共享的通用参数（从所有任务的汇集数据中获益），前提是不同的任务之间存在某些统计关系的假设是合理的。</li>
</ol>
<p><strong>能解释数据变化（在与之相关联的不同任务中观察到）的因素中，某些因素是跨两个或更多任务共享的。</strong></p>
<h2 id="8-提前终止"><a href="#8-提前终止" class="headerlink" title="8. 提前终止"></a>8. 提前终止</h2><p>在每次验证集误差有所改善后，我们存储模型参数的副本。当训练算法终止时，我们返回这些参数而不是最新的参数。当验证集上的误差在事先指定的循环次数内没有进一步改善时，算法就会<br>终止。</p>
<p>提前终止需要验证集，这意味着某些训练数据不能被馈送到模型。为了更好地利用这一额外的数据，我们可以在完成提前终止的首次训练之后，进行额外的训练。在第二轮，即额外的训练步骤中，所有的训练数据都被包括在内。有两个基本的策略都可以用于第二轮训练过程。</p>
<ol>
<li>再次初始化模型，然后使用所有数据再次训练。在这个第二轮训练过程中，我们使用第一轮提前终止训练确定的最佳步数。此过程有一些细微之处。例如，我们没有办法知道重新训练时，对参数进行相同次数的更新和对数据集进行相同次数的遍历哪一个更好。由于训练集变大了，在第二轮训练时，每一次遍历数据集将会更多次地更新参数。</li>
<li>保持从第一轮训练获得的参数，然后使用全部的数据继续训练。在这个阶段，已经没有验证集指导我们需要在训练多少步后终止。取而代之，我们可以监控验证集的平均损失函数，并继续训练，直到它低于提前终止过程终止时的目标值。此策略避免了重新训练模型的高成本，但表现并没有那么好。例如，验证集的目标不一定能达到之前的目标值，所以这种策略甚至不能保证终止。</li>
</ol>
<p><strong>提前终止为何具有正则化效果：提前终止可以将优化过程的参数空间限制在初始参数值$\theta_0$的小邻域内。</strong></p>
<h2 id="9-参数绑定和参数共享"><a href="#9-参数绑定和参数共享" class="headerlink" title="9. 参数绑定和参数共享"></a>9. 参数绑定和参数共享</h2><p>某些任务参数应当彼此接近，比如有两个模型执行相同的分类任务（类别相同），但输入分布稍有不同。我们有参数为$\boldsymbol{w}^{(A)}$的模型$A$和参数为$\boldsymbol{w}^{(B)}$的模型$B$。这两种模型都将输入映射到两个不同但相关的输出：$\hat{y}^{(A)} = f(\boldsymbol{w}^{(A)}, \boldsymbol{x}), \hat{y}^{(B)} = f(\boldsymbol{w}^{(B)}, \boldsymbol{x})$。</p>
<p>可以使用以下形式的参数范数惩罚：</p>
<script type="math/tex; mode=display">
\Omega(\boldsymbol{w}^{(A)},\boldsymbol{w}^{(B)}) = ||\boldsymbol{w}^{(A)} - \boldsymbol{w}^{(B)}||^2_2</script><p>也可以使用其他范数惩罚。</p>
<p>参数范数惩罚是正则化参数使其彼此接近的一种方式，而更流行的方法是使用约束：<strong>强迫某些参数相等</strong>。由于我们将各种模型或模型组件解释为共享唯一的一组参数，这种正则化方法通常被称为<strong>参数共享</strong>。例如在卷积神经网络中使用相同的卷积核，能显著减少模型所占用的内存。</p>
<h2 id="10-稀疏表示"><a href="#10-稀疏表示" class="headerlink" title="10. 稀疏表示"></a>10. 稀疏表示</h2><p>参考<code>深度学习-优化器</code>和<code>深度学习-实际问题</code>以及上面部分内容，可知，稀疏表示的模型一方面增强了泛化能力，另一方面减小了模型大小以及运算开销。</p>
<h2 id="11-Bagging和其他集成方法"><a href="#11-Bagging和其他集成方法" class="headerlink" title="11. Bagging和其他集成方法"></a>11. Bagging和其他集成方法</h2><p>参考<code>集成学习</code></p>
<p>Bagging是通过结合几个模型降低泛化误差的技术，主要思想是分别训练几个不同的模型，然后让所有模型表决测试样例的输出。采用这种策略的技术被称为集成方法。</p>
<h2 id="12-Dropout"><a href="#12-Dropout" class="headerlink" title="12. Dropout"></a>12. Dropout</h2><p>参考<code>深度学习-实际问题</code></p>
<p>一方面Dropout可以看作是廉价的Bagging方式，因为我们训练多个神经网络的开销很大，但是在每一次迭代中丢弃不同的神经元，那么自然而然地产生了不同地神经网络，从而实现了Bagging；<br>另一方面，Dropout可以看作是对隐藏层的噪声注入，前面已经说明了，提升了泛化性能。</p>
<h2 id="13-对抗训练"><a href="#13-对抗训练" class="headerlink" title="13. 对抗训练"></a>13. 对抗训练</h2><p>对抗样本，即在许多情况下，$\boldsymbol{x}$与$\boldsymbol{x}’$非常近似，人类观察者不会察觉之间的差异但是网络会做出截然相反的预测。</p>
<p>通过对抗训练减少原有独立同分布的测试集的错误率-在对抗扰动的训练集上训练网络。</p>
<p>这些对抗样本的主要原因之一是过度线性。如果一个线性函数具有许多输入，那么它的值可以常迅速地改变。如果我们用$\epsilon$改变每个输入，那么权重为$\boldsymbol{w}$的线性函数可以改变$\epsilon||\boldsymbol{w}||_1$之多，如果$\boldsymbol{w}$是高维的这会是一个非常大的数。</p>
<p>对抗样本也提供了一种实现半监督学习的方法。在与数据集中的标签不相关联的点$\boldsymbol{x}$处，模型本身为其分配一些标签$\hat{y}$。模型的标记$\hat{y}$未必是真正的标签，但如果模型是高品质的，那么$\hat{y}$提供正确标签的可能性很大。我们可以搜索一个对抗样本$\boldsymbol{x}’$，导致分类器输出一个标签$y’$且$y’ \neq \hat{y}$。不使用真正的标签，而是由训练好的模型提供标签产生的对抗样本被称为<strong>虚拟对抗样本</strong>。我们可以训练分类器为$\boldsymbol{x}$和$\boldsymbol{x}’$分配相同的标签。这鼓励分类器学习一个沿着未标签数据所在流形上任意微小变化都很鲁棒的函数。驱动这种方法的假设是，不同的类通常位于分离的流形上，并且小扰动不会使数据点从一个类的流形跳到另一个类的流形上。</p>
<h2 id="14-切面距离、正切传播和流形正切分类器"><a href="#14-切面距离、正切传播和流形正切分类器" class="headerlink" title="14. 切面距离、正切传播和流形正切分类器"></a>14. 切面距离、正切传播和流形正切分类器</h2><p>参考<code>降维与度量学习</code></p>
<p>许多机器学习通过假设数据位于低维流形附近来克服维数灾难。</p>
]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Theory</tag>
        <tag>Regularization</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习-实际问题</title>
    <url>/archives/3e5788ab.html</url>
    <content><![CDATA[<p>参考：</p>
<blockquote>
<p>《解析深度学习-语音识别实践》第4章 深度神经网络</p>
</blockquote>
<h2 id="1-数据预处理"><a href="#1-数据预处理" class="headerlink" title="1. 数据预处理"></a>1. 数据预处理</h2><p>样本特征归一化和全局特征标准化</p>
<ol>
<li><p>如果每个样本的均值的变化与处理的问题无关，就应当将特征均值归零，减小特征相对于深度神经网络模型的变化。</p>
</li>
<li><p>全局特征标准化的目标是使用全局转换缩放每维数据，使得最终的特征向量处于相似的动态范围内。通常做法是减去当前特征的均值，再除以当前特征标准差。</p>
</li>
<li><p>批量标准化是在一个batch上进行特征标准化。</p>
</li>
</ol>
<p>标准化的方式很多，对于稀疏矩阵，我们希望在标准化的同时保持矩阵稀疏性，这时的计算方式可能需要改变。具体参考<a href="http://sklearn.apachecn.org/cn/0.19.0/modules/preprocessing.html#preprocessing" target="_blank" rel="noopener">sklearn-preprocessing</a></p>
<a id="more"></a>
<h2 id="2-模型初始化"><a href="#2-模型初始化" class="headerlink" title="2. 模型初始化"></a>2. 模型初始化</h2><p>模型参数初始值需要足够小才能使sigmoid函数输出值在$(0,1)$，而不是接近0或1，那样会导致梯度很小，收敛很慢。</p>
<p>推荐参数$b$初始为0，$w$初始值属于高斯分布$N(0, \sigma^2<em>{w^{l+1}})$，$\sigma</em>{w^{l+1}} = \frac{1}{\sqrt{N_l}}$，其中$N_l$为与权重连接的输出节点的个数。</p>
<h2 id="3-权重衰减"><a href="#3-权重衰减" class="headerlink" title="3. 权重衰减"></a>3. 权重衰减</h2><p>基于$L_1$范数和$L_2$范数的正则化，当DNN模型有超过1百万的参数，插值系数$\lambda$应该很小（通常在$10^{-4}$范围），当训练数据量较大时设置为0.</p>
<h2 id="4-丢弃法"><a href="#4-丢弃法" class="headerlink" title="4. 丢弃法"></a>4. 丢弃法</h2><p>dropout基本思想时在训练过程中随机丢弃每一个隐层中一定比例（丢弃比例$\alpha$）的神经元。当一个隐层神经元被丢弃时，它的激活值被设置为0。分析一下流程就知道，在测试阶段只需要在与dropout训练有关的所有权重上乘以$(1-\alpha)$就可以直接使用。</p>
<p>经验表明，在dropout比例为0.1 ~ 0.2时，识别率会有提升。与此同时，若将初始dropout比例设置为0.5，在训练过程中渐渐减小dropout比例会有更好的效果。</p>
<h2 id="5-批量块大小的选择"><a href="#5-批量块大小的选择" class="headerlink" title="5. 批量块大小的选择"></a>5. 批量块大小的选择</h2><p>参考<a href="http://zhoutao822.coding.me/2018/11/26/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-%E4%BC%98%E5%8C%96%E5%99%A8/"><code>深度学习-优化器</code></a>。</p>
<p>在语音识别任务中，早期使用64到256个样本大小，后期换用1024到8096的样本大小，可以学习到一个更好的模型。</p>
<h2 id="6-取样随机化"><a href="#6-取样随机化" class="headerlink" title="6. 取样随机化"></a>6. 取样随机化</h2><p>参考<a href="http://zhoutao822.coding.me/2018/11/26/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-%E4%BC%98%E5%8C%96%E5%99%A8/"><code>深度学习-优化器</code></a>。</p>
<p>在语音识别领域中，采用滚动窗的方式每次加载一大块数据（通常为24 ~ 48小时的语音或者8.6M到17.2M个样本）进内存，然后再窗内随机取样。</p>
<h2 id="7-惯性系数"><a href="#7-惯性系数" class="headerlink" title="7. 惯性系数"></a>7. 惯性系数</h2><p>参考<a href="http://zhoutao822.coding.me/2018/11/26/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-%E4%BC%98%E5%8C%96%E5%99%A8/"><code>深度学习-优化器</code></a>。</p>
<p>类似Adadelta中的参数$\gamma$，通常取值为$0.9$ ~ $0.99^4$。定义在相同层面下惯性系数为$\rho_s$，若考虑批量块大小$M_b$条件下的惯性系数</p>
<script type="math/tex; mode=display">
\rho = \exp(M_b\rho_s)</script><h2 id="8-学习率和停止准则"><a href="#8-学习率和停止准则" class="headerlink" title="8. 学习率和停止准则"></a>8. 学习率和停止准则</h2><p>参考<a href="http://zhoutao822.coding.me/2018/11/26/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-%E4%BC%98%E5%8C%96%E5%99%A8/"><code>深度学习-优化器</code></a>。</p>
<p>在语音识别训练任务中，可以定义每一帧的学习率（$M_b$为批量大小，动态）为</p>
<script type="math/tex; mode=display">
\epsilon_s = \frac{\epsilon}{M_b}</script><p>根据经验的学习策略为</p>
<ul>
<li>首先确定批量大小以及一个大的学习率，并在此基础上训练数百个小批量数据组；</li>
<li>观察训练准则变化，然后减少批量中的数据数目、学习率或者同时减小，以使$\epsilon_sM_b$结果减半，直到训练准则获得明显改善；</li>
<li>然后学习率减半作为下一个完整数据迭代轮次的初始学习率，运行一个较大的训练数据子集，把$\epsilon_sM_b$的值增大四到八倍；</li>
<li>此时，增大$\epsilon_sM_b$并不会导致发散，而会提高训练速度。</li>
</ul>
<p>对于从头开始训练的语音识别任务，$\epsilon_s$对深层和浅层网络分别取值$0.8e^{-4}$和$0.3e^{-3}$，在第二阶段取值$1.25e^{-2}$，在第三阶段取值$0.8e^{-6}$，效果很好。</p>
<h2 id="9-网络结构"><a href="#9-网络结构" class="headerlink" title="9. 网络结构"></a>9. 网络结构</h2><p>一般来说，宽且浅的模型容易过拟合，深且窄的模型容易欠拟合。比较好的策略是先在只有一个隐层的神经网络上优化每层的节点个数，然后再叠加更多有相同节点个数的隐层。<br>在语音识别任务中，拥有5 ~ 7层，每层拥有1000 ~ 3000个节点的DNN效果很好。</p>
<h2 id="10-可复现性与可重启性"><a href="#10-可复现性与可重启性" class="headerlink" title="10. 可复现性与可重启性"></a>10. 可复现性与可重启性</h2><p>多次实验，每次用一个新的随机种子并记录平均结果以及标准的误差。</p>
<p>当训练集很大时，通常需要在中间时间停止训练并在最后的检查点继续训练。这时需要在检查点中保存模型参数、当前随机数、参数梯度、惯性系数等。</p>
]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Theory</tag>
        <tag>Batch Normalization</tag>
        <tag>Early Stop</tag>
        <tag>Dropout</tag>
        <tag>Decay</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习-优化器</title>
    <url>/archives/8f45a2c4.html</url>
    <content><![CDATA[<p>参考：</p>
<blockquote>
<p><a href="https://github.com/exacity/deeplearningbook-chinese" target="_blank" rel="noopener">《深度学习》第8章 深度模型中的优化</a><br><a href="https://arxiv.org/pdf/1609.04747.pdf" target="_blank" rel="noopener">An overview of gradient descent optimization algorithms</a><br><a href="http://www.luolei.info/2016/09/27/proximalAlgo/" target="_blank" rel="noopener">Proximal Algorithm 入门</a><br><a href="https://web.stanford.edu/~boyd/papers/pdf/prox_algs.pdf" target="_blank" rel="noopener">Proximal Algorithms</a><br><a href="http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf" target="_blank" rel="noopener">Adaptive Subgradient Methods for Online Learning and Stochastic Optimization</a><br><a href="http://www.cnblogs.com/luctw/p/4757943.html" target="_blank" rel="noopener">在线最优化求解(Online Optimization)之四：RDA</a><br><a href="https://www.cnblogs.com/EE-NovRain/p/3810737.html" target="_blank" rel="noopener">在线学习算法FTRL详解</a></p>
</blockquote>
<h2 id="1-Tensorflow与Optimizer"><a href="#1-Tensorflow与Optimizer" class="headerlink" title="1. Tensorflow与Optimizer"></a>1. Tensorflow与Optimizer</h2><p>Optimizer在Tensorflow框架中有两处：</p>
<ol>
<li><a href="https://tensorflow.google.cn/api_docs/python/tf/train/Optimizer" target="_blank" rel="noopener"><code>tf.train.Optimizer</code></a></li>
<li><a href="https://tensorflow.google.cn/api_docs/python/tf/keras/optimizers" target="_blank" rel="noopener"><code>tf.keras.optimizers.Optimizer</code></a></li>
</ol>
<p>前一个基本用在<code>Estimator</code>或者自定义模型中，后一个是<code>Keras</code>框架自带的优化器，两者几乎没有区别，在<code>Keras</code>中也可以使用<code>tf.train</code>下的优化器。</p>
<p><code>Tensorflow</code>中的<code>Optimizer</code>:</p>
<ol>
<li><code>tf.train.AdadeltaOptimizer</code></li>
<li><code>tf.train.AdagradDAOptimizer</code></li>
<li><code>tf.train.AdagradOptimizer</code></li>
<li><code>tf.train.AdamOptimizer</code></li>
<li><code>tf.train.FtrlOptimizer</code></li>
<li><code>tf.train.GradientDescentOptimizer</code></li>
<li><code>tf.train.MomentumOptimizer</code></li>
<li><code>tf.train.ProximalAdagradOptimizer</code></li>
<li><code>tf.train.ProximalGradientDescentOptimizer</code></li>
<li><code>tf.train.RMSPropOptimizer</code></li>
</ol>
<p><code>Keras</code>中的<code>Optimizer</code>:</p>
<ol>
<li><code>tf.keras.optimizers.Adadelta</code></li>
<li><code>tf.keras.optimizers.Adagrad</code></li>
<li><code>tf.keras.optimizers.Adam</code></li>
<li><code>tf.keras.optimizers.Adamax</code></li>
<li><code>tf.keras.optimizers.Nadam</code></li>
<li><code>tf.keras.optimizers.RMSprop</code></li>
<li><code>tf.keras.optimizers.SGD</code></li>
</ol>
<a id="more"></a>
<h2 id="2-梯度下降及其变种"><a href="#2-梯度下降及其变种" class="headerlink" title="2. 梯度下降及其变种"></a>2. 梯度下降及其变种</h2><p>目前对于大多数神经网络、线性模型来说，其参数更新方式为梯度下降，其核心思想是计算损失函数对各个参数的偏导数，各个参数再根据偏导数做调整。<br>根据计算梯度时使用的数据集大小（或者说更新参数的时机），梯度下降算法划分为3种。</p>
<h3 id="2-1-Batch-gradient-descent"><a href="#2-1-Batch-gradient-descent" class="headerlink" title="2.1 Batch gradient descent"></a>2.1 Batch gradient descent</h3><p>BSD（批量梯度下降），对应我在<code>线性模型-coding</code>中写的标准梯度下降，它是基于<strong>整个数据集</strong>的损失来进行参数更新，显然这样做的好处是我们考虑的是整个数据集，坏处在于参数更新步伐很大（在学习率一定的条件下），计算需要的内存大、时间长，到后期参数更新很缓慢。其参数更新公式为</p>
<script type="math/tex; mode=display">
\theta = \theta - \eta \cdot \bigtriangledown_\theta J(\theta)</script><p>参数更新伪代码，注意参数更新次数等于训练轮数<code>Epochs</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(nb_epochs):</span><br><span class="line">    params_grad = evaluate_gradient (loss_function, data, params)</span><br><span class="line">    params = params - learning_rate * params_grad</span><br></pre></td></tr></table></figure>
<h3 id="2-2-Stochastic-gradient-descent"><a href="#2-2-Stochastic-gradient-descent" class="headerlink" title="2.2 Stochastic gradient descent"></a>2.2 Stochastic gradient descent</h3><p>SGD（随机梯度下降），对应我在<code>线性模型-coding</code>中写的随机梯度下降，它是基于<strong>单个样本</strong>的损失来进行参数更新，而这个样本的选择是随机的，也就是说，在一个<code>Epoch</code>中，我们从中不放回地随机选取一个样本来进行参数更新，直到样本被抽完。显然，随机梯度下降参数更新的频率（样本数 $\times$ <code>Epochs</code>）远大于BSD，这样做会面临一个问题，其梯度下降很不稳定，假如一个样本的数值异常大，那么它会导致参数更新朝着一个异常的方向，这种异常具有两面性，一方面可能会导致前面的许多样本带来的下降前功尽弃，另一方面可能会帮助跳出局部极小区域；实验表明，若随着训练轮数增加将学习率减少会有助于使梯度下降平稳下来。其参数更新公式为</p>
<script type="math/tex; mode=display">
\theta = \theta - \eta \cdot \bigtriangledown_\theta J(\theta; x^{(i)};y^{(i)})</script><p>参数更新伪代码，注意参数更新次数（样本数 $\times$ <code>Epochs</code>）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(nb_epochs):</span><br><span class="line">    np.random.shuffle(data)</span><br><span class="line">    <span class="keyword">for</span> example <span class="keyword">in</span> data:</span><br><span class="line">        params_grad = evaluate_gradient(loss_function, example, params)</span><br><span class="line">        params = params - learning_rate * params_grad</span><br></pre></td></tr></table></figure>
<h3 id="2-3-Mini-batch-gradient-descent"><a href="#2-3-Mini-batch-gradient-descent" class="headerlink" title="2.3 Mini-batch gradient descent"></a>2.3 Mini-batch gradient descent</h3><p>MBGD（小批量梯度下降），看名字就知道这是每次<strong>不放回地随机选出一个batch大小</strong>的样本进行参数更新，相当于BSD和SGD地合体，各取所长，即考虑到一个batch大小地数据的偏差，又减小了运算开销，适当增加参数更新频率，所以几乎最常见的优化器都是基于MBGD的。通常一个batch的大小在50到256之间，但是根据具体的情况可以做大幅度调整。其参数更新公式为</p>
<script type="math/tex; mode=display">
\theta = \theta - \eta \cdot \bigtriangledown_\theta J(\theta; x^{(i:i+n)};y^{(i:i+n)})</script><p>参数更新伪代码，注意参数更新次数（样本数 $\div$ batch大小$n$  $\times$ <code>Epochs</code>）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(nb_epochs):</span><br><span class="line">    np.random.shuffle(data)</span><br><span class="line">    <span class="keyword">for</span> batch <span class="keyword">in</span> get_batches(data, batch_size =<span class="number">50</span>):</span><br><span class="line">        params_grad = evaluate_gradient(loss_function, batch, params)</span><br><span class="line">        params = params - learning_rate * params_grad</span><br></pre></td></tr></table></figure>
<h2 id="3-学习率选择"><a href="#3-学习率选择" class="headerlink" title="3. 学习率选择"></a>3. 学习率选择</h2><p>学习率$\eta$如何选择对梯度下降来说同样重要</p>
<ul>
<li>学习率过小，梯度下降缓慢；学习率过大，最终由于步伐过大导致在最低点波动而无法到达；</li>
<li>按照约定调整学习率，问题在于在训练之前如何决定在哪一轮开始调整，调整的幅度是多大；</li>
<li>对于稀疏的数据集，对于不同的特征使用相同的学习率是否合适，稀疏特征可能不希望更新步伐和其他特征相同，如何解决这些问题；</li>
<li>非凸问题，鞍点问题，如何解决被困在局部极小的区域，梯度变成0如何跳出。</li>
</ul>
<h2 id="4-常见梯度下降算法"><a href="#4-常见梯度下降算法" class="headerlink" title="4. 常见梯度下降算法"></a>4. 常见梯度下降算法</h2><h3 id="4-1-Momentum"><a href="#4-1-Momentum" class="headerlink" title="4.1 Momentum"></a>4.1 Momentum</h3><!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/momentum.jpg" alt="momentum.jpg"></p>
<p>Momentum（动量），核心思想是使得梯度方向不变的维度上速度变快，梯度方向有所改变的维度上的更新速度变慢，这样就可以加快收敛并减小震荡。其参数更新公式为</p>
<script type="math/tex; mode=display">
v_t = \gamma v_{t-1} + \eta \bigtriangledown_\theta J(\theta)
\\
\theta = \theta - v_t</script><p>$\gamma$一般设置为0.9或差不多的数值，这里可以理解为通过使用$v_t$存储梯度下降的动量，这是一个累积量，每一次参数更新都对其进行累积，梯度下降方向始终一致的特征的动量存储越多，每一轮更新时变化也就越多；反之，梯度相互抵消的特征，其存储的动量较少，相较于前者，梯度下降的速度差异就体现出来。</p>
<h3 id="4-2-Nesterov-accelerated-gradient"><a href="#4-2-Nesterov-accelerated-gradient" class="headerlink" title="4.2 Nesterov accelerated gradient"></a>4.2 Nesterov accelerated gradient</h3><!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/nag.jpg" alt="nag.jpg"></p>
<p>NAG，核心思想是在Momentum步伐过大时减少下一步更新步伐，类似于刹车。其参数更新公式为</p>
<script type="math/tex; mode=display">
v_t = \gamma v_{t-1} + \eta \bigtriangledown_\theta J(\theta - \gamma v_{t-1})
\\
\theta = \theta - v_t</script><p>$\gamma$一般设置为0.9或差不多的数值，这里可以理解为在Momentum的基础上，我们设置一个踩刹车的步骤，当前面累计的动量很多导致当前更新步伐很大时，下一步会由于$\theta - \gamma v_{t-1}$产生一个较小的梯度变化，从而实现平稳下降避免速度的太快。实验表明在RNNs上，NAG有着很好的表现。</p>
<h3 id="4-3-Adagrad"><a href="#4-3-Adagrad" class="headerlink" title="4.3  Adagrad"></a>4.3  Adagrad</h3><p>Adagrad，核心思想是对低频的参数做较大的更新，对高频的做较小的更新，这个算法针对的是学习率，将学习率变成一种动态的自动调节的参数。其参数更新公式为</p>
<script type="math/tex; mode=display">
\theta_{t+1, i} = \theta_{t, i} - \frac{\eta}{\sqrt{G_{t, ii}+\epsilon}} \cdot g_{t,i}</script><p>$\eta$一般设置为0.01，$t$代表steps，$g<em>{t,i}$表示第$t$步第$i$个参数的$\bigtriangledown</em>{\theta<em>t} J(\theta</em>{t,i})$，$G<em>t$是对角线矩阵，每个对角线元素$G</em>{t, ii}$的值是在时间上累计的所有的$\theta<em>i$的梯度的平方和，即$G</em>{t, ii} = \sum^t<em>{k=0}g</em>{k, i}^2$，$\epsilon$是一个常数，避免分母为0。随着时间增加，分母越来越大，学习率逐渐下降，且低频的参数做较大的更新，对高频的做较小的更新。实验表明在稀疏输入的条件下，Adagrad有很好的表现。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/adagrad.png" alt="adagrad.png"></p>
<h3 id="4-4-Adadelta"><a href="#4-4-Adadelta" class="headerlink" title="4.4  Adadelta"></a>4.4  Adadelta</h3><p>Adadelta，是对Adagrad的进一步优化，由于Adagrad是对整个时间上的累加，必然会导致时间越长学习率逐渐趋向0，Adadelta将这种累计限制在一个区间$w$内，使得学习率下降速度减缓。在实际使用中并不会定义$w$，而是使用均值作为替换。其参数更新公式为</p>
<script type="math/tex; mode=display">
E[g^2]_t = \gamma E[g^2]_{t-1} + (1-\gamma)g^2_t</script><p>$\gamma$一般设置为0.9，使用均值替换累加值，得到</p>
<script type="math/tex; mode=display">
\bigtriangleup \theta_t = - \frac{\eta}{\sqrt{E[g^2]_t + \epsilon}}g_t</script><p>更进一步，我们可以不设置学习率，直接使用前一步的均方根作为当前的学习率</p>
<script type="math/tex; mode=display">
\\
E[\bigtriangleup \theta^2]_t = \gamma E[\bigtriangleup \theta^2]_{t-1} + (1-\gamma)\bigtriangleup \theta^2_t
\\
RMS[\bigtriangleup \theta]_t = \sqrt{E[\bigtriangleup \theta^2]_t + \epsilon}
\\
\bigtriangleup \theta_t = -\frac{RMS[\bigtriangleup \theta]_{t-1}}{RMS[g]_t}g_t
\\
\theta_{t+1} = \theta_t + \bigtriangleup \theta_t</script><h3 id="4-5-RMSprop"><a href="#4-5-RMSprop" class="headerlink" title="4.5 RMSprop"></a>4.5 RMSprop</h3><p>RMSprop，与Adadelta的前一部分相同。其参数更新公式为</p>
<script type="math/tex; mode=display">
E[g^2]_t = 0.9 E[g^2]_{t-1} + 0.1g^2_t</script><p>$\gamma$建议设置为0.9，使用均值替换累加值，得到</p>
<script type="math/tex; mode=display">
\theta_{t+1} =\theta_t - \frac{\eta}{\sqrt{E[g^2]_t + \epsilon}}g_t</script><p>$\eta$设置为0.001</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/rmsp.png" alt="rmsp.png"></p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/nrmsp.png" alt="nrmsp.png"></p>
<h3 id="4-6-Adam"><a href="#4-6-Adam" class="headerlink" title="4.6  Adam"></a>4.6  Adam</h3><p>Adaptive Moment Estimation（自适应矩估计），除了像Adadelta和RMSprop一样存储了过去梯度的平方$v_t$的指数衰减平均值 ，也像momentum一样保持了过去梯度$m_t$的指数衰减平均值。</p>
<script type="math/tex; mode=display">
m_t = \beta_1m_{t-1} + (1-\beta_1)g_t
\\
v_t = \beta_2v_{t-1} + (1-\beta_2)g_t^2</script><p>如果$m_t$和$v_t$被初始化为0向量，那它们就会向0偏置，所以做了偏差校正，通过计算偏差校正后的$m_t$和$v_t$来抵消这些偏差</p>
<script type="math/tex; mode=display">
\hat{m}_t = \frac{m_t}{1-\beta_1^t}
\\
\hat{v}_t = \frac{v_t}{1-\beta_2^t}</script><p>其参数更新公式为</p>
<script type="math/tex; mode=display">
\theta_{t+1} = \theta_t - \frac{\eta}{\sqrt{\hat{v}_t}+\epsilon}\hat{m}_t</script><p>$\beta_1 = 0.9, \beta_2 = 0.999, \epsilon = 10^{-8}$为默认设置。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/adam.png" alt="adam.png"></p>
<h3 id="4-7-AdaMax"><a href="#4-7-AdaMax" class="headerlink" title="4.7  AdaMax"></a>4.7  AdaMax</h3><p>AdaMax，修改了Adam的$v<em>t$，因为$v_t$可以看作是对$g_t$的$l_2$范数，AdaMax从$l</em>\infty$范数中选择最大的范数作为替换，以加速梯度下降，这里用$u_t$表示</p>
<script type="math/tex; mode=display">
u_t = \beta^\infty_2v_{t-1} + (1-\beta^\infty_2)|g_t|^\infty
\\
= \max(\beta_2 \cdot v_{t-1}, |g_t|)</script><p>其参数更新公式为</p>
<script type="math/tex; mode=display">
\theta_{t+1} = \theta_t - \frac{\eta}{u_t}\hat{m}_t</script><p>$\beta_1 = 0.9, \beta_2 = 0.999, \eta = 0.002$为默认设置。</p>
<h3 id="4-8-Nadam"><a href="#4-8-Nadam" class="headerlink" title="4.8  Nadam"></a>4.8  Nadam</h3><p>Nesterov-accelerated Adaptive Moment Estimation 是Adam和NAG的组合。</p>
<p>首先，从NAG中知道</p>
<script type="math/tex; mode=display">
m_t = \gamma m_{t-1} + \eta g_t</script><p>从Adam中知道</p>
<script type="math/tex; mode=display">
m_t = \beta_1m_{t-1} + (1-\beta_1)g_t
\\
\hat{m}_t = \frac{m_t}{1-\beta_1^t}
\\
\theta_{t+1} = \theta_t - \frac{\eta}{\sqrt{\hat{v}_t}+\epsilon}\hat{m}_t</script><p>那么扩展一下更新公式</p>
<script type="math/tex; mode=display">
\theta_{t+1} = \theta_t - \frac{\eta}{\sqrt{\hat{v}_t}+\epsilon}(\frac{\beta_1m_{t-1}}{1-\beta^t_1} + \frac{(1-\beta_1)g_t}{1-\beta^t_1})</script><p>其中$\frac{\beta<em>1m</em>{t-1}}{1-\beta^t<em>1}$可以使用$\hat{m}</em>{t-1}$替换，与此同时，也可以根据NAG使用$\hat{m}<em>t$替换$\hat{m}</em>{t-1}$。最终参数更新公式为</p>
<script type="math/tex; mode=display">
\theta_{t+1} = \theta_t - \frac{\eta}{\sqrt{\hat{v}_t}+\epsilon}(\beta_1\hat{m}_t + \frac{(1-\beta_1)g_t}{1-\beta^t_1})</script><h3 id="4-9-Proximal-Algorithm"><a href="#4-9-Proximal-Algorithm" class="headerlink" title="4.9 Proximal Algorithm"></a>4.9 Proximal Algorithm</h3><p>对应<code>tf.train.ProximalAdagradOptimizer</code>和<code>tf.train.ProximalGradientDescentOptimizer</code>，主要是针对稀疏矩阵，目的是为了更好地得到稀疏解。稀疏解一方面可以增强泛化性能，另一方面减小运算时内存压力。</p>
<p>Proximal Algorithm是求解$l1$正则项的方法，为什么$l1$比$l2$更容易产生稀疏解？</p>
<p>为了求解$z$：</p>
<script type="math/tex; mode=display">
\underset{z \in \mathbb{R}}{\min} L = \lambda|z| + \frac{\gamma}{2}(z - x)^2</script><p>当$z&gt;0$时有</p>
<script type="math/tex; mode=display">
\frac{\partial L}{\partial z} = \lambda + \gamma(z-x) = 0
\\
z=x-\frac{\lambda}{\gamma}</script><p>当$z&lt;0$时有</p>
<script type="math/tex; mode=display">
\frac{\partial L}{\partial z} = -\lambda + \gamma(z-x) = 0
\\
z=x+\frac{\lambda}{\gamma}</script><p>综上，当$x&gt;\frac{\lambda}{\gamma}$，$z=x-\frac{\lambda}{\gamma}$，当$x&lt;-\frac{\lambda}{\gamma}$，$z=x+\frac{\lambda}{\gamma}$；当$-\frac{\lambda}{\gamma} \leqslant x \leqslant \frac{\lambda}{\gamma}$，$z=0$，所以$l1$容易产生稀疏解。</p>
<p>若是$l2$：</p>
<script type="math/tex; mode=display">
\underset{z \in \mathbb{R}}{\min} L = \lambda z^2 + \frac{\gamma}{2}(z - x)^2</script><p>求导得</p>
<script type="math/tex; mode=display">
z= \frac{\gamma}{\gamma + \lambda}x</script><p>其中即使$x$很接近0，$z$也只是更接近0而不会变成0。</p>
<hr>
<p>对于目标函数不是处处连续可微的情况通常使用<a href="https://zh.wikipedia.org/wiki/%E6%AC%A1%E5%AF%BC%E6%95%B0" target="_blank" rel="noopener">次梯度</a>进行优化，次梯度会导致两个问题：</p>
<ul>
<li>求解慢</li>
<li>通常不会产生稀疏解</li>
</ul>
<p>Proximal Algorithm算法可以解决这两个问题。</p>
<p>算法的核心部分proximal operator：</p>
<script type="math/tex; mode=display">
prox_{\lambda f}(v) = \underset{x}{\arg \min}(f(x) + \frac{1}{2\lambda}||x-v||^2)</script><p>上式描述的是求解一个离$v$不太远的点，且使$f(x)$尽可能的小，显然$f(x) \leqslant f(v)$</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/prox.jpg" alt="prox.jpg"></p>
<p>其中加粗的黑线表示作用域，浅色的黑线表示函数f的等高线，蓝色的点对应上面式子的v点，红色点表示最终求得的x点。</p>
<p>设待优化目标函数为$F(x)=l(x)+\phi(x)$，其中$l(x)$是连续可微的，$\phi(x)$不是处处连续的，这类优化目标在机器学习中比较常见，如$l(x)$表示最小二乘的拟合误差，$\phi(x)$表示$L1$正则化因子用于产生稀疏解。</p>
<blockquote>
<p>Proximal Gradient Algorithm</p>
<p>for t in range(n)</p>
<blockquote>
<p>1.Gradient Step，定义$v^t$是沿着$l(x)$梯度方向找到的一个点：</p>
<script type="math/tex; mode=display">v^t = x^t - \gamma \bigtriangledown l(x^t)</script><p>2.Proximal Operator Step，使用$prox$优化$\phi(x)$：</p>
<script type="math/tex; mode=display">x^{t+1}=prox_{\lambda \phi}(v^t)</script></blockquote>
<p>直到收敛或达到最大迭代次数</p>
</blockquote>
<p>参数$\lambda$的选择必须使$\bigtriangledown l(x)$满足<a href="https://zh.wikipedia.org/wiki/%E5%88%A9%E6%99%AE%E5%B8%8C%E8%8C%A8%E9%80%A3%E7%BA%8C" target="_blank" rel="noopener">利普希茨连续</a>，若利普希茨常数为$L$，则$\lambda \in (0, \frac{1}{L})$，若$L$未知，可以使用line search的方法去找：</p>
<blockquote>
<p>repeat</p>
<blockquote>
<p>1.$z = prox_{\lambda \phi}(v^t)$</p>
<p>2.break if $f(z) \leqslant f(v^t) + \bigtriangledown f^T(v^t)(v^t-z)+\frac{1}{2\lambda}||v^t - z||^2$</p>
<p>3.$\lambda = \frac{\lambda}{2}$</p>
</blockquote>
<p>return $x^{t+1} = z$</p>
</blockquote>
<h3 id="4-10-FTRL"><a href="#4-10-FTRL" class="headerlink" title="4.10 FTRL"></a>4.10 FTRL</h3><p>Follow-the-regularized-Leader，在处理诸如逻辑回归之类的带非光滑正则化项（例如1范数，做模型复杂度控制和稀疏化）的凸优化问题上性能非常出色</p>
<h3 id="4-11-RDA"><a href="#4-11-RDA" class="headerlink" title="4.11 RDA"></a>4.11 RDA</h3><p>Regularized Dual Averaging Algorithm（正则对偶平均算法），稀疏矩阵</p>
<h2 id="5-梯度下降可视化及选择"><a href="#5-梯度下降可视化及选择" class="headerlink" title="5. 梯度下降可视化及选择"></a>5. 梯度下降可视化及选择</h2><!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/optimizer1.gif" alt="optimizer1.gif"></p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/optimizer2.gif" alt="optimizer2.gif"></p>
<p>Adagrad, Adadelta, RMSprop 几乎很快就找到了正确的方向并前进，收敛速度也相当快，而其它方法要么很慢，要么走了很多弯路才找到。</p>
<ul>
<li>如果数据是稀疏的，就用自适应方法，即Adagrad, Adadelta, RMSprop, Adam</li>
<li>RMSprop, Adadelta, Adam在很多情况下的效果是相似的</li>
<li>Adam 就是在RMSprop的基础上加了bias-correction和momentum</li>
<li>随着梯度变的稀疏，Adam比RMSprop效果会好</li>
</ul>
<h2 id="6-其他用于优化SGD的策略"><a href="#6-其他用于优化SGD的策略" class="headerlink" title="6. 其他用于优化SGD的策略"></a>6. 其他用于优化SGD的策略</h2><h3 id="6-1-Shuffling-and-Curriculum-Learning"><a href="#6-1-Shuffling-and-Curriculum-Learning" class="headerlink" title="6.1 Shuffling and Curriculum Learning"></a>6.1 Shuffling and Curriculum Learning</h3><p>Shuffling是打乱训练集的顺序，Curriculum Learning是按照训练样本难易程度依次提供给模型，两者看似矛盾，但是其实是需要根据具体情况进行选择。比如在预测房价这个案例中，我们不希望数据从小到大的输入到模型中，这样可能会导致收敛很慢或者收敛到鞍点的情况发生，此时需要使用Shuffling；而在图像识别案例中，比如识别猫狗，我们可以先输入一些猫狗的简单素描图，这样模型能学习到一些基本特征，然后再输入复杂一点的图片（带环境、颜色、不同品种），Curriculum Learning往往能更快收敛；当然有实验表明再LSTMs的训练过程中，往往需要结合这些策略。</p>
<h3 id="6-2-Batch-normalization"><a href="#6-2-Batch-normalization" class="headerlink" title="6.2 Batch normalization"></a>6.2 Batch normalization</h3><p>小批量标准化，即在一个batch上进行数据标准化，比起在整个数据集上标准化，我们能使用更高的学习率且不要那么在意初始化参数。此外，批量正则化还可以看作是一种正则化手段，能够减少（甚至去除）留出法的使用。</p>
<h3 id="6-3-Early-stopping"><a href="#6-3-Early-stopping" class="headerlink" title="6.3 Early stopping"></a>6.3 Early stopping</h3><p>早停法，即在误差或损失已经达到预期或者误差没有明显改进的情况下停止训练，一方面减少了训练开销，因为后期收敛速度变慢，另一方面有助于提升泛化性能。</p>
<h3 id="6-4-Gradient-noise"><a href="#6-4-Gradient-noise" class="headerlink" title="6.4 Gradient noise"></a>6.4 Gradient noise</h3><p>梯度噪声，在梯度更新时加入高斯噪声$N(0,\sigma_t^2)$</p>
<script type="math/tex; mode=display">
g_{t,i} = g_{t, i} + N(0,\sigma_t^2)
\\
\sigma_t^2 = \frac{\eta}{(1+t)^\gamma}</script><p>这种方式能够提升神经网络在不良初始化前提下的鲁棒性，并能帮助训练特别是深层、复杂的神经网络。实验发现，加入噪声项之后，模型更有可能发现并跳出在深度网络中频繁出现的局部最小值。</p>
<h2 id="7-神经网络优化中的挑战"><a href="#7-神经网络优化中的挑战" class="headerlink" title="7. 神经网络优化中的挑战"></a>7. 神经网络优化中的挑战</h2><h3 id="7-1-病态"><a href="#7-1-病态" class="headerlink" title="7.1 病态"></a>7.1 病态</h3><p>Hessian矩阵$\boldsymbol{H}$的病态，体现在随机梯度下降会“卡”在某些情况，此时即使很小的更新步长也会增加代价函数。</p>
<p>代价函数的二阶泰勒级数展开预测梯度下降中的$-\epsilon\boldsymbol{g}$会增加</p>
<script type="math/tex; mode=display">
\frac{1}{2}\epsilon^2\boldsymbol{g}^T\boldsymbol{Hg} - \epsilon \boldsymbol{g}^T\boldsymbol{g}</script><p>到代价中。当$\frac{1}{2}\epsilon^2\boldsymbol{g}^T\boldsymbol{Hg}$超过$\epsilon \boldsymbol{g}^T\boldsymbol{g}$时，梯度的病态会成为问题。判断病态是否不利于神经网络训练任务，我们可以监测平方梯度范数$\boldsymbol{g}^T\boldsymbol{g},\boldsymbol{g}^T\boldsymbol{Hg}$。在很多情况中，梯度范数不会在训练过程中显著缩小，但是$\boldsymbol{g}^T\boldsymbol{Hg}$的增长会超过一个数量级。其结果是尽管梯度很强，学习会变得非常缓慢，因为学习率必须收缩以弥补更强的曲率。</p>
<p>牛顿法在解决带有病态条件的Hessian矩阵的凸优化问题时，是一个非常优秀的工具。</p>
<h3 id="7-2-局部极小值"><a href="#7-2-局部极小值" class="headerlink" title="7.2 局部极小值"></a>7.2 局部极小值</h3><p>对于凸优化问题来说，局部极小等价于全局最小。对于非凸函数来说，可能会存在多个局部极小值。</p>
<p>由于模型可辨识性问题，神经网络和任意具有多个等效参数化潜变量的模型都会具有多个局部极小值。如果一个足够大的训练集可以唯一确定一组模型参数，那么该模型被称为可辨认的。带有潜变量的模型通常是不可辨认的，因为通过相互交换潜变量我们能得到等价的模型。</p>
<p>这些模型可辨识性问题意味着神经网络代价函数具有非常多、甚至不可数无限多的局部极小值。然而，所有这些由于不可辨识性问题而产生的局部极小值都有相同的代价函数值。因此，这些局部极小值并非是非凸所带来的问题。</p>
<p>一种能够排除局部极小值是主要问题的检测方法是画出梯度范数随时间的变化。如果梯度范数没有缩小到一个微小的值，那么该问题既不是局部极小值，也不是其他形式的临界点。在高维空间中，很难明确证明局部极小值是导致问题的原因。许多并非局部极小值的结构也具有很小的梯度。</p>
<h3 id="7-3-高原、鞍点和其他平坦区域"><a href="#7-3-高原、鞍点和其他平坦区域" class="headerlink" title="7.3 高原、鞍点和其他平坦区域"></a>7.3 高原、鞍点和其他平坦区域</h3><p>对于很多高维非凸函数而言，局部极小值（以及极大值）事实上都远少于另一类梯度为零的点：鞍点。鞍点附近的某些点比鞍点有更大的代价，而其他点则有更小的代价。在鞍点处，Hessian矩阵同时具有正负特征值。位于正特征值对应的特征向量方向的点比鞍点有更大的代价，反之，位于负特征值对应的特征向量方向的点有更小的代价。我们可以将鞍点视为代价函数某个横截面上的局部极小点，同时也可以视为代价函数某个横截面上的局部极大点</p>
<p>鞍点激增对于训练算法来说有哪些影响呢？对于只使用梯度信息的一阶优化算法而言，目前情况还不清楚。鞍点附近的梯度通常会非常小。另一方面，实验中梯度下降似乎可以在许多情况下逃离鞍点。</p>
<p>也可能存在恒值的、宽且平坦的区域。在这些区域，梯度和 Hessian 矩阵都是零。这种退化的情形是所有数值优化算法的主要问题。在凸问题中，一个宽而平坦的区间肯定包含全局极小值，但是对于一般的优化问题而言，这样的区域可能会对应着目标函数中一个较高的值。</p>
<h3 id="7-4-悬崖和梯度爆炸"><a href="#7-4-悬崖和梯度爆炸" class="headerlink" title="7.4 悬崖和梯度爆炸"></a>7.4 悬崖和梯度爆炸</h3><!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/grad.jpg" alt="grad.jpg"></p>
<p>多层神经网络通常存在像悬崖一样的斜率较大区域，这是由于几个较大的权重相乘导致的。遇到斜率极大的悬崖结构时，梯度更新会很大程度地改变参数值，通常会完全跳过这类悬崖结构。</p>
<p><strong>梯度截断</strong>基本想法源自梯度并没有指明最佳步长，只说明了在无限小区域内的最佳方向。当<br>传统的梯度下降算法提议更新很大一步时，启发式梯度截断会干涉来减小步长，从而使其不太可能走出梯度近似为最陡下降方向的悬崖区域。悬崖结构在循环神经网络的代价函数中很常见，因为这类模型会涉及到多个因子的相乘，其中每个因子对应一个时间步。因此，长期时间序列会产生大量相乘。</p>
<h3 id="7-5-长期依赖"><a href="#7-5-长期依赖" class="headerlink" title="7.5 长期依赖"></a>7.5 长期依赖</h3><p>当计算图变得极深时，神经网络优化算法会面临的另外一个难题就是长期依赖问题-由于变深的结构使模型丧失了学习到先前信息的能力，让优化变得极其困难。</p>
<p>例如，假设某个计算图中包含一条反复与矩阵$\boldsymbol{W}$相乘的路径（RNNs），那么$t$步后，相当于乘以$\boldsymbol{W}^t$，假设$\boldsymbol{W}$有特征分解$\boldsymbol{W} = \boldsymbol{V} diag(\boldsymbol{\lambda})\boldsymbol{V}^{-1}$，那么</p>
<script type="math/tex; mode=display">
\boldsymbol{W}^t = \boldsymbol{V} diag(\boldsymbol{\lambda})^t\boldsymbol{V}^{-1}</script><p>显然，当特征值$\lambda_i$不在1附近时，若在量级上大于1则会爆炸；若小于1时则会消失。<strong>梯度消失与爆炸问题</strong>是指该计算图上的梯度也会因为$diag(\boldsymbol{\lambda})^t$大幅度变化。梯度消失使得我们难以知道参数朝哪个方向移动能够改进代价函数，而梯度爆炸会使得学习不稳定。之前描述的促使我们使用梯度截断的悬崖结构便是梯度爆炸现象的一个例子。</p>
<p>此处描述的在各时间步重复与$\boldsymbol{W}$相乘非常类似于寻求矩阵$\boldsymbol{W}$的最大特征值及对应特征向量的<strong>幂方法</strong>。从这个观点来看，$\boldsymbol{x}^T\boldsymbol{W}^t$最终会丢弃$\boldsymbol{x}$中所有与$\boldsymbol{W}$的主特征向量正交的成分。</p>
<h3 id="7-6-非精确梯度"><a href="#7-6-非精确梯度" class="headerlink" title="7.6 非精确梯度"></a>7.6 非精确梯度</h3><p>大多数优化算法的先决条件都是我们知道精确的梯度或是Hessian矩阵。在实践中，通常这些量会有噪声，甚至是有偏的估计。几乎每一个深度学习算法都需要基于采样的估计，至少使用训练样本的小批量来计算梯度。</p>
<p>在其他情况，我们希望最小化的目标函数实际上是难以处理的。当目标函数不可解时，通常其梯度也是难以处理的。在这种情况下，我们只能近似梯度。这些问题主要出现在第三部分中更高级的模型中。例如，<strong>对比散度</strong>是用来近似玻尔兹曼机中难以处理的对数似然梯度的一种技术。</p>
<p>各种神经网络优化算法的设计都考虑到了梯度估计的缺陷。我们可以选择比真实损失函数更容易估计的代理损失函数来避免这个问题。</p>
<h3 id="7-7-局部和全局结构间的弱对应"><a href="#7-7-局部和全局结构间的弱对应" class="headerlink" title="7.7 局部和全局结构间的弱对应"></a>7.7 局部和全局结构间的弱对应</h3><p>如果该方向在局部改进很大，但并没有指向代价低得多的遥远区域，那么我们有可能在单点处克服以上所有困难，但仍然表现不佳。</p>
<p>大多数优化研究的难点集中于训练是否找到了全局最小点、局部极小点或是鞍点，但在实践中神经网络不会到达任何一种临界点。</p>
<p>不管哪个问题最重要，如果存在一个区域，我们遵循局部下降便能合理地直接到达某个解，并且我们能够在该良好区域上初始化学习，那么这些问题都可以避免。最终的观点还是建议在传统优化算法上研究怎样选择更佳的初始化点，以此来实现目标更切实可行。</p>
<h3 id="7-8-优化的理论限制"><a href="#7-8-优化的理论限制" class="headerlink" title="7.8 优化的理论限制"></a>7.8 优化的理论限制</h3><p>一些理论结果表明，我们为神经网络设计的任何优化算法都有性能限制。通常这些结果不影响神经网络在实践中的应用。</p>
<p>一些理论结果仅适用于神经网络的单元输出离散值的情况。然而，大多数神经网络单元输出光滑的连续值，使得局部搜索求解优化可行。一些理论结果表明，存在某类问题是不可解的，但很难判断一个特定问题是否属于该类。其他结果表明，寻找给定规模的网络的一个可行解是很困难的，但在实际情况中，我们通过设置更多参数，使用更大的网络，能轻松找到可接受的解。此外，在神经网络训练中，我们通常不关注某个函数的精确极小点，而只关注将其值下降到足够小以获得一个良好的泛化误差。对优化算法是否能完成此目标进行理论分析是非常困难的。因此，研究优化算法更现实的性能上界仍然是学术界的一个重要目标。</p>
]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Theory</tag>
        <tag>Keras</tag>
        <tag>Tensorflow</tag>
        <tag>Optimizer</tag>
      </tags>
  </entry>
  <entry>
    <title>神经网络-coding</title>
    <url>/archives/2d6320ff.html</url>
    <content><![CDATA[<h2 id="1-数据集说明"><a href="#1-数据集说明" class="headerlink" title="1. 数据集说明"></a>1. 数据集说明</h2><h3 id="1-1-二分类数据集-乳腺癌"><a href="#1-1-二分类数据集-乳腺癌" class="headerlink" title="1.1 二分类数据集-乳腺癌"></a>1.1 二分类数据集-乳腺癌</h3><ul>
<li>数据来源：<code>sklearn.datasets.load_breast_cancer</code>；</li>
<li>数据集形状：总计569个样本，良性357个，恶性212个，每个样本由30个属性表示，target表示肿瘤良性1还是恶性0，所有属性值均为number，详情可调用<code>load_breast_cancer()[&#39;DESCR&#39;]</code>了解每个属性的具体含义；</li>
<li>数据集划分：随机选出20%数据作为测试集，不做验证集要求；</li>
<li>性能度量：accuracy或ROC。</li>
</ul>
<h3 id="1-2-回归数据集-California房价"><a href="#1-2-回归数据集-California房价" class="headerlink" title="1.2 回归数据集-California房价"></a>1.2 回归数据集-California房价</h3><ul>
<li>数据来源：<code>sklearn.datasets.fetch_california_housing</code>；</li>
<li>数据集形状：总计20640个样本，每个样本8个属性表示，以及房价作为target，所有属性值均为number，详情可调用<code>fetch_california_housing()[&#39;DESCR&#39;]</code>了解每个属性的具体含义；</li>
<li>数据集划分：随机选出20%数据作为测试集，不做验证集要求；</li>
<li>性能度量：MSE或者RMSE均可以。</li>
</ul>
<h3 id="1-3-多分类数据集-森林植被类型"><a href="#1-3-多分类数据集-森林植被类型" class="headerlink" title="1.3 多分类数据集-森林植被类型"></a>1.3 多分类数据集-森林植被类型</h3><ul>
<li>数据来源：<code>sklearn.datasets.fetch_covtype</code>；</li>
<li>数据集形状：总计581012个样本，每个样本由54个维度表示（12个属性，其中2个分别是onehot4维和onehot40维），以及target表示植被类型1-7，所有属性值均为number，详情可调用<code>fetch_covtype()[&#39;DESCR&#39;]</code>了解每个属性的具体含义；</li>
<li>数据集划分：随机选出20%数据作为测试集，不做验证集要求；</li>
<li>性能度量：accuracy或ROC。</li>
</ul>
<a id="more"></a>
<h2 id="2-神经网络"><a href="#2-神经网络" class="headerlink" title="2. 神经网络"></a>2. 神经网络</h2><p>参考：</p>
<blockquote>
<p><a href="https://github.com/zhuantou233/AiLearning" target="_blank" rel="noopener"><code>ApacheCN 机器学习 MachineLearning</code></a><br><a href="https://github.com/aymericdamien/TensorFlow-Examples/" target="_blank" rel="noopener"><code>Github-TensorFlow-Examples</code></a></p>
</blockquote>
<p>神经网络一般都是由输入层、隐藏层和输出层组成。输入层即控制数据输入，仅有一层；隐藏层一般包括多层，每层指定一个神经元数，激活函数一般为ReLU；输出层决定你的神经网络的输出，即最终预测的结果的类型，比如回归型神经网络输出层是对上一层的输出进行求和，二分类型神经网络输出层是是对上一层的输出做Sigmoid运算，多分类神经网络输出层是对上一层进行Softmax运算，根据输出层的激活函数不同，具体的反向传播公式会有细微的差别（在对损失函数求导方面）。</p>
<h3 id="2-1-梯度下降算法实现二分类"><a href="#2-1-梯度下降算法实现二分类" class="headerlink" title="2.1 梯度下降算法实现二分类"></a>2.1 梯度下降算法实现二分类</h3><p>假设一个浅层神经网络的流程如下</p>
<script type="math/tex; mode=display">
(x, W^1, b^1) \rightarrow z^1 = W^1x + b^1 \rightarrow a^1 = \sigma(z^1)
\\
(a^1, W^2, b^2) \rightarrow    z^2 = W^2a^1 + b^2 \rightarrow a^2 = \sigma(z^2) \rightarrow L(a^2, y)</script><p>$L(a^2, y)$为损失函数交叉熵，对二分类来说，其计算方式为</p>
<script type="math/tex; mode=display">
L(a, y) = -y\log a - (1-y)\log (1-a)</script><p>就二分类来说，隐藏层激活函数为ReLU，输出层Sigmoid，其正向传播和反向传播简化公式（将输入$x$组成矩阵$\boldsymbol{X}, \boldsymbol{X} \in \mathbb{R}^{n_0 \times m}$）为</p>
<p><strong>正向传播</strong></p>
<script type="math/tex; mode=display">
\boldsymbol{Z}^1 = \boldsymbol{W}^1\boldsymbol{X} + \boldsymbol{b}^1
\\
\boldsymbol{A}^1 = \sigma(\boldsymbol{Z}^1)
\\
\boldsymbol{Z}^2 = \boldsymbol{W}^2\boldsymbol{A}^1 + \boldsymbol{b}^2
\\
\boldsymbol{A}^2 = \sigma(\boldsymbol{Z}^2)</script><p><strong>反向传播</strong></p>
<script type="math/tex; mode=display">
d\boldsymbol{Z}^2 = \boldsymbol{A}^2 - \boldsymbol{Y}
\\
d\boldsymbol{W}^2 = \frac{1}{m}d\boldsymbol{Z}^2\boldsymbol{A}^{1T}
\\
d\boldsymbol{b}^2 = \frac{1}{m} np.sum(d\boldsymbol{Z}^2, axis=1, keepdims=True)
\\
d\boldsymbol{Z}^1 = \boldsymbol{W}^{2T}d\boldsymbol{Z}^2 \cdot g'^1(\boldsymbol{Z}^1)
\\
d\boldsymbol{W}^1 = \frac{1}{m} d\boldsymbol{Z}^1\boldsymbol{X}^T
\\
d\boldsymbol{b}^1 = \frac{1}{m} np.sum(d\boldsymbol{Z}^1, axis=1, keepdims=True)</script><p>首先导入需要的库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span>  load_breast_cancer</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br></pre></td></tr></table></figure>
<p>然后我们需要根据数据形状设计参数形状，输入X的形状为<code>n0 * m</code>，n0为特征数，m为样本数，则第一层W1为<code>n0 * n1</code>，b1为<code>n1 * 1</code>，计算形式为<code>WX + b</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_variables</span><span class="params">(layers)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        desc:</span></span><br><span class="line"><span class="string">            根据layers初始化神经网络参数</span></span><br><span class="line"><span class="string">        parameters: </span></span><br><span class="line"><span class="string">            layers: 神经网络的结构，每一层的神经元个数，list</span></span><br><span class="line"><span class="string">        return:</span></span><br><span class="line"><span class="string">            variables: 初始化的神经网络参数，w和b，dict</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    L = len(layers)</span><br><span class="line">    variables = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, L):</span><br><span class="line">        variables[<span class="string">"W"</span> + str(i)] = np.random.randn(layers[i], layers[i - <span class="number">1</span>]) * <span class="number">0.01</span></span><br><span class="line">        variables[<span class="string">"b"</span> + str(i)] = np.zeros((layers[i], <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> variables</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">relu</span><span class="params">(Z)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        激活函数ReLU</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> np.maximum(<span class="number">0</span>, Z)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(Z)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        激活函数Sigmoid</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> / (<span class="number">1</span> + np.exp(-Z))</span><br></pre></td></tr></table></figure>
<p>再定义前向传播函数和损失函数，这里计算的是交叉熵</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fp</span><span class="params">(X, variables)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        desc: </span></span><br><span class="line"><span class="string">            前向传播，计算预测值</span></span><br><span class="line"><span class="string">        parameters:</span></span><br><span class="line"><span class="string">            X: 输入数据集，形式n0*m，m为样本数，n0为特征数</span></span><br><span class="line"><span class="string">            variables: 神经网络参数，w和b</span></span><br><span class="line"><span class="string">        return:</span></span><br><span class="line"><span class="string">            AL: 预测结果</span></span><br><span class="line"><span class="string">            caches: 计算过程中缓存的每一层神经元的输入输出以及参数</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    A = X</span><br><span class="line">    L = len(variables) // <span class="number">2</span></span><br><span class="line">    caches = [(<span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, X)]</span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> range(<span class="number">1</span>, L):</span><br><span class="line">        A_pre = A</span><br><span class="line">        W = variables[<span class="string">'W'</span> + str(l)]</span><br><span class="line">        b = variables[<span class="string">'b'</span> + str(l)]</span><br><span class="line">        z = np.dot(W, A_pre) + b</span><br><span class="line">        A = relu(z)</span><br><span class="line">        caches.append((W, b, z, A))</span><br><span class="line">    WL = variables[<span class="string">'W'</span> + str(L)]</span><br><span class="line">    bL = variables[<span class="string">'b'</span> + str(L)]</span><br><span class="line">    zL = np.dot(WL, A) + bL</span><br><span class="line">    AL = sigmoid(zL)</span><br><span class="line">    caches.append((WL, bL, zL, AL))</span><br><span class="line">    <span class="keyword">return</span> AL, caches</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_cost</span><span class="params">(AL, Y)</span>:</span></span><br><span class="line">    cost = np.mean(np.multiply(-np.log(AL), Y) + np.multiply(-np.log(<span class="number">1</span> - AL), <span class="number">1</span> - Y))</span><br><span class="line">    cost = np.squeeze(cost)</span><br><span class="line">    <span class="keyword">return</span> cost</span><br></pre></td></tr></table></figure>
<p>定义反向传播函数，其中有反函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">relu_back</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.int64(A &gt; <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bp</span><span class="params">(AL, Y, caches)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        desc:</span></span><br><span class="line"><span class="string">            反向传播，计算导数</span></span><br><span class="line"><span class="string">        parameters:</span></span><br><span class="line"><span class="string">            AL: 前向传播得到的结果</span></span><br><span class="line"><span class="string">            Y: 真实值</span></span><br><span class="line"><span class="string">            caches: 前向传播过程中缓存的数据</span></span><br><span class="line"><span class="string">        return:</span></span><br><span class="line"><span class="string">            gradients: 反向传播的导数</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    m = Y.shape[<span class="number">1</span>]</span><br><span class="line">    L = len(caches) - <span class="number">1</span></span><br><span class="line">    prev_AL = caches[L - <span class="number">1</span>][<span class="number">3</span>]</span><br><span class="line">    dzL = <span class="number">1.</span> / m * (AL - Y)</span><br><span class="line">    dWL = np.dot(dzL, prev_AL.T)</span><br><span class="line">    dbL = np.sum(dzL, axis = <span class="number">1</span>, keepdims = <span class="literal">True</span>)</span><br><span class="line">    gradients = &#123;<span class="string">'dW'</span> + str(L) : dWL, <span class="string">'db'</span> + str(L) : dbL&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(<span class="number">1</span>, L)):</span><br><span class="line">        post_W = caches[i + <span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">        dz = dzL</span><br><span class="line">        dal = np.dot(post_W.T, dz)</span><br><span class="line">        <span class="comment">#Al = caches[i][3]</span></span><br><span class="line">        <span class="comment">#dzl = np.multiply(dal, relu_back(Al))</span></span><br><span class="line">        <span class="comment">#使用Al和zl效果相同</span></span><br><span class="line"></span><br><span class="line">        zl = caches[i][<span class="number">2</span>]</span><br><span class="line">        dzl = np.multiply(dal, relu_back(zl))</span><br><span class="line"></span><br><span class="line">        prev_A = caches[i <span class="number">-1</span>][<span class="number">3</span>]</span><br><span class="line">        dwl = np.dot(dzl, prev_A.T)</span><br><span class="line">        dbl = np.sum(dzl, axis = <span class="number">1</span>, keepdims = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        gradients[<span class="string">'dW'</span> + str(i)] = dwl</span><br><span class="line">        gradients[<span class="string">'db'</span> + str(i)] = dbl</span><br><span class="line">        dzL = dzl</span><br><span class="line">    <span class="keyword">return</span> gradients</span><br></pre></td></tr></table></figure>
<p>定义更新参数的函数，以及其他辅助的函数，最后指明main函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_param</span><span class="params">(variables, gradients, learning_rate)</span>:</span></span><br><span class="line">    L = len(variables) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(L):</span><br><span class="line">        variables[<span class="string">'W'</span> + str(i + <span class="number">1</span>)] -= learning_rate * gradients[<span class="string">'dW'</span> + str(i + <span class="number">1</span>)]</span><br><span class="line">        variables[<span class="string">'b'</span> + str(i + <span class="number">1</span>)] -= learning_rate * gradients[<span class="string">'db'</span> + str(i + <span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">return</span> variables</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">L_layer_model</span><span class="params">(X, Y, layers, learning_rate, maxCycles)</span>:</span></span><br><span class="line">    costs = []</span><br><span class="line">    variables = init_variables(layers)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(maxCycles):</span><br><span class="line">        AL, caches = fp(X, variables)</span><br><span class="line">        cost = compute_cost(AL, Y)</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">1000</span> == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">'Cost after iteration &#123;&#125; : &#123;&#125;'</span>.format(i, cost))</span><br><span class="line">            costs.append(cost)</span><br><span class="line">        gradients = bp(AL, Y, caches)</span><br><span class="line">        variables = update_param(variables, gradients, learning_rate)</span><br><span class="line">    plt.clf()</span><br><span class="line">    plt.plot(costs)</span><br><span class="line">    plt.xlabel(<span class="string">'iterations'</span>)</span><br><span class="line">    plt.ylabel(<span class="string">'cost'</span>)</span><br><span class="line">    plt.show()</span><br><span class="line">    <span class="keyword">return</span> variables</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(X_test,y_test,variables)</span>:</span></span><br><span class="line">    m = y_test.shape[<span class="number">1</span>]</span><br><span class="line">    Y_prediction = np.zeros((<span class="number">1</span>, m))</span><br><span class="line">    prob, caches = fp(X_test, variables)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(prob.shape[<span class="number">1</span>]):</span><br><span class="line">        <span class="comment"># 将概率转换为标签</span></span><br><span class="line">        <span class="keyword">if</span> prob[<span class="number">0</span>, i] &gt; <span class="number">0.5</span>:</span><br><span class="line">            Y_prediction[<span class="number">0</span>, i] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            Y_prediction[<span class="number">0</span>, i] = <span class="number">0</span></span><br><span class="line">    accuracy = <span class="number">1</span>- np.mean(np.abs(Y_prediction - y_test))</span><br><span class="line">    <span class="keyword">return</span> accuracy</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DNN</span><span class="params">(X_train, y_train, X_test, y_test, layers, learning_rate= <span class="number">0.01</span>, num_iterations=<span class="number">40000</span>)</span>:</span></span><br><span class="line">    variables = L_layer_model(X_train, y_train, layers, learning_rate, num_iterations)</span><br><span class="line">    accuracy = predict(X_test,y_test,variables)</span><br><span class="line">    <span class="keyword">return</span> accuracy</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    X_data, y_data = load_breast_cancer(return_X_y=<span class="literal">True</span>)</span><br><span class="line">    X_train, X_test,y_train,y_test = train_test_split(X_data, y_data, train_size=<span class="number">0.8</span>)</span><br><span class="line">    X_train = X_train.T</span><br><span class="line">    y_train = y_train.reshape(y_train.shape[<span class="number">0</span>], <span class="number">-1</span>).T</span><br><span class="line">    X_test = X_test.T</span><br><span class="line">    y_test = y_test.reshape(y_test.shape[<span class="number">0</span>], <span class="number">-1</span>).T</span><br><span class="line">    accuracy = DNN(X_train,y_train,X_test,y_test,[X_train.shape[<span class="number">0</span>],<span class="number">20</span>, <span class="number">20</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">1</span>])</span><br><span class="line">    print(<span class="string">'accuracy reaches %.4f'</span> % accuracy)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>accuracy reaches 0.9035</p>
</blockquote>
<p>若我们使用同样的数据集划分，对比线性回归中准确率，我们应该会发现，神经网络的准确率相当高。</p>
<p>训练过程中损失变化情况如下<br><!--  —&gt;<br><img src="http://114.116.9.65:7777/images/2020/01/19/nn.png" alt="nn.png"></p>
<h3 id="2-2-Estimator实现房价预测"><a href="#2-2-Estimator实现房价预测" class="headerlink" title="2.2 Estimator实现房价预测"></a>2.2 Estimator实现房价预测</h3><p>导入库，不一定会用到，但是是可以使用的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> fetch_california_housing</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns <span class="comment"># 数据图形化，后面会用到</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd <span class="comment"># pandas输出处理</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br></pre></td></tr></table></figure>
<p>获取数据，并进行处理，划分测试集</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(data, target) = fetch_california_housing(return_X_y=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(data, target, shuffle=<span class="literal">True</span>, test_size=<span class="number">0.2</span>)</span><br></pre></td></tr></table></figure>
<p>添加特征列，这里可以分析数据进行不一样的特征列处理；<br>定义输入函数，这里采用了<code>pandas_input_fn</code>，直接将<code>DataFrame</code>作为输入，就可以不需要定义字典。<br>此数据集中有经纬度数据，即地域对房价的影响，不同地域内的房价往往有着不同的均值和方差，因此可以修改特征列。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">feature_names = fetch_california_housing()[<span class="string">'feature_names'</span>]</span><br><span class="line"></span><br><span class="line">feature_columns = []</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> feature_names:</span><br><span class="line">    feature_columns.append(tf.feature_column.numeric_column(key=name))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">input_fn</span><span class="params">(x, y, training=True)</span>:</span></span><br><span class="line">    dataframe = pd.DataFrame(data=x, columns=feature_names)</span><br><span class="line">    dataframe[<span class="string">'HousePrice'</span>] = y</span><br><span class="line">    <span class="keyword">if</span> training: <span class="comment"># 训练集可以重复数据，测试集就没必要</span></span><br><span class="line">        <span class="keyword">return</span> tf.estimator.inputs.pandas_input_fn(</span><br><span class="line">            x=dataframe, </span><br><span class="line">            y=dataframe[<span class="string">'HousePrice'</span>],</span><br><span class="line">            batch_size=<span class="number">64</span>, </span><br><span class="line">            shuffle=<span class="literal">True</span>, </span><br><span class="line">            num_epochs=<span class="number">20</span>) <span class="comment"># 这里决定了后面模型的训练迭代轮数</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> tf.estimator.inputs.pandas_input_fn(</span><br><span class="line">            x=dataframe,</span><br><span class="line">            y=dataframe[<span class="string">'HousePrice'</span>],</span><br><span class="line">            shuffle=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<p>这里定义训练模型，我们定义了神经网络模型dnn和线性模型linear，进行比较，优化器都选择<code>ProximalAdagradOptimizer</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dnn = tf.estimator.DNNRegressor(</span><br><span class="line">    feature_columns=feature_columns, </span><br><span class="line">    hidden_units=[<span class="number">32</span>, <span class="number">32</span>, <span class="number">16</span>, <span class="number">8</span>], </span><br><span class="line">    model_dir=<span class="string">"C://Users//Admin//Desktop//model//DNNRegressor"</span>,</span><br><span class="line">    optimizer=tf.train.ProximalAdagradOptimizer(</span><br><span class="line">        learning_rate=<span class="number">0.01</span>, </span><br><span class="line">        l1_regularization_strength=<span class="number">0.001</span>))</span><br><span class="line"></span><br><span class="line">linear = tf.estimator.LinearRegressor(</span><br><span class="line">    feature_columns=feature_columns,</span><br><span class="line">    model_dir=<span class="string">"C://Users//Admin//Desktop//model//LinearRegressor"</span>,</span><br><span class="line">    optimizer=tf.train.ProximalAdagradOptimizer(</span><br><span class="line">        learning_rate=<span class="number">0.01</span>,</span><br><span class="line">        l1_regularization_strength=<span class="number">0.001</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里循环多次是为了了解训练过程是否过拟合，对应前面输入函数num_epochs=20设置一个较小的值</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    dnn.train(input_fn=input_fn(x_train, y_train), max_steps=<span class="number">40000</span>)</span><br><span class="line">    dnn.evaluate(input_fn=input_fn(x_test, y_test, training=<span class="literal">False</span>))</span><br><span class="line">    linear.train(input_fn=input_fn(x_train, y_train), max_steps=<span class="number">40000</span>)</span><br><span class="line">    linear.evaluate(inpun=input_fn(x_test, y_test, training=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/dnn-linear.png" alt="dnn-linear.png"></p>
<p>从图中可以知道，线性模型的收敛速度比神经网络快，但是最终神经网络模型的效果略好一点（并不意味着神经网路一定优于线性模型），由于神经网络的结构对结果影响很大，我得到的最优的平均损失在0.50附近。<br>若分析数据进行特征工程，我想应该能得到更好的结果。</p>
<hr>
<p><strong>1. 首先将数据转换成Pandas形式，观察数据的一般统计量</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.DataFrame(data=data, columns=feature_names)</span><br><span class="line">df[<span class="string">'HousePrice'</span>] = target</span><br><span class="line">df.describe()</span><br></pre></td></tr></table></figure>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/house0.png" alt="house0.png"></p>
<p>从图中可以发现几个问题：</p>
<ul>
<li>AveRooms的最大值141，而均值和75%的值都在7以内，说明有的街区是豪宅或者统计错误，需要过滤掉这些异常值，同理AveBedrms、Population和AveOccup都存在异常值；</li>
<li>Latitude和Longitude是经纬度，理论上是一种地理位置属性，两者应该放在一起考虑；</li>
</ul>
<p><strong>2. 然后我们计算各个特征之间的协方差</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">corr = df.corr()</span><br><span class="line">sns.heatmap(corr)</span><br></pre></td></tr></table></figure>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/corr.png" alt="corr.png"></p>
<p>从协方差热力图中可以发现</p>
<ul>
<li>MedInc与房价之间有正相关的线性关系，且是这几个特征中最强的，所以我们可能会考虑使用<a href="https://arxiv.org/pdf/1606.07792.pdf" target="_blank" rel="noopener"><code>DNNLinearCombinedRegressor</code></a>并将MedInc作为线性模型特征列，其他作为神经网络特征列；</li>
<li>HouseAge与其他所有的特征的相关性并不强,尤其是与房价的相关性，对比其他的特征，是最低的，所以最后可能放弃使用这个特征；</li>
<li>Latitude和Longitude呈负相关，说明在地理上面，样本点的布局呈现负导数斜线的形状。</li>
</ul>
<p><strong>3. 尝试构造额外的特征</strong></p>
<p>(1) 根据Population和AveOccup，可以得到属于该街区的房子总数，$TotalHouse = \frac{Population}{AveOccup}$；</p>
<p>(2) 根据MedInc和Population，可以得到该街区的收入总数（不准确，使用了中位数而不是均值），$TotalInc = MedInc \times Population$；</p>
<p>(3) 根据AveRooms和AveBedrms，可以得到平均其他房间数，$AveOtherrms = AveRooms - AveBedrms$。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">'TotalHouse'</span>] = df[<span class="string">'Population'</span>] / df[<span class="string">'AveOccup'</span>]</span><br><span class="line">df[<span class="string">'TotalInc'</span>] = df[<span class="string">'MedInc'</span>] * df[<span class="string">'Population'</span>]</span><br><span class="line">df[<span class="string">'AveOtherrms'</span>] = df[<span class="string">'AveRooms'</span>] - df[<span class="string">'AveBedrms'</span>]</span><br></pre></td></tr></table></figure>
<p><em>构造的特征不一定有效，但是可以增加对数据的了解，在后面，我们要考虑使用哪些特征。</em></p>
<p><strong>4. 分析房价与其他所有特征的二维坐标图</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> df.columns.values.tolist():</span><br><span class="line">    sns.relplot(x=name, y=<span class="string">'HousePrice'</span>,data=df)</span><br></pre></td></tr></table></figure>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/house1.png" alt="house1.png"></p>
<p>首先，我们可以发现图中确实有很多的异常点，与上面我们分析的是对应的，我们可以筛选出处于正常的样本，这几个阈值仅作参考，最终我们的数据集剩下20057个样本，少了600左右的数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = df[(df[<span class="string">'MedInc'</span>] &lt; <span class="number">10</span>) &amp; (df[<span class="string">'AveRooms'</span>] &lt; <span class="number">15</span>) &amp; (df[<span class="string">'AveBedrms'</span>] &lt; <span class="number">4</span>) &amp; (df[<span class="string">'Population'</span>] &lt; <span class="number">8000</span>) &amp; (df[<span class="string">'AveOccup'</span>] &lt; <span class="number">6</span>)]</span><br></pre></td></tr></table></figure>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/house2.png" alt="house2.png"></p>
<p>房价与房龄可以确定没有相关性，与上面分析对应，确定放弃此特征。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/house3.png" alt="house3.png"></p>
<p>AveOtherrms、MedInc和HousePrice可以看作线性相关，放在线性层，其他数据没有可以明确描述的相关性，但是数据呈现一定分布规律。</p>
<p><strong>5. 根据经纬度与房价的信息构造位置特征</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.relplot(x=<span class="string">'Latitude'</span>, y=<span class="string">'Longitude'</span>,hue=<span class="string">'HousePrice'</span>, data=df)</span><br></pre></td></tr></table></figure>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/house4.png" alt="house4.png"></p>
<p>可以分析出某些特定位置的房价是很高的，所以对于落在此区域的房子，在其他条件相同的个情况下，其房价应当会高于其他位置的房子，我的处理方式是，根据经纬度把地区划分为一个一个正方形，增加新的特征$AreaPrice = mean(HousePrice \in area)$，用当前区域内的房价的均值作为地价特征。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">'AreaPrice'</span>] = <span class="number">-1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">11</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">12</span>):</span><br><span class="line">        rows = (df[<span class="string">'Latitude'</span>] &gt;= <span class="number">32.</span> + i) &amp; \</span><br><span class="line">        (df[<span class="string">'Latitude'</span>] &lt; <span class="number">33.</span> + i) &amp; \</span><br><span class="line">        (df[<span class="string">'Longitude'</span>] &gt;= <span class="number">-125.</span> + j) &amp; \</span><br><span class="line">        (df[<span class="string">'Longitude'</span>] &lt; <span class="number">-124.</span> + j) </span><br><span class="line">        df.loc[rows, [<span class="string">'AreaPrice'</span>]] = df[rows][<span class="string">'HousePrice'</span>].mean()</span><br></pre></td></tr></table></figure>
<p>具体实现是先找到经纬度的最小值和最大值，划分为$1 \times 1$大小的矩形，统计当前区域内的房价均值。最后我们需要在看一下该特征是否有效，流程再走一遍。</p>
<p><strong>6. 放弃部分特征</strong></p>
<ul>
<li>经纬度放弃，已经生成了新的特征，所以没有用了，除非经纬度还与其他特征相关；</li>
<li>HouseAge放弃，相关性很弱；</li>
<li>…（暂时没有，可以再训练完成后分析进而再选择）</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = df.drop(columns=[<span class="string">'HouseAge'</span>, <span class="string">'Latitude'</span>, <span class="string">'Longitude'</span>])</span><br></pre></td></tr></table></figure>
<p><strong>7. 使用DNNLinearCombinedRegressor</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 线性模型特征列</span></span><br><span class="line">linear_feature_names = [<span class="string">'MedInc'</span>, <span class="string">'AveOtherrms'</span>, <span class="string">'AreaPrice'</span>]</span><br><span class="line">linear_feature_columns = []</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> linear_feature_names:</span><br><span class="line">    linear_feature_columns.append(tf.feature_column.numeric_column(key=name))</span><br><span class="line"><span class="comment"># 深度模型特征列</span></span><br><span class="line">dnn_feature_names = df.columns.values.tolist()</span><br><span class="line">dnn_feature_names.remove(<span class="string">'HousePrice'</span>)</span><br><span class="line">dnn_feature_columns = []</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> dnn_feature_names:</span><br><span class="line">    dnn_feature_columns.append(tf.feature_column.numeric_column(key=name))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 划分数据集</span></span><br><span class="line">trainset = df.sample(frac=<span class="number">0.8</span>)</span><br><span class="line">testset = df.drop(trainset.index.tolist(), axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义训练模型</span></span><br><span class="line">model = tf.estimator.DNNLinearCombinedRegressor(</span><br><span class="line">    linear_feature_columns=linear_feature_columns,</span><br><span class="line">    linear_optimizer=tf.train.FtrlOptimizer(learning_rate=<span class="number">0.01</span>),</span><br><span class="line">    dnn_feature_columns=dnn_feature_columns,</span><br><span class="line">    dnn_optimizer=tf.train.ProximalAdagradOptimizer(</span><br><span class="line">        learning_rate=<span class="number">0.01</span>,</span><br><span class="line">        l1_regularization_strength=<span class="number">0.0001</span></span><br><span class="line">    ),</span><br><span class="line">    dnn_hidden_units=[<span class="number">16</span>, <span class="number">16</span>, <span class="number">8</span>, <span class="number">4</span>],</span><br><span class="line">    model_dir=<span class="string">"C://Users//Admin//Desktop//model//DNNLinearCombinedRegressor"</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">model.train(input_fn=tf.estimator.inputs.pandas_input_fn(</span><br><span class="line">    x=trainset,</span><br><span class="line">    y=trainset[<span class="string">'HousePrice'</span>],</span><br><span class="line">    batch_size=<span class="number">32</span>, </span><br><span class="line">    shuffle=<span class="literal">True</span>, </span><br><span class="line">    num_epochs=<span class="number">200</span></span><br><span class="line">), max_steps=<span class="number">80000</span>)</span><br><span class="line"></span><br><span class="line">model.evaluate(input_fn=tf.estimator.inputs.pandas_input_fn(</span><br><span class="line">    x=testset,</span><br><span class="line">    y=testset[<span class="string">'HousePrice'</span>],</span><br><span class="line">    shuffle=<span class="literal">False</span></span><br><span class="line">))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>‘average_loss’: 0.42808318,<br>‘label/mean’: 2.0479238,<br>‘loss’: 53.65755,<br>‘prediction/mean’: 1.9944419,<br>‘global_step’: 80000</p>
</blockquote>
<p>预测结果一般，应该需要再进一步的分析数据，调整特征列和神经网络结构。</p>
<h3 id="2-3-Keras实现植被分类"><a href="#2-3-Keras实现植被分类" class="headerlink" title="2.3 Keras实现植被分类"></a>2.3 Keras实现植被分类</h3><p>首先给出使用Estimator预测的代码和结果作为参照，基本流程为：获取数据-&gt;定义特征列-&gt;定义输入函数-&gt;构造Estimator-&gt;执行train和evaluate。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> fetch_covtype</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">(data, target) = fetch_covtype(return_X_y=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(data, target, shuffle=<span class="literal">True</span>, test_size=<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line">feature_names = [</span><br><span class="line">    <span class="string">'Elevation'</span>, <span class="string">'Aspect'</span>, <span class="string">'Slope'</span>, </span><br><span class="line">    <span class="string">'Horizontal_Distance_To_Hydrology'</span>, </span><br><span class="line">    <span class="string">'Vertical_Distance_To_Hydrology'</span>, </span><br><span class="line">    <span class="string">'Horizontal_Distance_To_Roadways'</span>, </span><br><span class="line">    <span class="string">'Hillshade_9am'</span>, <span class="string">'Hillshade_Noon'</span>, </span><br><span class="line">    <span class="string">'Hillshade_3pm'</span>, <span class="string">'Horizontal_Distance_To_Fire_Points'</span>, </span><br><span class="line">    <span class="string">'Wilderness_Area'</span>, <span class="string">'Soil_Type'</span>]</span><br><span class="line"></span><br><span class="line">feature_columns = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    feature_columns.append(tf.feature_column.numeric_column(key=feature_names[i]))</span><br><span class="line">feature_columns.append(tf.feature_column.numeric_column(key=feature_names[<span class="number">10</span>], shape=(<span class="number">4</span>,)))</span><br><span class="line">feature_columns.append(tf.feature_column.numeric_column(key=feature_names[<span class="number">11</span>], shape=(<span class="number">40</span>,)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">input_fn</span><span class="params">(x, y, training=True)</span>:</span></span><br><span class="line">    y = y - <span class="number">1</span></span><br><span class="line">    inputs = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        inputs[feature_names[i]] = np.array(x[:, i])</span><br><span class="line">    inputs[feature_names[<span class="number">10</span>]] = np.array(x[:, <span class="number">10</span>:<span class="number">14</span>])</span><br><span class="line">    inputs[feature_names[<span class="number">11</span>]] = np.array(x[:, <span class="number">14</span>:])</span><br><span class="line">    <span class="keyword">if</span> training:</span><br><span class="line">        <span class="keyword">return</span> tf.estimator.inputs.numpy_input_fn(</span><br><span class="line">            x=inputs,</span><br><span class="line">            y=y,</span><br><span class="line">            batch_size=<span class="number">64</span>,</span><br><span class="line">            shuffle=<span class="literal">True</span>,</span><br><span class="line">            num_epochs=<span class="number">20</span></span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> tf.estimator.inputs.numpy_input_fn(</span><br><span class="line">            x=inputs,</span><br><span class="line">            y=y,</span><br><span class="line">            shuffle=<span class="literal">False</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">model = tf.estimator.DNNClassifier(</span><br><span class="line">    hidden_units=[<span class="number">64</span>, <span class="number">64</span>, <span class="number">32</span>, <span class="number">16</span>],</span><br><span class="line">    feature_columns=feature_columns,</span><br><span class="line">    n_classes=<span class="number">7</span>,</span><br><span class="line">    model_dir=<span class="string">"C://Users//Admin//Desktop//model//DNNClassifier"</span>,</span><br><span class="line">    optimizer=tf.train.ProximalAdagradOptimizer(</span><br><span class="line">        learning_rate=<span class="number">0.01</span>,</span><br><span class="line">        l1_regularization_strength=<span class="number">0.0001</span></span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    model.train(input_fn=input_fn(x_train, y_train), max_steps=<span class="number">800000</span>)</span><br><span class="line">    print(model.evaluate(input_fn=input_fn(x_test, y_test, training=<span class="literal">False</span>)))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>‘accuracy’: 0.7873463,<br>‘average_loss’: 0.5104109,<br>‘loss’: 65.32079,<br>‘global_step’: 800000</p>
</blockquote>
<p>结果仅供参考，增加训练轮数应该还能提高，因为我还没有遇到过拟合就停止训练了，仅用CPU时间耗费太长。</p>
<p>使用keras实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> fetch_covtype</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> tensorflow.python.keras <span class="keyword">import</span> layers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据，并对数据做归一化处理，同时这里需要将target转换成one_hot变量，因为后面使用的是softmax激活函数进行多分类</span></span><br><span class="line">(data, target) = fetch_covtype(return_X_y=<span class="literal">True</span>)</span><br><span class="line">scaler = preprocessing.StandardScaler().fit(X=data)</span><br><span class="line">data = scaler.transform(data)</span><br><span class="line">target_onehot = tf.one_hot(target - <span class="number">1</span>, depth=<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注释掉的部分是通过Dataset控制输入，</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># x_train, x_test, y_train, y_test = train_test_split(data, target, shuffle=True, test_size=0.2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># y_train_onehot = tf.one_hot(y_train - 1, depth=7)</span></span><br><span class="line"><span class="comment"># y_test_onehot = tf.one_hot(y_test - 1, depth=7)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># trainset = tf.data.Dataset.from_tensor_slices((x_train, y_train_onehot))</span></span><br><span class="line"><span class="comment"># trainset = trainset.batch(BATCH_SIZE).repeat()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># testset = tf.data.Dataset.from_tensor_slices((x_test, y_test_onehot))</span></span><br><span class="line"><span class="comment"># testset = testset.batch(BATCH_SIZE).repeat()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义batch大小，训练轮数，每轮的steps</span></span><br><span class="line">BATCH_SIZE = <span class="number">64</span></span><br><span class="line">EPOCHS = <span class="number">30</span></span><br><span class="line">STEPS_PER_EPOCH = <span class="number">6000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义神经网络，第一层需要定义输入形状input_shape，最后一层使用softmax，我这里没有使用全部特征，只用了前10个</span></span><br><span class="line">model = keras.Sequential([</span><br><span class="line">    layers.Dense(units=<span class="number">64</span>, activation=<span class="string">'relu'</span>, input_shape=(<span class="number">54</span>,)),</span><br><span class="line">    layers.Dense(units=<span class="number">64</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    layers.Dense(units=<span class="number">32</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    layers.Dense(units=<span class="number">16</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    layers.Dense(units=<span class="number">7</span>, activation=<span class="string">'softmax'</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 损失函数的形式对应多分类是categorical_crossentropy，二分类是binary_crossentropy</span></span><br><span class="line">model.compile(loss=<span class="string">'categorical_crossentropy'</span>,</span><br><span class="line">    optimizer=tf.train.AdamOptimizer(<span class="number">0.01</span>),</span><br><span class="line">    metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一些callback，比如early_stop可以使训练提前终止，ModelCheckpoint保存checkpoint，</span></span><br><span class="line"><span class="comment"># TensorBoard保存tensorboard参数，PrintLoss打印训练过程输出信息</span></span><br><span class="line">early_stop = tf.keras.callbacks.EarlyStopping(</span><br><span class="line">    patience=<span class="number">5</span>, </span><br><span class="line">    monitor=<span class="string">'val_loss'</span>, </span><br><span class="line">    mode=<span class="string">'auto'</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">ckpt_callback = tf.keras.callbacks.ModelCheckpoint(</span><br><span class="line">    <span class="string">"./checkpoint/cp-&#123;epoch:04d&#125;.ckpt"</span>,</span><br><span class="line">    verbose=<span class="number">1</span>,</span><br><span class="line">    save_weights_only=<span class="literal">True</span>,</span><br><span class="line">    period=<span class="number">10</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">tb_callback = tf.keras.callbacks.TensorBoard(</span><br><span class="line">    log_dir=<span class="string">'./log'</span>,</span><br><span class="line">    batch_size=BATCH_SIZE</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrintLoss</span><span class="params">(keras.callbacks.Callback)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_epoch_end</span><span class="params">(self, epoch, logs)</span>:</span></span><br><span class="line">        print(<span class="string">'Epoch: &#123;:03d&#125; - loss: &#123;:.5f&#125; - acc: &#123;:.5f&#125; - \</span></span><br><span class="line"><span class="string">        val_loss: &#123;:.5f&#125; - val_acc: &#123;:.5f&#125;'</span>.format(epoch + <span class="number">1</span>, logs[<span class="string">'loss'</span>], logs[<span class="string">'acc'</span>], logs[<span class="string">'val_loss'</span>], logs[<span class="string">'val_acc'</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始训练，指定x，对应的也是前10个特征，validation_split设置验证集比例</span></span><br><span class="line">model.fit(</span><br><span class="line">    x=data,</span><br><span class="line">    y=target_onehot,</span><br><span class="line">    epochs=EPOCHS,</span><br><span class="line">    shuffle=<span class="literal">True</span>,</span><br><span class="line">    validation_split=<span class="number">0.2</span>,</span><br><span class="line">    steps_per_epoch=STEPS_PER_EPOCH,</span><br><span class="line">    validation_steps=STEPS_PER_EPOCH // <span class="number">4</span>,</span><br><span class="line">    callbacks=[tb_callback, ckpt_callback]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#注释掉的部分对应使用Dataset作为输入的fit的方式，注意细节上有点区别</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># history = model.fit(</span></span><br><span class="line"><span class="comment">#     trainset,</span></span><br><span class="line"><span class="comment">#     epochs=EPOCHS,</span></span><br><span class="line"><span class="comment">#     steps_per_epoch=STEPS_PER_EPOCH,</span></span><br><span class="line"><span class="comment">#     validation_data=testset,</span></span><br><span class="line"><span class="comment">#     validation_steps=STEPS_PER_EPOCH // 4,</span></span><br><span class="line"><span class="comment">#     verbose=0,</span></span><br><span class="line"><span class="comment">#     callbacks=[PrintLoss()]</span></span><br><span class="line"><span class="comment"># )</span></span><br></pre></td></tr></table></figure>
<p>直接使用numpy数据训练部分结果（时间过长，未完成全部训练）：</p>
<blockquote>
<p>Epoch 1/30<br>4000/4000 [==============================] - 2761s 690ms/step - loss: 0.2626 - acc: 0.8936 - val_loss: 1.8917 - val_acc: 0.6318<br>Epoch 2/30<br>4000/4000 [==============================] - 3236s 809ms/step - loss: 0.1862 - acc: 0.9270 - val_loss: 2.0801 - val_acc: 0.6481</p>
</blockquote>
<p>使用Dataset作为输入训练的结果，可以明确地表示，使用Dataset作为输入可以提升整体训练的速度，上面的时间在1小时左右才训练了2轮，使用Dataset10分钟以内就完成了30轮的训练，而且验证集达到了85.65%的准确率：</p>
<blockquote>
<p>Epoch: 030 - loss: 0.38923 - acc: 0.85355 -         val_loss: 0.40994 - val_acc: 0.85650</p>
</blockquote>
<ul>
<li>使用keras的好处在于，它简化了构造神经网络的方式，并且提供了训练过程中显示训练状态的功能，比如显示实时loss和accuracy，显示剩余时间等等；</li>
<li>使用keras时，务必先检查数据集的数据特征，比如各个特征的数量级，如果相差很大必须做归一化处理，否则训练过程中不收敛或收敛到局部极小处（推荐无论怎样都进行归一化处理）；</li>
<li>不同数据特征的归一化处理应当不同，比如对onehot变量，可以使用MaxAbsScaler，从而避免破坏其稀疏性，对其他类型可以使用StandardScaler；</li>
<li>使用不同的优化器Optimizer会影响收敛速度，就我的实际使用而言，AdamOptimizer收敛速度比其他的优化器要更快一些，使用AdamOptimizer在第一轮的1000steps时accuracy就达到了80%+，而AdagradOptimizer在第一轮2000steps时accuracy只有70%+；</li>
<li>我没有分别归一化，但是实际上需要这么做。</li>
</ul>
]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>Neural Network</tag>
        <tag>Code</tag>
        <tag>Estimator</tag>
        <tag>DNNClassifier</tag>
        <tag>DNNRegressor</tag>
        <tag>DNNLinearCombinedRegressor</tag>
        <tag>Keras</tag>
      </tags>
  </entry>
  <entry>
    <title>语音识别-HMM</title>
    <url>/archives/2f863467.html</url>
    <content><![CDATA[<p>参考：</p>
<blockquote>
<p>《解析深度学习-语音识别实践》第3章 隐马尔可夫模型及其变体<br>西瓜书第7章 贝叶斯分类器<br><a href="https://www.cnblogs.com/Gabby/p/5344658.html" target="_blank" rel="noopener">机器学习系列之EM算法</a><br><a href="https://www.cnblogs.com/Denise-hzf/p/6612212.html" target="_blank" rel="noopener">HMM模型和Viterbi算法</a></p>
</blockquote>
<p><strong>语音识别过程：切除首尾端静音-&gt;声音划分为帧-&gt;对每一帧提取MFCC特征-&gt;若干帧对应一个状态-&gt;三个状态组成一个音素-&gt;若干音素组成单词</strong></p>
<h2 id="1-马尔可夫链"><a href="#1-马尔可夫链" class="headerlink" title="1. 马尔可夫链"></a>1. 马尔可夫链</h2><p>马尔可夫链是一种离散状态的马尔可夫序列，也是一般性马尔可夫序列的特殊形式。<br>马尔可夫链的状态空间具有离散和有限性：$q_t \in { s^{(j)},j = 1,2,…,N}$。每一个离散值都与马尔可夫链中的一个状态相关。</p>
<p>一个马尔可夫链$\boldsymbol{q}_1^T = q_1, q_2,…,q_T$，可被转移概率完全表示，定义为</p>
<script type="math/tex; mode=display">
P(q_t=s^{(j)}|q_{t-1}=s^{(i)}) = a_{ij}(t) \quad i,j=1,2,...,N</script><p>以及初始状态分布概率。如果这些转移概率与时间$t$无关，则得到齐次马尔可夫链。</p>
<p>（齐次）马尔可夫链的转移概率通常能方便地表示为矩阵形式：</p>
<script type="math/tex; mode=display">
\boldsymbol{A} = [a_{ij}], \quad 其中a_{ij} \geqslant 0 \quad \forall i,j ; \sum^N_{j=1}a_{ij}=1 \quad \forall i</script><p>$\boldsymbol{A}$称为马尔可夫链的转移矩阵。给定马尔可夫链的转移概率，则状态输出概率</p>
<script type="math/tex; mode=display">
p_j(t) = P[q_t = s^{(j)}]</script><a id="more"></a>
<p>很容易得到，递归计算</p>
<script type="math/tex; mode=display">
p_i(t+1) = \sum^N_{j=1} a_{ji}p_j(t), \quad \forall i</script><p>如果马尔可夫链的状态占有分布式渐进收敛：$p<em>i(t) \rightarrow \pi(q^{(i)})$，当$t \rightarrow \infty$，我们称$p(s^{(i)})$为马尔可夫链的一个稳态分布。对有稳态分布的马尔可夫链来说，他的转移概率$a</em>{ij}$必须满足：</p>
<script type="math/tex; mode=display">
\bar{\pi}(s^{(i)}) = \sum^N_{j=1}a_{ji}\bar{\pi}(s^{(j)}), \quad \forall i</script><p>马尔可夫链的稳态分布在马尔可夫链蒙特卡洛（MCMC）方法中起着重要作用。这些方法用来模拟（即采样）任意复杂的分布函数，使其能执行很多复杂的统计推断和学习任务，否则这些任务运算困难。MCMC方法的理论基础是马尔可夫链到它的稳态分布$\bar{\pi}(s^{(i)})$的渐进收敛。也就是说，无论初始分布如何，马尔可夫链之于$\bar{\pi}(s^{(i)})$是渐进无偏的。因此，为了从任意的复合分布$p(s)$中采样，可以通过设计合适的转移概率构造一个马尔可夫链，使它的稳态分布为$\bar{\pi}(s) = p(s)$。</p>
<p>三种马尔可夫链的性质：</p>
<ul>
<li>马尔可夫链的状态时长是一个指数或几何级分布：$p<em>i(d)=C(a</em>{ii})^{d-1}$，其中归一化常数为$C = 1 - a_{ii}$；</li>
<li>平均状态时长为</li>
</ul>
<script type="math/tex; mode=display">
\bar{d}_i = \sum^{\infty}_{d=1}dp_i(d) = \sum^{\infty}_{d=1}(1-a_{ii})(a_{ii})^{d-1} = \frac{1}{1-a_{ii}}</script><ul>
<li>对任意一个服从马尔可夫链的观察序列，若它对应有限长度状态序列$\boldsymbol{q}^T<em>1$，则其概率很容易计算，是所有马尔可夫链的转移概率的乘积：$P(\boldsymbol{q}^T_1) = \bar{\pi}</em>{q<em>1}\prod^{T-1}</em>{t=1}a<em>{q_tq</em>{t+1}}$，其中$\bar{\pi}_{s_1}$使当$t=1$时的初始状态输出概率。</li>
</ul>
<h2 id="2-序列与模型"><a href="#2-序列与模型" class="headerlink" title="2. 序列与模型"></a>2. 序列与模型</h2><p>马尔可夫链的每一种状态与一种输出（观察值或事件）一一对应，没有随机性。</p>
<p>隐马尔可夫序列在各个状态引入一种随机性，用一个观测的概率分布与每一个状态对应，而不是一个确定的事件或观察值。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/hmm.png" alt="hmm.png"></p>
<p>即我们观察到的是$x<em>i$，而观测值仅由隐藏的状态$y_i$决定，而当前时刻的状态$y_i$仅由前一时刻的状态$y</em>{i-1}$决定。</p>
<h3 id="2-1-隐马尔可夫模型的性质"><a href="#2-1-隐马尔可夫模型的性质" class="headerlink" title="2.1 隐马尔可夫模型的性质"></a>2.1 隐马尔可夫模型的性质</h3><ul>
<li>齐次马尔可夫链的转移概率矩阵$\boldsymbol{A}=[a_{ij}] \quad i,j = 1,2,…,N$，其中共有$N$个状态</li>
</ul>
<script type="math/tex; mode=display">
a_{ij} = P(q_t = j | q_{t-1}=i) \quad i,j = 1,2,...,N</script><ul>
<li>马尔可夫链的初始概率：$\pi = [\pi_i] \quad i= 1,2,…,N$，其中$\pi_i = P(q_1 = i)$；</li>
<li>观察概率分布为$P(\boldsymbol{o}_t|s^{(i)}) \quad i=1,2,…,N$。若$\boldsymbol{o}_t$是离散的，每个状态对应的概率分布用来描述观察${ \boldsymbol{v}_1, \boldsymbol{v}_2,…,\boldsymbol{v}_K}$的概率：</li>
</ul>
<script type="math/tex; mode=display">
b_i(k) = P(\boldsymbol{o}_t = \boldsymbol{v}_k|q_t = i) \quad i=1,2,...,N</script><p>若观察概率分布是连续的，那么概率密度函数PDF中的参数$\Lambda_i$代表HMM状态$i$的特性</p>
<hr>
<p>在语音处理问题中，我们用HMM下的PDF来描述连续观察向量（$\boldsymbol{o}_t \in \mathbb{R}^D$）的概率分布，其中多元混合高斯分布是最成功、应用最广泛的PDF：</p>
<script type="math/tex; mode=display">
b_i(\boldsymbol{o}_t) = \sum^M_{m=1}\frac{c_{i,m}}{(2\pi)^{D/2}|\boldsymbol{\Sigma}_{i,m}|^{1/2}}\exp[-\frac{1}{2}(\boldsymbol{o}_t - \boldsymbol{\mu}_{i,m})^T\boldsymbol{\Sigma}^{-1}_{i,m}(\boldsymbol{o}_t - \boldsymbol{\mu}_{i,m})]</script><p>在混合高斯HMM中，参数集$\Lambda<em>i$包括混合权重成分$c</em>{i,m}$，高斯分布均值向量$\boldsymbol{\mu}<em>{i,m} \in \mathbb{R}^D$与协方差矩阵$\boldsymbol{\Sigma}</em>{i,m} \in \mathbb{R}^{D \times D}$。</p>
<p>有了模型参数后，高斯HMM可以看作是一个观察值序列$\boldsymbol{o}_t，t =1,2,…,T$的生成器。在$t$时刻，数据根据公式</p>
<script type="math/tex; mode=display">
\boldsymbol{o}_t = \boldsymbol{\mu}_i + \boldsymbol{r}_t(\boldsymbol{\Sigma}_i)</script><p>生成，其中时刻$t$的状态$i$取决于马尔可夫链的演变，受$a_{ij}$影响，且</p>
<script type="math/tex; mode=display">
\boldsymbol{r}_t(\boldsymbol{\Sigma}_i) = N(0, \boldsymbol{\Sigma}_i)</script><p>是均值为0、依赖序号$i$的IID（独立同分布）的高斯剩余序列。</p>
<hr>
<p>有一个对平稳状态的HMM的简单扩展，可以使其观察序列不再是状态限制下的IID。修改常量$\boldsymbol{\mu}_i$，使其随时间而变化：</p>
<script type="math/tex; mode=display">
\boldsymbol{o}_t = \boldsymbol{g}_t(\Lambda_i) + \boldsymbol{r}_t(\boldsymbol{\Sigma}_i)</script><p>在状态$i$下，确定性的时间变化轨迹函数$\boldsymbol{g}_t(\Lambda_i)$中的参数是独立的。这便是高斯趋势HMM，这是一种特殊的非平稳状态的HMM，其中一阶统计量（均值）是随时间变化的。</p>
<h3 id="2-2-隐马尔可夫模型似然度的计算"><a href="#2-2-隐马尔可夫模型似然度的计算" class="headerlink" title="2.2 隐马尔可夫模型似然度的计算"></a>2.2 隐马尔可夫模型似然度的计算</h3><p>设$\boldsymbol{q}_1^T = (q_1, …, q_T)$是GMM-HMM中的一个有限长度状态序列，$P(\boldsymbol{o}_1^T, \boldsymbol{q}^T_1)$是观察序列$\boldsymbol{o}_1^T = (\boldsymbol{o}_1,…,\boldsymbol{o}_T)$和状态序列$\boldsymbol{q}^T_1$的联合概率。令$P(\boldsymbol{o}_1^T|\boldsymbol{q}_1^T)$表示状态序列$\boldsymbol{q}_1^T$的条件下生成观察序列$\boldsymbol{o}_1^T$的概率。</p>
<p>在GMM-HMM中条件概率$P(\boldsymbol{o}_1^T|\boldsymbol{q}_1^T)$表示为（这里使用$b_i(\boldsymbol{o}_t)$并不准确，因为状态序列的状态i应该在改变，但是对每一个状态来说是独立同分布，都是一个高斯分布形式）：</p>
<script type="math/tex; mode=display">
P(\boldsymbol{o}_1^T|\boldsymbol{q}_1^T) = \prod^T_{t=1}b_i(\boldsymbol{o}_t)
\\
= \prod^T_{t=1}\sum^M_{m=1}\frac{c_{i,m}}{(2\pi)^{D/2}|\boldsymbol{\Sigma}_{i,m}|^{1/2}}\exp[-\frac{1}{2}(\boldsymbol{o}_t - \boldsymbol{\mu}_{i,m})^T\boldsymbol{\Sigma}^{-1}_{i,m}(\boldsymbol{o}_t - \boldsymbol{\mu}_{i,m})]</script><p>另一方面，状态序列$\boldsymbol{q}_1^T$的概率为转移概率乘积</p>
<script type="math/tex; mode=display">
P(\boldsymbol{q}_1^T) = \pi_{q_1}\prod^{T-1}_{t=1}a_{q_tq_{t+1}}</script><p>为了记号上的简便，考虑初始状态分布的概率为1（$\pi_{q_1} = 1$）</p>
<p>联合概率$P(\boldsymbol{o}_1^T, \boldsymbol{q}_1^T)$可以通过上式乘积得到</p>
<script type="math/tex; mode=display">
P(\boldsymbol{o}_1^T, \boldsymbol{q}_1^T) = P(\boldsymbol{o}_1^T|\boldsymbol{q}_1^T) P(\boldsymbol{q}_1^T)</script><p>原则上可以通过累加状态序列下的联合概率计算总体观察序列似然度</p>
<script type="math/tex; mode=display">
P(\boldsymbol{o}_1^T) = \sum_{\boldsymbol{q}_1^T}P(\boldsymbol{o}_1^T, \boldsymbol{q}_1^T)</script><p>然而，在长度为$T$下运算是指数级的复杂度（若状态总计$N$种，那么状态序列的种类为$N^T$），所以不可行。使用前向算法计算，复杂度与$T$是线性的。</p>
<h3 id="2-3-计算似然度"><a href="#2-3-计算似然度" class="headerlink" title="2.3 计算似然度"></a>2.3 计算似然度</h3><p>首先定义马尔可夫链每个状态$i$下的前向概率（物理意义为在$t$时刻观察序列为$\boldsymbol{o}_1^t$且时刻$t$的状态为$i$的概率）</p>
<script type="math/tex; mode=display">
\alpha_t(i) = P(q_t=i,\boldsymbol{o}_1^t), \quad t = 1,...,T</script><p>与后向概率（物理意义为在$t$时刻状态为$i$的条件下，从$t+1$到$T$的观察序列为$\boldsymbol{o}^T_{t+1}$的概率）</p>
<script type="math/tex; mode=display">
\beta_t(i) = P(\boldsymbol{o}^T_{t+1}|q_t=i), \quad t = 1,...,T</script><p>前向概率和后向概率递归计算方法：</p>
<script type="math/tex; mode=display">
\alpha_t(j) = \sum^N_{i=1}\alpha_{t-1}(i)a_{ij}b_j(\boldsymbol{o}_t), \quad t = 2,3,...,T; \quad j = 1,2,...,N
\\
\beta_t(i) = \sum^N_{j=1}\beta_{t+1}(j)a_{ij}b_j(\boldsymbol{o}_{t+1}), \quad t = T-1, T-2,...,1; \quad i =1,2,...,N</script><p>前向概率的递归计算的物理层面可以理解为：首先考虑到$t-1$时刻，其状态可以取$N$种，然后从$t-1$时刻状态转移到$t$时刻状态$j$，需要转移概率，在状态$j$下的观察值为$\boldsymbol{o}_t$的概率为$b_j(\boldsymbol{o}_t)$。同理对后向概率。</p>
<p>$\alpha$递归式初始值为：</p>
<script type="math/tex; mode=display">
\alpha_1(i) = P(q_1=i,\boldsymbol{o}_1) = P(q_1=i)P(\boldsymbol{o}_1|q_1)=\pi_ib_i(\boldsymbol{o}_1), \quad i = 1,2,...,N</script><p>令$\beta$递归式初始值为：</p>
<script type="math/tex; mode=display">
\beta_T(i) = 1, \quad i =1,2,...,N</script><p>我们的目标是计算$P(\boldsymbol{o}_1^T)$，先对于每个状态$i$与$t = 1,2,…,T$，计算</p>
<script type="math/tex; mode=display">
P(q_t = i,\boldsymbol{o}_1^T) = P(q_t=i, \boldsymbol{o}_1^t, \boldsymbol{o}^T_{t+1})
\\
= P(q_t = i, \boldsymbol{o}_1^t)P(\boldsymbol{o}^T_{t+1}|\boldsymbol{o_1^t, q_t=i})
\\
= P(q_t = i, \boldsymbol{o}_1^t)P(\boldsymbol{o}^T_{t+1}|q_t=i)
\\
= \alpha_t(i)\beta_t(i)</script><p>这样，$P(\boldsymbol{o}_1^T)$可以按照公式计算</p>
<script type="math/tex; mode=display">
P(\boldsymbol{o}_1^T) = \sum^N_{i=1}P(q_t=i,\boldsymbol{o}_1^T) = \sum^N_{i=1}\alpha_t(i)\beta_t(i)
\\
\forall t \in [1,T]</script><p>将$t=T$代入上式，可以得出</p>
<script type="math/tex; mode=display">
P(\boldsymbol{o}_1^T) = \sum^N_{i=1}\alpha_T(i)</script><hr>
<p>前向概率递归</p>
<script type="math/tex; mode=display">
\alpha_t(j) = P(q_t=j,\boldsymbol{o}_1^t)
\\
= \sum^N_{i=1}P(q_{t-1} = i, q_t = j,\boldsymbol{o}_1^{t-1}, \boldsymbol{o}_t)
\\
= \sum^N_{i=1}P(q_t=j,\boldsymbol{o}_t|q_{t-1} = i, \boldsymbol{o}_1^{t-1})P(q_{t-1} = i, \boldsymbol{o}_1^{t-1})
\\
= \sum^N_{i=1}P(q_t=j,\boldsymbol{o}_t|q_{t-1} = i)\alpha_{t-1}(i)
\\
= \sum^N_{i=1}P(\boldsymbol{o}_t|q_t=j,q_{t-1}=i)P(q_t=j|q_{t-1} = i)\alpha_{t-1}(i)
\\
= \sum^N_{i=1}b_j(\boldsymbol{o}_t)a_{ij}\alpha_{t-1}(i)</script><p>后向概率递归</p>
<script type="math/tex; mode=display">
\beta_t(i) = P(\boldsymbol{o}_{t+1}^T|q_t=i)
\\
= \frac{P(\boldsymbol{o}_{t+1}^T, q_t=i)}{P(q_t=i)}
\\
=\frac{\sum^N_{j=1}P(\boldsymbol{o}^T_{t+1}, q_t=i,q_{t+1}=j)}{P(q_t=i)}
\\
= \frac{\sum^N_{j=1}P(\boldsymbol{o}^T_{t+1}| q_t=i,q_{t+1}=j)P(q_t=i,q_{t+1}=j)}{P(q_t=i)}
\\
= \sum^N_{j=1}P(\boldsymbol{o}^T_{t+1}|q_{t+1}=j)\frac{P(q_t=i,q_{t+1}=j)}{P(q_t=i)}
\\
= \sum^N_{j=1} P(\boldsymbol{o}^T_{t+2}, \boldsymbol{o}_{t+1}|q_{t+1} = j)a_{ij}
\\
=\sum^N_{j=1}P(\boldsymbol{o}^T_{t+2}|q_{t+1} = j)P(\boldsymbol{o}_{t+1}|q_{t+1} = j)a_{ij}
\\
= \sum^N_{j=1}\beta_{t+1}(j)b_j(\boldsymbol{o}_{t+1})a_{ij}</script><h2 id="3-EM算法及其在学习HMM参数中的应用"><a href="#3-EM算法及其在学习HMM参数中的应用" class="headerlink" title="3. EM算法及其在学习HMM参数中的应用"></a>3. EM算法及其在学习HMM参数中的应用</h2><h3 id="3-1-EM算法"><a href="#3-1-EM算法" class="headerlink" title="3.1 EM算法"></a>3.1 EM算法</h3><blockquote>
<p>期望最大算法（EM算法）是一种从不完全数据或有数据丢失的数据集（存在隐含变量）中求解概率模型参数的最大似然估计方法。</p>
</blockquote>
<p>假设我们有一组数据，我们希望计算出这组数据的分布概率，常见的有高斯分布。若这组数据仅属于一个高斯成分，那么我们可以直接计算均值和方差作为高斯分布的无偏估计；若这组数据属于多个高斯成分呢，显然无法计算均值和方差，因为我们不知道哪些数据属于高斯成分1，哪些数据属于高斯成分2…，这是由于隐变量产生了作用，在这个问题中隐变量就是数据属于哪个高斯成分，这个时候EM算法可以起作用了。</p>
<p>令$\boldsymbol{X}$表示已观测变量集，$\boldsymbol{Z}$表示隐变量集，$\Theta$表示模型参数。若欲对$\Theta$做极大似然估计，则应最大化对数似然</p>
<script type="math/tex; mode=display">
LL(\Theta|\boldsymbol{X, Z}) = \ln P(\boldsymbol{X,Z}|\Theta)</script><p>由于$\boldsymbol{Z}$是隐变量，上式无法直接求解。但此时可以通过对$\boldsymbol{Z}$计算期望，来最大化已观测数据的对数边际似然</p>
<script type="math/tex; mode=display">
LL(\Theta|\boldsymbol{X}) = \ln P(\boldsymbol{X}|\Theta) = \ln \sum_{\boldsymbol{Z}}P(\boldsymbol{X,Z}|\Theta)</script><p>EM算法的基本思想是：若参数$\Theta$已知，则根据训练数据推断出最优隐变量$\boldsymbol{Z}$的值（E步）；反之，若$\boldsymbol{Z}$的值已知，则可方便地对参数$\Theta$做极大似然估计（M步）。</p>
<p>于是，以初始值$\Theta^0$为起点（一般自行设置），迭代执行以下步骤直至收敛：</p>
<ul>
<li>基于$\Theta^t$推断隐变量$\boldsymbol{Z}$的期望，记为$\boldsymbol{Z}^t$；</li>
<li>基于已观测变量$\boldsymbol{X}$和$\boldsymbol{Z}^t$对参数$\Theta$做极大似然估计，记为$\Theta^{t+1}$。</li>
</ul>
<hr>
<p>更进一步，若我们不是取$\boldsymbol{Z}$的期望，而是基于$\Theta^t$计算隐变量$\boldsymbol{Z}$地概率分布$P(\boldsymbol{Z}|\boldsymbol{X},\Theta^t)$，则EM算法为：</p>
<ul>
<li>$\boldsymbol{E}$步：以当前参数$\Theta^t$推断隐变量分布$P(\boldsymbol{Z}|\boldsymbol{X},\Theta^t)$，并计算对数似然$LL(\Theta|\boldsymbol{X,Z})$关于$\boldsymbol{Z}$的期望，用$Q$表示</li>
</ul>
<script type="math/tex; mode=display">
Q(\Theta|\Theta^t) = \mathbb{E}_{\boldsymbol{Z}|\boldsymbol{X},\Theta^t}LL(\Theta|\boldsymbol{X, Z})</script><ul>
<li>$\boldsymbol{M}$步：寻找参数最大化期望似然</li>
</ul>
<script type="math/tex; mode=display">
\Theta^{t+1} = \underset{\Theta}{\arg \max}Q(\Theta|\Theta^t)</script><p>EM算法的特性：</p>
<ul>
<li>EM算法提供的是局部的似然度最优结果，因为仅在一轮的M步中更新参数；</li>
<li>对初始值敏感，初始值对最大似然度估计结果影响很大；</li>
<li>对完整数据集的选择需要根据实际情况来进行变更；</li>
<li>通常寻找一个针对期望值的近似表达式是困难的。</li>
</ul>
<h3 id="3-2-Baum-Welch算法"><a href="#3-2-Baum-Welch算法" class="headerlink" title="3.2 Baum-Welch算法"></a>3.2 Baum-Welch算法</h3><p>当隐变量符合马尔可夫链的形式时，EM算法可推导为Baum-Welch算法。下面的推导基于高斯分布HMM，完整数据包含了观测序列和隐马尔可夫链序列，例如$\boldsymbol{y} = [\boldsymbol{o}_1^T, \boldsymbol{q}_1^T]$，我们的目标是最大化观测序列概率$P(\boldsymbol{o}_1^T|\Theta)$（或者其似然值）。</p>
<p>E步中计算的期望，通过隐藏状态序列$\boldsymbol{q}_1^T$来确定，$\Theta，\Theta_0$分别表示当前以及前一轮EM迭代中的HMM参数：</p>
<script type="math/tex; mode=display">
Q(\Theta|\Theta_0) = E[\log P(\boldsymbol{o}_1^T, \boldsymbol{q}_1^T|\Theta)|\boldsymbol{o}_1^T, \Theta_0]</script><p>M步中通过最大化$Q(\Theta|\Theta_0)$来完成，这是为了取代直接取最大化$P(\boldsymbol{o}_1^T|\Theta)$，为什么可以取代，这是Baum不等式推导出的结果</p>
<script type="math/tex; mode=display">
\log \frac{P(\boldsymbol{o}_1^T|\Theta)}{P(\boldsymbol{o}_1^T|\Theta_0)} \geqslant Q(\Theta|\Theta_0) - Q(\Theta_0|\Theta_0) \geqslant 0</script><hr>
<p><strong>$\boldsymbol{E}$步骤</strong></p>
<p>目的简化条件期望值$Q(\Theta|\Theta_0)$，使其变成一个适合直接做最大化的形式。在已知前一轮的参数$\Theta_0$和观察序列$\boldsymbol{o}_1^T$的情况下，下面是基于状态序列$\boldsymbol{q}_1^T$的加权求和的期望值$Q(\Theta|\Theta_0)$</p>
<script type="math/tex; mode=display">
Q(\Theta|\Theta_0) = E[\log P(\boldsymbol{o}_1^T, \boldsymbol{q}_1^T|\Theta)|\boldsymbol{o}_1^T, \Theta_0]
\\
= \sum_{\boldsymbol{q}_1^T}P(\boldsymbol{q}_1^T|\boldsymbol{o}_1^T, \Theta_0)\log P(\boldsymbol{o}_1^T, \boldsymbol{q}_1^T|\Theta)</script><p>由于我们假定隐藏序列的状态$i$属于一个高斯成分（多元高斯分布），则其对数似然$N_t(i)$为</p>
<script type="math/tex; mode=display">
N_t(i) = -\frac{D}{2}\log (2\pi) - \frac{1}{2}\log |\boldsymbol{\Sigma}_i|-\frac{1}{2}(\boldsymbol{o}_t-\boldsymbol{\mu}_i)^T\boldsymbol{\Sigma}_i^{-1}(\boldsymbol{o}_t-\boldsymbol{\mu}_i)</script><p>由$P(\boldsymbol{q}<em>1^T) = \prod</em>{t=1}^{T-1}a<em>{q_tq</em>{t+1}}$和$P(\boldsymbol{o}_1^T, \boldsymbol{q}_1^T) = P(\boldsymbol{o}_1^T|\boldsymbol{q}_1^T)P(\boldsymbol{q}_1^T)$，所以</p>
<script type="math/tex; mode=display">
\log P(\boldsymbol{o}_1^T, \boldsymbol{q}_1^T|\Theta) = \sum^T_{t=1}N_t(q_t) + \sum^{T-1}_{t=1}\log a_{q_tq_{t+1}}</script><p>于是$Q(\Theta|\Theta_0)$重写为</p>
<script type="math/tex; mode=display">
Q(\Theta|\Theta_0) = \sum_{\boldsymbol{q}_1^T}P(\boldsymbol{q}_1^T|\boldsymbol{o}_1^T, \Theta_0)\sum^T_{t=1}N_t(q_t) + \sum_{\boldsymbol{q}_1^T}P(\boldsymbol{q}_1^T|\boldsymbol{o}_1^T, \Theta_0)\sum^{T-1}_{t=1}\log a_{q_tq_{t+1}}</script><p>其中第一部分可写为</p>
<script type="math/tex; mode=display">
Q_1(\Theta|\Theta_0) = \sum^N_{i=1} \{ \sum_{\boldsymbol{q}_1^T}P(\boldsymbol{q}_1^T|\boldsymbol{o}_1^T, \Theta_0)\sum^T_{t=1}N_t(q_t) \} \delta_{q_t,i}</script><p>第二部分</p>
<script type="math/tex; mode=display">
Q_2(\Theta|\Theta_0) = \sum^N_{i=1}\sum^N_{j=1} \{ \sum_{\boldsymbol{q}_1^T}P(\boldsymbol{q}_1^T|\boldsymbol{o}_1^T, \Theta_0)\sum^{T-1}_{t=1}\log a_{q_tq_{t+1}} \} \delta_{q_t,i} \delta_{q_{t+1},j}</script><p>$\delta_{q_t, i}$是克罗内克函数，当$q_t = i$取1，否则取0。</p>
<p>通过代换求和可以使用</p>
<script type="math/tex; mode=display">
\sum_{\boldsymbol{q}_1^T}P(\boldsymbol{q}_1^T|\boldsymbol{o}_1^T, \Theta_0) \delta_{q_t,i} = P(q_t=i|\boldsymbol{o}_1^T,\Theta_0)</script><p>通过上式简化$Q_1$和$Q_2$</p>
<script type="math/tex; mode=display">
Q_1(\Theta|\Theta_0) =\sum^N_{i=1}\sum^T_{t=1}P(q_t=i|\boldsymbol{o}_1^T,\Theta_0)N_t(i)
\\
Q_2(\Theta|\Theta_0) = \sum^N_{i=1}\sum^N_{j=1}\sum^{T-1}_{t=1} P(q_t=i,q_{t+1}=j|\boldsymbol{o}_1^T,\Theta_0)\log a_{ij}</script><p>因为$Q<em>1(\Theta|\Theta_0)$只包含高斯参数，$Q_2(\Theta|\Theta_0)$只包含马尔科夫链参数，两个式子可以分别最大化。也就是说在最大化$Q(\Theta|\Theta_0)$时，公式中的权重，或者说$\gamma_t(i) = P(q_t=i|\boldsymbol{o}_1^T,\Theta_0)$和$\xi_t(i,j) = P(q_t=i,q</em>{t+1}=j|\boldsymbol{o}_1^T,\Theta_0)$，可以分别被认为是对方的已知常数。因此可以用前后向概率来计算。高斯HMM中的后验状态转移概率为</p>
<script type="math/tex; mode=display">
\xi_t(i,j) = \frac{\alpha_t(i)\beta_{t+1}(j)a_{ij}\exp(N_{t+1}(j))}{P(\boldsymbol{o}_1^T|\Theta_0)}
\\
t = 1,2,...,T-1
\\
P(\boldsymbol{o}_1^T|\Theta_0) = \sum^N_{i=1}\sum^N_{j=1}\alpha_t(i)\beta_{t+1}(j)a_{ij}\exp(N_{t+1}(j))</script><p>后验状态占用概率为</p>
<script type="math/tex; mode=display">
\gamma_t(i) = \sum^N_{j=1}\xi_t(i,j)
\\
t = 1,2,...,T-1</script><p>$\gamma_T(i)$则可以通过它的特定定义得到：</p>
<script type="math/tex; mode=display">
\gamma_T(i) = P(q_T=i|\boldsymbol{o}_1^T, \Theta_0) = \frac{P(q_T=i,\boldsymbol{o}_1^T| \Theta_0)}{P(\boldsymbol{o}_1^T| \Theta_0)} = \frac{\alpha_T(i)}{P(\boldsymbol{o}_1^T| \Theta_0)}</script><p>对从左到右传播的HMM，在$i=N$时，$\gamma_T(i)$只有一个值1，其余值为0。因为我们将状态序列转换成了在状态$i$或状态对$(i,j)$上，因此得到了极大的简化。</p>
<p><strong>$\boldsymbol{M}$步骤</strong></p>
<p>高斯HMM马尔可夫链转移概率的重估公式通过令$\frac{\partial Q<em>2}{\partial a</em>{ij}} = 0$得到，对$Q<em>2$以及对$i,j=1,2,…,N$，使其服从$\sum^N</em>{j=1}a_{ij}=1$的约束条件。标准拉格朗日乘子法使重估公式变为</p>
<script type="math/tex; mode=display">
\hat{a}_{ij} = \frac{\sum^{T-1}_{t=1}\xi_t(i,j)}{\sum^{T-1}_{t=1}\gamma_t(i)}
\\
其中\xi_t(i,j)和\gamma_t(i)根据E步中公式计算</script><p>$Q_1$的等价优化目标函数为</p>
<script type="math/tex; mode=display">
Q_1(\boldsymbol{\mu}_i, \boldsymbol{\Sigma}_i) = \sum^N_{i=1}\sum^{T}_{t=1}\gamma_t(i)(\boldsymbol{o}_t-\boldsymbol{\mu}_i)^T\boldsymbol{\Sigma}_i^{-1}(\boldsymbol{o}_t-\boldsymbol{\mu}_i) - \frac{1}{2}\log |\boldsymbol{\Sigma}_i|</script><p>所以协方差矩阵的重估公式通过令下式为0得到</p>
<script type="math/tex; mode=display">
\frac{\partial Q_1}{\partial \boldsymbol{\Sigma}_i} = 0 \quad i = 1,2,...,N</script><p>为了解上面的方程，令$\boldsymbol{K} = \boldsymbol{\Sigma}^{-1}$（为了简化，忽略状态角标$i$），之后将$Q<em>1$视为$\boldsymbol{K}$的一个方程。已知$\log|\boldsymbol{K}|$对$\boldsymbol{K}$的第$lm$项系数求导，其结果是方差矩阵$\boldsymbol{\Sigma}$的第$lm$项系数，即$\sigma</em>{lm}$，那么可以将$\frac{\partial Q<em>1}{\partial k</em>{lm}} = 0$化简为</p>
<script type="math/tex; mode=display">
\sum^T_{t=1}\gamma_t(i)\{ \frac{1}{2}\sigma_{lm} - \frac{1}{2}(\boldsymbol{o}_t-\boldsymbol{\mu}_i)_l(\boldsymbol{o}_t-\boldsymbol{\mu}_i)_m \} = 0
\\
l,m = 1,2,...,D</script><p>将上式写成矩阵形式</p>
<script type="math/tex; mode=display">
\hat{\boldsymbol{\Sigma}}_i = \frac{\sum^T_{t=1}\gamma_t(i)(\boldsymbol{o}_t - \hat{\boldsymbol{\mu}}_i)(\boldsymbol{o}_t - \hat{\boldsymbol{\mu}}_i)^T}{\sum^T_{t=1}\gamma_t(i)}
\\
i=1,2,...,N</script><p>其中高斯HMM均值向量$\hat{\boldsymbol{\mu}}_i$的重估公式为</p>
<script type="math/tex; mode=display">
\hat{\boldsymbol{\mu}}_i = \frac{\sum^T_{t=1}\gamma_t(i)\boldsymbol{o}_t}{\sum^T_{t=1}\gamma_t(i)}</script><p>上面的推导针对单高斯HMM的情况。针对GMM-HMM的EM算法，通常认为每一帧中每一状态上的高斯成分是一个隐变量。</p>
<h2 id="4-用于解码HMM状态序列的维特比算法"><a href="#4-用于解码HMM状态序列的维特比算法" class="headerlink" title="4. 用于解码HMM状态序列的维特比算法"></a>4. 用于解码HMM状态序列的维特比算法</h2><blockquote>
<p>在关于数个阶段之间互不关联的优化问题中，不管初始状态或者初始决策是什么，剩余的决策应该包含一个最优的方法用于选择从第一个选择得到的状态中去得到剩余的决策。</p>
</blockquote>
<p>马尔可夫决策过程由两部分参数决定，第一部分是转移概率</p>
<script type="math/tex; mode=display">
P^k_{ij}(n) = P(state_j,stage_{n+1}|state_i,stage_n,decision_k)</script><p>其中，系统的当前状态只依赖于系统的前一阶段所处的状态以及在那个状态上所采取的决策。第二部分参数提供了决策收益</p>
<script type="math/tex; mode=display">
R^k_i(n) = 在n阶段和状态i上，采用决策k时得到的收益</script><p>下面定义$F(n,i)$作为阶段$n$和状态$i$上最优决策被采取时的平均总收益：</p>
<script type="math/tex; mode=display">
F(n,i) = \underset{k}{\max}\{ R^k_i(n)+\sum_j P^k_{ij}(n)F(n+1,i) \}</script><p>特别地，当$n=N$（最后阶段），状态$i$的总收益</p>
<script type="math/tex; mode=display">
F(N,i) = \underset{k}{\max} R^k_i(n)</script><p>最优决策序列可以在最后一轮递归计算之后进行回溯。</p>
<hr>
<p>在给定一组观察序列$\boldsymbol{o}^T_1 = \boldsymbol{o}_1,\boldsymbol{o}_2,…,\boldsymbol{o}_T$的情况下，如何高效地找到最优地HMM状态序列。</p>
<p>对一个状态转移概率$a_{ij}$给定地HMM，设状态输出概率分布为$b_i(\boldsymbol{o}_t)$，令$\delta_i(t)$表示部分观察序列$\boldsymbol{o}_1^t$到达时间$t$，同时相应地HMM状态序列在该事件处在状态$i$时地联合似然度的最大值：</p>
<script type="math/tex; mode=display">
\delta_i(t) = \underset{q_1,q_2,...,q_{t-1}}{\max} P(\boldsymbol{o}^t_1,q_1^{t-1},q_t=i)</script><p>在最终阶段$t=T$时，我们有最优函数$\delta_i(T)$，这个可以通过递归计算得到</p>
<script type="math/tex; mode=display">
\delta_j(t+1) = \underset{i}{\max} \delta_i(t)a_{ij}b_j(\boldsymbol{o}_{t+1})</script><p>完整的维特比算法要求递归初始化、递归终止条件和路线回溯。结果包含最大联合似然度观察和状态序列$P^<em>$，以及相应地状态转移路径$q^</em>(t)$。</p>
]]></content>
      <categories>
        <category>Speech Recognition</category>
      </categories>
      <tags>
        <tag>Theory</tag>
        <tag>HMM</tag>
        <tag>EM Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>语音识别-MFCC</title>
    <url>/archives/4b26bf35.html</url>
    <content><![CDATA[<p>参考：</p>
<blockquote>
<p><a href="http://www.speech.cs.cmu.edu/15-492/slides/03_mfcc.pdf" target="_blank" rel="noopener">Spectrogram, Cepstrum and Mel-Frequency Analysis</a><br>《解析深度学习-语音识别实践》第1章 简介</p>
</blockquote>
<p><strong>语音识别过程：切除首尾端静音—-声音划分为帧—-对每一帧提取MFCC特征—-若干帧对应一个状态—-三个状态组成一个音素—-若干音素组成单词</strong></p>
<h2 id="1-语音识别系统的基本结构"><a href="#1-语音识别系统的基本结构" class="headerlink" title="1. 语音识别系统的基本结构"></a>1. 语音识别系统的基本结构</h2><p>语音识别系统主要由4个部分组成：信号处理和特征提取、声学模型（AM）、语言模型（LM）和解码搜索部分。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/asr.png" alt="asr.png"></p>
<ul>
<li>信号处理和特征提取部分以音频信号为输入，通过消除噪声和信道失真对语音进行增强，将信号从时域转化为频域，并为后面的声学模型提取合适的有代表性的特征向量；</li>
<li>声学模型将声学和发音学的知识整合，以特征提取部分生成的特征作为输入，并为可变长特征序列生成声学模型分数；</li>
<li>语言模型估计通过从训练语料（通常是文本形式）学习词之间的相互关系，来估计假设词序的可能性，又叫语言模型分数；</li>
<li>解码搜索对给定的特征向量序列和若干假设词序列计算声学模型分数和语言模型分数，将总体输出分数最高的词序列当做识别结果。</li>
</ul>
<p>在信号处理和特征提取部分，通常使用梅尔频率倒谱系数（MFCC）或者相对频谱变换-感知线性预测（RASTA-PLP）作为特征向量，这里是对MFCC进行说明。</p>
<a id="more"></a>
<h2 id="2-傅里叶变换"><a href="#2-傅里叶变换" class="headerlink" title="2. 傅里叶变换"></a>2. 傅里叶变换</h2><p>傅里叶变换是一种将时域信息转换为频域信息的函数，转换后的频域信息是基于三角函数<code>sin，cos</code>的复合函数，<br>理论上来说傅里叶变换可以拟合任意形式的时域函数图像，最终得到的频谱图就包含了所有成分的频率和振幅。</p>
<!-- ![](2018-11-14-语音识别-MFCC/ft.gif) -->
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/ft.gif" alt="ft.gif"></p>
<p>由此可见，傅里叶变换在语音识别系统中非常实用，因为语音文件就是一个时域上的信息，我们将其映射到频域上可以得到关于声音更多的信息（音调/音色/响度？）</p>
<p>首先看一下傅里叶变换的公式</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/dft.png" alt="dft.png"></p>
<p>以及傅里叶逆变换</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/idft.png" alt="idft.png"></p>
<p>而声音文件理论上是一个连续函数，但是连续不好描述，我们将声音划分为一帧一帧，每一帧表示的时间长度与这个声音文件的格式相关（不同格式采样率不同，但都是<code>ms</code>级别），所以最终我们观察到的声音信息是离散的。</p>
<p>离散傅里叶变换</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/dtft.png" alt="dtft.png"></p>
<p>以及离散傅里叶逆变换</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/idtft.png" alt="idtft.png"></p>
<h2 id="3-声谱图Spectrogram"><a href="#3-声谱图Spectrogram" class="headerlink" title="3. 声谱图Spectrogram"></a>3. 声谱图Spectrogram</h2><p>首先将声音文件划分为一帧一帧，然后对每一帧的信息做快速傅里叶变换FFT，得到频谱图，纵轴是振幅（如果对振幅取对数，那么单位为<code>dB</code>分贝），横轴是频率<code>Hz</code></p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/fft.png" alt="fft.png"></p>
<p>将得到的频谱图旋转<code>90°</code>，再将振幅映射为灰度值，而这些灰度值较大的位置称为<strong>共振峰</strong>（Formants），<strong>共振峰就是携带了声音的辨识属性</strong></p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/map.png" alt="map.png"></p>
<p>如果将每一帧的的灰度图连接起来，我们就得到了这段声音文件的声谱图</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/link.png" alt="link.png"></p>
<p>一个真实数据的声谱图，从图中我们可以找出共振峰，而对应最上面的声音文件；声音不属于同一部分，那么共振峰的位置也不同；声音属于统一部份，则那些帧的共振峰基本相同。根据共振峰的位置我们可以实现声音的区分（不同声音通道/不同人/不同物种），以及对帧的合并，这些信息通过HMM有助于语音识别。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/realdata.png" alt="realdata.png"></p>
<h2 id="4-倒谱分析Cepstral-Analysis"><a href="#4-倒谱分析Cepstral-Analysis" class="headerlink" title="4. 倒谱分析Cepstral Analysis"></a>4. 倒谱分析Cepstral Analysis</h2><p>这是一帧声音文件，我们用点标注出振幅峰值点（<strong>共振峰</strong>），用线（<strong>包络</strong>）描述振幅变化过程，<strong>我们的目的是提取出包络的信息</strong></p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/formants.png" alt="formants.png"></p>
<p>对频谱进行分解，我们可以的到包络和细节，这里默认我们已经经过对数运算，所以只需要简单叠加就能通过包络和细节还原声音信息。同时根据图像变化情况，我们将横轴当作时间，则包络属于低频成分（变化慢），细节属于高频成分（变化快），那么只需要增加一个低通滤波器，我们就可以得到包络的输出，过滤掉细节。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/detail.png" alt="detail.png"></p>
<p>那么倒谱分析的过程为：</p>
<ol>
<li><p>语音信号经过傅里叶变换称为频谱</p>
<script type="math/tex; mode=display">
X[k] = H[k]E[k]
\\
\left \| X[k] \right \| = \left \| H[k] \right \| \left \| E[k] \right \|，只考虑幅度</script></li>
<li><p>两边取对数</p>
</li>
</ol>
<script type="math/tex; mode=display">
\log{\left \| X[k] \right \|} = \log{\left \| H[k] \right \|} + \log{\left \| E[k] \right \|}</script><ol>
<li>两边做傅里叶逆变换</li>
</ol>
<script type="math/tex; mode=display">
x[k] = h[k] + e[k]</script><h2 id="5-梅尔频率分析Mel-Frequency-Analysis"><a href="#5-梅尔频率分析Mel-Frequency-Analysis" class="headerlink" title="5. 梅尔频率分析Mel-Frequency Analysis"></a>5. 梅尔频率分析Mel-Frequency Analysis</h2><p>梅尔频率分析是基于人类听觉感知实验的，实验发现，如果将人耳表示为一个滤波器，那么这个滤波器的特点是在所有频率上不是均匀分布，在低频部分有更多的滤波器，在高频部分较少，并且只针对特定的某些频率有效。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/filter.png" alt="filter.png"></p>
<p>梅尔频率倒谱系数（MFCC）考虑到了人类的听觉特征，先将线性频谱映射到基于听觉感知的梅尔非线性频谱中，然后转换到倒谱上，也就是说我们需要修改上面的步骤1，增加梅尔滤波器进行频谱映射</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/19/mel.png" alt="mel.png"></p>
<p>最终通过傅里叶逆变换，我们就可以获取到MFCCs特征。</p>
<p>总结一下步骤：</p>
<ol>
<li><p>先对语音进行预加重、分帧和加窗；（加强语音信号性能（信噪比，处理精度等）的一些预处理）</p>
</li>
<li><p>对每一个短时分析窗，通过FFT得到对应的频谱；（获得分布在时间轴上不同时间窗内的频谱）</p>
</li>
<li><p>将上面的频谱通过Mel滤波器组得到Mel频谱；（通过Mel频谱，将线形的自然频谱转换为体现人类听觉特性的Mel频谱）</p>
</li>
<li><p>在Mel频谱上面进行倒谱分析（取对数，做逆变换，实际逆变换一般是通过DCT离散余弦变换来实现，取DCT后的第2个到第13个系数作为MFCC系数），获得Mel频率倒谱系数MFCC，这个MFCC就是这帧语音的特征；（倒谱分析，获得MFCC作为语音特征）</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Speech Recognition</category>
      </categories>
      <tags>
        <tag>Theory</tag>
        <tag>MFCC</tag>
      </tags>
  </entry>
  <entry>
    <title>Git命令</title>
    <url>/archives/b6ef4fe0.html</url>
    <content><![CDATA[<hr>
<p>初始化一个Git仓库，使用<code>git init</code>命令。</p>
<hr>
<p>添加文件到Git仓库，分两步：</p>
<ul>
<li><p>使用命令<code>git add &lt;file&gt;</code>，注意，可反复多次使用，添加多个文件；</p>
</li>
<li><p>使用<code>git add .</code>，添加当前目录下的所有文件，包括之后创建的新文件；</p>
</li>
<li><p>使用命令<code>git commit -m &lt;message&gt;</code>，完成。</p>
</li>
</ul>
<hr>
<ul>
<li><p>要随时掌握工作区的状态，使用<code>git status</code>命令。</p>
</li>
<li><p>如果<code>git status</code>告诉你有文件被修改过，用<code>git diff</code>可以查看修改内容。</p>
</li>
</ul>
<a id="more"></a>
<hr>
<ul>
<li><p>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>。</p>
</li>
<li><p>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。</p>
</li>
<li><p>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</p>
</li>
</ul>
<hr>
<ul>
<li><p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</p>
</li>
<li><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了场景1，第二步按场景1操作。</p>
</li>
<li><p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</p>
</li>
</ul>
<hr>
<ul>
<li>命令<code>git rm</code>用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。</li>
</ul>
<hr>
<p><strong>远程库</strong></p>
<ul>
<li><p>要关联一个远程库，使用命令<code>git remote add origin git@server-name:path/repo-name.git</code>；</p>
</li>
<li><p>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；</p>
</li>
<li><p>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改；</p>
</li>
<li><p>分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！</p>
</li>
</ul>
<hr>
<ul>
<li><p>要克隆一个仓库，首先必须知道仓库的地址，然后使用<code>git clone</code>命令克隆。</p>
</li>
<li><p>Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。</p>
</li>
</ul>
<hr>
<p>Git鼓励大量使用分支：</p>
<ul>
<li><p>查看分支：<code>git branch</code></p>
</li>
<li><p>创建分支：<code>git branch &lt;name&gt;</code></p>
</li>
<li><p>切换分支：<code>git checkout &lt;name&gt;</code></p>
</li>
<li><p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code></p>
</li>
<li><p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p>
</li>
<li><p>删除分支：<code>git branch -d &lt;name&gt;</code></p>
</li>
</ul>
<hr>
<p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。</p>
<p>解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。</p>
<p>用<code>git log --graph</code>命令可以看到分支合并图。</p>
<hr>
<p>Git分支十分强大，在团队开发中应该充分应用。</p>
<p>合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。</p>
<hr>
<p>修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；</p>
<p>当手头工作没有完成时，先把工作现场<code>git stash</code>一下，然后去修复bug，修复后，再<code>git stash pop</code>，回到工作现场。</p>
<hr>
<p>开发一个新feature，最好新建一个分支；</p>
<p>如果要丢弃一个没有被合并过的分支，可以通过<code>git branch -D &lt;name&gt;</code>强行删除。</p>
<hr>
<ul>
<li><p>查看远程库信息，使用<code>git remote -v</code>；</p>
</li>
<li><p>本地新建的分支如果不推送到远程，对其他人就是不可见的；</p>
</li>
<li><p>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用git pull抓取远程的新提交；</p>
</li>
<li><p>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</p>
</li>
<li><p>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</p>
</li>
<li><p>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</p>
</li>
</ul>
<hr>
<ul>
<li><p>rebase操作可以把本地未push的分叉提交历史整理成直线；</p>
</li>
<li><p>rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。</p>
</li>
</ul>
<hr>
<ul>
<li><p>命令<code>git tag &lt;tagname&gt;</code>用于新建一个标签，默认为HEAD，也可以指定一个commit id；</p>
</li>
<li><p>命令<code>git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以指定标签信息；</p>
</li>
<li><p>命令<code>git tag</code>可以查看所有标签。</p>
</li>
</ul>
<hr>
<ul>
<li><p>命令<code>git push origin &lt;tagname&gt;</code>可以推送一个本地标签；</p>
</li>
<li><p>命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签；</p>
</li>
<li><p>命令<code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签；</p>
</li>
<li><p>命令<code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>语音识别-GMM</title>
    <url>/archives/24da735a.html</url>
    <content><![CDATA[<p>参考：</p>
<blockquote>
<p>《解析深度学习-语音识别实践》第2章 混合高斯模型</p>
</blockquote>
<p><strong>语音识别过程：切除首尾端静音—-声音划分为帧—-对每一帧提取MFCC特征—-若干帧对应一个状态—-三个状态组成一个音素—-若干音素组成单词</strong></p>
<h2 id="1-高斯分布"><a href="#1-高斯分布" class="headerlink" title="1. 高斯分布"></a>1. 高斯分布</h2><p>高斯分布又叫正态分布，在现实生活中充满了高斯分布，比如考试的分数、人的身高是一维高斯分布，图像处理领域的高斯模糊是二维高斯分布等等，通过高斯分布，我们可以很好的描述一类随机变量。</p>
<p>对于连续型标量随机变量$x$来说，若$x$服从正态分布，则其概率密度函数是</p>
<script type="math/tex; mode=display">
p(x) = \frac{1}{(2\pi)^{1/2}\sigma} \exp[-\frac{1}{2}(\frac{x - \mu}{\sigma})^2] = N(x; \mu, \sigma^2)
\\
(-\infty < x < \infty; \sigma > 0)</script><h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><p>对于多元正态随机变量$\boldsymbol{x} = (x_1, x_2,…,x_D)^T$，其联合概率密度</p>
<script type="math/tex; mode=display">
p(\boldsymbol{x}) = \frac{1}{(2\pi)^{D/2}|\boldsymbol{\Sigma}|^{1/2}} \exp[-\frac{1}{2}(\boldsymbol{x} - \boldsymbol{\mu})^T\boldsymbol{\Sigma}^{-1}(\boldsymbol{x}-\boldsymbol{\mu})] = N(\boldsymbol{x};\boldsymbol{\mu}, \boldsymbol{\Sigma})
\\
其中 \boldsymbol{\mu} = E(\boldsymbol{x}) \in \mathbb{R}^D; \boldsymbol{\Sigma} = E[(\boldsymbol{x} - \bar{\boldsymbol{x}})(\boldsymbol{x} - \bar{\boldsymbol{x}})^T] \in \mathbb{R}^{D \times D}</script><hr>
<p>对于一个标量连续随机变量x，若其服从混合高斯分布，其概率密度函数</p>
<script type="math/tex; mode=display">
p(x) = \sum^{M}_{m=1}\frac{c_m}{(2\pi)^{1/2}\sigma_m}\exp[-\frac{1}{2}(\frac{x-\mu_m}{\sigma_m})^2]
\\
= \sum^{M}_{m=1}c_mN(x;\mu_m,\sigma^2_m)，其中\sum^M_{m=1}c_m = 1，E(x) = \sum^{M}_{m=1}c_m\mu_m</script><hr>
<p>推广到多变量的多元混合高斯分布，其联合概率密度函数为</p>
<script type="math/tex; mode=display">
p(\boldsymbol{x}) = \sum^{M}_{m=1}\frac{c_m}{(2\pi)^{D/2}|\boldsymbol{\Sigma}_m|^{1/2}}\exp[-\frac{1}{2}(\boldsymbol{x} - \boldsymbol{\mu}_m)^T\boldsymbol{\Sigma}^{-1}_m(\boldsymbol{x} - \boldsymbol{\mu}_m)]
\\
= \sum^{M}_{m=1}c_mN(\boldsymbol{x};\boldsymbol{\mu}_m,\boldsymbol{\Sigma}_m)</script><p>在多元混合高斯分布中，如果变量x的维度D很大（比如40），那么使用全协方差矩阵（非对角）（$\Sigma_m$）将引入大量参数（大约为$M \times D^2$）。为了减少这个数量，可以使用对角协方差矩阵。当M很大时，也可以限制所有的协方差为相同矩阵，对所有的混合成分m，将参数$\Sigma_m$绑定在一起。</p>
<h2 id="2-GMM示例"><a href="#2-GMM示例" class="headerlink" title="2. GMM示例"></a>2. GMM示例</h2><p>对于这样的二维数据分布，如何进行分类，若使用单个高斯成分，那么一个椭圆可以描述整体，但是根据观察，实际上这些数据应该属于两个不同的高斯成分，也就是说可以分为两类。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/gmm01.png" alt="gmm01.png"></p>
<p>那么我们使用两个二维高斯分布来描述这个分布，当然最后的结果使用了$c_m$进行叠加</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/gmm0243a11433bb97d251.png" alt="gmm0243a11433bb97d251.png"></p>
<p>对于上例，我们定义$\boldsymbol{x} = (x_1, x_2)^T，M = 2$，则其GMM形式为</p>
<script type="math/tex; mode=display">
p(\boldsymbol{x}) = c_1N(\boldsymbol{\mu}_1, \boldsymbol{\sigma}_1) + c_2N(\boldsymbol{\mu}_2, \boldsymbol{\sigma}_2)</script><p>那么我们需要求解的参数为$(c_1, \boldsymbol{\mu}_1, \boldsymbol{\sigma}_1; c_2, \boldsymbol{\mu}_2, \boldsymbol{\sigma}_2)$</p>
<h2 id="3-参数估计"><a href="#3-参数估计" class="headerlink" title="3. 参数估计"></a>3. 参数估计</h2><p>这里使用EM算法（EM算法必收敛）估计参数变量$\Theta = {c_m, \boldsymbol{\mu}_m, \boldsymbol{\sigma}_m}$，首先回顾一下，GMM表示形式</p>
<script type="math/tex; mode=display">
p(\boldsymbol{x}) = \sum^{M}_{m=1}c_mN(\boldsymbol{x};\boldsymbol{\mu}_m,\boldsymbol{\sigma}^2_m)</script><p>其中$c<em>m$可以看作第m个高斯成分被选中的概率。我们引入一个新的M维变量$\boldsymbol{z}$，$z_m$只能取0或1；$z_m = 1$表示第m类被选中的概率$c_m$，即$p(z_m = 1) = c_m，且\sum^M</em>{m=1} z_m = 1$，所以$\boldsymbol{z}$的联合概率分布：</p>
<script type="math/tex; mode=display">
p(\boldsymbol{z}) = p(z_1)p(z_2)...p(z_M) = \prod_{m=1}^{M}c_m^{z_m}</script><p>又因为对于属于某一个高斯成分的数据来说（$z_m = 1$），其分布必定是高斯分布，所以</p>
<script type="math/tex; mode=display">
p(\boldsymbol{x}|z_m = 1) = N(\boldsymbol{x}|\boldsymbol{\mu}_m, \boldsymbol{\sigma}_m)</script><p>进而上式等价于</p>
<script type="math/tex; mode=display">
p(\boldsymbol{x}|\boldsymbol{z}) = \prod_{m=1}^{M}N(\boldsymbol{x}|\boldsymbol{\mu}_m, \boldsymbol{\sigma}_m)^{z_m}</script><p>我们有了$p(\boldsymbol{z})和p(\boldsymbol{x}|\boldsymbol{z})$，那么可以计算$p(\boldsymbol{x})$</p>
<script type="math/tex; mode=display">
p(\boldsymbol{x}) = \sum_Z p(\boldsymbol{x}|\boldsymbol{z})p(\boldsymbol{z})
\\
= \sum^{M}_{m=1}c_mN(\boldsymbol{x};\boldsymbol{\mu}_m,\boldsymbol{\sigma}^2_m)，z_m = 0的项在连乘中为1</script><p>所以最终又回到了GMM的表示形式，但是我们增加了<strong>隐含变量z</strong>用于描述我们已经知道有多少个高斯成分。</p>
<hr>
<p>在贝叶斯的思想下，$p(\boldsymbol{z})$是先验概率，$p(\boldsymbol{x}|\boldsymbol{z})$是似然概率，我们可以求解出后验概率$p(\boldsymbol{z}|\boldsymbol{x})$。</p>
<p>E步：基于当前迭代轮数（用j表示），针对某个高斯成分m，用给定观察值$\boldsymbol{x}^{(t)}$计算得到的后验概率$t = 1, …, N，（N是采样率）$</p>
<script type="math/tex; mode=display">
h^{(j)}_m(t) = p(z_m^{(j)}=1|\boldsymbol{x}^{(t)})
\\
= \frac{p(z_m^{(j)}=1)p(\boldsymbol{x}^{(t)}|z_m^{(j)}=1)}{p(\boldsymbol{x}^{(t)})}
\\
= \frac{p(z_m^{(j)}=1)p(\boldsymbol{x}^{(t)}|z_m^{(j)}=1)}{\sum^M_{i=1}p(z_i=1)p(\boldsymbol{x}^{(t)}|z_i=1)}
\\
= \frac{c_m^{(j)}N(\boldsymbol{x}^{(t)}; \boldsymbol{\mu}_m^{(j)}, \boldsymbol{\sigma}_m^{(j)})}{\sum^M_{i=1}c_i^{(j)}N(\boldsymbol{x}^{(t)}; \boldsymbol{\mu}_i^{(j)}, \boldsymbol{\sigma}_i^{(j)})}</script><p>M步：基于后验概率估计参数$\Theta$</p>
<script type="math/tex; mode=display">
c_m^{(j + 1)} = \frac{1}{N}\sum^N_{t=1}h_m^{(j)}(t)
\\
\boldsymbol{\mu}_m^{(j + 1)} = \frac{\sum^N_{t=1}h_m^{(j)}(t)\boldsymbol{x}^{(t)}}{\sum^N_{t=1}h_m^{(j)}(t)}
\\
\boldsymbol{\sigma}_m^{(j + 1)} = \frac{\sum^N_{t=1}h_m^{(j)}(t)[\boldsymbol{x}^{(t)} - \boldsymbol{\mu}_m^{(j)}][\boldsymbol{x}^{(t)} - \boldsymbol{\mu}_m^{(j)}]^T}{\sum^N_{t=1}h_m^{(j)}(t)}</script><p>计算对数似然函数</p>
<script type="math/tex; mode=display">
\ln p(\boldsymbol{x};c, \boldsymbol{\mu}, \boldsymbol{\sigma}) = \sum^N_{t=1}\ln{(\sum^M_{m=1}c_mN(\boldsymbol{x}^{(t)}|\boldsymbol{\mu}_m, \boldsymbol{\sigma}_m))}</script><p>先对$\Theta$进行初始化，然后执行E步，得到后验概率h，然后执行M步，计算新的$\Theta$，并更新参数，计算对数似然，直到参数收敛或对数似然收敛。</p>
<h2 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4. 代码实现"></a>4. 代码实现</h2><h3 id="4-1-sklearn实现"><a href="#4-1-sklearn实现" class="headerlink" title="4.1 sklearn实现"></a>4.1 sklearn实现</h3><p>使用<code>sklearn.mixture.GaussianMixture</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_wine</span><br><span class="line"><span class="keyword">from</span> sklearn.mixture <span class="keyword">import</span> GaussianMixture</span><br><span class="line"><span class="comment"># 这里使用酒类数据，数据集包括178个样本，每个样本由13个特征表示，以及一个标签，标签0、1、2分别表示3种酒</span></span><br><span class="line">rawData = load_wine()</span><br><span class="line"></span><br><span class="line">data = rawData[<span class="string">'data'</span>]</span><br><span class="line">target = rawData[<span class="string">'target'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定n_components分类数，我们已知有3种酒</span></span><br><span class="line">gmm = GaussianMixture(n_components=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定初始化的均值，同时根据先后顺序分配种类标签，指定means_init属性可以避免分类过程中分类标签与target不同</span></span><br><span class="line">gmm.means_init = np.array([data[target == i].mean(axis=<span class="number">0</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里就不划分测试集，直接对训练数据预测</span></span><br><span class="line">prediction = gmm.fit_predict(data, y=target)</span><br><span class="line">print(prediction)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算训练集上的准确率</span></span><br><span class="line">acc = np.mean(np.equal(prediction, target).astype(np.float))</span><br><span class="line">print(<span class="string">'GMM prediction accuracy: &#123;:.4f&#125;'</span>.format(acc))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>GMM prediction accuracy: 0.8034</p>
</blockquote>
]]></content>
      <categories>
        <category>Speech Recognition</category>
      </categories>
      <tags>
        <tag>Theory</tag>
        <tag>GMM</tag>
      </tags>
  </entry>
  <entry>
    <title>线性模型-coding</title>
    <url>/archives/c516f6f0.html</url>
    <content><![CDATA[<h2 id="1-数据集说明"><a href="#1-数据集说明" class="headerlink" title="1. 数据集说明"></a>1. 数据集说明</h2><h3 id="1-1-线性回归数据集-Boston房价"><a href="#1-1-线性回归数据集-Boston房价" class="headerlink" title="1.1 线性回归数据集-Boston房价"></a>1.1 线性回归数据集-Boston房价</h3><ul>
<li>数据来源：<code>sklearn.datasets.load_boston</code>（<code>tensorflow.keras.datasets.boston_housing</code>理论上应该是一模一样的）；</li>
<li>数据集形状：总计506个样本，每个样本由14个属性表示，一般将最后一个房价作为target，所有属性值均为number，详情可调用<code>load_boston()[&#39;DESCR&#39;]</code>了解每个属性的具体含义；</li>
<li>数据集划分：随机选出20%数据作为测试集，不做验证集要求；</li>
<li>性能度量：MSE或者RMSE均可以。</li>
</ul>
<h3 id="1-2-二分类数据集-乳腺癌"><a href="#1-2-二分类数据集-乳腺癌" class="headerlink" title="1.2 二分类数据集-乳腺癌"></a>1.2 二分类数据集-乳腺癌</h3><ul>
<li>数据来源：<code>sklearn.datasets.load_breast_cancer</code>；</li>
<li>数据集形状：总计569个样本，良性357个，恶性212个，每个样本由30个属性表示，target表示肿瘤良性1还是恶性0，所有属性值均为number，详情可调用<code>load_breast_cancer()[&#39;DESCR&#39;]</code>了解每个属性的具体含义；</li>
<li>数据集划分：随机选出20%数据作为测试集，不做验证集要求；</li>
<li>性能度量：accuracy或ROC。</li>
</ul>
<h3 id="1-3-多分类数据集-鸢尾花"><a href="#1-3-多分类数据集-鸢尾花" class="headerlink" title="1.3 多分类数据集-鸢尾花"></a>1.3 多分类数据集-鸢尾花</h3><ul>
<li>数据来源：<code>sklearn.datasets.load_iris</code>；</li>
<li>数据集形状：总计150个样本，一共3种花，每种50个，每个样本由4个属性表示，target表示花的种类0/1/2，所有属性值均为number，详情可调用<code>load_iris()[&#39;DESCR&#39;]</code>了解每个属性的具体含义；</li>
<li>数据集划分：随机选出20%数据作为测试集，不做验证集要求；</li>
<li>性能度量：accuracy。</li>
</ul>
<a id="more"></a>
<h2 id="2-线性回归"><a href="#2-线性回归" class="headerlink" title="2. 线性回归"></a>2. 线性回归</h2><h3 id="2-1-公式法"><a href="#2-1-公式法" class="headerlink" title="2.1 公式法"></a>2.1 公式法</h3><p><strong>我们先不考虑特征工程，仅将所有特征放入线性回归模型中</strong>。</p>
<p>首先导入需要的第三方库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_boston <span class="comment">#数据集</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing <span class="comment">#归一化处理</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split <span class="comment">#数据集划分</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd <span class="comment">#观察数据集</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt <span class="comment">#绘制图表</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np <span class="comment">#数据处理</span></span><br><span class="line">pd.set_option(<span class="string">'precision'</span>, <span class="number">2</span>) <span class="comment">#设置pandas显示数据保留两位小数</span></span><br></pre></td></tr></table></figure>
<p>然后看看数据的大致范围与一些统计信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">boston = load_boston() <span class="comment">#加载数据，load_boston()返回的是一个字典</span></span><br><span class="line">print(boston[<span class="string">'DESCR'</span>]) <span class="comment">#打印数据集描述信息</span></span><br><span class="line"></span><br><span class="line">filepath = boston[<span class="string">'filename'</span>] <span class="comment">#调用load_boston()会下载数据集csv文件到本地，通过filename获取路径</span></span><br><span class="line">df = pd.read_csv(filepath, skiprows=<span class="number">0</span>, header=<span class="number">1</span>) <span class="comment">#通过pandas读取csv文件，由于sklearn下载的csv文件第0行是样例数和属性数，第1行是属性名称，从第2行开始才是数据，所以设置skiprows跳过第0行，设置header特征行为1</span></span><br><span class="line">df.describe() <span class="comment">#显示数据集统计信息</span></span><br></pre></td></tr></table></figure>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/boston.png" alt="boston.png"></p>
<p>数据集划分</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = boston[<span class="string">'data'</span>] <span class="comment">#data对应前13列，即特征列，获取到的数据类型为np.array</span></span><br><span class="line">target = boston[<span class="string">'target'</span>] <span class="comment">#target对应最后一列，即目标列</span></span><br><span class="line"></span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(data, target, test_size=<span class="number">0.2</span>, shuffle=<span class="literal">True</span>) <span class="comment">#调用train_test_split划分数据集，指定test_size为0.2，指定shuffle为True，在划分前打乱数据集</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注释掉的部分是对数据进行归一化处理，减去均值，再除以标准差</span></span><br><span class="line"><span class="comment"># scaler = preprocessing.StandardScaler().fit(x_train)</span></span><br><span class="line"><span class="comment"># x_train_scale = scaler.transform(x_train)</span></span><br><span class="line"><span class="comment"># x_test_scale = scaler.transform(x_test)</span></span><br><span class="line"><span class="comment"># x_train_scale = np.column_stack((x_train_scale, np.ones(len(x_train_scale))))</span></span><br><span class="line"><span class="comment"># x_test_scale = np.column_stack((x_test_scale, np.ones(len(x_test_scale))))</span></span><br><span class="line"></span><br><span class="line">x_train = np.column_stack((x_train, np.ones(len(x_train)))) <span class="comment">#在公式法中我们还要增加一列全1为偏差bias</span></span><br><span class="line">x_test = np.column_stack((x_test, np.ones(len(x_test))))</span><br></pre></td></tr></table></figure>
<p>计算预测值与损失</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">standLR</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">        根据公式计算参数w（已经包括bias）</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    xMat = np.mat(x) <span class="comment">#将np.array数据转成矩阵便于后续计算</span></span><br><span class="line">    yMat = np.mat(y).T <span class="comment">#对应一列</span></span><br><span class="line"></span><br><span class="line">    xTx = xMat.T * xMat <span class="comment">#.T实现矩阵转置</span></span><br><span class="line">    <span class="keyword">if</span> np.linalg.det(xTx) == <span class="number">0.0</span>: <span class="comment">#如果矩阵行列式为0说明矩阵不可逆</span></span><br><span class="line">        print(<span class="string">'矩阵不可逆，请使用其他方法！！'</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    w = xTx.I * xMat.T * yMat <span class="comment">#计算w，w的形状是一列</span></span><br><span class="line">    <span class="keyword">return</span> w</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(x, w)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.mat(x) * w <span class="comment">#根据w计算预测值，预测值也是一列</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mse</span><span class="params">(pre, y)</span>:</span></span><br><span class="line">    m = y.shape[<span class="number">0</span>]</span><br><span class="line">    yMat = np.mat(y).T</span><br><span class="line">    loss = np.sum(np.square(pre - yMat)) / m <span class="comment">#计算MSE，也可以开方获取RMSE</span></span><br><span class="line">    <span class="keyword">return</span> loss</span><br><span class="line"></span><br><span class="line">w = standLR(x_train, y_train)</span><br><span class="line">pre = predict(x_test, w)</span><br><span class="line">loss = mse(pre, y_test)</span><br><span class="line">print(<span class="string">'MSE for testSet is: &#123;:.3f&#125;'</span>.format(loss))</span><br><span class="line"></span><br><span class="line"><span class="comment">#绘制预测值与真实值，以y=x为标准，越接近这条线越准确</span></span><br><span class="line">plt.figure(figsize=(<span class="number">4</span>, <span class="number">4</span>))</span><br><span class="line">plt.plot([<span class="number">0</span>, <span class="number">60</span>], [<span class="number">0</span>, <span class="number">60</span>])</span><br><span class="line">plt.scatter(pre.A, y_test)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>MSE for testSet is: 26.741 ，每次结果都不一定相同</p>
</blockquote>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/standpre.png" alt="standpre.png"></p>
<ul>
<li>当使用了归一化后的特征列数据进行求解时，我们最后得到的预测性能和没有使用归一化的是几乎一样的，但是这是不是意味着归一化没有用处呢，当然不是；</li>
<li>在不考虑特征工程的情形下，我们仅通过线性回归能得到的完美解$w$，在测试集上的损失是26.741，我们要想提高性能减少损失需要考虑特征工程或其他方法；</li>
<li>当样例数和特征数增大时，矩阵计算需要大量内存，这个方法不合适；</li>
<li>在标准线性回归中，我们没有考虑单个样本损失的权重，比如测试点与某些样本点距离很近，那么这些近距离的样本点的损失对测试点就应当更重要，所以它们的损失权重应该较大，而那些远离测试点的样本点，其权重应当较小，基于这个理论，我们使用局部加权线性回归测试一下。</li>
</ul>
<h3 id="2-2-局部加权线性回归LWLR"><a href="#2-2-局部加权线性回归LWLR" class="headerlink" title="2.2 局部加权线性回归LWLR"></a>2.2 局部加权线性回归LWLR</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lwlr</span><span class="params">(x_point, x, y, k=<span class="number">1.0</span>)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">        Description：</span></span><br><span class="line"><span class="string">            局部加权线性回归，在待预测点附近的每个点赋予一定的权重，在子集上基于最小均方差来进行普通的回归。</span></span><br><span class="line"><span class="string">        Notes:</span></span><br><span class="line"><span class="string">            这其中会用到计算权重的公式，w = e^((x^((i))-x) / -2k^2)</span></span><br><span class="line"><span class="string">            理解：x为某个预测点，x^((i))为样本点，样本点距离预测点越近，贡献的误差越大（权值越大），越远则贡献的误差越小（权值越小）。</span></span><br><span class="line"><span class="string">            关于预测点的选取，在我的代码中取的是样本点。其中k是带宽参数，控制w（钟形函数）的宽窄程度，类似于高斯函数的标准差。</span></span><br><span class="line"><span class="string">            算法思路：假设预测点取样本点中的第i个样本点（共m个样本点），遍历1到m个样本点（含第i个），算出每一个样本点与预测点的距离，</span></span><br><span class="line"><span class="string">            也就可以计算出每个样本贡献误差的权值，可以看出w是一个有m个元素的向量（写成对角阵形式）。</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    xMat = np.mat(x)</span><br><span class="line">    yMat = np.mat(y).T</span><br><span class="line">    x_point = np.mat(x_point)</span><br><span class="line">    m = np.shape(xMat)[<span class="number">0</span>]</span><br><span class="line">    weights = np.mat(np.eye(m))     <span class="comment"># eye()返回一个对角线元素为1，其他元素为0的二维数组，创建权重矩阵weights，该矩阵为每个样本点初始化了一个权重</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(m):</span><br><span class="line">        diff = x_point - xMat[j, :]         <span class="comment"># 计算 testPoint 与输入样本点之间的距离，然后下面计算出每个样本贡献误差的权值</span></span><br><span class="line">        <span class="comment"># print(diff * diff.T)</span></span><br><span class="line">        weights[j, j] = np.exp(diff * diff.T / (<span class="number">-2.0</span> * k**<span class="number">2</span>))</span><br><span class="line">        <span class="comment"># print(weights[j, j])</span></span><br><span class="line">    xTx = xMat.T * (weights * xMat)     <span class="comment"># 根据矩阵乘法计算 xTx ，其中的 weights 矩阵是样本点对应的权重矩阵</span></span><br><span class="line">    <span class="keyword">if</span> np.linalg.det(xTx) == <span class="number">0.0</span>: <span class="comment">#如果矩阵行列式为0说明矩阵不可逆</span></span><br><span class="line">        print(<span class="string">'矩阵不可逆，请使用其他方法！！'</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    w = xTx.I * (xMat.T * (weights * yMat))</span><br><span class="line">    <span class="keyword">return</span> x_point * w</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lwlrPre</span><span class="params">(x_test, x, y, k=<span class="number">1.0</span>)</span>:</span></span><br><span class="line">    m = x_test.shape[<span class="number">0</span>]</span><br><span class="line">    pre = np.mat(np.zeros((m, <span class="number">1</span>)))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">        pre[i] = lwlr(x_test[i], x, y, k)</span><br><span class="line">    <span class="keyword">return</span> pre</span><br><span class="line"><span class="comment"># 这里使用了归一化后的数据，因为没有归一化的样本的diff值很大，导致exp运算后的值接近0，最后导致矩阵行列式为0</span></span><br><span class="line">pre = lwlrPre(x_test_scale, x_train_scale, y_train, k=<span class="number">1.1</span>)</span><br><span class="line">loss = mse(pre, y_test)</span><br><span class="line">print(<span class="string">'MSE for testSet is: &#123;:.3f&#125;'</span>.format(loss))</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">4</span>, <span class="number">4</span>))</span><br><span class="line">plt.plot([<span class="number">0</span>, <span class="number">60</span>], [<span class="number">0</span>, <span class="number">60</span>])</span><br><span class="line">plt.scatter(pre.A, y_test)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>MSE for testSet is: 7.435 ，每次结果都不一定相同，但是效果明显优于标准线性回归</p>
</blockquote>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/lwlrpre.png" alt="lwlrpre.png"></p>
<h3 id="2-3-岭回归"><a href="#2-3-岭回归" class="headerlink" title="2.3 岭回归"></a>2.3 岭回归</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ridgeRegress</span><span class="params">(x, y, lam=<span class="number">0.2</span>)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">        Desc：</span></span><br><span class="line"><span class="string">            这个函数实现了给定 lambda 下的岭回归求解。</span></span><br><span class="line"><span class="string">            如果数据的特征比样本点还多，就不能再使用上面介绍的的线性回归和局部现行回归了，因为计算 (xTx)^(-1)会出现错误。</span></span><br><span class="line"><span class="string">            如果特征比样本点还多（n &gt; m），也就是说，输入数据的矩阵x不是满秩矩阵。非满秩矩阵在求逆时会出现问题。</span></span><br><span class="line"><span class="string">            为了解决这个问题，我们下边讲一下：岭回归，这是我们要讲的第一种缩减方法。</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    xMat = np.mat(x)</span><br><span class="line">    yMat = np.mat(y).T</span><br><span class="line">    xTx = xMat.T * xMat</span><br><span class="line">    demon = xTx + np.eye(xMat.shape[<span class="number">1</span>]) * lam     <span class="comment"># 岭回归就是在矩阵 xTx 上加一个 λI 从而使得矩阵非奇异，进而能对 xTx + λI 求逆</span></span><br><span class="line">    <span class="keyword">if</span> np.linalg.det(xTx) == <span class="number">0.0</span>: <span class="comment">#如果矩阵行列式为0说明矩阵不可逆</span></span><br><span class="line">        print(<span class="string">'矩阵不可逆，请使用其他方法！！'</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    w = xTx.I * (xMat.T * yMat)</span><br><span class="line">    <span class="keyword">return</span> w</span><br><span class="line"><span class="comment"># 由于我们使用的数据集不存在特征比样本点还多的情况，因此岭回归未起作用</span></span><br><span class="line">w = ridgeRegress(x_train_scale, y_train, lam=<span class="number">0.2</span>)</span><br><span class="line">pre = predict(x_test_scale, w)</span><br><span class="line">loss = mse(pre, y_test)</span><br><span class="line">print(loss)</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">4</span>, <span class="number">4</span>))</span><br><span class="line">plt.plot([<span class="number">0</span>, <span class="number">60</span>], [<span class="number">0</span>, <span class="number">60</span>])</span><br><span class="line">plt.scatter(pre.A, y_test)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>MSE for testSet is: 26.741 ，每次结果都不一定相同</p>
</blockquote>

<h3 id="2-4-Estimator"><a href="#2-4-Estimator" class="headerlink" title="2.4 Estimator"></a>2.4 Estimator</h3><p>使用梯度下降可以避免公式法面临的内存消耗问题，同时采用归一化，归一化是为了保证在梯度下降时各个参数下降步长基本同步，达到同时收敛的效果</p>
<p><strong>基于Tensorflow框架实现线性回归，使用Tensorflow提供的LinearRegressor</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.datasets <span class="keyword">import</span> boston_housing</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"><span class="comment"># 默认划分20%的测试集</span></span><br><span class="line">(x_train, y_train), (x_test, y_test) = boston_housing.load_data()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注释掉的部分对数据进行归一化处理，可以加速收敛</span></span><br><span class="line"><span class="comment"># scaler = preprocessing.StandardScaler().fit(x_train)</span></span><br><span class="line"><span class="comment"># x_train = scaler.transform(x_train)</span></span><br><span class="line"><span class="comment"># x_test = scaler.transform(x_test)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里是为了适配LinearRegressor需要的feature_columns，而feature_columns指定了参与训练的特征，我们可以直接增加或减少feature_columns来比较在不同特征数下模型的性能</span></span><br><span class="line"><span class="comment"># 把每一列数据保存为一个键值对，键的名称来源数据集说明</span></span><br><span class="line">column_names = [<span class="string">'CRIM'</span>, <span class="string">'ZN'</span>, <span class="string">'INDUS'</span>, <span class="string">'CHAS'</span>, <span class="string">'NOX'</span>, <span class="string">'RM'</span>, <span class="string">'AGE'</span>, <span class="string">'DIS'</span>, <span class="string">'RAD'</span>,</span><br><span class="line">                <span class="string">'TAX'</span>, <span class="string">'PTRATIO'</span>, <span class="string">'B'</span>, <span class="string">'LSTAT'</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createDict</span><span class="params">(X)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> &#123; column_names[i]: X[:, i].ravel() <span class="keyword">for</span> i <span class="keyword">in</span> range(len(column_names))&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在这里控制参与训练的特征列</span></span><br><span class="line"><span class="comment"># 终极小tips，feature_columns的key不能包含空格在名称中，否则报错not valid scope name</span></span><br><span class="line">feature_columns = []</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> column_names:</span><br><span class="line">    feature_columns.append(tf.feature_column.numeric_column(key=key))</span><br><span class="line"></span><br><span class="line"><span class="comment"># estimator的输入数据是一个dataset模式，具体可以上官网了解</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">input_train</span><span class="params">()</span>:</span></span><br><span class="line">    dataset = tf.data.Dataset.from_tensor_slices((createDict(x_train), y_train))</span><br><span class="line">    dataset = dataset.shuffle(<span class="number">1000</span>).batch(<span class="number">64</span>).repeat() <span class="comment"># 数据集打乱/batch/重复</span></span><br><span class="line">    <span class="keyword">return</span> dataset.make_one_shot_iterator().get_next()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">input_test</span><span class="params">()</span>:</span></span><br><span class="line">    dataset = tf.data.Dataset.from_tensor_slices((createDict(x_test), y_test))</span><br><span class="line">    dataset = dataset.shuffle(<span class="number">1000</span>).batch(<span class="number">64</span>)</span><br><span class="line">    <span class="keyword">return</span> dataset.make_one_shot_iterator().get_next()</span><br><span class="line"></span><br><span class="line"><span class="comment"># LinearRegressor的参数还可以指定优化器、参数正则化等等</span></span><br><span class="line">model = tf.estimator.LinearRegressor(</span><br><span class="line">    feature_columns=feature_columns, <span class="comment"># 指定特征列</span></span><br><span class="line">    model_dir=<span class="string">"C://Users//Admin//Desktop//model"</span>, <span class="comment"># 指定模型保存的位置，包括了checkpoint和tensorboard数据</span></span><br><span class="line">    optimizer=tf.train.FtrlOptimizer(</span><br><span class="line">      learning_rate=<span class="number">0.1</span>,</span><br><span class="line">      l1_regularization_strength=<span class="number">0.001</span></span><br><span class="line">    ))</span><br><span class="line"></span><br><span class="line">model.train(input_fn=input_train, steps=<span class="number">20000</span>) <span class="comment"># 开始训练模型，steps指定训练次数，每一次消耗一个batch的数据，进行一次参数更新</span></span><br><span class="line"></span><br><span class="line">model.evaluate(input_fn=input_test) <span class="comment"># 使用测试集数据评估模型性能，若使用的是同一组训练集和测试集，那么梯度下降最终得到的损失应该不低于直接用公式法得到的损失</span></span><br></pre></td></tr></table></figure>
<p><strong>不使用归一化</strong>：</p>
<blockquote>
<p>‘average_loss’: 26.594913<br>‘label/mean’: 23.078432<br>‘prediction/mean’: 23.884363</p>
</blockquote>
<p><strong>使用归一化</strong>：</p>
<blockquote>
<p>‘average_loss’: 23.19075<br>‘label/mean’: 23.078432<br>‘prediction/mean’: 23.093945</p>
</blockquote>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/loss.png" alt="loss.png"></p>
<h2 id="3-二分类sigmoid"><a href="#3-二分类sigmoid" class="headerlink" title="3. 二分类sigmoid"></a>3. 二分类sigmoid</h2><h3 id="3-1-简单梯度下降"><a href="#3-1-简单梯度下降" class="headerlink" title="3.1 简单梯度下降"></a>3.1 简单梯度下降</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_breast_cancer</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line">rawData = load_breast_cancer()</span><br><span class="line"></span><br><span class="line">data = rawData[<span class="string">'data'</span>]</span><br><span class="line">target = rawData[<span class="string">'target'</span>]</span><br><span class="line"></span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(data, target, test_size=<span class="number">0.2</span>, shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">x_train = np.column_stack((x_train, np.ones(len(x_train))))</span><br><span class="line">x_test = np.column_stack((x_test, np.ones(len(x_test))))</span><br><span class="line"></span><br><span class="line"><span class="comment"># sigmoid函数存在上溢和下溢问题</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.0</span> / (<span class="number">1</span> + np.exp(-x))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">standGrad</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    xMat = np.mat(x)</span><br><span class="line">    yMat = np.mat(y).T</span><br><span class="line">    n = xMat.shape[<span class="number">1</span>]</span><br><span class="line">    alpha = <span class="number">0.01</span></span><br><span class="line">    steps = <span class="number">1000</span></span><br><span class="line">    weights = np.ones((n, <span class="number">1</span>))</span><br><span class="line">    <span class="comment"># 关键部分，根据迭代次数steps，每次迭代都使用全部数据，公式计算</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(steps):</span><br><span class="line">        pre = sigmoid(xMat * weights)</span><br><span class="line">        error = pre - yMat</span><br><span class="line">        weights -= alpha * xMat.T * error</span><br><span class="line">    <span class="keyword">return</span> weights</span><br><span class="line"></span><br><span class="line"><span class="comment"># sigmoid函数计算得到预测值为1的概率，若概率大于0.5（也可以设置为其他值，</span></span><br><span class="line"><span class="comment"># 避免类别不均衡问题），则认为预测值为1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(x, w)</span>:</span></span><br><span class="line">    xMat = np.mat(x)</span><br><span class="line">    pro = sigmoid(xMat * w) </span><br><span class="line">    pre = [<span class="number">1</span> <span class="keyword">if</span> p &gt; <span class="number">0.5</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> p <span class="keyword">in</span> pro]</span><br><span class="line">    <span class="keyword">return</span> pro, pre</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">accuracy</span><span class="params">(pre, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.sum(np.equal(pre, y).astype(np.float))/len(pre)</span><br><span class="line"></span><br><span class="line">w = standGrad(x_train, y_train)</span><br><span class="line">pro, pre = predict(x_test, w)</span><br><span class="line">print(<span class="string">'Testset prediction accuracy: &#123;:.3f&#125;'</span>.format(accuracy(pre, y_test)))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Testset prediction accuracy: 0.763</p>
</blockquote>
<h3 id="3-2-随机梯度下降"><a href="#3-2-随机梯度下降" class="headerlink" title="3.2 随机梯度下降"></a>3.2 随机梯度下降</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stocGrad</span><span class="params">(x, y, steps=<span class="number">300</span>)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">        随机梯度下降随机选取一个样本，针对每一个样本都进行参数的梯度下降，同时对训练参数进行约束，</span></span><br><span class="line"><span class="string">        使其在开始阶段较大拥有较大的步伐，在最终阶段拥有较小的步伐</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    m, n = x.shape</span><br><span class="line">    weights = np.ones(n)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(steps):</span><br><span class="line">        index = list(range(m))</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(m):</span><br><span class="line">            rand_index = int(np.random.uniform(<span class="number">0</span>, len(index)))</span><br><span class="line">            alpha = <span class="number">4</span> / (<span class="number">1.0</span> + i + j) + <span class="number">0.01</span> <span class="comment"># alpha约束，也可以使用其他公式</span></span><br><span class="line">            pre = sigmoid(np.sum(x[index[rand_index]] * weights))</span><br><span class="line">            error = pre - y[index[rand_index]]</span><br><span class="line">            weights -= alpha * error * x[index[rand_index]]</span><br><span class="line">            <span class="keyword">del</span>(index[rand_index])</span><br><span class="line">    <span class="keyword">return</span> np.mat(weights).T</span><br><span class="line"></span><br><span class="line">w = stocGrad(x_train, y_train)</span><br><span class="line">pro, pre = predict(x_test, w)</span><br><span class="line">print(<span class="string">'Testset prediction accuracy: &#123;:.3f&#125;'</span>.format(accuracy(pre, y_test)))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Testset prediction accuracy: 0.851</p>
</blockquote>
<h3 id="3-3-Estimator"><a href="#3-3-Estimator" class="headerlink" title="3.3 Estimator"></a>3.3 Estimator</h3><p><strong>基于Tensorflow框架实现二分类，使用Tensorflow提供的LinearClassifier</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_breast_cancer</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line">rawData = load_breast_cancer()</span><br><span class="line"></span><br><span class="line">data = rawData[<span class="string">'data'</span>]</span><br><span class="line">target = rawData[<span class="string">'target'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 终极小tips，feature_columns的key不能包含空格在名称中，否则报错not valid scope name</span></span><br><span class="line">column_names = [name.replace(<span class="string">' '</span>, <span class="string">''</span>) <span class="keyword">for</span> name <span class="keyword">in</span> rawData[<span class="string">'feature_names'</span>]]</span><br><span class="line"></span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(data, target, test_size=<span class="number">0.2</span>, shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createDict</span><span class="params">(X)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> &#123;column_names[i]: X[:, i].ravel() <span class="keyword">for</span> i <span class="keyword">in</span> range(len(column_names))&#125;</span><br><span class="line"></span><br><span class="line">feature_columns = []</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> column_names:</span><br><span class="line">    feature_columns.append(tf.feature_column.numeric_column(key=key))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用一个函数代替input_train和input_test</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">input_fn</span><span class="params">(x, y, training=True)</span>:</span></span><br><span class="line">    dataset = tf.data.Dataset.from_tensor_slices((createDict(x), y))</span><br><span class="line">    <span class="keyword">if</span> training:</span><br><span class="line">        dataset = dataset.shuffle(<span class="number">1000</span>).batch(<span class="number">32</span>).repeat()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dataset = dataset.batch(<span class="number">32</span>)</span><br><span class="line">    <span class="keyword">return</span> dataset.make_one_shot_iterator().get_next()</span><br><span class="line"></span><br><span class="line">model = tf.estimator.LinearClassifier(</span><br><span class="line">    n_classes=<span class="number">2</span>, <span class="comment"># 默认为2，可以不写，其他分类需要指定</span></span><br><span class="line">    feature_columns=feature_columns, <span class="comment"># 指定特征列</span></span><br><span class="line">    model_dir=<span class="string">"C://Users//Admin//Desktop//model//classifier"</span>, <span class="comment"># 指定模型保存的位置，包括了checkpoint和tensorboard数据</span></span><br><span class="line">    optimizer=tf.train.FtrlOptimizer(</span><br><span class="line">      learning_rate=<span class="number">0.1</span>,</span><br><span class="line">      l1_regularization_strength=<span class="number">0.001</span> <span class="comment"># 增加l1正则化，系数0.001，使参数中产生更多的0，可以提高泛化性能</span></span><br><span class="line">    ))</span><br><span class="line"></span><br><span class="line">model.train(input_fn=<span class="keyword">lambda</span>: input_fn(x_train, y_train), steps=<span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line">model.evaluate(input_fn=<span class="keyword">lambda</span>: input_fn(x_test, y_test, training=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>‘accuracy’: 0.95614034<br>‘accuracy_baseline’: 0.65789473<br>‘auc’: 0.9890598<br>‘auc_precision_recall’: 0.99319196<br>‘average_loss’: 0.10730305<br>‘label/mean’: 0.65789473<br>‘loss’: 3.058137<br>‘precision’: 0.972973<br>‘prediction/mean’: 0.6475287<br>‘recall’: 0.96<br>‘global_step’: 10000</p>
</blockquote>
<h2 id="4-多分类softmax"><a href="#4-多分类softmax" class="headerlink" title="4. 多分类softmax"></a>4. 多分类softmax</h2><p><strong>基于Tensorflow框架实现多分类，使用Tensorflow提供的eager模式</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#%%</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function, absolute_import, division</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line">tf.enable_eager_execution() <span class="comment">#启用eager模式</span></span><br><span class="line">tfe = tf.contrib.eager</span><br><span class="line">print(<span class="string">'Tensorflow version: '</span>, tf.VERSION)</span><br><span class="line">print(<span class="string">'Eager mode: '</span>, tf.executing_eagerly())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义超参数</span></span><br><span class="line">learning_rate = <span class="number">0.01</span></span><br><span class="line">batch_size = <span class="number">32</span></span><br><span class="line">num_steps = <span class="number">10000</span></span><br><span class="line">display_step = <span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载数据，划分数据集</span></span><br><span class="line">(data, target) = load_iris(return_X_y=<span class="literal">True</span>)</span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(data, target, test_size=<span class="number">0.2</span>, shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成dataset，注意这里获取到的x_train和x_test都是float64的数据，tf.matmul不能计算float64的数据，需要转成32位</span></span><br><span class="line">dataset = tf.data.Dataset.from_tensor_slices((tf.cast(x_train, tf.float32), y_train)).shuffle(<span class="number">1000</span>).batch(batch_size)</span><br><span class="line"><span class="comment"># eager模式下的迭代器</span></span><br><span class="line">dataset_iter = tfe.Iterator(dataset)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存参数，初始化为0</span></span><br><span class="line">W = tfe.Variable(tf.zeros([<span class="number">4</span>, <span class="number">3</span>]), name=<span class="string">'weights'</span>)</span><br><span class="line">b = tfe.Variable(tf.zeros([<span class="number">3</span>]), name=<span class="string">'bias'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 线性回归计算</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">regression</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.matmul(x, W) + b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算损失，注意这里传入的参数包括了inference_fn，即回归计算方程，便于调整regression()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loss</span><span class="params">(inference_fn, x, y)</span>:</span></span><br><span class="line">    <span class="comment"># sparse_softmax_cross_entropy_with_logits计算softmax并且计算交叉熵，所以只需要传入线性模型计算得到的结果就行了</span></span><br><span class="line">    <span class="keyword">return</span> tf.reduce_mean(tf.nn.sparse_softmax_cross_entropy_with_logits(</span><br><span class="line">        logits=inference_fn(x), labels=y))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">accuracy</span><span class="params">(inference_fn, x, y)</span>:</span></span><br><span class="line">    pro = tf.nn.softmax(inference_fn(x))</span><br><span class="line">    <span class="comment"># softmax返回的是该样本属于各个种类的概率，这里用argmax取概率最大的index，然后与target对比</span></span><br><span class="line">    pre = tf.equal(tf.argmax(pro, <span class="number">1</span>), y)</span><br><span class="line">    <span class="keyword">return</span> tf.reduce_mean(tf.cast(pre, tf.float32))</span><br><span class="line"></span><br><span class="line">optimizer = tf.train.GradientDescentOptimizer(learning_rate=learning_rate)</span><br><span class="line"></span><br><span class="line">grad = tfe.implicit_gradients(loss)</span><br><span class="line"></span><br><span class="line">avg_loss = <span class="number">0.</span></span><br><span class="line">avg_acc = <span class="number">0.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(num_steps):</span><br><span class="line">    <span class="comment"># eager模式下迭代器到最后的时候需要重新初始化，继续取数据</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        d = dataset_iter.next()</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        dataset_iter = tfe.Iterator(dataset)</span><br><span class="line">        d = dataset_iter.next()</span><br><span class="line"></span><br><span class="line">    x_batch = d[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 这里需要转成int64是由于argmax返回的默认数据是int64类型</span></span><br><span class="line">    y_batch = tf.cast(d[<span class="number">1</span>], tf.int64)</span><br><span class="line"></span><br><span class="line">    batch_loss = loss(regression, x_batch, y_batch)</span><br><span class="line">    avg_loss += batch_loss</span><br><span class="line">    batch_acc = accuracy(regression, x_batch, y_batch)</span><br><span class="line">    avg_acc += batch_acc</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'Initial loss = &#123;:.5f&#125;'</span>.format(avg_loss))</span><br><span class="line">    <span class="comment"># 这里执行了梯度下降并更新参数</span></span><br><span class="line">    optimizer.apply_gradients(grad(regression, x_batch, y_batch))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i + <span class="number">1</span> ) % display_step == <span class="number">0</span> <span class="keyword">or</span> i == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> i &gt; <span class="number">0</span>:</span><br><span class="line">            avg_loss /= display_step</span><br><span class="line">            avg_acc /= display_step</span><br><span class="line">        print(<span class="string">'Step:&#123;:04d&#125;'</span>.format(i + <span class="number">1</span>), <span class="string">'loss = &#123;:.5f&#125;'</span>.format(avg_loss),</span><br><span class="line">        <span class="string">'accuracy = &#123;:.4f&#125;'</span>.format(avg_acc))</span><br><span class="line">        avg_acc = <span class="number">0.</span></span><br><span class="line">        avg_loss = <span class="number">0.</span></span><br><span class="line"></span><br><span class="line">test_acc = accuracy(regression, tf.cast(x_test, tf.float32), y_test)</span><br><span class="line">print(<span class="string">'Test accuracy: &#123;:.4f&#125;'</span>.format(test_acc))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Step:10000 loss = 0.14437 accuracy = 0.9738<br>Test accuracy: 1.0000</p>
</blockquote>
<h2 id="5-LDA分类-降维"><a href="#5-LDA分类-降维" class="headerlink" title="5. LDA分类/降维"></a>5. LDA分类/降维</h2><p>二分类LDA，数据集使用sklearn.datasets.load_breast_cancer</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_breast_cancer</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">(data, target) = load_breast_cancer(return_X_y=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(data, target, test_size=<span class="number">0.2</span>, shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 样本分类</span></span><br><span class="line">X0 = np.array([x_train[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(x_train)) <span class="keyword">if</span> y_train[i] == <span class="number">0</span>])</span><br><span class="line">X1 = np.array([x_train[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(x_train)) <span class="keyword">if</span> y_train[i] == <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算样本中心</span></span><br><span class="line">mu0 = np.mean(X0, axis=<span class="number">0</span>)</span><br><span class="line">mu1 = np.mean(X1, axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算协方差矩阵</span></span><br><span class="line">sigma0 = np.mat(np.zeros((X0.shape[<span class="number">1</span>], X0.shape[<span class="number">1</span>]))) </span><br><span class="line">sigma1 = np.mat(np.zeros((X1.shape[<span class="number">1</span>], X1.shape[<span class="number">1</span>])))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(X0.shape[<span class="number">0</span>]):</span><br><span class="line">    sigma0 += np.mat(X0[i] - mu0).T * np.mat(X0[i] - mu0)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(X1.shape[<span class="number">0</span>]):</span><br><span class="line">    sigma1 += np.mat(X1[i] - mu1).T * np.mat(X1[i] - mu1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类间散度矩阵</span></span><br><span class="line">Sw = sigma0 + sigma1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按公式计算参数w</span></span><br><span class="line">w = Sw.I * np.mat(mu0 - mu1).T</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算映射后的中心坐标</span></span><br><span class="line">center0 = (np.mat(mu0) * w).getA()</span><br><span class="line">center1 = (np.mat(mu1) * w).getA()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照样本距离哪个中心更近进行预测</span></span><br><span class="line">result = []</span><br><span class="line">pre = np.mat(x_test) * w</span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> pre:</span><br><span class="line">    <span class="keyword">if</span> abs(p - center0) &gt; abs(p - center1):</span><br><span class="line">        result.append(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result.append(<span class="number">0</span>)</span><br><span class="line">print(<span class="string">'Test accuracy: &#123;:.4f&#125;'</span>.format(np.mean(np.equal(result, y_test).astype(np.float))))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Test accuracy: 0.9123</p>
</blockquote>
<p>也可以使用<code>sklearn.discriminant_analysis.LinearDiscriminantAnalysis</code></p>
]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>Linear Model</tag>
        <tag>LDA</tag>
        <tag>LinearClassifier</tag>
        <tag>LinearRegressor</tag>
        <tag>Estimator</tag>
      </tags>
  </entry>
  <entry>
    <title>贝叶斯分类器</title>
    <url>/archives/79f15ca6.html</url>
    <content><![CDATA[<p><strong>贝叶斯无敌</strong></p>
<p>参考：</p>
<blockquote>
<p>西瓜书第7章 贝叶斯分类器</p>
</blockquote>
<h2 id="1-贝叶斯决策论"><a href="#1-贝叶斯决策论" class="headerlink" title="1. 贝叶斯决策论"></a>1. 贝叶斯决策论</h2><p>贝叶斯决策论是概率框架下实施决策的基本方法。对于分类任务来说，在所有相关概率都已知的理想情形下，贝叶斯决策论考虑如何基于这些概率和误判损失来选择最优的类别标记。</p>
<p>以多分类任务为例，假设有$N$种可能的类别标记，即$Y ={ c<em>1, c_2,…,c_N }$，$\lambda</em>{ij}$是将一个真实标记为$c_j$的样本误分类为$c_i$所产生的损失。那么在样本$\boldsymbol{x}$上的条件风险为</p>
<script type="math/tex; mode=display">
R(c_i|\boldsymbol{x}) = \sum^N_{j=1}\lambda_{ij}P(c_j|\boldsymbol{x})</script><p>我们的任务是寻找一个判定准则：$h:X \rightarrow Y$以最小化总体风险</p>
<script type="math/tex; mode=display">
R(h) = \mathbb{E}_\boldsymbol{x}[R(h(\boldsymbol{x})|\boldsymbol{x})]</script><a id="more"></a>
<p>显然，为了最小化总体风险，只需要在每个样本上选择那个能使条件风险$R(c|\boldsymbol{x})$最小的类别标记，即</p>
<script type="math/tex; mode=display">
h^*(\boldsymbol{x}) = \underset{c \in Y}{\arg\min} R(c|\boldsymbol{x})</script><p>举个例子</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/gmm02.png" alt="gmm02.png"></p>
<p>对于上图来说，假如我们已知点的分布属于两个高斯分布，对应两个类别，我们如何判断图中某点的类别呢？为了最小化总体风险，选择该点在两个高斯分布中概率最高的那个对应的种类。在这个过程中我们只计算了该点的两个高斯分布概率，这就是贝叶斯决策论的基本思想。</p>
<p>如果目标是最小化分类错误率，则$\lambda_{ij}$可写为</p>
<script type="math/tex; mode=display">
\lambda_{ij} = \left\{\begin{matrix}
0, \quad if \quad i=j\\ 
1, \quad otherwise
\end{matrix}\right.</script><p>此时条件风险</p>
<script type="math/tex; mode=display">
R(c|\boldsymbol{x}) = 1-P(c|\boldsymbol{x})</script><p>于是，最小化分类错误率的贝叶斯最优分类器为</p>
<script type="math/tex; mode=display">
h^*(\boldsymbol{x}) = \underset{c\in Y}{\arg \max} P(c|\boldsymbol{x})</script><p>即对每个样本选择能使后验概率$P(c|\boldsymbol{x})$最大的分类标记。</p>
<p>对应上面图中描述的，我们事先知道数据的分布才能很容易解决这个问题，但是实际上，数据分布通常难以直接获得，即$P(c|\boldsymbol{x})$后验概率难以直接获取。<br>从这个角度来看，机器学习所要实现的是基于有限的样本尽可能准确地估计出后验概率。<br>大体来说，主要有两种策略：</p>
<ul>
<li>判别式模型：给定$\boldsymbol{x}$，可通过直接建模$P(c|\boldsymbol{x})$来预测$c$，决策树、BP神经网络、SVM等；</li>
<li>生成式模型：先对联合概率分布$P(\boldsymbol{x}, c)$建模，然后再由此获得$P(c|\boldsymbol{x})$。</li>
</ul>
<p>对生成式模型来说，基于贝叶斯定理</p>
<script type="math/tex; mode=display">
P(c|\boldsymbol{x}) = \frac{P(c)P(\boldsymbol{x}|c)}{P(\boldsymbol{x})}</script><p>其中$P(c)$是类先验概率；$P(\boldsymbol{x}|c)$是样本相对于类标记$c$的类条件概率，或称为似然；$P(\boldsymbol{x})$是用于归一化的证据因子（与类别标记无关，一般无需计算）。</p>
<p>类先验概率$P(c)$表达了样本空间各类样本所占的比例，根据大数定律，可以通过各类样本出现的频率来进行估计。</p>
<p>对类条件概率$P(\boldsymbol{x}|c)$来说，它涉及到关于$\boldsymbol{x}$所有属性的联合概率，直接根据样本出现的频率来估计会很困难。例如，假设样本的$d$个属性都是二值的，则样本空间将有$2^d$种可能取值，在现实应用中，这个值往往大于训练样本数$m$，也就是说，很多样本取值没有在训练集种出现，不可直接用频率估计$P(\boldsymbol{x}|c)$。</p>
<h2 id="2-极大似然估计"><a href="#2-极大似然估计" class="headerlink" title="2. 极大似然估计"></a>2. 极大似然估计</h2><p>估计类条件概率的一般策略是</p>
<ol>
<li>假设样本属于某个类别；</li>
<li>基于假设的类别对概率分布的参数进行估计；</li>
<li>根据更新后的参数重新计算样本的类别</li>
</ol>
<p>重复2和3直到收敛。</p>
<p>事实上，概率模型的训练过程就是参数估计过程。</p>
<p>令$D_c$表示训练集中第$c$类样本组成的集合，假设这些样本是独立同分布的，则参数$\boldsymbol{\theta}_c$对于数据集$D_c$的似然是</p>
<script type="math/tex; mode=display">
P(D_c|\boldsymbol{\theta}_c) = \prod_{\boldsymbol{x}\in D_c}P(\boldsymbol{x}|\boldsymbol{\theta}_c)</script><p>对$\boldsymbol{\theta}_c$进行极大似然估计，就是去寻找能最大化似然$P(D_c|\boldsymbol{\theta}_c)$的参数$\boldsymbol{\theta}_c$，即在参数所有可能取值中找到能使数据出现可能性最大的参数。</p>
<p>连乘容易造成下溢，通常使用对数似然</p>
<script type="math/tex; mode=display">
LL(\boldsymbol{\theta}_c) = \log P(D_c|\boldsymbol{\theta}_c)
\\
=\sum_{\boldsymbol{x}\in D_c}\log P(\boldsymbol{x}|\boldsymbol{\theta}_c)</script><p>显然极大似然估计为</p>
<script type="math/tex; mode=display">
\hat{\boldsymbol{\theta}}_c = \underset{\boldsymbol{\theta}_c}{\arg\max} LL(\boldsymbol{\theta}_c)</script><p>例如，上图中的高斯分布，假设概率密度函数$p(\boldsymbol{x}|c)\sim N(\boldsymbol{\mu}_c,\boldsymbol{\sigma}^2_c)$，则参数的极大似然估计为</p>
<script type="math/tex; mode=display">
\hat{\boldsymbol{\mu}}_c = \frac{1}{|D_c|}\sum_{\boldsymbol{x}\in D_c}\boldsymbol{x}
\\
\hat{\boldsymbol{\sigma}}^2_c =\frac{1}{|D_c|}\sum_{\boldsymbol{x}\in D_c}(\boldsymbol{x} - \hat{\boldsymbol{\mu}}_c)(\boldsymbol{x} - \hat{\boldsymbol{\mu}}_c)^T</script><p>我们能做出如此假设的前提是，在可视化的条件下我们发现数据很大程度是属于两个高斯分布的。然而事实上，我们无法知道数据的分布，可能数据的维度很高，可能数据量很大，如果“假设”出错，那么我们的结果可能会是失败的。</p>
<h2 id="3-朴素贝叶斯分类器"><a href="#3-朴素贝叶斯分类器" class="headerlink" title="3. 朴素贝叶斯分类器"></a>3. 朴素贝叶斯分类器</h2><p>朴素贝叶斯分类是为了解决类条件概率$P(\boldsymbol{x}|c)$无法直接获取的问题，采用了属性条件独立性假设：对已知类别，假设所有属性相互独立，即假设每个属性独立地对分类结果发生影响。</p>
<p>基于上述假设</p>
<script type="math/tex; mode=display">
P(c|\boldsymbol{x}) = \frac{P(c)P(\boldsymbol{x}|c)}{P(\boldsymbol{x})} = \frac{P(c)}{P(\boldsymbol{x})} \prod^d_{i=1}P(x_i|c)</script><p>$d$为属性数目，$x_i$为样本在第$i$个属性上的取值。</p>
<p>对于所有类别来说，基于上式的贝叶斯判定准则为</p>
<script type="math/tex; mode=display">
h_{nb}(\boldsymbol{x}) = \underset{c\in Y}{\arg\max}P(c)\prod^d_{i=1}P(x_i|c)</script><p>这就是朴素贝叶斯分类器的表达式。</p>
<p>令$D_c$表示训练集$D中第$c$类样本组成的集合，若有充足的独立同分布样本，则</p>
<script type="math/tex; mode=display">
P(c) = \frac{|D_c|}{|D|}</script><p>对离散属性而言，令$D_{c,x_i}$表示$D_c$中在第$i$个属性上取值为$x_i$的样本组成的集合，则</p>
<script type="math/tex; mode=display">
P(x_i|c) = \frac{|D_{c, x_i}|}{|D_c|}</script><p>显然，连乘过程中如果出现了0，那么整个概率都变成了0，我们需要进行修正，令$N$表示训练集$D$中可能的类别数，$N_i$表示第$i$个属性可能的取值数</p>
<script type="math/tex; mode=display">
\hat{P}(c) = \frac{|D_c|+1}{|D|+N}
\\
\hat{P}(x_i|c) = \frac{|D_{c, x_i}|+1}{|D_c|+N}</script><h2 id="4-半朴素贝叶斯分类器"><a href="#4-半朴素贝叶斯分类器" class="headerlink" title="4. 半朴素贝叶斯分类器"></a>4. 半朴素贝叶斯分类器</h2><p>朴素贝叶斯分类器基于属性条件独立性假设，但是现实任务中这个假设往往很难成立。考虑一部分属性间的相互依赖信息，这就是半朴素贝叶斯分类器的基本思想。独依赖估计ODE是半朴素贝叶斯分类器最常用的一种策略，即假设每个属性在类别之外最多仅依赖于一个其他属性</p>
<script type="math/tex; mode=display">
P(c|\boldsymbol{x}) \propto P(c)\prod^d_{i=1}P(x_i|c, pa_i)</script><p>其中$pa_i$为属性$x_i$所依赖的属性，称为父属性。如何确定父属性？</p>
<hr>
<p>最直接的做法是假设所有属性都依赖于同一个属性，称为超父，通过交叉验证等模型选择方法确定超父属性，由此形成了SPODE方法。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/spode.jpg" alt="spode.jpg"></p>
<hr>
<p>TAN则是在最大带权生成树算法的基础上，通过以下步骤将属性间依赖关系约简</p>
<ol>
<li>计算任意两个属性之间的条件互信息$I(x<em>i,x_j|y) = \sum</em>{x_i,x_j|y}\log \frac{P(x_i,x_j|c)}{P(x_i|c)P(x_j|c)}$</li>
<li>以属性为结点构建完全图，任意两个结点之间边的权重设为$I(x_i, x_j|y)$；</li>
<li>构建此完全图的最大带权生成树，挑选根变量，将边置为有向；</li>
<li>加入类别结点$y$，增加从$y$到每个属性的有向边。</li>
</ol>
<p>通过最大生成树算法，TAN实际上仅保留了强相关属性之间的依赖性。</p>
<hr>
<p>AODE是一种基于集成学习机制、更为强大的独依赖分类器。AODE尝试将每个属性作为超父来构建SPODE，然后将那些具有足够数据支撑的SPODE集成起来作为最终结果</p>
<script type="math/tex; mode=display">
P(c|\boldsymbol{x}) \propto \underset{|D_{x_i}|\geqslant m'}{\sum^d_{i=1}} P(c, x_i)\prod^d_{j=1}P(x_j|c, x_j)</script><p>其中$D_{x_i}$是在第$i$个属性上取值为$x_i$的样本的集合，$m’$为阈值常数。</p>
<script type="math/tex; mode=display">
\hat{P}(c,x_i) = \frac{|D_{c, x_i}|+1}{|D|+N\times N_i}
\\
\hat{P}(x_j|c, x_i) = \frac{|D_{c, x_i, x_j}|+1}{|D_{c,x_i}|+N_j}</script><p>$D<em>{c,x_i}$是类别为$c$且在第$i$个属性上取值为$x_i$的样本集合，$D</em>{c, x_i,x_j}$是类别为$c$且在第$i$和$j$个属性上取值分别为$x_i$和$x_j$的样本集合。</p>
<hr>
<p>同样的，假设父属性为$k$个，即高阶依赖，那么所需要的训练样本数将以指数级增加。</p>
<h2 id="5-贝叶斯网"><a href="#5-贝叶斯网" class="headerlink" title="5. 贝叶斯网"></a>5. 贝叶斯网</h2><p>贝叶斯网亦称为信念网，它借助有向无环图DAG来刻画属性之间的依赖关系，并使用条件概率表CPT来描述属性的联合概率分布。</p>
<p>一个贝叶斯网$B$由结构$G$和参数$\Theta$两部分构成，即$B=\left \langle G, \Theta \right \rangle$。网络结构$G$是一个有向无环图，其每个结点对应于一个属性，若两个属性之间有直接依赖关系，则它们由一条边连接起来；参数$\Theta$定量描述这种依赖关系，假设属性$x<em>i$在$G$中的父结点集为$\pi_i$，则$\Theta$包含了每个属性的条件概率表$\theta</em>{x_i|\pi_i} = P_B(x_i|\pi_i)$。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/bayes0.jpg" alt="bayes0.jpg"></p>
<p>在上图中，我们可以知道$P(根蒂 = 硬挺|甜度 = 高) = 0.1$</p>
<h3 id="5-1-结构"><a href="#5-1-结构" class="headerlink" title="5.1 结构"></a>5.1 结构</h3><p>给定父结点集，贝叶斯网假设每个属性与它的非后裔属性独立，于是属性的联合概率分布为</p>
<script type="math/tex; mode=display">
P_B(x_i,x_2,...,x_d) = \prod^d_{i=1}P_B(x_i|\pi_i) = \prod^d_{i=1} \theta_{x_i|\pi_i}</script><p>以上图为例，联合概率分布为</p>
<script type="math/tex; mode=display">
P(x_1, x_2, x_3,x_4,x_5) = P(x_1)P(x_2)P(x_3|x_1)P(x_4|x_1,x_2)P(x_5|x_2)</script><p>相互独立关系表示为 $x_3 \perp x_4|x_1$和$x_4 \perp x_5|x_2$。</p>
<p>贝叶斯网中三个变量之间的典型依赖关系为</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/bayes1.png" alt="bayes1.png"></p>
<p>在同父结构中，给定父结点$x_1$的取值，则$x_3$和$x_4$条件独立；在顺序结构中，给定$x$的值，则$y$与$z$条件独立；V型结构，给定子结点$x_4$的值，$x_1$和$x_2$必不独立，若$x_4$取值完全未知，则V型结构下$x_1$和$x_2$却是相互独立的。</p>
<p>事实上，一个变量取值的确定与否，能对另两个变量间的独立性发生影响。为了分析有向图中变量间的条件独立性，可使用有向分离。我们先把有向图转变为一个无向图：</p>
<ul>
<li>找出有向图中所有的V型结构，在V型结构的两个父结点之间加上一条无向边；</li>
<li>将所有有向边改为无向边。</li>
</ul>
<p>由此产生的无向图称为道德图，令父结点相连的过程称为道德化。基于道德图能直观地、迅速地找到变量间的条件独立性。从道德图中将变量集合$\boldsymbol{z}$去除后，$x$和$y$分属两个连通分支，则称变量$x$和$y$被$\boldsymbol{z}$有向分离，$x \perp y|\boldsymbol{z}$。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/bayes2.png" alt="bayes2.png"></p>
<h3 id="5-2-学习"><a href="#5-2-学习" class="headerlink" title="5.2 学习"></a>5.2 学习</h3><p>若网络结构已知，则贝叶斯网的学习过程只需通过对训练样本计数，估计出每个结点的条件概率表即可。但在现实应用中我们往往并不知晓网络结构，于是，首要任务变成根据数据集找出结构最恰当的贝叶斯网。<br>评分搜索是求解这一问题的常用方法，通过一个评分函数评估贝叶斯网与训练数据的契合程度，基于评分函数来寻找结构最优的贝叶斯网。</p>
<p>常用评分函数通常基于信息论准则，学习的目标是找到一个能以最短编码长度描述训练数据的模型，此时编码的长度包括了描述模型自身所需的字节长度和使用该模型描述数据所需的字节长度。<br>对贝叶斯网来说，模型就是一个贝叶斯网，根据条件概率表，我们的目标是用一套编码机制使那些经常出现的样本具有更短的编码。于是我们应选择那个综合编码长度最短的贝叶斯网，这就是最小描述长度MDL准则。</p>
<p>给定训练集$D = { \boldsymbol{x}_1,\boldsymbol{x}_2,…,\boldsymbol{x}_m }$，贝叶斯网$B=\left \langle G, \Theta \right \rangle$在$D$上的评分函数可写为</p>
<script type="math/tex; mode=display">
s(B|D) = f(\theta)|B| - LL(B|D)</script><p>其中$|B|$是贝叶斯网的参数个数，$f(\theta)$表示描述每个参数$\theta$所需的字节数，而</p>
<script type="math/tex; mode=display">
LL(B|D) = \sum^m_{i=1}\log P_B(\boldsymbol{x}_i)</script><p>是贝叶斯网的对数似然。我们的任务变成了寻找一个贝叶斯网是评分函数$s$最小。</p>
<p>若$f(\theta) = 1$，即每个参数用1字节描述，则得到AIC评分函数</p>
<script type="math/tex; mode=display">
AIC(B|D) = |B| - LL(B|D)</script><p>若$f(\theta) = \frac{1}{2}\log m$，即每个参数用$\frac{1}{2}\log m$字节描述，则得到BIC评分函数</p>
<script type="math/tex; mode=display">
BIC(B|D) = \frac{\log m}{2}|B| - LL(B|D)</script><p>显然，若$f(\theta) = 0$，即不考虑对网络进行编码，则评分函数退化为负对数似然，相应的学习任务退化为极大似然估计。</p>
<p>若贝叶斯网$B$结构固定，则评分函数第一项为常数。此时，最小化$s$等价于对$\Theta$的极大似然估计。极大似然估计需要的参数$\theta_{x_i|\pi_i}$能直接在训练数据$D$上通过经验估计获得</p>
<script type="math/tex; mode=display">
\theta_{x_i|\pi_i} = \hat{P}_D(x_i|\pi_i)</script><p>其中$\hat{P}_D(\cdot)$是$D$上的经验分布。因此，为了最小化$s$，只需要对网络结构进行搜索，候选结构的参数可以直接根据训练集直接计算。</p>
<p>然而，从所有可能的网络结构空间中搜索最优贝叶斯网结构是NP难问题。<br>常用的两种策略能在有限时间内求得近似解：</p>
<ol>
<li>贪心法，从某个网络结构出发，每次调整一条边，直到评分函数值不再降低为止；</li>
<li>通过给网络结构施加约束来削减搜索空间，例如将网络结构限定为树形结构等。</li>
</ol>
<h3 id="5-3-推断"><a href="#5-3-推断" class="headerlink" title="5.3 推断"></a>5.3 推断</h3><p>贝叶斯网训练好之后就能用来查询，即通过一些属性变量的观测值来推测其他属性变量的取值。</p>
<p>最理想的是直接根据贝叶斯网定义的联合概率分布来精确计算后验概率，然而这是NP难问题；换言之，需要借助近似推断，通过降低精度要求，在有限时间内求得近似解。在现实应用中，贝叶斯网的近似推断常使用吉布斯采样来完成。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/bayes3.png" alt="bayes3.png"></p>
<p>令$\boldsymbol{Q} = { Q_1,Q_2,…,Q_n }$表示待查询变量，$\boldsymbol{E} = { E_1,E_2,…,E_k }$为证据变量（观测属性），已知其取值为$\boldsymbol{e} = { e_1,e_2,…,e_k }$。目标是计算后验概率$P(\boldsymbol{Q} = \boldsymbol{q}|\boldsymbol{E} = \boldsymbol{e})$，其中$\boldsymbol{q} = { q_1,q_2,…,q_n }$是带查询变量的一组取值。以西瓜问题为例，待查询变量为$\boldsymbol{Q} = { 好瓜，甜度 }$，证据变量为$\boldsymbol{E} = { 色泽，敲声，根蒂 }$，且其取值为$\boldsymbol{e} = { 青绿，浊响，蜷缩 }$，查询的目标值是$\boldsymbol{q} = { 是，高 }$，即这是好瓜且甜度高的概率有多大。</p>
<p>吉布斯采样算法：</p>
<ol>
<li>首先随机产生一个与证据样本$\boldsymbol{E} = \boldsymbol{e}$一致的样本$\boldsymbol{q}^0$作为初始点；</li>
<li>重复当前步骤，从当前样本出发产生下一个样本：在第$t$次采样中，先假设$\boldsymbol{q}^t = \boldsymbol{q}^{t-1}$，然后对非证据变量逐个进行采样改变其取值，采样概率根据贝叶斯网$B$和其他变量的当前取值（$\boldsymbol{Z} = \boldsymbol{z}$）计算获得。</li>
<li>经过$T$次采样得到的与$\boldsymbol{q}$一致的样本共有$n_q$个，则近似估算出后验概率为：$P(\boldsymbol{Q} = \boldsymbol{q}|\boldsymbol{E} = \boldsymbol{e}) \simeq \frac{n_q}{T}$</li>
</ol>
<p>实质上，这是一个马尔可夫链，在一定条件下，无论从什么初始状态开始，必收敛于一个平稳分布；对于吉布斯采样来说，这个分布恰好是$P(\boldsymbol{Q}|\boldsymbol{E} = \boldsymbol{e})$。因此，当$T$很大时，采样收敛于$P(\boldsymbol{Q} = \boldsymbol{q}|\boldsymbol{E} = \boldsymbol{e})$。若贝叶斯网中存在极端概率0或1，则不能保证马尔可夫链存在平稳分布，此时吉布斯采样会给出错误的估计。</p>
<h2 id="6-EM算法"><a href="#6-EM算法" class="headerlink" title="6. EM算法"></a>6. EM算法</h2><p>在前面的讨论中，我们一直假设训练样本所有属性变量的值都已被观测到，但是在现实应用中往往会遇到不完整的训练样本，例如西瓜的根蒂已经脱落，无法判断其属性值。在这种情况下，我们使用EM算法（期望最大化算法）对模型进行参数估计。</p>
<p>参考<a href="http://zhoutao822.coding.me/2018/11/16/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB-HMM/"><code>EM算法及其在学习HMM参数中的应用</code></a></p>
]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Theory</tag>
        <tag>Bayes</tag>
        <tag>Gibbs Sampling</tag>
      </tags>
  </entry>
  <entry>
    <title>支持向量机</title>
    <url>/archives/280b588e.html</url>
    <content><![CDATA[<p><strong>Super!!!!</strong></p>
<p>参考：</p>
<blockquote>
<p>西瓜书第6章 支持向量机</p>
</blockquote>
<h2 id="1-间隔与支持向量"><a href="#1-间隔与支持向量" class="headerlink" title="1. 间隔与支持向量"></a>1. 间隔与支持向量</h2><p>给定训练样本集$D = { (\boldsymbol{x}_1, y_1), (\boldsymbol{x}_2, y_2),…,(\boldsymbol{x}_m, y_m) }, y_i \in { -1, +1 }$，显然这是一个二分类问题，支持向量机的设想是在训练集$D$的样本空间中找到一个划分超平面，将不同类别的样本分开。显然，在空间中这样的划分超平面有无穷多，我们需要寻找到最合适的那一个。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/svm0.png" alt="svm0.png"></p>
<p>从直觉上我们直到，“正中间”的划分超平面应该会是很合适的，因为处于正中间的划分超平面距离两种分类的样本的距离是最远的，因此用作预测时鲁棒性很好，泛化能力强。如何定义这样的超平面呢？</p>
<a id="more"></a>
<p>在样本空间中，划分超平面可以定义为</p>
<script type="math/tex; mode=display">
\boldsymbol{w}^T\boldsymbol{x} + b=0</script><p>其中$\boldsymbol{w}=(w_1;w_2;…;w_d)$为法向量，决定了超平面的方向；$b$为位移项，决定超平面与原点之间的距离。那么样本空间中任意点$\boldsymbol{x}$到超平面$(\boldsymbol{w},b)$的距离为</p>
<script type="math/tex; mode=display">
r = \frac{|\boldsymbol{w}^T\boldsymbol{x}+b|}{||\boldsymbol{w}||}</script><p>假设超平面$(\boldsymbol{w}, b)$能将训练样本正确分类，即对于$(\boldsymbol{x}_i, y_i) \in D$，若$y_i = +1$，则有$\boldsymbol{w}^T\boldsymbol{x}_i +b &gt; 0$；若$y_i = -1$，则有$\boldsymbol{w}^T\boldsymbol{x}_i +b &lt; 0$。令</p>
<script type="math/tex; mode=display">
\left\{\begin{matrix}
\boldsymbol{w}^T\boldsymbol{x}_i + b \geqslant +1, \quad y_i = +1 \\ 
\boldsymbol{w}^T\boldsymbol{x}_i + b \leqslant -1, \quad y_i = -1
\end{matrix}\right.</script><p>这里有两个问题：</p>
<ol>
<li>为什么不等式可以映射到$\pm 1$，而且为什么不是其他数字；</li>
<li>为什么划分超平面必须是“正中间”，而不能对一种类别有偏好，即两个不等式右边的数字绝对值不等。</li>
</ol>
<ul>
<li>第一个问题的回答，由于左右两边可以同时缩放，因此可以缩放到为$\pm 1$的条件，这是为了后面计算更加方便；</li>
<li>均等分割也是为了后面公式计算更加方便，至于偏好，我想应该有其它方法基于SVM进行了拓展实现呃不均等分割。</li>
</ul>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/svm1.jpg" alt="svm1.jpg"></p>
<p>如图所示，距离超平面最近的几个训练样本可以使等号成立，它们被称为支持向量，两个异类支持向量到超平面的距离之和为</p>
<script type="math/tex; mode=display">
\gamma = \frac{2}{||\boldsymbol{w}||}</script><p>$\gamma$被称为间隔，双竖线表示$\boldsymbol{w}$的各成分的平方和再开方，若里面是两个向量，物理意义表示两个向量的欧拉距离。</p>
<p>我们的目标是找到最大间隔，即</p>
<script type="math/tex; mode=display">
\underset{\boldsymbol{w}, b}{\max} \frac{2}{||\boldsymbol{w}||}
\\
s.t. \quad y_i(\boldsymbol{w}^T\boldsymbol{x}_i+b) \geqslant 1, \quad i = 1,2,...,m</script><p>最大化$||\boldsymbol{w}||^{-1}$等效于最小化$||\boldsymbol{w}||^2$，加平方是为了抵消开方，简化后面的计算，于是可以重写为</p>
<script type="math/tex; mode=display">
\underset{\boldsymbol{w},b}{\min} \frac{1}{2} ||\boldsymbol{w}||^2
\\
s.t. \quad y_i(\boldsymbol{w}^T\boldsymbol{x}_i+b) \geqslant 1, \quad i = 1,2,...,m</script><p>这就是支持向量机（SVM）的基本型。</p>
<h2 id="2-对偶问题"><a href="#2-对偶问题" class="headerlink" title="2. 对偶问题"></a>2. 对偶问题</h2><p>我们希望求解上式得到最大间隔划分超平面所对应的模型</p>
<script type="math/tex; mode=display">
f(\boldsymbol{x}) = \boldsymbol{w}^T\boldsymbol{x} + b</script><p>这个问题可以使用拉格朗日乘子法求解，首先对约束条件添加拉格朗日乘子$\alpha_i \geqslant 0$</p>
<script type="math/tex; mode=display">
L(\boldsymbol{w}, b, \boldsymbol{\alpha}) = \frac{1}{2}||\boldsymbol{w}||^2 + \sum^m_{i=1} \alpha(1-y_i(\boldsymbol{w}^T\boldsymbol{x}_i+b))</script><p>其中$\boldsymbol{\alpha} = (\alpha_1;\alpha_2;…;\alpha_m)$，令$L(\boldsymbol{w},b,\boldsymbol{\alpha})$对$\boldsymbol{w}$和$b$的偏导数为0可得</p>
<script type="math/tex; mode=display">
\boldsymbol{w} = \sum^m_{i=1} \alpha_iy_i\boldsymbol{x}_i
\\
0=\sum^m_{i=1}\alpha_iy_i</script><p>注意$||\boldsymbol{w}||^2 = \boldsymbol{w}^T\boldsymbol{w}$。</p>
<p>将上式代入到$L$中消去$\boldsymbol{w}$和$b$，我们就得到基本型的对偶问题</p>
<script type="math/tex; mode=display">
\underset{\boldsymbol{\alpha}}{\max} \sum^m_{i=1}\alpha_i - \frac{1}{2} \sum^m_{i=1}\sum^m_{j=1}\alpha_i\alpha_jy_iy_j\boldsymbol{x}_i^T\boldsymbol{x}_j
\\
s.t. \quad \sum^m_{i=1}\alpha_iy_i = 0,
\\
\alpha_i \geqslant 0, \quad i = 1,2,...,m</script><p>对偶问题怎么得到的，我们可以看作对于$L$有三个参数$(\boldsymbol{w},b,\boldsymbol{\alpha})$，我们通过拉格朗日法求解出其中两个参数的表示形式$(\boldsymbol{w},b)$，那么$L$就只与$\boldsymbol{\alpha}$相关，与$\boldsymbol{\alpha}$相关的部分是$\sum^m_{i=1} \alpha(1-y_i(\boldsymbol{w}^T\boldsymbol{x}_i+b))$，而由于约束条件可知$1-y_i(\boldsymbol{w}^T\boldsymbol{x}_i+b) \leqslant 0$，所以系数$\alpha_i$越大，$L$越小，所以我们就得到了对偶问题。</p>
<p>如果我们求解出$\boldsymbol{\alpha}$后，再解出$(\boldsymbol{w},b)$，我们的模型就可以确定了</p>
<script type="math/tex; mode=display">
f(\boldsymbol{x}) = \boldsymbol{w}^T\boldsymbol{x} + b
\\
= \sum^m_{i=1} \alpha_iy_i\boldsymbol{x}_i^T\boldsymbol{x} +b</script><hr>
<p>下面我们研究如何求解出$\boldsymbol{\alpha}$，每一个拉格朗日乘子$\alpha_i$对应一个样本$(\boldsymbol{x}_i, y_i)$。由于基本型的约束条件，所以求解目标满足KKT条件</p>
<script type="math/tex; mode=display">
\left\{\begin{matrix}
\alpha_i \geqslant 0 \\ 
y_if(\boldsymbol{x}_i)-1 \geqslant 0 \\ 
\alpha_i(y_if(\boldsymbol{x}_i)-1) = 0
\end{matrix}\right.</script><p>对KKT的简单认知为：不等式约束条件与拉格朗日乘子的乘积等于0，且这个条件决定了训练样本的分布位置，若$\alpha_i &gt; 0$，则必有$y_if(\boldsymbol{x}_i)=1$，这样的点是支持向量；若$\alpha_i = 0$，则该样本不会在模型表达式求和中出现，该点的位置属于正常分类，但是不在间隔边界上。</p>
<p><strong>SVM性质：训练完成后，大部分的训练样本都不需要保留，最终模型仅与支持向量有关。</strong></p>
<p>基于上述约束条件，为了求解，使用SMO算法，其基本思路是先固定$\alpha<em>i$之外的所有参数，然后求$\alpha_i$上的极值，由于存在约束条件$\sum^m</em>{i=1}\alpha_iy_i = 0$，一个参数可以由其他固定的参数导出，所以需要选择两个变量，固定其他的参数。</p>
<p>于是，SMO每次选择两个变量$\alpha_i$和$\alpha_j$，并固定其他参数。在参数初始化后，不断执行如下两个步骤直至收敛：</p>
<ul>
<li>选取一对需要更新的变量$\alpha_i$和$\alpha_j$；</li>
<li>固定$\alpha_i$和$\alpha_j$以外的参数，求解$\max \alpha_i + \alpha_j - \lambda \alpha_i \alpha_j$的方程获得更新后的$\alpha_i$和$\alpha_j$（这里忽略掉其他常数）。</li>
</ul>
<p>很容易发现，在参数更新过程中$\max$目标函数会越来越大，而且倘若选取的两个参数$(\alpha_i, \alpha_j)$中只要有一个不满足KKT条件，那么目标函数增幅会更大，而且KKT条件违背程度越大，增幅越大。于是我们可以考虑先选取违背KKT条件的参数$\alpha$进行更新，具体实现是选取两变量对应的样本之间的间隔最大。</p>
<p>我们选取$(\alpha_i, \alpha_j)$，约束条件重写为</p>
<script type="math/tex; mode=display">
\alpha_iy_i + \alpha_jy_j = c, \quad \alpha_i \geqslant 0, \alpha_j \geqslant 0</script><p>其中</p>
<script type="math/tex; mode=display">
c = -\sum_{k \neq i,j}\alpha_ky_k</script><p>而且$\max$可以化简为$\alpha_i + \alpha_j - \lambda \alpha_i \alpha_j$，这就是一个简单的二次规划问题，直接公式求解。</p>
<p>如何确定偏移项$b$，因为对任意支持向量$(\boldsymbol{x}_s, y_s)$有$y_sf(\boldsymbol{x}_s)=1$，即</p>
<script type="math/tex; mode=display">
y_s(\sum_{i\in S}\alpha_iy_i\boldsymbol{x}^T_i\boldsymbol{x}_s +b) =1</script><p>$S$为所有支持向量下标集，理论上$(\boldsymbol{x}_s, y_s)$可以取任意支持向量来求解$b$，这样会得到很多组$b$，实际上采用均值实现更鲁棒</p>
<script type="math/tex; mode=display">
b= \frac{1}{|S|}\sum_{s\in S}(\frac{1}{y_s} - \sum_{i\in S}\alpha_iy_i\boldsymbol{x}^T_i\boldsymbol{x}_s)</script><h2 id="3-核函数"><a href="#3-核函数" class="headerlink" title="3. 核函数"></a>3. 核函数</h2><!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/svm2.jpg" alt="svm2.jpg"></p>
<p>上面在求解SVM时，我们默认数据样本在其样本空间是可分的，但是实际上由于维度过高，我们并不清楚数据是否存在这样的超平面，这时，我们可以将数据从原始样本空间映射到一个更高维的特征空间（再生核希尔伯特空间），使得样本在这个特征空间内可分。研究表明，只要原始空间维度有限，那么必定存在一个更高维的空间是样本可分。</p>
<p>令$\phi(\boldsymbol{x})$表示映射后的特征向量，于是划分超平面模型为</p>
<script type="math/tex; mode=display">
f(\boldsymbol{x}) = \boldsymbol{w}^T \phi(\boldsymbol{x}) + b</script><p>同理修改约束条件和SVM基本型，那么对偶问题变成了</p>
<script type="math/tex; mode=display">
\underset{\boldsymbol{\alpha}}{\max} \sum^m_{i=1}\alpha_i - \frac{1}{2} \sum^m_{i=1}\sum^m_{j=1}\alpha_i\alpha_jy_iy_j\phi(\boldsymbol{x}_i)^T\phi(\boldsymbol{x}_j)
\\
s.t. \quad \sum^m_{i=1}\alpha_iy_i = 0,
\\
\alpha_i \geqslant 0, \quad i = 1,2,...,m</script><p>但是由于直接计算高维$\phi(\boldsymbol{x}_i)^T\phi(\boldsymbol{x}_j)$，通常计算量大而且很困难，为了解决这个问题，设想一个函数：</p>
<script type="math/tex; mode=display">
\kappa(\boldsymbol{x}_i,\boldsymbol{x}_j) = \left \langle \phi(\boldsymbol{x}_i), \phi(\boldsymbol{x}_j) \right \rangle = \phi(\boldsymbol{x}_i)^T\phi(\boldsymbol{x}_j)</script><p>也就是说我们使用原始空间的函数计算特征空间的内积，感觉很奇妙。重写上面各种式子，得到模型</p>
<script type="math/tex; mode=display">
f(\boldsymbol{x}) = \boldsymbol{w}^T \phi(\boldsymbol{x}) + b
\\
= \sum^m_{i=1}\alpha_iy_i\phi(\boldsymbol{x}_i)^T\phi(\boldsymbol{x}) + b
\\
= \sum^m_{i=1}\alpha_iy_i\kappa(\boldsymbol{x},\boldsymbol{x}_i) + b</script><p>这里$\kappa(\cdot, \cdot)$就是核函数。显然，若已知映射$\phi(\cdot)$的具体形式，那么可以写出核函数$\kappa(\cdot, \cdot)$，但是实际问题中我们很难知道高维映射$\phi(\cdot)$的具体形式，如何寻找合适的核函数呢？有定理：</p>
<p>$\kappa(\cdot, \cdot)$是定义在$\chi \times \chi$（$\chi$为输入空间）上的对称函数，则$\kappa$是核函数，且对于任意数据$D={ \boldsymbol{x}_1, \boldsymbol{x}_2,…,\boldsymbol{x}_m }$，核矩阵$\boldsymbol{K}$总是半正定：</p>
<script type="math/tex; mode=display">
\boldsymbol{K}_{i,j} = \kappa(\boldsymbol{x}_i, \boldsymbol{x}_j)</script><p><em>半正定：设$A$是$n$阶方阵，如果对任何非零向量$X$，都有$X^TAX \geqslant 0$，其中$X^T$表示$X$的转置，就称$A$为半正定矩阵。</em></p>
<p><strong>所以只要一个对称函数所对应的核矩阵半正定，它就能作为核函数使用。</strong></p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/svm3.png" alt="svm3.png"></p>
<p>此外，函数组合也可以得到，若$\kappa_1,\kappa_2$为核函数，例如：</p>
<ul>
<li>对于任意正数$\gamma_1, \gamma_2$，线性组合：<script type="math/tex; mode=display">
\gamma_1\kappa_1 + \gamma_2\kappa_2</script></li>
<li>核函数直积：<script type="math/tex; mode=display">
\kappa_1(\boldsymbol{x}, \boldsymbol{z})\kappa_2(\boldsymbol{x}, \boldsymbol{z})</script></li>
<li>任意函数$g(\boldsymbol{x})$：<script type="math/tex; mode=display">
g(\boldsymbol{x})\kappa_1(\boldsymbol{x}, \boldsymbol{z})g(\boldsymbol{z})</script>都是核函数。</li>
</ul>
<h2 id="4-软间隔与正则化"><a href="#4-软间隔与正则化" class="headerlink" title="4. 软间隔与正则化"></a>4. 软间隔与正则化</h2><p>在上面的讨论中，我们始终假设划分超平面是存在的，实际上往往很难确定一个核函数使得样本线性可分，在此基础上我们可以适当放宽间隔的条件，允许一定的样本出错，为此，引入软间隔概念。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/svm4.png" alt="svm4.png"></p>
<p>因此某些样本不满足约束</p>
<script type="math/tex; mode=display">
y_i(\boldsymbol{w}^T\boldsymbol{x}_i + b) \geqslant 1</script><p>那么优化目标修正为</p>
<script type="math/tex; mode=display">
\underset{\boldsymbol{w},b}{\min} \frac{1}{2} ||\boldsymbol{w}||^2 + C \sum^m_{i=1}l_{0/1}(y_i(\boldsymbol{w}^T\boldsymbol{x}_i + b) -1)</script><p>其中$C &gt; 0$是一个常数，通过$C$的取值大小控制对错误样本的容忍度，$C$越大，对错误样本的容忍度越小，对约束条件越严格，当$C$取有限值，允许一些样本不满足约束。$l_{0/1}$是“0/1损失函数”</p>
<script type="math/tex; mode=display">
l_{0/1}(z) = \left\{\begin{matrix}
1, \quad if \quad z < 0  \\ 
0, \quad otherwise
\end{matrix}\right.</script><p>然而$l<em>{0/1}$非凸、非连续，数学性质不太好，实际中常用其他函数替代，称为替代损失函数，它们通常是凸的连续函数且是$l</em>{0/1}$的上界。三种常用的替代损失函数：</p>
<ol>
<li>hinge损失：$l_{hinge}(z) = max(0, 1-z)$</li>
<li>指数损失：$l_{exp}(z) = exp(-z)$</li>
<li>对率损失：$l_{log}(z) = log(1+exp(-z))$</li>
</ol>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/svm5.png" alt="svm5.png"></p>
<p>若要替换，则$z = y_i(\boldsymbol{w}^T\boldsymbol{x}_i+b)$。若引入松弛变量$\xi_i \geqslant 0$，则优化目标重写为</p>
<script type="math/tex; mode=display">
\underset{\boldsymbol{w},b,\xi_i}{\min} \frac{1}{2}||\boldsymbol{w}||^2 + C\sum^m_{i=1}\xi_i
\\
s.t. \quad y_i(\boldsymbol{w}^T\boldsymbol{x}_i + b) \geqslant 1 - \xi_i
\\
\xi_i \geqslant 0, \quad i = 1,2,...,m</script><p>这就是常用的软间隔支持向量机。</p>
<p>显然，每一个样本对应一个松弛变量，用以表征该样本不满足约束的程度。于是同样拉格朗日法得到</p>
<script type="math/tex; mode=display">
L(\boldsymbol{w},b,\boldsymbol{\alpha},\boldsymbol{\xi}, \boldsymbol{\mu}) = \frac{1}{2}||\boldsymbol{w}||^2 + C\sum^m_{i=1}\xi_i 
\\
+ \sum^m_{i=1}\alpha_i(1-\xi_i -y_i(\boldsymbol{w}^T\boldsymbol{x}_i + b)) - \sum^m_{i=1}\mu_i\xi_i</script><p>其中拉格朗日乘子$\alpha_i \geqslant 0, \mu_i \geqslant 0$。</p>
<p>令$L(\boldsymbol{w},b,\boldsymbol{\alpha},\boldsymbol{\xi}, \boldsymbol{\mu})$对$(\boldsymbol{w}, b,\xi_i)$偏导数为0可得</p>
<script type="math/tex; mode=display">
\boldsymbol{w} = \sum^m_{i=1}\alpha_iy_i\boldsymbol{x}_i
\\
0 = \sum^m_{i=1}\alpha_iy_i
\\
C = \alpha_i + \mu_i</script><p>同样得到对偶问题</p>
<script type="math/tex; mode=display">
\underset{\boldsymbol{\alpha}}{\max} \sum^m_{i=1}\alpha_i - \frac{1}{2} \sum^m_{i=1}\sum^m_{j=1}\alpha_i\alpha_jy_iy_j\boldsymbol{x}_i^T\boldsymbol{x}_j
\\
s.t. \quad \sum^m_{i=1}\alpha_iy_i = 0,
\\
0 \leqslant \alpha_i \leqslant C, \quad i = 1,2,...,m</script><p>显然，这与最开始的对偶问题唯一的区别是$\alpha_i$的范围。</p>
<p>类似的KKT条件为</p>
<script type="math/tex; mode=display">
\left\{\begin{matrix}
\alpha_i \geqslant 0 , \quad \mu_i \geqslant 0\\ 
y_if(\boldsymbol{x}_i)-1+ \xi_i \geqslant 0 \\ 
\alpha_i(y_if(\boldsymbol{x}_i)-1+ \xi_i) = 0 \\
\xi_i \geqslant 0, \quad \mu_i\xi_i = 0
\end{matrix}\right.</script><p>对任意训练样本$(\boldsymbol{x}_i, y_i)$，总有$\alpha_i = 0$或$y_if(\boldsymbol{x}_i) = 1 - \xi_i$，而且：</p>
<ul>
<li>若$\alpha_i=0$，则该样本不会对$f(\boldsymbol{x})$有任何影响；</li>
<li>若$\alpha_i &gt; 0$，则必有$y_if(\boldsymbol{x}_i) = 1 - \xi_i$，即支持向量；</li>
<li>若$\alpha_i &lt; C$，则$\mu_i &gt; 0$，进而有$\xi_i=0$，即该样本恰在最大间隔边界上；</li>
<li>若$\alpha_i = C$，则有$\mu_i = 0$，此时若$\xi_i \leqslant 1$则该样本落在最大间隔内部，若$\xi_i &gt; 1$则样本被错误分类。</li>
</ul>
<p>由此看出，软间隔支持向量机的最终模型仅与支持向量有关，即通过采用hinge损失函数仍保持了稀疏性。</p>
<p>使用对率损失函数$l_{log}$替换，几乎得到了对率回归模型。</p>
<p>将优化目标写为一般形式</p>
<script type="math/tex; mode=display">
\underset{f}{\min} \Omega(f) + C \sum^m_{i=1}l(f(\boldsymbol{x}_i), y_i)</script><p>其中$\Omega(f)$称为结构风险，用于描述模型$f$的某些性质；第二项$\sum^m_{i=1}l(f(\boldsymbol{x}_i), y_i)$称为经验风险，用于描述模型与训练数据的契合程度；$C$对二者进行折中。从正则化角度看，$\Omega(f)$称为正则化项，$C$称为正则化常数。也就意味着可以使用$L_p$范数进行调整，$L_2$范数倾向于$\boldsymbol{w}$的分量取值尽量均衡，即非零分量个数尽量稠密，而$L_0$或$L_1$范数则倾向与$\boldsymbol{w}$的分量尽量稀疏，即非零分量个数尽量少。</p>
<h2 id="5-支持向量回归"><a href="#5-支持向量回归" class="headerlink" title="5. 支持向量回归"></a>5. 支持向量回归</h2><p>支持向量机用于回归问题，希望学得的模型$f(\boldsymbol{x})$与$y$尽可能接近。</p>
<p>传统回归模型直接基于模型输出$f(\boldsymbol{x})$与真实输出$y$之间的差别来计算损失，当且仅当两者完全相同时，损失才为0.与此不同，支持向量回归SVR允许我们容忍$f(\boldsymbol{x})$与$y$之间最多有$\epsilon$的偏差，仅当两者之间的差别绝对值大于$\epsilon$时才计算损失。这相当于以$f(\boldsymbol{x})$为中心构建了一个宽度为$2\epsilon$的间隔带，只有落入间隔带的样本被认为是预测正确的。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/svr0.png" alt="svr0.png"></p>
<p>于是SVR问题可形式化为</p>
<script type="math/tex; mode=display">
\underset{\boldsymbol{w},b}{\min} \frac{1}{2}||\boldsymbol{w}||^2 + C\sum^m_{i=1}l_{\epsilon}(f(\boldsymbol{x}_i)-y_i)</script><p>其中$C$为正则化常数，$l_\epsilon$为$\epsilon$-不敏感损失函数</p>
<script type="math/tex; mode=display">
l_\epsilon(z) = \left\{\begin{matrix}
0, \quad if |z| \leqslant \epsilon \\ 
|z| -\epsilon , \quad otherwise
\end{matrix}\right.</script><!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/svr1.png" alt="svr1.png"></p>
<p>引入松弛变量$\xi_i$和$\hat{\xi}_i$，重写上式为</p>
<script type="math/tex; mode=display">
\underset{\boldsymbol{w},b,\xi_i, \hat{\xi}_i}{\min} \frac{1}{2}||\boldsymbol{w}||^2 + C\sum^m_{i=1}(\xi_i + \hat{\xi}_i)
\\
s.t. \quad f(\boldsymbol{x}_i) - y_i \leqslant \epsilon + \xi_i
\\
y_i - f(\boldsymbol{x}_i) \leqslant \epsilon + \hat{\xi}_i
\\
\xi_i \geqslant 0, \hat{\xi}_i \geqslant 0, \quad i = 1,2,...,m</script><p>同理引入拉格朗日乘子$(\mu_i, \hat{\mu}_i, \alpha_i, \hat{\alpha}_i) \geqslant 0$</p>
<script type="math/tex; mode=display">
L(\boldsymbol{w},b,\boldsymbol{\alpha}, \hat{\boldsymbol{\alpha}}, \boldsymbol{\xi}, \hat{\boldsymbol{\xi}},\boldsymbol{\mu}, \hat{\boldsymbol{\mu}})
\\
= \frac{1}{2}||\boldsymbol{w}||^2 + C\sum^m_{i=1}(\xi_i+\hat{\xi}_i) - \sum^m_{i=1}\mu_i\xi_i - \sum^m_{i=1}\hat{\mu}_i\hat{\xi}_i
\\
+ \sum^m_{i=1}\alpha_i(f(\boldsymbol{x}_i) -y_i -\epsilon -\xi_i) + \sum^m_{i=1}\hat{\alpha}_i(y_i - f(\boldsymbol{x}_i)-\epsilon -\hat{\xi}_i)</script><p>令$L(\boldsymbol{w},b,\boldsymbol{\alpha}, \hat{\boldsymbol{\alpha}}, \boldsymbol{\xi}, \hat{\boldsymbol{\xi}},\boldsymbol{\mu}, \hat{\boldsymbol{\mu}})$对$\boldsymbol{w},b,\xi_i,\hat{\xi}_i$偏导数为0</p>
<script type="math/tex; mode=display">
\boldsymbol{w} = \sum^m_{i=1}(\hat{\alpha}_i - \alpha_i)\boldsymbol{x}_i
\\
0 = \sum^m_{i=1}(\hat{\alpha}_i - \alpha_i)
\\
C = \alpha_i + \mu_i
\\
C = \hat{\alpha}_i + \hat{\alpha}_i</script><p>代入，得到SVR对偶问题</p>
<script type="math/tex; mode=display">
\underset{\boldsymbol{\alpha}, \hat{\boldsymbol{\alpha}}}{\max} \sum^m_{i=1}y_i(\hat{\alpha}_i - \alpha_i) - \epsilon(\hat{\alpha}_i + \alpha_i)
\\
- \frac{1}{2}\sum^m_{i=1}\sum^m_{j=1}(\hat{\alpha}_i - \alpha_i)(\hat{\alpha}_j - \alpha_j)\boldsymbol{x}_i^T\boldsymbol{x}_j
\\
s.t. \quad \sum^m_{i=1}(\hat{\alpha}_i - \alpha_i) = 0
\\
0 \leqslant \alpha_i, \hat{\alpha}_i \leqslant C</script><p>上述过程需满足KKT条件，即</p>
<script type="math/tex; mode=display">
\left\{\begin{matrix}
\alpha_i(f(\boldsymbol{x}_i)-y_i-\epsilon-\xi_i) = 0 \\ 
\hat{\alpha}_i(y_i - f(\boldsymbol{x}_i)-\epsilon-\xi_i) = 0 \\ 
\alpha_i\hat{\alpha}_i = 0, \xi_i\hat{\xi}_i = 0\\ 
(C - \alpha_i) \xi_i = 0,(C-\hat{\alpha}_i)\hat{\xi}_i = 0
\end{matrix}\right.</script><p>由上式可知，当且仅当样本$(\boldsymbol{x}_i,y_i)$不落入$\epsilon$-间隔带中，相应的$\alpha_i$和$\hat{\alpha}_i$才能取非零值。此外约束$f(\boldsymbol{x}_i)-y_i-\epsilon-\xi_i = 0$和$y_i - f(\boldsymbol{x}_i)-\epsilon-\xi_i = 0$不能同时成立，因此$\alpha_i$和$\hat{\alpha}_i$中至少有一个为0。</p>
<p>同理，SVR的解形如</p>
<script type="math/tex; mode=display">
f(\boldsymbol{x}) = \sum^m_{i=1}(\hat{\alpha}_i - \alpha_i)\boldsymbol{x}_i^T\boldsymbol{x} + b</script><p>其中使$(\hat{\alpha}_i - \alpha_i) \neq 0$的样本即为SVR的支持向量，它们必定落在间隔带之外。显然，也是稀疏解。</p>
<p>由KKT条件可知，对每个样本$(\boldsymbol{x}_i,y_i)$都有$(C - \alpha_i) \xi_i = 0$且$\alpha_i(f(\boldsymbol{x}_i)-y_i-\epsilon-\xi_i) = 0$。于是，在得到$\alpha_i$后，若$0 &lt; \alpha_i &lt; C$，则必有$\xi_i = 0$，进而有</p>
<script type="math/tex; mode=display">
b = y_i + \epsilon - \sum^m_{j=1}(\hat{\alpha}_j - \alpha_j)\boldsymbol{x}_j^T\boldsymbol{x}_i</script><p>理论上对于任意满足$0&lt;\alpha_i&lt;C$的样本都可以求得$b$。也就是多组解，实践中通常选取多个或所有满足的样本求解平均值，参考SVM。</p>
<p>若考虑特征映射，则</p>
<script type="math/tex; mode=display">
\boldsymbol{w} = \sum^m_{i=1}(\hat{\alpha}_i - \alpha_i)\phi(\boldsymbol{x}_i)</script><p>同理，带核函数的SVR表示形式改变为</p>
<script type="math/tex; mode=display">
f(\boldsymbol{x}) = \sum^m_{i=1}(\hat{\alpha}_i - \alpha_i)\kappa(\boldsymbol{x}, \boldsymbol{x}_i) + b</script><h2 id="6-核方法"><a href="#6-核方法" class="headerlink" title="6. 核方法"></a>6. 核方法</h2><p>观察SVM和SVR的模型表示形式（考虑核函数），若不考虑偏移项$b$，最终模型总能表达成核函数的线性组合。一个更一般的结论称为表示定理：</p>
<blockquote>
<p><strong>表示定理</strong> 令$\mathbb{H}$为核函数$\kappa$对应的再生核希尔伯特空间，$||h||_\mathbb{H}$表示$\mathbb{H}$空间中关于$h$的范数，对于任意单调递增函数$\Omega:[0, \infty] \rightarrow \mathbb{R}$和任意非负损失函数$l:\mathbb{R}^m \rightarrow [0, \infty]$，优化问题</p>
</blockquote>
<script type="math/tex; mode=display">
\underset{h\in \mathbb{H}}{\min} F(h) = \Omega(||h||_\mathbb{H}) + l(h(\boldsymbol{x}_1), h(\boldsymbol{x}_2),...,h(\boldsymbol{x}_m))</script><p>的解总可写为</p>
<script type="math/tex; mode=display">
h^*(\boldsymbol{x}) = \sum^m_{i=1}\alpha_i \kappa(\boldsymbol{x}, \boldsymbol{x}_i)</script><p>表示定理对损失函数没有限制，对正则化项$\Omega$仅要求单调递增，甚至不要求$\Omega$为凸函数，这意味着对于一般的损失函数和正则化项，优化问题的最优解都可以表示为核函数的线性组合。</p>
<hr>
<p>下面介绍通过引入核函数拓展<a href="http://zhoutao822.coding.me/2018/11/07/%E7%BA%BF%E6%80%A7%E6%A8%A1%E5%9E%8B/">线性判别分析LDA</a>为非线性学习器，从而得到核线性判别分析KLDA。</p>
<p>先假设有映射$\phi:\chi \rightarrow \mathbb{F}$将样本映射到一个特征空间，然后在$\mathbb{F}$中执行线性判别分析，以求得</p>
<script type="math/tex; mode=display">
h(\boldsymbol{x}) = \boldsymbol{w}^T\phi(\boldsymbol{x})</script><p>类似LDA的类内散度矩阵$\boldsymbol{S}^\phi_b$和类间散度矩阵$\boldsymbol{S}^\phi_w$，KLDA的学习目标是</p>
<script type="math/tex; mode=display">
\underset{\boldsymbol{w}}{\max} J(\boldsymbol{w}) = \frac{\boldsymbol{w}^T\boldsymbol{S}^{\phi}_b\boldsymbol{w}}{\boldsymbol{w}^T\boldsymbol{S}^{\phi}_w\boldsymbol{w}}</script><p>令$X_i$表示第$i \in { 0,1 }$类样本的集合，其样本数为$m_i$，样本总数为$m = m_0+m_1$。第$i$类样本在特征空间$\mathbb{F}$中的均值为</p>
<script type="math/tex; mode=display">
\boldsymbol{\mu}^\phi_i = \frac{1}{m_i}\sum_{\boldsymbol{x}\in X_i}\phi(\boldsymbol{x})</script><p>两个散度矩阵分别为</p>
<script type="math/tex; mode=display">
\boldsymbol{S}_b^\phi = (\boldsymbol{\mu}^\phi_1 - \boldsymbol{\mu}^\phi_0)(\boldsymbol{\mu}^\phi_1 - \boldsymbol{\mu}^\phi_0)^T
\\
\boldsymbol{S}_w^\phi = \sum^1_{i=0}\sum_{\boldsymbol{x}\in X_i}(\phi(\boldsymbol{x})-\boldsymbol{\mu}^\phi_i)(\phi(\boldsymbol{x})-\boldsymbol{\mu}^\phi_i)^T</script><p>同理使用核函数$\kappa(\boldsymbol{x}, \boldsymbol{x}_i) = \phi(\boldsymbol{x}_i)^T\phi(\boldsymbol{x})$隐式表达映射$\phi$和特征空间$\mathbb{F}$。把$J(\boldsymbol{w})$作为损失函数$l$，再令$\Omega \equiv 0$，由表示定理，函数$h(\boldsymbol{x})$可写为</p>
<script type="math/tex; mode=display">
h(\boldsymbol{x}) = \sum^m_{i=1}\alpha_i \kappa(\boldsymbol{x}, \boldsymbol{x}_i)
\\
\boldsymbol{w} = \sum^m_{i=1}\alpha_i\phi(\boldsymbol{x}_i)</script><p>令$\boldsymbol{K} \in \mathbb{R}^{m \times m}$为核函数$\kappa$对应的核矩阵，$(\boldsymbol{K})_{ij} = \kappa(\boldsymbol{x}_i, \boldsymbol{x}_j)$。令$\boldsymbol{1}_i \in { 1,0 }^{m \times 1}$为第$i$类样本的指示向量，即$\boldsymbol{1}_i$的第$j$个分量为1当且仅当$\boldsymbol{x}_j \in X_i$，否则第$j$个分量为0。再令</p>
<script type="math/tex; mode=display">
\boldsymbol{\hat{\mu}}_0 = \frac{1}{m_0}\boldsymbol{K}\boldsymbol{1}_0
\\
\boldsymbol{\hat{\mu}}_1 = \frac{1}{m_1}\boldsymbol{K}\boldsymbol{1}_1
\\
\boldsymbol{M} = (\boldsymbol{\hat{\mu}}_0 - \boldsymbol{\hat{\mu}}_1)(\boldsymbol{\hat{\mu}}_0 - \boldsymbol{\hat{\mu}}_1)^T
\\
\boldsymbol{N} = \boldsymbol{K}\boldsymbol{K}^T - \sum^1_{i=0}m_i\boldsymbol{\hat{\mu}}_i\boldsymbol{\hat{\mu}}_i^T</script><p>于是$\max$等价为</p>
<script type="math/tex; mode=display">
\underset{\boldsymbol{\alpha}}{\max} J(\boldsymbol{\alpha}) = \frac{\boldsymbol{\alpha}^T\boldsymbol{M}\boldsymbol{\alpha}}{\boldsymbol{\alpha}^T\boldsymbol{N}\boldsymbol{\alpha}}</script><p>根据上式再是同线性判别分析求解方法即可得到$\boldsymbol{\alpha}$，进而得到投影函数$h(\boldsymbol{x})$，具体参考<a href="http://zhoutao822.coding.me/2018/11/07/%E7%BA%BF%E6%80%A7%E6%A8%A1%E5%9E%8B/"><code>线性模型</code></a>。</p>
]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Theory</tag>
        <tag>SVM</tag>
        <tag>SVR</tag>
      </tags>
  </entry>
  <entry>
    <title>神经网络</title>
    <url>/archives/7ca31f7.html</url>
    <content><![CDATA[<p><strong>神经网络可太懒了</strong></p>
<p>参考：</p>
<blockquote>
<p>西瓜书第5章 神经网络</p>
</blockquote>
<h2 id="1-神经元模型"><a href="#1-神经元模型" class="headerlink" title="1. 神经元模型"></a>1. 神经元模型</h2><p>学过一点高中生物知识的我们都知道，对于有机生物来说，都是通过神经来控制躯体或者思维，电信号在神经上传导，并且要经过神经元的控制，只有被激活的神经元才能继续传递电信号。神经网络模型就类似于这种形式，在这个模型中，神经元接收到来自n个其他神经元传递过来的输入信号，这些输入信号通过带权重的连接进行传递，神经元接收到的总输入值将于神经元的阈值进行比较，然后通过激活函数处理以产生神经元的输出。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/mp.png" alt="mp.png"></p>
<p>理想视为激活函数应该是阶跃函数，只有“0/1”状态，但是阶跃函数不连续、不光滑，因此实际常用Sigmoid函数作为激活函数。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/activate.png" alt="activate.png"></p>
<p>把这些神经元按一定层次结构连接起来就得到神经网络。</p>
<a id="more"></a>
<h2 id="2-感知机与多层网络"><a href="#2-感知机与多层网络" class="headerlink" title="2. 感知机与多层网络"></a>2. 感知机与多层网络</h2><p>感知机由两层神经元组成，输入层接收外界信号传递给输出层，输出层是M-P神经元，感知机能容易地实现逻辑与、或、非。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/perceptron.jpg" alt="perceptron.jpg"></p>
<p>一般的，给定训练数据集，权重$w_i(i=1,2,…,n)$以及阈值$\theta$可以通过学习得到。若将$\theta$看作一个固定输入，对训练样本$(\boldsymbol{x}, y)$，若当前感知机的输出为$\hat{y}$，则感知机权重调整：</p>
<script type="math/tex; mode=display">
wi \leftarrow w_i + \Delta w_i
\\
\Delta w_i = \eta(y - \hat{y})x_i</script><p>其中$\eta \in (0, 1)$称为学习率。若预测正确，则感知机不会变化，否则根据错误程度进行权重调整。感知机的求解形式非常类似线性模型中的分类，但是感知机无法实现非线性的问题求解，比如异或。</p>
<p>因此在输入层与输出层之间增加隐含层（至少为1），隐含层和输出层神经元都是拥有激活函数的功能神经元，这样就能对非线性问题进行拟合。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/nn.jpg" alt="nn.jpg"></p>
<h2 id="3-误差逆传播算法BP"><a href="#3-误差逆传播算法BP" class="headerlink" title="3. 误差逆传播算法BP"></a>3. 误差逆传播算法BP</h2><p>给定训练集$D = { (\boldsymbol{x}_1, \boldsymbol{y}_1) , (\boldsymbol{x}_2, \boldsymbol{y}_2),…,(\boldsymbol{x}_m, \boldsymbol{y}_m)}$，$\boldsymbol{x}_i \in \mathbb{R}^d ，\boldsymbol{y}_i \in \mathbb{R}^l$，即输入示例由$d$个属性描述，输出$l$维实值变量。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/bp.png" alt="bp.png"></p>
<p>如图神经网络结构：</p>
<ul>
<li>$d$个输入神经元，$l$个输出神经元，$q$个隐层神经元；</li>
<li>输出层第$j$个神经元的阈值用$\theta_j$表示，隐层第$h$个神经元的阈值用$\gamma_h$表示；</li>
<li>输入层第$i$个神经元与隐层第$h$个神经元之间的连接权为$v<em>{ih}$，隐层第$h$个神经元与输出层第$j$个神经元之间的连接权为$w</em>{hj}$；</li>
<li>隐层第$h$个神经元接收到的输入为$\alpha<em>h = \sum^d</em>{i=1}v<em>{ih}x_i$，输出层第$j$个神经元接收到的输入为$\beta_j = \sum^q</em>{h=1}w_{hj}b_h$，其中$b_h$为隐层第$h$个神经元的输出。假设激活函数均为Sigmoid。</li>
</ul>
<hr>
<p>对训练例$(\boldsymbol{x}_k, \boldsymbol{y}_k)$，假定神经网络的输出为$\hat{\boldsymbol{y}}_k = (\hat{y}^k_1,\hat{y}^k_2,…,\hat{y}^k_l)$，即</p>
<script type="math/tex; mode=display">
\hat{y}^k_j = f(\beta_j-\theta_j)</script><p>则网络在$(\boldsymbol{x}_k, \boldsymbol{y}_k)$上的均方误差MSE为</p>
<script type="math/tex; mode=display">
E_k = \frac{1}{2}\sum^l_{j=1}(\hat{y}^k_j - y^k_j)^2，这里除以2是为了后面求导更简洁</script><p>那么上图中的神经网络一共有$(d + l + 1)q + l$个参数需要确定：</p>
<ul>
<li>输入层到隐层的$d \times q$个权值；</li>
<li>隐层到输出层的$q \times l$个权值；</li>
<li>$q$个隐层神经元的阈值；</li>
<li>$l$个输出层神经元的阈值。</li>
</ul>
<p>同感知机的参数更新方式，对神经网络中的任意参数$v$：</p>
<script type="math/tex; mode=display">
v \leftarrow v + \Delta v</script><hr>
<p>以隐层到输出层的连接权$w_{hj}$为例进行推导。BP算法基于梯度下降策略，以目标的负梯度方向对参数进行调整。对误差$E_k$，给定学习率$\eta$，有</p>
<script type="math/tex; mode=display">
\Delta w_{hj} = -\eta \frac{\partial E_k}{\partial w_{hj}}</script><p>根据链式法则有</p>
<script type="math/tex; mode=display">
\frac{\partial E_k}{\partial w_{hj}} = \frac{\partial E_k}{\partial \hat{y}^k_j} \cdot \frac{\partial \hat{y}^k_j}{\partial \beta_j} \cdot \frac{\partial \beta_j}{\partial w_{hj}}</script><p>根据$\beta_j$的定义，显然有</p>
<script type="math/tex; mode=display">
\frac{\partial \beta_j}{\partial w_{hj}} = b_h</script><p>又因为Sigmoid函数有一个很好的性质：</p>
<script type="math/tex; mode=display">
f'(x) = f(x) (1-f(x))</script><p>于是令</p>
<script type="math/tex; mode=display">
g_j = - \frac{\partial E_k}{\partial \hat{y}^k_j} \cdot \frac{\partial \hat{y}^k_j}{\partial \beta_j}
\\
= -(\hat{y}^k_j - y^k_j)f'(\beta_j - \theta_j)
\\
= \hat{y}^k_j(1- \hat{y}^k_j)(y^k_j - \hat{y}^k_j)</script><p>代入上式，关于$w_{hj}$的更新公式</p>
<script type="math/tex; mode=display">
\Delta w_{hj} = \eta g_j b_h</script><p>类似可得</p>
<script type="math/tex; mode=display">
\Delta \theta_j = - \eta g_j
\\
\Delta v_{ih} = \eta e_h x_i
\\
\Delta \gamma_h = - \eta e_h</script><p>其中</p>
<script type="math/tex; mode=display">
e_h = - \frac{\partial E_k}{\partial b_h} \cdot \frac{\partial b_h}{\partial \alpha_h}
\\
= - \sum^l_{j=1}\frac{\partial E_k}{\partial \beta_j} \cdot \frac{\partial \beta_j}{\partial b_h} f'(\alpha_h - \gamma_h)
\\
= \sum^l_{j=1}w_{hj}g_jf'(\alpha_h - \gamma_h)
\\
= b_h(1 - b_h)\sum^l_{j=1}w_{hj}g_j</script><p>学习率$\eta$控制算法每一轮迭代中的更新步长，若太大则容易振荡，太小则收敛过慢，最终目的是使训练误差达到一个可以接受的较小的值。</p>
<p>对上面的推导来说，我们只考虑了一个样本，BP算法的目标是最小化训练集$D$上的累积误差</p>
<script type="math/tex; mode=display">
E = \frac{1}{m}\sum^m_{k=1}E_k</script><hr>
<p>将上述的参数组成矩阵或向量形式，可以简化运算公式，这里使用了某些其他符号代替图中的标记以及调整了阈值的符号</p>
<p>对每一个样本$(\boldsymbol{x}_k, \boldsymbol{y}_k)，\boldsymbol{x}_k \in \mathbb{R}^d ，\boldsymbol{y}_k \in \mathbb{R}^l$</p>
<p><strong>正向传播</strong></p>
<script type="math/tex; mode=display">
\boldsymbol{Z}_0 = \boldsymbol{x}_k \boldsymbol{V} + \boldsymbol{\gamma} \quad \boldsymbol{V} \in \mathbb{R}^{d \times q}, \boldsymbol{\gamma} \in \mathbb{R}^{1 \times q}
\\
\boldsymbol{A}_0 = f(\boldsymbol{Z}_0) \quad \boldsymbol{A}_0 \in \mathbb{R}^{1 \times q}
\\
\boldsymbol{Z}_1 = \boldsymbol{A}_0 \boldsymbol{W} + \boldsymbol{\theta} \quad \boldsymbol{W} \in \mathbb{R}^{q \times l}, \boldsymbol{\theta} \in \mathbb{R}^{1 \times l}
\\
\boldsymbol{A}_1 = f(\boldsymbol{Z}_1) \quad \boldsymbol{A}_1 \in \mathbb{R}^{1 \times l}</script><p><strong>反向传播</strong></p>
<script type="math/tex; mode=display">
\boldsymbol{g} = \boldsymbol{A}_1 \cdot (1- \boldsymbol{A}_1) \cdot (\boldsymbol{A}_1 - \boldsymbol{Y}) \quad \boldsymbol{Y},\boldsymbol{g} \in \mathbb{R}^{1 \times l}, 这里是点乘
\\
d\boldsymbol{W} = \boldsymbol{A}_0^T\boldsymbol{g}
\\
d\boldsymbol{\theta} = -\boldsymbol{g}
\\
\boldsymbol{e} = \boldsymbol{A}_0 \cdot (\boldsymbol{A}_0 - 1) \cdot (\boldsymbol{g}\boldsymbol{W}^T) \quad \boldsymbol{e} \in \mathbb{R}^{1 \times q}
\\
d\boldsymbol{V} = \boldsymbol{x}_k\boldsymbol{e}
\\
d\boldsymbol{\gamma} = -\boldsymbol{e}</script><p>参数$\boldsymbol{p}$更新方式为</p>
<script type="math/tex; mode=display">
\boldsymbol{p} =  \boldsymbol{p} - d\boldsymbol{p}</script><hr>
<ul>
<li>若每次参数更新都针对单个样例，则称为标准BP算法，缺点是参数更新频繁，需要计算量大（反向传播）；</li>
<li>若在读取整个训练集$D$一遍后才对参数进行更新，则称为累计BP算法，缺点是在一段时间后，梯度下降会非常缓慢，同样也会增大计算量（迭代次数增加）；</li>
<li>一般实际中采用的方式是将数据集$D$划分为多个batch，一个batch只包含固定数量的数据，这个batch的大小视具体情况而定，我们针对一个batch更新参数，这样就能避免仅使用标准BP算法和仅使用累计BP算法的缺点。</li>
</ul>
<blockquote>
<p>理论上已经证明，一个包含足够多神经元的隐层的多层前馈神经网络能以任意精度逼近任意复杂度的连续函数。然而，确定隐层神经元的个数是个未决问题，实际中使用“试错法”调整。</p>
</blockquote>
<p>既然BP神经网络有如此强大的拟合能力，那么必然会遇到过拟合的问题，解决方法是</p>
<ol>
<li>划分出验证集，根据训练集更新参数，验证集计算误差，当训练集误差下降而验证集误差上升时停止训练，并将参数返回；</li>
<li>正则化，令误差目标函数为</li>
</ol>
<script type="math/tex; mode=display">
E = \lambda \frac{1}{m} \sum^m_{k=1}E_k + (1-\lambda)\sum_i w_i^2</script><p>$\lambda \in (0,1)$，用于对经验误差与网络复杂度进行折中，常通过交叉验证法来估计。</p>
<h2 id="4-全局最小与局部最小"><a href="#4-全局最小与局部最小" class="headerlink" title="4. 全局最小与局部最小"></a>4. 全局最小与局部最小</h2><!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/minima.png" alt="minima.png"></p>
<p>由于神经网络考虑的参数数量非常大，那么很容易会遇到全局最小与局部极小的问题，我们可以将其想象成在一个坑坑洼洼的地面，我们需要找到最深的那个坑，最深的点即是最低的损失，即全局最小，构成这个坑的参数即是我们的神经网络的最优参数；</p>
<p>问题在于，梯度下降对初始值很敏感，如果我们在一个坑的边缘，那么梯度下降会沿着坑的最快下降梯度进行更新，即我们会沿着这个坑掉下去，若这个坑并不是最深的，那么我们就得不到最优解，最终陷入局部极小；</p>
<p>在现实任务中我们可以尝试跳出局部极小：</p>
<ul>
<li>多组不同的参数初始化神经网络，取最小误差的参数作为最终参数。相当于我们从不同的坑开始下降，看哪个坑最终的深度最大；</li>
<li>“模拟退火”技术，即在每一步都以一定概率接受比当前解更差的结果，并且在迭代过程中，接受“次优解”的概率要随着时间的推移逐渐降低，从而保证算法稳定。相当于我们在坑中不仅仅只是单纯的下降，我们需要以一定的概率往其他方向走，这个方向可以是深度不变的平移，也可以是深度增加的上升，类似于在坑中跳动，这样可以有几率跳出局部最小；</li>
<li>随机梯度下降，在计算梯度时加入了随机因素，即便陷入局部极小点，它计算出的梯度仍可能不为0，因此有机会跳出局部极小继续搜索。</li>
</ul>
<h2 id="5-其他常见神经网络"><a href="#5-其他常见神经网络" class="headerlink" title="5. 其他常见神经网络"></a>5. 其他常见神经网络</h2><h3 id="5-1-RBF网络"><a href="#5-1-RBF网络" class="headerlink" title="5.1 RBF网络"></a>5.1 RBF网络</h3><p>RBF（径向基函数）网络是一种单隐层前馈神经网络，使用径向基函数作为隐层神经元激活函数，而输出层是对隐层神经元输出的线性组合。假定输入为$d$维向量$\boldsymbol{x}$，输出为实值，则RBF网络可表示为</p>
<script type="math/tex; mode=display">
\varphi(\boldsymbol{x}) = \sum^q_{i=1}w_i\rho(\boldsymbol{x},\boldsymbol{c}_i)</script><p>其中$q$为隐层神经元个数，$\boldsymbol{c}_i$和$w_i$分别是第$i$个隐层神经元所对应的中心和权重，$\rho$是径向基函数，$\beta_i$与方差相关（一般也是参数），通常定义为样本$\boldsymbol{x}$到数据中心$\boldsymbol{c}_i$之间的欧式距离的单调函数。常用的高斯径向基函数形如</p>
<script type="math/tex; mode=display">
\rho(\boldsymbol{x}, \boldsymbol{c}_i) = e^{-\beta_i||\boldsymbol{x} - \boldsymbol{c}_i||^2}</script><blockquote>
<p>理论上已经证明，具有足够多隐层神经元的RBF网络能以任意精度逼近任意连续函数。</p>
</blockquote>
<p>通常采用两步来训练RBF网络：第一步，确定神经元中心$\boldsymbol{c}_i$，常用方式包括随机采样、聚类等；第二步，利用BP算法来确定参数$w_i$和$\beta_i$。</p>
<h3 id="5-2-ART网络"><a href="#5-2-ART网络" class="headerlink" title="5.2 ART网络"></a>5.2 ART网络</h3><p>ART（自适应谐振理论）网络是竞争学习的重要代表（竞争型学习是神经网络中一种常用的无监督策略，网络的输出神经元相互竞争，每一时刻仅有一个竞争获胜的神经元被激活，其他神经元的状态被抑制），该网络有比较层、识别层、识别阈值和重置模块构成。</p>
<ul>
<li>比较层负责接收输入样本，并将其传递给识别层神经元。识别层每个神经元对应一个模式类，神经元数目可在训练过程中动态增长以增加新的模式类；</li>
<li>在接收到比较层的输入信号后，识别层神经元之间相互竞争以产生获胜神经元。竞争的最简单方式是，计算输入向量与每个识别层神经元所对应的模式类的代表向量之间的距离，距离最小者获胜；</li>
<li>若输入向量与获胜神经元所对应的代表向量之间的相似度大于识别阈值，则当前输入样本被归为该代表向量所属类别，同时网络连接权将会更新，使得相似样本会计算出更大的相似度，从而增加获胜可能；</li>
<li>若相似度不大于识别阈值，则重置模块将在识别层增设一个新的神经元，其代表向量设置为当前输入向量。</li>
</ul>
<h3 id="5-3-SOM网络"><a href="#5-3-SOM网络" class="headerlink" title="5.3 SOM网络"></a>5.3 SOM网络</h3><p>SOM（自组织映射）网络是一种竞争学习型的无监督神经网络，它能将高维输入数据映射到低维空间（通常是二维），同时保持输入数据在高维空间的拓扑结构，即将高维空间中相似的点映射到网络输出层中的邻近神经元。</p>
<p>SOM网络中的输出层神经元以矩阵方式排列在二维空间中，每个神经元都拥有一个权向量，网络在接收输入向量后，将会确定输出层获胜神经元，它决定了该输入向量在低维空间中的位置。SOM的训练目标就是为每个输出层神经元找到合适的权向量，以达到保持拓扑结构的目的。</p>
<p>SOM的训练过程：</p>
<ol>
<li>在接收到一个训练样本后，每个输出层神经元会计算该样本与自身携带的权向量之间的距离，距离最近的神经元获胜，称为最佳匹配单元；</li>
<li>然后，最佳匹配单元及其邻近神经元的权向量将被调整，以使得这些权向量与当前输入样本的距离缩小；</li>
<li>重复上述过程，直到收敛。</li>
</ol>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/som.png" alt="som.png"></p>
<h3 id="5-4-级联相关网络"><a href="#5-4-级联相关网络" class="headerlink" title="5.4 级联相关网络"></a>5.4 级联相关网络</h3><p>级联相关网络是结构自适应网络的重要代表（一般的神经网络模型的结构是事先固定的，训练过程只是为了得到结构上的参数，而结构自适应网络则将网络结构也当作学习目标之一，并希望在训练过程中找到最符合数据特点的网络结构）。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/cc.jpg" alt="cc.jpg"></p>
<ul>
<li>级联是指建立层次连接的层级结构，在开始训练时，网络只有输入层和输出层，处于最小拓扑结构；随着训练的进行，新的隐层神经元逐渐加入，从而创建起层级结构，当新的隐层神经元加入时，其输入端连接权值是冻结固定的；</li>
<li>相关是指通过最大化新神经元的输出与网络误差之间的相关性来训练相关的参数。</li>
</ul>
<p>优缺点：无需设置网络层数、隐层神经元数目，且训练速度较快，但其在数据较小时易陷入过拟合。</p>
<h3 id="5-5-Elman网络"><a href="#5-5-Elman网络" class="headerlink" title="5.5 Elman网络"></a>5.5 Elman网络</h3><p>Elman网络是最常用的递归神经网络之一（递归神经网络允许网络中出现环形结构，使得网络在t时刻的输出状态不仅与$t$时刻的输入有关，还与$t-1$时刻的网络状态有关，从而能处理与时间有关的动态变化），其隐层神经元的输出被反馈回来，与下一时刻输入层神经元提供的信号一起，作为隐层神经元在下一时刻的输入，隐层神经元激活函数通常采用Sigmoid函数，训练使用BP算法。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/elman.gif" alt="elman.gif"></p>
<h3 id="5-6-Boltzmann机"><a href="#5-6-Boltzmann机" class="headerlink" title="5.6 Boltzmann机"></a>5.6 Boltzmann机</h3><p>Boltzmann机考虑神经网络具有某种状态，将这种状态定义为“能量”，通过训练使得能量函数最小化，最终网络达到理想状态。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/boltzmann.jpg" alt="boltzmann.jpg"></p>
<p>常见的Boltzmann机神经元分类两层：显层和隐层。显层用于表示数据的输入与输出，隐层被理解为数据的内在表达。Boltzmann机中的神经元都是布尔型的（0/1），状态1表示激活，0表示抑制。令向量$\boldsymbol{s} \in { 0, 1 }^n$表示$n$个神经元的状态，$w_{ij}$表示神经元$i$与$j$之间的连接权，$\theta_i$表示神经元$i$的阈值，则状态向量$\boldsymbol{s}$所对应的Boltzmann机能量定义为</p>
<script type="math/tex; mode=display">
E(\boldsymbol{s}) = -\sum^{n-1}_{i=1}\sum^n_{j=i+1}w_{ij}s_is_j - \sum^n_{i=1}\theta_is_i</script><p>若网络中的神经元以任意不依赖于输入值的顺序进行更新，则网络最终将达到Boltzmann分布，此时状态向量$\boldsymbol{s}$出现的概率将仅由其所有可能状态向量的能量确定：</p>
<script type="math/tex; mode=display">
P(\boldsymbol{s}) = \frac{e^{-E(\boldsymbol{s})}}{\sum_{\boldsymbol{t}}e^{-E(\boldsymbol{t})}}</script><p>Boltzmann机的训练过程就是将每个训练样本视为一个状态向量，使其出现的概率尽可能大。标准的Boltzmann机是一个全连接图，难以解决现实任务。现实中常用受限Boltzmann机（RBM）。</p>
<p>受限Boltzmann机常用对比散度（CD）算法来进行训练。假定网络中有$d$个显层神经元和$q$个隐层神经元，令$\boldsymbol{v}$和$\boldsymbol{h}$分别表示显层与隐层的状态向量，由于同一层内不存在连接，有</p>
<script type="math/tex; mode=display">
P(\boldsymbol{v}|\boldsymbol{h}) = \prod^d_{i=1}P(v_i|\boldsymbol{h})
\\
P(\boldsymbol{h}|\boldsymbol{v}) = \prod^q_{j=1}P(h_j|\boldsymbol{v})</script><p>CD算法对每个训练样本$\boldsymbol{v}$，先根据$P(\boldsymbol{h}|\boldsymbol{v})$计算出隐层神经元状态的概率分布，然后再根据这个概率分布采样得到$\boldsymbol{h}$，再根据$P(\boldsymbol{v}|\boldsymbol{h})$从$\boldsymbol{h}$产生$\boldsymbol{v}’$，再从$\boldsymbol{v}’$产生$\boldsymbol{h}’$；连接权的更新公式为</p>
<script type="math/tex; mode=display">
\Delta w = \eta (\boldsymbol{v}\boldsymbol{h}^T - \boldsymbol{v}'\boldsymbol{h}'^T)</script><h2 id="6-深度学习"><a href="#6-深度学习" class="headerlink" title="6. 深度学习"></a>6. 深度学习</h2><p>对于M-P神经元以及神经网络结构的思考：</p>
<ul>
<li>就单个神经元来说，它本质上还是在做线性回归的工作，通过激活函数，我们将线性回归的结果转换成了一种信息（不一定可以描述出来），同时激活函数一般来说会将输出限制在一个较小的范围（Sigmoid返回$(0,1)$），若将神经元连接起来，会避免出现输入值过大的情况；</li>
<li>每一层的神经元应该都是对来自上一层的输入的信息生成（集成？统计？），那么同一层的某些神经元可能会得到相同的结果，但是由于初始化参数不同，所以这种神经元等效的情况应该很少发生；</li>
<li>多层网络结构的目的是为了集成更详细的信息，输出层是将这些详细信息进行收集起来（线性回归），再使用输出层的激活函数，产生一个相对理想的预测值；</li>
<li>BP算法在神经网络中的作用，应该是希望对于每一层来说，都处于梯度下降过程，那么每一层的下降叠加起来可以使得神经网络有一个相对较快的整体的收敛速度。</li>
</ul>
<p>接下来会思考</p>
<ul>
<li>卷积神经网络CNN</li>
<li>循环神经网络RNN</li>
<li>长短期记忆LSTM</li>
<li>生成式对抗网络GAN</li>
<li>……</li>
</ul>
]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Theory</tag>
        <tag>Neural Network</tag>
        <tag>DNN</tag>
      </tags>
  </entry>
  <entry>
    <title>决策树</title>
    <url>/archives/8ddc7426.html</url>
    <content><![CDATA[<p><strong>树即是人，人即是树</strong></p>
<p>参考：</p>
<blockquote>
<p>西瓜书第4章 决策树<br><a href="http://www.cnblogs.com/yonghao/p/5061873.html" target="_blank" rel="noopener">决策树系列（一）——基础知识回顾与总结</a></p>
</blockquote>
<h2 id="1-基本流程"><a href="#1-基本流程" class="headerlink" title="1. 基本流程"></a>1. 基本流程</h2><p>在日常生活中其实我们都可能在使用决策树算法，只是你没有这个概念，比如说，在这个看脸的时代，你在妹子心中的状态可以用下图描述</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/tree.png" alt="tree.png"></p>
<p>这样就完成了一个三分类决策树，每一个判断节点都是一个属性，每个节点的分支都是该属性的属性值。</p>
<a id="more"></a>
<hr>
<p><strong>决策树学习基本算法</strong></p>
<p>输入：训练集$D = { (\boldsymbol{x}_1, y_1), (\boldsymbol{x}_2, y_2), …, (\boldsymbol{x}_m, y_m) }$；</p>
<p>过程：函数$TreeGenerate(D, A)$</p>
<p>01：生成结点$node$；</p>
<p>02：$if$ $D$中样本全属于同一类别$C$ $then$</p>
<p>03：&emsp;将$node$标记为$C$类叶结点；$return$</p>
<p>04：$end$ $if$</p>
<p>05：$if$ $A = \emptyset$ $OR$ $D$ 中样本在$A$上的取值相同 $then$</p>
<p>06：&emsp;将$node$标记为叶结点，其类别标记为$D$中样本数最多的类；$return$</p>
<p>07：$end$ $if$</p>
<p>08：从$A$中选择最优化分属性$a_k$；</p>
<p>09：$for$ $a_k$的每一个值$a^v_k$ $do$</p>
<p>10：&emsp;为$node$生成一个分支；令$D_v$表示$D$中在$a_k$上取值为$a_k^v$的样本子集；</p>
<p>11：&emsp;$if$ $D_v$为空 $then$</p>
<p>12：&emsp;&emsp;将分支结点标记为叶结点，其标记类别为$D$中样本最多的类；$return$</p>
<p>13：&emsp;$else$</p>
<p>14：&emsp;&emsp;以$TreeGenerate(D_v, A \setminus  {a_k })$为分支结点</p>
<p>15：&emsp;$end$ $if$</p>
<p>16：$end$ $for$</p>
<p>输出：以$node$为根结点的一棵决策树</p>
<hr>
<p>递归生成决策树有三种情形会导致递归返回：</p>
<ol>
<li>当前结点包含的样本全属于同一类别，无需划分；</li>
<li>当前属性集为空，或是所有样本在所有属性上取值相同，无法划分；</li>
<li>当前结点包含的样本集合为空，不能划分。</li>
</ol>
<h2 id="2-划分选择"><a href="#2-划分选择" class="headerlink" title="2. 划分选择"></a>2. 划分选择</h2><p>决策树学习的关键在第8行，即如何选择最优划分属性。一般来说，我们希望分支结点所包含的样本尽可能属于同一类别，即结点的“纯度”也来越高（如何衡量“纯度”，有不同的算法）。</p>
<h3 id="2-1-信息增益"><a href="#2-1-信息增益" class="headerlink" title="2.1 信息增益"></a>2.1 信息增益</h3><p>假定当前样本集合$D$中第$k$类样本所占的比例为$p_k(k = 1,2,…,|\mathbb{Y}|)$，则$D$的信息熵定义为</p>
<script type="math/tex; mode=display">
Ent(D) = -\sum^{|\mathbb{Y}|}_{k=1}p_k\log_2p_k</script><p>$Ent(D)$的值越小，则$D$的纯度越高。</p>
<p>假定离散属性$a$有$V$个可能的取值${ a^1, a^2, …,a^V }$，若使用$a$来对样本集合$D$进行划分，则会产生$V$个分支结点，其中第$v$个分支结点包含了$D$中所有在属性$a$上取值为$a^v$的样本，记为$D^v$。则可以计算用属性$a$对$D$进行划分所获得的信息增益</p>
<script type="math/tex; mode=display">
Gain(D, a) = Ent(D) - \sum^V_{v=1}\frac{|D^v|}{|D|}Ent(D^v)</script><p>一般而言，信息增益越大，则使用属性$a$来进行划分所获得的纯度提升越大。因此，在第8行使用属性$a_k = \underset{a \in A}{\arg \max Gain(D, a)}$。这就是$ID3$决策树学习算法的划分准则。</p>
<h3 id="2-2-增益率"><a href="#2-2-增益率" class="headerlink" title="2.2 增益率"></a>2.2 增益率</h3><p>利用信息增益作为划分准则可能会带来另一问题，即对可取值数目较多的属性有所偏好，比如说若一个属性有10个属性值，而另一个属性只有3个属性值，此时经过计算很大程度上10个属性值的属性带来的信息增益会大于另一个。为减少这种偏好可能带来的不利影响，$C4.5$决策树算法使用增益率作为划分准则</p>
<script type="math/tex; mode=display">
Gain\_ratio(D, a) = \frac{Gain(D,a)}{IV(a)}
\\
IV(a) = -\sum^V_{v=1}\frac{|D^v|}{|D|} \log_2\frac{|D^v|}{|D|}</script><p>$IV(a)$称为属性$a$的固有值，若属性$a$的取值数目越多，则$IV(a)$的值通常会越大。</p>
<p>与此同时$C4.5$算法具体流程并不是直接选择增益率最高的属性，而是先从候选属性中选择信息增益高于平均水平的属性，再从中选择增益率高的。</p>
<h4 id="2-3-基尼指数"><a href="#2-3-基尼指数" class="headerlink" title="2.3 基尼指数"></a>2.3 基尼指数</h4><p>$CART$决策树（可用于分类和回归）使用基尼指数选择划分属性</p>
<script type="math/tex; mode=display">
Gini(D) = \sum^{|\mathbb{Y}|}_{k=1}\sum_{k' \neq k}p_kp_{k'}
\\
= 1- \sum^{|\mathbb{Y}|}_{k=1}p_k^2</script><p>$Gini(D)$反映了从数据集$D$中随机抽取两个样本，其类别标记不一致的概率。因此，$Gini(D)$越小，则数据集$D$纯度越高。</p>
<p>则对应属性$a$的基尼指数定义为</p>
<script type="math/tex; mode=display">
Gini\_index(D, a) = \sum^V_{v=1}\frac{|D^v|}{|D|}Gini(D^v)</script><p>我们选择使得划分后基尼指数最小的属性作为最优属性，即</p>
<script type="math/tex; mode=display">
a_k = \underset{a \in A}{\arg \min}Gini\_index(D, a)</script><h2 id="3-剪枝处理"><a href="#3-剪枝处理" class="headerlink" title="3. 剪枝处理"></a>3. 剪枝处理</h2><p>剪枝是对付过拟合的主要手段，主要方式是删除一些分支，基本策略有两种，预剪枝和后剪枝。</p>
<ul>
<li>预剪枝是在决策树生成过程中，对每个结点在划分前先进行估计，若当前结点的划分不能带来决策树泛化性能提升，则停止划分当前结点并标记为叶结点；</li>
<li>后剪枝是先从数据集生成一棵完整的决策树，然后自底向上对非叶结点进行考察，若将该结点对应的子树替换为叶结点能带来泛化性能提升，则将子树替换为叶结点。</li>
</ul>
<p>如何判断泛化性能，我们使用验证集进行评估。</p>
<h3 id="3-1-预剪枝"><a href="#3-1-预剪枝" class="headerlink" title="3.1 预剪枝"></a>3.1 预剪枝</h3><!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/precut.png" alt="precut.png"></p>
<ol>
<li>根据划分准则选择最优划分属性；</li>
<li>计算不对当前最优属性划分的条件下验证集的准确率；</li>
<li>计算对当前最优属性划分后验证集的准确率；</li>
<li>比较上面两步的值，若划分后的准确率不大于划分前，则放弃使用该属性划分。</li>
</ol>
<p>优劣：</p>
<ul>
<li>预剪枝是基于贪心算法的，必然存在继续划分可能带来泛化性能提升的可能性，使用预剪枝导致永远无法展开这些分支；</li>
<li>预剪枝降低过拟合的风险，减少了训练开销。</li>
</ul>
<h3 id="3-2-后剪枝"><a href="#3-2-后剪枝" class="headerlink" title="3.2 后剪枝"></a>3.2 后剪枝</h3><!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/backcut.png" alt="backcut.png"></p>
<ol>
<li>根据训练集生成完整的决策树；</li>
<li>计算当前决策树在验证集上的准确率；</li>
<li>自底向上考虑某个属性，计算将当前属性替换为叶结点（取最多的类别作为叶结点标记）后的验证集准确率；</li>
<li>比较上面两步的值，若剪枝后的准确率不大于剪枝前的，则放弃使用该属性划分。</li>
</ol>
<p>优劣：</p>
<ul>
<li>后剪枝保留的分支较预剪枝多，所以欠拟合风险小，泛化性能优于预剪枝；</li>
<li>自底向上的过程导致训练开销远大于预剪枝。</li>
</ul>
<h2 id="4-连续与缺失值"><a href="#4-连续与缺失值" class="headerlink" title="4. 连续与缺失值"></a>4. 连续与缺失值</h2><h3 id="4-1-连续值处理"><a href="#4-1-连续值处理" class="headerlink" title="4.1 连续值处理"></a>4.1 连续值处理</h3><p>对于连续值，最简单的策略是采用二分法，即将属性$a$的属性值基于$t$划分为两个阵营$D_t^-$和$D_t^+$，如何确定$t$的值才能使该划分为最优化分，显然，$t$的取值在$[a^i, a^{i+1})$之间都是等效的，那么我们可以参照插队的方式取$t$的所有可能值，再从中选取最优点。</p>
<p>对于有$n$个属性值的连续属性$a$，$t$的候选划分点集和</p>
<script type="math/tex; mode=display">
T_a = \{ \frac{a^i + a^{i+1}}{2}|1 \leqslant i \leqslant n-1 \}</script><p>通过对信息增益表达式的改造</p>
<script type="math/tex; mode=display">
Gain(D, a) = \underset{t \in T_a}{\max} Gain(D, a, t)
\\
= \underset{t \in T_a}{\max} Ent(D) - \sum_{\lambda \in \{ -,+ \}}\frac{|D^{\lambda}_t|}{|D|}Ent(D_t^{\lambda})</script><p>需注意的是，与离散属性不同，若当前结点划分属性为连续属性，该属性还可作为其后代结点的划分属性。</p>
<h3 id="4-2-缺失值处理"><a href="#4-2-缺失值处理" class="headerlink" title="4.2 缺失值处理"></a>4.2 缺失值处理</h3><p>样本不完整，那么该样本应该怎样划分呢。</p>
<p>问题等价于</p>
<ol>
<li>如何在属性缺失的情况下进行划分属性选择？</li>
<li>给定划分属性，若样本在该属性上的值缺失，如何对样本进行划分？</li>
</ol>
<p>比较简单的方式是根据数据集$D$中在属性$a$上没有缺失值的样本来对属性$a$进行划分。</p>
<hr>
<p>对问题（1），令$\tilde{D}$表示$D$在属性$a$上没有缺失值的样本子集，<br>假定属性$a$有$V$个可取值${ a^1, a^2,…,a^V }$，<br>令$\tilde{D}^v$表示$\tilde{D}$中在属性$a$上取值为$a^v$的样本子集，<br>$\tilde{D}<em>k$表示$\tilde{D}$中属于第$k$类（$k = 1, 2,…,|\mathbb{Y}|$）的样本子集，则显然有$\tilde{D} = \bigcup</em>{k=1}^{|\mathbb{Y}|}\tilde{D}<em>k = \bigcup</em>{v=1}^{|V|}\tilde{D}^v$。<br>假定为每个样本$\boldsymbol{x}$初始化一个权重$w_{\boldsymbol{x}}$（初始值全为1），并定义</p>
<script type="math/tex; mode=display">
\rho = \frac{\sum_{\boldsymbol{x}\in \tilde{D}}w_{\boldsymbol{x}}}{\sum_{\boldsymbol{x}\in D}w_{\boldsymbol{x}}}
\\
\tilde{p}_k = \frac{\sum_{\boldsymbol{x}\in \tilde{D}_k}w_{\boldsymbol{x}}}{\sum_{\boldsymbol{x}\in \tilde{D}}w_{\boldsymbol{x}}}
\\
\tilde{r}_v = \frac{\sum_{\boldsymbol{x}\in \tilde{D}^v}w_{\boldsymbol{x}}}{\sum_{\boldsymbol{x}\in \tilde{D}}w_{\boldsymbol{x}}}</script><p>对属性$a$来说，$\rho$表示无缺失值样本所占的比例，$\tilde{p}<em>k$表示无缺失值样本中第$k$类所占的比例，$\tilde{r}_v$则表示无缺失值样本在属性$a$上取值$a^v$的样本所占的比例。显然$\sum^{|\mathbb{Y}|}</em>{k=1}\tilde{p}<em>k=1,\sum^V</em>{v=1}\tilde{r}_v=1$。</p>
<p>基于上述定义，信息增益计算式可推广为</p>
<script type="math/tex; mode=display">
Gain(D, a) = \rho \times Gain(\tilde{D}, a)
\\
= \rho \times \{ Ent(\tilde{D}) - \sum^V_{v=1}\tilde{r}_vEnt(\tilde{D}^v) \}</script><p>其中</p>
<script type="math/tex; mode=display">
Ent(\tilde{D}) = - \sum^{|\mathbb{Y}|}_{k=1}\tilde{p}_k\log_2\tilde{p}_k</script><hr>
<p>对问题（2）,若样本$\boldsymbol{x}$在划分属性$a$上的取值已知，则将$\boldsymbol{x}$划入与其取值对应的子结点，且样本权值保持为$w<em>{\boldsymbol{x}}$。<br>若样本$\boldsymbol{x}$在划分属性$a$上的取值未知，则将$\boldsymbol{x}$同时划入所有子结点，且样本权值在与属性$a^v$对应的子结点中调整为$\tilde{r} \cdot w</em>{\boldsymbol{x}}$；<br>直观地看，这就是让同一个样本以不同的概率划入到不同的子结点中去。</p>
<h2 id="5-多变量决策树"><a href="#5-多变量决策树" class="headerlink" title="5. 多变量决策树"></a>5. 多变量决策树</h2><p>使用单属性作为划分结点，我们得到的决策树的分类边界是平行于该属性对应的轴。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/tree1.png" alt="tree1.png"></p>
<p>但在现实任务中，我们希望分类边界尽可能平滑，越平滑意味着每个结点包含的分类标准越复杂，需要的属性组合就越多，所以我们希望能以局部线性拟合平滑曲线，这就是多变量决策树</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/tree3.png" alt="tree3.png"></p>
<p>在多变量决策树中，每个非叶结点不再是仅对某个属性，而是对属性的线性组合进行测试；换言之，每个非叶结点是一个形如$\sum^d_{i=1}w_ia_i=t$的线性分类器，其中$w_i$是属性$a_i$的权重，$w_i,t$可在该结点所含的样本集和属性集上学得。于是，多变量决策树的训练过程就不是寻找最优划分属性，而是建立一个合适的线性分类器。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/tree2.png" alt="tree2.png"></p>
<h2 id="6-回归树"><a href="#6-回归树" class="headerlink" title="6. 回归树"></a>6. 回归树</h2><!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/0.png" alt="0.png"></p>
<p>分类决策树处理的是分类问题，其特点是target是label标签，而标签是一个有限集，因此决策树的构建需要在叶结点判断标签，最终也只需要判断准确率即可，分类节点使用信息增益相关的算法即可；<br>回归树处理的是回归问题，即最终的目标是一个预测值，而我们的训练数据的真实值可以说是无穷多的，因此只能用误差损失来衡量，比如用平方误差衡量单个样本的误差。而每个结点（不只是叶结点）都对应一个预测值，这个预测值的大小是被分配到这个结点的所有样本的真实值的均值，如何选择最优属性以及最优划分阈值可以参考上面<code>4. 连续与缺失值</code>。</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/1.png" alt="1.png"></p>
<h2 id="7-思考"><a href="#7-思考" class="headerlink" title="7. 思考"></a>7. 思考</h2><ul>
<li>决策树是最接近人类思考的最简单的模型，讲道理在大多数情况下，我们所做的每一个行为都是基于各种细小属性的决策，那么是否有一种复杂多变量决策树可以动态的描述一个人或者生物的行为呢，与此同时，每一个分类结点的权重也是一个变量，其收到其他因素的影响。显然，这种想法会导致维度爆炸。</li>
<li>换一种思路，我们基于某种主干决策树做大多数决策，同时存在偏差决策树，偏差决策树构成森林，根据主干与偏差的相互叠加，我们完成其他的行为决策。</li>
<li>基于决策树的其他算法框架在分类任务中具有极好的效果，比如<code>XGBoost</code>、<code>GBDT</code>、<code>Random Forest</code>，接下来会思考这些算法。</li>
</ul>
]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Theory</tag>
        <tag>Decision Tree</tag>
        <tag>Regression Decision Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>线性模型</title>
    <url>/archives/5206f73f.html</url>
    <content><![CDATA[<p><strong>万物皆可线性</strong></p>
<p>参考：</p>
<blockquote>
<p>西瓜书第3章 线性模型</p>
</blockquote>
<h2 id="1-基本形式"><a href="#1-基本形式" class="headerlink" title="1. 基本形式"></a>1. 基本形式</h2><ul>
<li>feature/data：样本的属性，训练参数</li>
<li>label/target：样本的标签，训练结果</li>
</ul>
<p>给定由d个属性描述的示例$\boldsymbol{x} = (x_1; x_2;…; x_d)$（通常情况下在数据集中，一个样本的表示形式为$\boldsymbol{x} = (x_1, x_2,…,x_d)$，区别在于数组的方向），其中$x_i$是$\boldsymbol{x}$在第i个属性上的取值，线性模型（linear model）试图学得一个通过属性的线性组合来进行预测的函数，即</p>
<script type="math/tex; mode=display">
f(\boldsymbol{x}) = w_1x_1 + w_2x_2 + ... + w_dx_d + b</script><p>一般用向量形式写成</p>
<script type="math/tex; mode=display">
f(\boldsymbol{x}) = \boldsymbol{w}^T\boldsymbol{x} + b</script><p>其中$\boldsymbol{w} = (w_1; w_2;…; w_d)$，$\boldsymbol{w}$和$b$学得之后，模型就得以确定。</p>
<a id="more"></a>
<h2 id="2-线性回归"><a href="#2-线性回归" class="headerlink" title="2. 线性回归"></a>2. 线性回归</h2><h3 id="2-1-数学推导"><a href="#2-1-数学推导" class="headerlink" title="2.1 数学推导"></a>2.1 数学推导</h3><p>给定数据集$D = {(\boldsymbol{x}<em>1, y_1), (\boldsymbol{x}_2, y_2),…, (\boldsymbol{x}_m, y_m)}$，其中$\boldsymbol{x}_i = (x</em>{i1};x<em>{i2};…; x</em>{id})$，$y_i \in \mathbb{R}$，线性回归（linear regression）试图学得一个线性模型以尽可能准确地预测实值输出标记。</p>
<blockquote>
<p>首先，从单属性出发考虑如何求解，即$D = {(x<em>i, y_i)}^m</em>{i=1}$，线性回归试图学得</p>
</blockquote>
<script type="math/tex; mode=display">
f(x_i) = wx_i + b, 使得f(x_i) \simeq y_i</script><p>我们使用均方误差MSE衡量$f(x)$与$y$之间的差异，并使得均方误差最小化，即</p>
<script type="math/tex; mode=display">
(w^*, b^*) = \underset{(w, b)}{\arg \min}\sum^{m}_{i=1}(f(x_i) - y_i)^2
\\
 = \underset{(w, b)}{\arg \min}\sum^{m}_{i=1}(y_i - wx_i - b)^2</script><p>基于均方误差最小化来进行模型求解的方法称为“最小二乘法”，即找到一条直线使得所有样本到直线的欧式距离之和最小。</p>
<p>求解$w$和$b$使$E<em>{(w, b)} = \sum^m</em>{i=1}(y<em>i - wx_i - b)^2$最小化的过程，称为线性回归模型的最小二乘“参数估计”。将$E</em>{(w, b)}$分别对$w$和$b$求导，得到</p>
<script type="math/tex; mode=display">
\frac{\partial E_{(w, b)}}{\partial w} = 2(w\sum_{i=1}^{m}x^2_i - \sum_{i=1}^{m}(y_i - b)x_i)
\\
\frac{\partial E_{(w, b)}}{\partial b} = 2(mb - \sum_{i=1}^{m}(y_i - wx_i))</script><p>通常对凸函数$E_{(w, b)}$来说，偏导数取值为零处即为最优解，因此$w$和$b$的最优闭式解</p>
<script type="math/tex; mode=display">
w = \frac{\sum_{i=1}^{m}y_i(x_i - \bar{x})}{\sum_{i=1}^{m}x_i^2 - \frac{1}{m}(\sum_{i=1}^{m}x_i)^2}
\\
b = \frac{1}{m}\sum_{i=1}^{m}(y_i - wx_i)</script><p>其中$\bar{x} = \frac{1}{m}\sum_{i=1}^{m}x_i$为$x$的均值。</p>
<hr>
<p>一般情况为样本包含d个属性，此时我们试图学得</p>
<script type="math/tex; mode=display">
f(\boldsymbol{x}_i) = \boldsymbol{w}^T\boldsymbol{x}_i + b, 使得f(\boldsymbol{x}_i \simeq y_i)</script><p>这称为“多元线性回归”.</p>
<p>同样利用最小二乘法对$\boldsymbol{w}$和$b$进行估计，这里令$\hat{\boldsymbol{w}} = (\boldsymbol{w}; b)$，相应的，数据集$D$表示为一个$m \times (d + 1)$的矩阵$\boldsymbol{x}$，其中每一行对应一个示例，即</p>
<script type="math/tex; mode=display">
\boldsymbol{x} = 
\begin{pmatrix}
 x_{11}& x_{12} & ... & x_{1d} & 1\\ 
 x_{21}& x_{22} & ... & x_{2d} & 1\\ 
 \vdots& \vdots & \ddots & \vdots & \vdots\\ 
 x_{m1}& x_{m2} & ... & x_{md} & 1
\end{pmatrix}
= 
\begin{pmatrix}
 \boldsymbol{x}^T_1& 1\\ 
 \boldsymbol{x}^T_2& 1\\ 
 \vdots& \vdots\\ 
 \boldsymbol{x}^T_m& 1
\end{pmatrix}</script><p>把标记也写成向量形式$\boldsymbol{y} = (y<em>1; y_2;…; y_m)$，令$E</em>{\hat{\boldsymbol{w}}} = (\boldsymbol{y} - \boldsymbol{x}\hat{\boldsymbol{w}})^T(\boldsymbol{y} - \boldsymbol{x}\hat{\boldsymbol{w}})$</p>
<script type="math/tex; mode=display">
\hat{\boldsymbol{w}}^* = \underset{\hat{\boldsymbol{w}}}{\arg\min}E_{\hat{\boldsymbol{w}}}</script><p>对$\hat{\boldsymbol{w}}$求导得到</p>
<script type="math/tex; mode=display">
\frac{\partial E_{\hat{\boldsymbol{w}}}}{\partial \hat{\boldsymbol{w}}} = 2\boldsymbol{x}^T(\boldsymbol{x}\hat{\boldsymbol{w}} - y)</script><p>同理，上式为零得到最优解，但是由于求解过程中使用到逆矩阵运算，所以会有分类讨论</p>
<hr>
<ol>
<li>当$\boldsymbol{x}^T\boldsymbol{x}$为满秩矩阵或正定矩阵</li>
</ol>
<script type="math/tex; mode=display">
\hat{\boldsymbol{w}}^* = (\boldsymbol{x}^T\boldsymbol{x})^{-1}\boldsymbol{x}^T\boldsymbol{y}</script><p>代入到$f(\boldsymbol{x})$可得最终模型为</p>
<script type="math/tex; mode=display">
f(\hat{\boldsymbol{x}}_i) = \hat{\boldsymbol{x}}^T_i(\boldsymbol{x}^T\boldsymbol{x})^{-1}\boldsymbol{x}^T\boldsymbol{y}</script><ol>
<li>当$\boldsymbol{x}^T\boldsymbol{x}$不是满秩矩阵，例如属性数量超过样例数，则会求解出多个$\hat{\boldsymbol{w}}$，选择哪一个将由学习算法的归纳偏好决定，常见的做法是引入正则化（正则化会产生对参数的约束，从而限制最优解的范围）。</li>
</ol>
<h3 id="2-2-推广"><a href="#2-2-推广" class="headerlink" title="2.2 推广"></a>2.2 推广</h3><p>令线性回归模型逼近$y$的衍生物</p>
<script type="math/tex; mode=display">
\ln y = \boldsymbol{w}^T\boldsymbol{x} + b</script><p>这就是“对数线性回归”，它实际上是在试图让$e^{\boldsymbol{w}^T\boldsymbol{x} + b}$逼近$y$。这样就实现了从输入空间到输出空间的非线性函数映射，我们可以发现，只有左边$y$的形式改变了，而右边依旧是线性回归，这意味着我们仅仅只需要对target做修改就可以继续使用线性回归求解问题，因此也就可以把线性回归推广到分类问题上。</p>
<p>更一般地，考虑单调可微（光滑且连续）函数$g(\cdot)$，令</p>
<script type="math/tex; mode=display">
y = g^{-1}(\boldsymbol{w}^T\boldsymbol{x} + b)</script><p>这样得到的模型称为“广义线性模型”，其中$g(\cdot)$称为“联系函数”。</p>
<h3 id="2-3-结论与问题"><a href="#2-3-结论与问题" class="headerlink" title="2.3 结论与问题"></a>2.3 结论与问题</h3><ul>
<li>根据最优解方程，我们似乎可以直接计算出参数，而不需要训练过程；</li>
<li>如果样例数目很大（百万、千万、…）而且属性数量也很大（十万、百万、…），计算矩阵相乘需要极大的内存和计算能力，这种方式很不现实，也就是说在数据集很小的情况下可以使用方程求解，其他情况需要用另一种方式逼近完美解（梯度下降）；</li>
<li>由推广可知，线性回归也可以用于分类问题，将分类问题看做分类概率的近似求解，那么我们就将分类问题转换成回归问题了，此时我们训练模型的目标变成了分类概率，最后根据分类概率确定分类结果。</li>
</ul>
<h2 id="3-对数几率回归"><a href="#3-对数几率回归" class="headerlink" title="3. 对数几率回归"></a>3. 对数几率回归</h2><h3 id="3-1-说明"><a href="#3-1-说明" class="headerlink" title="3.1 说明"></a>3.1 说明</h3><p>从广义线性模型可知，对于二分类问题，我们需要找到一个单调可微的函数将分类任务的真实标记$y$与线性回归模型的预测值联系起来。</p>
<p>二分类输出标记$y \in {0, 1}$，而线性回归模型产生的预测值$z = \boldsymbol{w}^T\boldsymbol{x} + b$是实值，需要将$z$转换成0/1值。单位阶跃函数与sigmoid函数</p>
<!-- ![](images/sigmoid.jpg) -->
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/sigmoid.jpg" alt="sigmoid.jpg"></p>
<p>由于单位阶跃函数不连续，所以不能作为$g^-(\cdot)$，所以使用与单位阶跃函数形状类似的sigmoid函数（也有其他类似的函数）</p>
<script type="math/tex; mode=display">
y = \frac{1}{1 + e^{-(\boldsymbol{w}^T\boldsymbol{x} + b)}}</script><p>分类问题变成线性回归问题</p>
<script type="math/tex; mode=display">
\ln \frac{y}{1-y} = \boldsymbol{w}^T\boldsymbol{x} + b</script><p>若将$y$视为样本$\boldsymbol{x}$作为正例的可能性，则$1-y$是其反例可能性，两者的比值</p>
<script type="math/tex; mode=display">
\frac{y}{1-y}</script><p>称为“几率”，反映了$\boldsymbol{x}$作为正例的相对可能性。对其取对数则得到“对数几率”</p>
<script type="math/tex; mode=display">
\ln \frac{y}{1-y}</script><h3 id="3-2-数学推导"><a href="#3-2-数学推导" class="headerlink" title="3.2 数学推导"></a>3.2 数学推导</h3><p>将$y$视为类后验概率估计$p(y=1\mid\boldsymbol{x})$，则$1-y$视为$p(y=0\mid\boldsymbol{x})$</p>
<script type="math/tex; mode=display">
\ln \frac{p(y=1\mid\boldsymbol{x})}{p(y=0\mid\boldsymbol{x})} = \boldsymbol{w}^T\boldsymbol{x} + b</script><p>显然有</p>
<script type="math/tex; mode=display">
p(y=1\mid\boldsymbol{x}) = \frac{e^{\boldsymbol{w}^T\boldsymbol{x} + b}}{1 + e^{\boldsymbol{w}^T\boldsymbol{x} + b}}
\\
p(y=0\mid\boldsymbol{x}) = \frac{1}{1 + e^{\boldsymbol{w}^T\boldsymbol{x} + b}}</script><p>通过“极大似然法”来估计$\boldsymbol{w}$和$b$，给定数据集${(\boldsymbol{x}<em>i, y_i)}^m</em>{i=1}$，对率回归模型最大化“对数似然”</p>
<script type="math/tex; mode=display">
l (\boldsymbol{w}, b) = \sum^m_{i=1}\ln p(y_i \mid \boldsymbol{x}_i; \boldsymbol{w}, b)</script><p>即令每个样本属于其真实标记的概率越大越好。令$\beta = (\boldsymbol{w}; b)，\hat{\boldsymbol{x}} = (\boldsymbol{x}; 1)$，则$\boldsymbol{w}^T\boldsymbol{x} + b$可简写为$\beta^T\hat{\boldsymbol{x}}$，再令$p_1(\hat{\boldsymbol{x}}; \beta) = p(y=1 \mid\hat{\boldsymbol{x}};\beta)，p_0(\hat{\boldsymbol{x}}; \beta) = p(y=0 \mid\hat{\boldsymbol{x}};\beta) = 1-p_1(\hat{\boldsymbol{x}}; \beta)$，则似然项重写为</p>
<script type="math/tex; mode=display">
p(y_i \mid \boldsymbol{x}_i; \boldsymbol{w}, b) = y_ip_1(\hat{\boldsymbol{x}}; \beta) + (1-y_i)p_0(\hat{\boldsymbol{x}}; \beta)</script><p>代入上式，得到最大化对数似然等价于最小化</p>
<script type="math/tex; mode=display">
l(\beta) = \sum^m_{i=1}(-y_i\beta^T\hat{\boldsymbol{x}_i} + \ln(1 + e^{\beta^T\hat{\boldsymbol{x}_i}}))
\\
这里的-y_i\beta^T\hat{\boldsymbol{x}_i}不是直接计算得到的，通过等价替换，证明过程略</script><p>上式是关于$\beta$的高阶可导连续凸函数，可以使用数值优化算法如梯度下降、牛顿法等都可以求解</p>
<script type="math/tex; mode=display">
\beta^* = \underset{\beta}{\arg \min}l(\beta)</script><hr>
<p>以牛顿法为例，其第$t+1$轮迭代解的更新公式为</p>
<script type="math/tex; mode=display">
\beta^{t+1} = \beta^t - (\frac{\partial^2 l(\beta)}{\partial \beta \partial \beta^T})^{-1}\frac{\partial l(\beta)}{\partial \beta}</script><p>其中关于$\beta$的一阶、二阶导数分别为</p>
<script type="math/tex; mode=display">
\frac{\partial l(\beta)}{\partial\beta} = -\sum^m_{i=1}\hat{\boldsymbol{x}_i}(y_i - p_1(\hat{\boldsymbol{x}_i}; \beta))
\\
\frac{\partial^2 l(\beta)}{\partial \beta \partial \beta^T} = \sum^m_{i=1}\hat{\boldsymbol{x}_i}\hat{\boldsymbol{x}_i}^Tp_1(\hat{\boldsymbol{x}_i};\beta)(1-p_1(\hat{\boldsymbol{x}_i};\beta))</script><hr>
<p>使用梯度下降法求解：</p>
<script type="math/tex; mode=display">
\frac{\partial l(\beta)}{\partial\beta} = \sum^m_{i=1}\hat{\boldsymbol{x}_i}(p_1(\hat{\boldsymbol{x}_i}; \beta) - y_i)，我们可以看到p_1其实就是预测的y值，y_i是实际值
\\
\beta = \beta - \alpha \frac{\partial l(\beta)}{\partial\beta}，\alpha为学习率，控制\alpha下降速度
\\
重新定义一下X为数据集矩阵，X^T为其转置，E = y_{pre} - y_i，则\beta = \beta - \alpha \cdot X^T \cdot E</script><h2 id="4-线性判别分析LDA"><a href="#4-线性判别分析LDA" class="headerlink" title="4. 线性判别分析LDA"></a>4. 线性判别分析LDA</h2><h3 id="4-1-基本思想"><a href="#4-1-基本思想" class="headerlink" title="4.1 基本思想"></a>4.1 基本思想</h3><p>对二分类问题，给定训练样例集，设法将样例投影到一条直线上，使得同类样例的投影点尽可能接近、异类样例的投影点尽可能远离；在对新样例进行分类时，将其投影到同样的这条直线上，再根据投影点的位置来确定新样本的类别</p>
<!-- ![](images/lda.png) -->
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/lda.png" alt="lda.png"></p>
<h3 id="4-2-数学推导"><a href="#4-2-数学推导" class="headerlink" title="4.2 数学推导"></a>4.2 数学推导</h3><p>给定数据集$D = {(\boldsymbol{x}<em>i, y_i)}^m</em>{i=1}，y_i \in {0, 1}$，令$X_i、\mu_i、\Sigma_i$分别表示第$i\in{0,1}$类示例的集和、均值向量、协方差矩阵。若将数据投影到直线$\boldsymbol{w}$上，则两类样本的中心在直线上的投影分别为$\boldsymbol{w}^T\mu_0$和$\boldsymbol{w}^T\mu_1$；若将所有样本点都投影到直线上，则两类样本的协方差分别为$\boldsymbol{w}^T\Sigma_0\boldsymbol{w}$和$\boldsymbol{w}^T\Sigma_1\boldsymbol{w}$，由于直线是一维空间，因此4个值均为实数。</p>
<p>同类样例的投影点尽可能接近，即$\boldsymbol{w}^T\Sigma_0\boldsymbol{w} + \boldsymbol{w}^T\Sigma_1\boldsymbol{w}$尽可能小；异类样例的投影点尽可能远离，即${\parallel \boldsymbol{w}^T\mu_0 - \boldsymbol{w}^T\mu_1\parallel}^2_2$尽可能大。若同时考虑二者，则最大化目标为</p>
<script type="math/tex; mode=display">
J = \frac{\parallel \boldsymbol{w}^T\mu_0 - \boldsymbol{w}^T\mu_1 \parallel^2_2}{\boldsymbol{w}^T\Sigma_0\boldsymbol{w} + \boldsymbol{w}^T\Sigma_1\boldsymbol{w}}
\\
= \frac{\boldsymbol{w}^T(\mu_0-\mu_1)(\mu_0-\mu_1)^T\boldsymbol{w}}{\boldsymbol{w}^T(\Sigma_0 + \Sigma_1)\boldsymbol{w}}</script><p><strong>类间散度矩阵</strong></p>
<script type="math/tex; mode=display">
S_w = \Sigma_0 + \Sigma_1
\\
= \sum_{\boldsymbol{x}\in X_0}(\boldsymbol{x}-\mu_0)(\boldsymbol{x}-\mu_0)^T + \sum_{\boldsymbol{x}\in X_1}(\boldsymbol{x}-\mu_1)(\boldsymbol{x}-\mu_1)^T</script><p><strong>类内散度矩阵</strong></p>
<script type="math/tex; mode=display">
S_b = (\mu_0-\mu_1)(\mu_0-\mu_1)^T</script><p>代入，可重写为</p>
<script type="math/tex; mode=display">
J = \frac{\boldsymbol{w}^TS_b\boldsymbol{w}}{\boldsymbol{w}^TS_w\boldsymbol{w}}</script><p>我们的目标变成了求解$\boldsymbol{w}$使得$J$最大，表达式分子和分母都是关于$\boldsymbol{w}$的二次项，因此上式的解与$\boldsymbol{w}$的长度无关，只与其方向有关。不失一般性，令$\boldsymbol{w}^TS_w\boldsymbol{w}=1$，则上式等价于</p>
<script type="math/tex; mode=display">
\underset{\boldsymbol{w}}{\min} -\boldsymbol{w}^TS_b\boldsymbol{w}
\\
s.t. \quad \boldsymbol{w}^TS_w\boldsymbol{w} = 1</script><p>由拉格朗日乘子法（拉格朗日乘子系数，导数为0），上式等价于</p>
<script type="math/tex; mode=display">
S_b\boldsymbol{w} = \lambda S_w \boldsymbol{w}</script><p>又因为$S_b\boldsymbol{w}$的方向恒为$\mu_0 - \mu_1$，不妨令</p>
<script type="math/tex; mode=display">
S_b\boldsymbol{w} = \lambda(\mu_0 - \mu_1)</script><p>代入得</p>
<script type="math/tex; mode=display">
\boldsymbol{w} = S_w^{-1}(\mu_0 - \mu_1)</script><p>现在我们只需要知道$S_w^{-1}$的值就可以得到最优解，在实践中通常是对$S_w$进行奇异值分解，即$S_w = U \Sigma V^T$，这里$\Sigma$是一个实对角矩阵，其对角线上的元素是$S_w$的奇异值，然后再由$S_w^{-1} = V\Sigma^{-1}U^T$得到$S_w^{-1}$</p>
<h3 id="4-3-推广"><a href="#4-3-推广" class="headerlink" title="4.3 推广"></a>4.3 推广</h3><p>将LDA推广到多分类任务中，假定存在$N$个类，且第$i$类示例数为$m_i$。</p>
<p><strong>全局散度矩阵</strong>，$\mu$是所有示例的均值向量</p>
<script type="math/tex; mode=display">
S_t = S_b + S_w
\\
= \sum^m_{i=1}(\boldsymbol{x}_i - \mu)(\boldsymbol{x}_i - \mu)^T</script><p><strong>类内散度矩阵</strong></p>
<script type="math/tex; mode=display">
S_w = \sum^N_{i=1}S_{w_i}
\\
其中S_{w_i} = \sum_{\boldsymbol{x} \in X_i}(\boldsymbol{x} - \mu_i)(\boldsymbol{x} - \mu_i)^T</script><p><strong>类间散度矩阵</strong></p>
<script type="math/tex; mode=display">
S_b = S_t - S_w
\\
= \sum^N_{i=1}m_i(\mu_i - \mu)(\mu_i - \mu)^T</script><hr>
<p>同理，优化目标变成</p>
<script type="math/tex; mode=display">
\underset{W}{\max} \frac{tr(W^TS_bW)}{tr(W^TS_wW)}</script><p>其中$W\in \mathbb{R}^{d \times (N - 1)}$，$tr(\cdot)$表示矩阵的迹</p>
<script type="math/tex; mode=display">
S_bW = \lambda S_wW</script><p>$W$的闭式解则是$S_w^{-1}S_b$的$d’$个最大非零广义特征值所对应的特征向量组成的矩阵，$d’ \leqslant N-1$。</p>
<p>若将$W$视为一个投影矩阵，则多分类LDA将样本投影到$d’$维空间，$d’$通常远小于$d$，因此LDA也常被视为一种降维技术。</p>
<h2 id="5-多分类学习"><a href="#5-多分类学习" class="headerlink" title="5. 多分类学习"></a>5. 多分类学习</h2><h3 id="5-1-一对一OvO"><a href="#5-1-一对一OvO" class="headerlink" title="5.1 一对一OvO"></a>5.1 一对一OvO</h3><blockquote>
<p>$N$个类别两两配对，产生$N(N-1)/2$个二分类任务，投票产生结果</p>
</blockquote>
<!-- ![](images/OvO.png) -->
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/OvO.png" alt="OvO.png"></p>
<h3 id="5-2-一对其余OvR"><a href="#5-2-一对其余OvR" class="headerlink" title="5.2 一对其余OvR"></a>5.2 一对其余OvR</h3><blockquote>
<p>$N$个类别每次选一个作为正例，其余反例，产生$N$个分类器，取置信度最大的类别标记作为结果</p>
</blockquote>
<p>区别</p>
<ul>
<li>OvR需要$N$个分类器，OvO需要$N(N-1)/2$个分类器，因此OvO的存储开销和测试时间开销通常更大；</li>
<li>OvR使用全部数据，OvO使用两个分类的数据，因此OvO训练时间开销通常更小；</li>
<li>预测性能取决于具体的数据分布，在多数情况下两者差不多。</li>
</ul>
<h3 id="5-3-多对多MvM"><a href="#5-3-多对多MvM" class="headerlink" title="5.3 多对多MvM"></a>5.3 多对多MvM</h3><blockquote>
<p>每次将若干类作为正类，若干个其它类作为反类，使用纠错输出码ECOC设计，将最小距离作为预测结果</p>
</blockquote>
<!-- ![](images/ecoc.png) -->
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/ecoc.png" alt="ecoc.png"></p>
<h2 id="6-类别不平衡问题"><a href="#6-类别不平衡问题" class="headerlink" title="6. 类别不平衡问题"></a>6. 类别不平衡问题</h2><p>比如正例2个，反例998个，那么如果一个学习器始终将新样本预测为反例即可得到99.8%的准确率，可是这个有用吗？</p>
<p>类别不平衡就是指分类任务中不同类别的训练样例数目差别很大的情况。</p>
<p>若训练集中正反例数目相当，则分类器决策规则为</p>
<script type="math/tex; mode=display">
若\frac{y}{1-y} > 1，则预测为正例</script><p>当训练集中正反例数目不同时，令$m^+，m^-$分别表示正反例数目，则</p>
<script type="math/tex; mode=display">
若\frac{y}{1-y} > \frac{m^+}{m^-}，则预测为正例</script><p>同样的，只需要对预测值进行处理也可以实现同样的效果，即<strong>再缩放</strong></p>
<script type="math/tex; mode=display">
\frac{y'}{1-y'} = \frac{y}{1-y} \times \frac{m^-}{m^+}</script><p>当然还可以在数据采样的过程中避免出现类别不平衡：</p>
<ul>
<li>欠采样：去除过多的类别的样例，使正反样例数目相当；</li>
<li>过采样：增加过少的类别的样例，使正反样例数目相当；</li>
<li>使用再缩放</li>
</ul>
]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Theory</tag>
        <tag>Linear Model</tag>
      </tags>
  </entry>
  <entry>
    <title>数据集</title>
    <url>/archives/fcb2659b.html</url>
    <content><![CDATA[<p><strong>没有数据集，机器学个锤子~~~</strong></p>
<blockquote>
<p>转载自雷锋网</p>
</blockquote>
<h2 id="0-Python第三方库"><a href="#0-Python第三方库" class="headerlink" title="0. Python第三方库"></a>0. Python第三方库</h2><h3 id="1-Tensorflow"><a href="#1-Tensorflow" class="headerlink" title="1. Tensorflow"></a>1. <a href="https://tensorflow.google.cn/api_docs/python/tf/keras/datasets" target="_blank" rel="noopener">Tensorflow</a></h3><p><strong>需要翻墙</strong></p>
<blockquote>
<p>tensorflow.keras.datasets.boston_housing 房价数据，用于回归<br>tensorflow.keras.datasets.cifar10 10物体分类图片数据，用于分类<br>tensorflow.keras.datasets.cifar100 100物体分类图片数据，用于分类<br>tensorflow.keras.datasets.fashion_mnist 服饰图像数据，用于分类<br>tensorflow.keras.datasets.imdb imdb电影评论数据，用于分类<br>tensorflow.keras.datasets.mnist 手写数字数据，用于分类<br>tensorflow.keras.datasets.reuters 路透社话题数据，用于分类</p>
</blockquote>
<h3 id="2-Scikit-learn"><a href="#2-Scikit-learn" class="headerlink" title="2. Scikit-learn"></a>2. <a href="http://scikit-learn.org/stable/modules/classes.html#module-sklearn.datasets" target="_blank" rel="noopener">Scikit-learn</a></h3><p><strong>小数据集</strong></p>
<blockquote>
<p>sklearn.datasets.load_boston 房价数据，用于回归<br>sklearn.datasets.load_breast_cancer 乳腺癌数据，用于分类<br>sklearn.datasets.load_diabetes 糖尿病数据，用于回归<br>sklearn.datasets.load_digits 手写数字数据，用于分类<br>sklearn.datasets.load_iris 鸢尾花数据，用于分类<br>sklearn.datasets.load_wine 酒类数据，用于分类<br>sklearn.datasets.load_linnerud 体能数据，用于多元分类</p>
</blockquote>
<p><strong>在线下载数据集</strong></p>
<blockquote>
<p>sklearn.datasets.fetch_20newsgroups 新闻数据，用于分类<br>sklearn.datasets.fetch_california_housing 房价数据，用于回归<br>sklearn.datasets.fetch_covtype 森林覆盖数据，用于分类<br>sklearn.datasets.fetch_kddcup99 KDD比赛网络连接数据，用于分类<br>sklearn.datasets.fetch_lfw_pairs 野外人脸数据，用于分类<br>sklearn.datasets.fetch_lfw_people 野外人脸数据，用于分类<br>sklearn.datasets.fetch_olivetti_faces Olivetti人脸数据，用于分类<br>sklearn.datasets.fetch_rcv1 RCV1多标签数据，用于分类</p>
</blockquote>
<a id="more"></a>
<h2 id="1-图像分类"><a href="#1-图像分类" class="headerlink" title="1. 图像分类"></a>1. 图像分类</h2><h3 id="1-MNIST"><a href="#1-MNIST" class="headerlink" title="1. MNIST"></a>1. <a href="https://s3.amazonaws.com/fast-ai-imageclas/mnist_png.tgz" target="_blank" rel="noopener">MNIST</a></h3><p>经典的小型（28x28 像素）灰度手写数字数据集，开发于 20 世纪 90 年代，主要用于测试当时最复杂的模型；到了今日，MNIST 数据集更多被视作深度学习的基础教材。fast.ai 版本的数据集舍弃了原始的特殊二进制格式，转而采用标准的 PNG 格式，以便在目前大多数代码库中作为正常的工作流使用；如果您只想使用与原始同样的单输入通道，只需在通道轴中选取单个切片即可。</p>
<h3 id="2-CIFAR10"><a href="#2-CIFAR10" class="headerlink" title="2. CIFAR10"></a>2. <a href="https://s3.amazonaws.com/fast-ai-imageclas/cifar10.tgz" target="_blank" rel="noopener">CIFAR10</a></h3><p>10 个类别，多达 60000 张的 32x32 像素彩色图像（50000 张训练图像和 10000 张测试图像），平均每种类别拥有 6000 张图像。广泛用于测试新算法的性能。fast.ai 版本的数据集舍弃了原始的特殊二进制格式，转而采用标准的 PNG 格式，以便在目前大多数代码库中作为正常的工作流使用。</p>
<h3 id="3-CIFAR100"><a href="#3-CIFAR100" class="headerlink" title="3. CIFAR100"></a>3. <a href="https://s3.amazonaws.com/fast-ai-imageclas/cifar100.tgz" target="_blank" rel="noopener">CIFAR100</a></h3><p>与 CIFAR-10 类似，区别在于 CIFAR-100 拥有 100 种类别，每个类别包含 600 张图像（500 张训练图像和 100 张测试图像），然后这 100 个类别又被划分为 20 个超类。因此，数据集里的每张图像自带一个「精细」标签（所属的类）和一个「粗略」标签（所属的超类）。</p>
<h3 id="4-Caltech-UCSD-Birds-200-2011"><a href="#4-Caltech-UCSD-Birds-200-2011" class="headerlink" title="4. Caltech-UCSD Birds-200-2011"></a>4. <a href="https://s3.amazonaws.com/fast-ai-imageclas/CUB_200_2011.tgz" target="_blank" rel="noopener">Caltech-UCSD Birds-200-2011</a></h3><p>包含 200 种鸟类（主要为北美洲鸟类）照片的图像数据集，可用于图像识别工作。分类数量：200；图片数量：11,788；平均每张图片含有的标注数量：15 个局部位置，312 个二进制属性，1 个边框框。</p>
<h3 id="5-Caltech-101"><a href="#5-Caltech-101" class="headerlink" title="5. Caltech 101"></a>5. <a href="https://s3.amazonaws.com/fast-ai-imageclas/caltech_101.tar.gz" target="_blank" rel="noopener">Caltech 101</a></h3><p>包含 101 种物品类别的图像数据集，平均每个类别拥有 40—800 张图像，其中很大一部分类别的图像数量固为 50 张左右。每张图像的大小约为 300 x 200 像素。本数据集也可以用于目标检测定位。</p>
<h3 id="6-Oxford-IIIT-Pet"><a href="#6-Oxford-IIIT-Pet" class="headerlink" title="6. Oxford-IIIT Pet"></a>6. <a href="https://s3.amazonaws.com/fast-ai-imageclas/oxford-iiit-pet.tgz" target="_blank" rel="noopener">Oxford-IIIT Pet</a></h3><p>包含 37 种宠物类别的图像数据集，每个类别约有 200 张图像。这些图像在比例、姿势以及光照方面有着丰富的变化。本数据集也可以用于目标检测定位。</p>
<h3 id="7-Oxford-102-Flowers"><a href="#7-Oxford-102-Flowers" class="headerlink" title="7. Oxford 102 Flowers"></a>7. <a href="https://s3.amazonaws.com/fast-ai-imageclas/oxford-102-flowers.tgz" target="_blank" rel="noopener">Oxford 102 Flowers</a></h3><p>包含 102 种花类的图像数据集（主要是一些英国常见的花类），每个类别包含 40—258 张图像。这些图像在比例、姿势以及光照方面有着丰富的变化。</p>
<h3 id="8-Food-101"><a href="#8-Food-101" class="headerlink" title="8. Food-101"></a>8. <a href="https://s3.amazonaws.com/fast-ai-imageclas/food-101.tgz" target="_blank" rel="noopener">Food-101</a></h3><p>包含 101 种食品类别的图像数据集，共有 101,000 张图像，平均每个类别拥有 250 张测试图像和 750 张训练图像。训练图像未经过数据清洗。所有图像都已经重新进行了尺寸缩放，最大边长达到了 512 像素。</p>
<h3 id="9-Stanford-cars"><a href="#9-Stanford-cars" class="headerlink" title="9. Stanford cars"></a>9. <a href="https://s3.amazonaws.com/fast-ai-imageclas/stanford-cars.tgz" target="_blank" rel="noopener">Stanford cars</a></h3><p>包含 196 种汽车类别的图像数据集，共有 16,185 张图像，分别为 8,144 张训练图像和 8,041 张测试图像，每个类别的图像类型比例基本上都是五五开。本数据集的类别主要基于汽车的牌子、车型以及年份进行划分。</p>
<h2 id="2-自然语言处理领域"><a href="#2-自然语言处理领域" class="headerlink" title="2. 自然语言处理领域"></a>2. 自然语言处理领域</h2><h3 id="1-IMDb-Large-Movie-Review-Dataset"><a href="#1-IMDb-Large-Movie-Review-Dataset" class="headerlink" title="1. IMDb Large Movie Review Dataset"></a>1. <a href="https://s3.amazonaws.com/fast-ai-nlp/imdb.tgz" target="_blank" rel="noopener">IMDb Large Movie Review Dataset</a></h3><p>用于情感二元分类的数据集，其中包含 25,000 条用于训练的电影评论和 25,000 条用于测试的电影评论，这些电影评论的特点是两极分化特别明显。另外数据集里也包含未标记的数据可供使用。</p>
<h3 id="2-Wikitext-103"><a href="#2-Wikitext-103" class="headerlink" title="2. Wikitext-103"></a>2. <a href="https://s3.amazonaws.com/fast-ai-nlp/wikitext-103.tgz" target="_blank" rel="noopener">Wikitext-103</a></h3><p>超过 1 亿个语句的数据合集，全部从维基百科的 Good 与 Featured 文章中提炼出来。广泛用于语言建模，当中包括 fastai 库和 ULMFiT 算法中经常用到的预训练模型。</p>
<h3 id="3-Wikitext-2"><a href="#3-Wikitext-2" class="headerlink" title="3. Wikitext-2"></a>3. <a href="https://s3.amazonaws.com/fast-ai-nlp/wikitext-2.tgz" target="_blank" rel="noopener">Wikitext-2</a></h3><p>Wikitext-103 的子集，主要用于测试小型数据集的语言模型训练效果。</p>
<h3 id="4-WMT-2015-French-English-parallel-texts"><a href="#4-WMT-2015-French-English-parallel-texts" class="headerlink" title="4. WMT 2015 French/English parallel texts"></a>4. <a href="https://s3.amazonaws.com/fast-ai-nlp/giga-fren.tgz" target="_blank" rel="noopener">WMT 2015 French/English parallel texts</a></h3><p>用于训练翻译模型的法语/英语平行文本，拥有超过 2000 万句法语与英语句子。本数据集由 Chris Callison-Burch 创建，他抓取了上百万个网页，然后通过一组简单的启发式算法将法语网址转换为英文网址，并默认这些文档之间互为译文。</p>
<h3 id="5-AG-News"><a href="#5-AG-News" class="headerlink" title="5. AG News"></a>5. <a href="https://s3.amazonaws.com/fast-ai-nlp/ag_news_csv.tgz" target="_blank" rel="noopener">AG News</a></h3><p>496,835 条来自 AG 新闻语料库 4 大类别超过 2000 个新闻源的新闻文章，数据集仅仅援用了标题和描述字段。每个类别分别拥有 30,000 个训练样本及 1900 个测试样本。</p>
<h3 id="6-Amazon-reviews-Full"><a href="#6-Amazon-reviews-Full" class="headerlink" title="6. Amazon reviews - Full"></a>6. <a href="https://s3.amazonaws.com/fast-ai-nlp/amazon_review_full_csv.tgz" target="_blank" rel="noopener">Amazon reviews - Full</a></h3><p>34,686,770 条来自 6,643,669 名亚马逊用户针对 2,441,053 款产品的评论，数据集主要来源于斯坦福网络分析项目（SNAP）。数据集的每个类别分别包含 600,000 个训练样本和 130,000 个测试样本。</p>
<h3 id="7-Amazon-reviews-Polarity"><a href="#7-Amazon-reviews-Polarity" class="headerlink" title="7. Amazon reviews - Polarity"></a>7. <a href="https://s3.amazonaws.com/fast-ai-nlp/amazon_review_polarity_csv.tgz" target="_blank" rel="noopener">Amazon reviews - Polarity</a></h3><p>34,686,770 条来自 6,643,669 名亚马逊用户针对 2,441,053 款产品的评论，数据集主要来源于斯坦福网络分析项目（SNAP）。该子集的每个情绪极性数据集分别包含 1,800,000 个训练样本和 200,000 个测试样本。</p>
<h3 id="8-DBPedia-ontology"><a href="#8-DBPedia-ontology" class="headerlink" title="8. DBPedia ontology"></a>8. <a href="https://s3.amazonaws.com/fast-ai-nlp/dbpedia_csv.tgz" target="_blank" rel="noopener">DBPedia ontology</a></h3><p>来自 DBpedia 2014 的 14 个不重叠的分类的 40,000 个训练样本和 5,000 个测试样本。</p>
<h3 id="9-Sogou-news"><a href="#9-Sogou-news" class="headerlink" title="9. Sogou news"></a>9. <a href="https://s3.amazonaws.com/fast-ai-nlp/sogou_news_csv.tgz" target="_blank" rel="noopener">Sogou news</a></h3><p>2,909,551 篇来自 SogouCA 和 SogouCS 新闻语料库 5 个类别的新闻文章。每个类别分别包含 90,000 个训练样本和 12,000 个测试样本。这些汉字都已经转换成拼音。</p>
<h3 id="10-Yahoo-Answers"><a href="#10-Yahoo-Answers" class="headerlink" title="10. Yahoo! Answers"></a>10. <a href="https://s3.amazonaws.com/fast-ai-nlp/yahoo_answers_csv.tgz" target="_blank" rel="noopener">Yahoo! Answers</a></h3><p>来自雅虎 Yahoo! Answers Comprehensive Questions and Answers1.0 数据集的 10 个主要分类数据。每个类别分别包含 140,000 个训练样本和 5,000 个测试样本。</p>
<h3 id="11-Yelp-reviews-Full"><a href="#11-Yelp-reviews-Full" class="headerlink" title="11. Yelp reviews - Full"></a>11. <a href="https://s3.amazonaws.com/fast-ai-nlp/yelp_review_full_csv.tgz" target="_blank" rel="noopener">Yelp reviews - Full</a></h3><p>来自 2015 年 Yelp Dataset Challenge 数据集的 1,569,264 个样本。每个评级分别包含 130,000 个训练样本和 10,000 个 测试样本。</p>
<h3 id="12-Yelp-reviews-Polarity"><a href="#12-Yelp-reviews-Polarity" class="headerlink" title="12. Yelp reviews - Polarity"></a>12. <a href="https://s3.amazonaws.com/fast-ai-nlp/yelp_review_polarity_csv.tgz" target="_blank" rel="noopener">Yelp reviews - Polarity</a></h3><p>来自 2015 年 Yelp Dataset Challenge 数据集的 1,569,264 个样本。该子集中的不同极性分别包含 280,000 个训练样本和 19,000 个测试样本。</p>
<h2 id="3-语音识别领域"><a href="#3-语音识别领域" class="headerlink" title="3. 语音识别领域"></a>3. 语音识别领域</h2><h3 id="1-TIMIT"><a href="#1-TIMIT" class="headerlink" title="1. TIMIT"></a>1. <a href="https://catalog.ldc.upenn.edu/LDC93S1" target="_blank" rel="noopener">TIMIT</a></h3><p>简介：语音识别语料库</p>
<p>规模：6.3K个英语句子</p>
<h3 id="2-VoxForge"><a href="#2-VoxForge" class="headerlink" title="2. VoxForge"></a>2. <a href="http://www.voxforge.org/" target="_blank" rel="noopener">VoxForge</a></h3><p>简介：Free GPL Speech Audio</p>
<h3 id="3-2000-HUB5-English-Evaluation-Transcripts"><a href="#3-2000-HUB5-English-Evaluation-Transcripts" class="headerlink" title="3. 2000 HUB5 English Evaluation Transcripts"></a>3. <a href="https://catalog.ldc.upenn.edu/LDC2002T43" target="_blank" rel="noopener">2000 HUB5 English Evaluation Transcripts</a></h3><p>简介：英语电话对话语音数据集</p>
<p>规模：40 source speech data files</p>
<h3 id="4-CHIME"><a href="#4-CHIME" class="headerlink" title="4. CHIME"></a>4. <a href="http://spandh.dcs.shef.ac.uk/chime_challenge/data.html" target="_blank" rel="noopener">CHIME</a></h3><p>简介：CHiME-5竞赛数据集</p>
<p>规模：The CHiME-5 data consists of 20 parties each recorded in a different home</p>
<h3 id="5-Yesno"><a href="#5-Yesno" class="headerlink" title="5. Yesno"></a>5. <a href="http://www.openslr.org/1/" target="_blank" rel="noopener">Yesno</a></h3><p>简介：Sixty recordings of one individual saying yes or no in Hebrew; each recording is eight words long</p>
<p>规模：60 .wav files, sampled at 8 kHz</p>
<h3 id="6-Vystadial"><a href="#6-Vystadial" class="headerlink" title="6. Vystadial"></a>6. <a href="http://www.openslr.org/6/" target="_blank" rel="noopener">Vystadial</a></h3><p>简介：English and Czech data, mirrored from the Vystadial project</p>
<h3 id="7-TED-LIUM"><a href="#7-TED-LIUM" class="headerlink" title="7. TED-LIUM"></a>7. <a href="http://www.openslr.org/7/" target="_blank" rel="noopener">TED-LIUM</a></h3><p>简介：English speech recognition training corpus from TED talks, created by Laboratoire d’Informatique de l’Université du Maine (LIUM)</p>
<p>规模：118 hours of speech</p>
<h3 id="8-LibriSpeech-ASR-corpus"><a href="#8-LibriSpeech-ASR-corpus" class="headerlink" title="8. LibriSpeech ASR corpus"></a>8. <a href="http://www.openslr.org/12/" target="_blank" rel="noopener">LibriSpeech ASR corpus</a></h3><p>简介：Large-scale (1000 hours) corpus of read English speech</p>
<p>规模：1000 hours of speech</p>
<h3 id="9-The-AMI-Corpus"><a href="#9-The-AMI-Corpus" class="headerlink" title="9. The AMI Corpus"></a>9. <a href="http://www.openslr.org/16/" target="_blank" rel="noopener">The AMI Corpus</a></h3><p>简介：Acoustic speech data and meta-data from The AMI corpus</p>
<p>规模：100 hours of meeting recordings</p>
<h3 id="10-THCHS-30"><a href="#10-THCHS-30" class="headerlink" title="10. THCHS-30"></a>10. <a href="http://www.openslr.org/18/" target="_blank" rel="noopener">THCHS-30</a></h3><p>简介：A Free Chinese Speech Corpus Released by CSLT@Tsinghua University</p>
<h3 id="11-TED-LIUMv2"><a href="#11-TED-LIUMv2" class="headerlink" title="11. TED-LIUMv2"></a>11. <a href="http://www.openslr.org/19/" target="_blank" rel="noopener">TED-LIUMv2</a></h3><p>简介：TED-LIUM corpus release 2, English speech recognition training corpus from TED talks, created by Laboratoire d’Informatique de l’Université du Maine (LIUM)</p>
<h3 id="12-THUYG-20"><a href="#12-THUYG-20" class="headerlink" title="12. THUYG-20"></a>12. <a href="http://www.openslr.org/22/" target="_blank" rel="noopener">THUYG-20</a></h3><p>简介：A free Uyghur speech database Released by CSLT@Tsinghua University &amp; Xinjiang University</p>
<h3 id="13-Aishell"><a href="#13-Aishell" class="headerlink" title="13. Aishell"></a>13. <a href="http://www.openslr.org/33/" target="_blank" rel="noopener">Aishell</a></h3><p>简介：Mandarin data, provided by Beijing Shell Shell Technology Co.,Ltd</p>
<h3 id="14-Free-ST-Chinese-Mandarin-Corpus"><a href="#14-Free-ST-Chinese-Mandarin-Corpus" class="headerlink" title="14. Free ST Chinese Mandarin Corpus"></a>14. <a href="http://www.openslr.org/38/" target="_blank" rel="noopener">Free ST Chinese Mandarin Corpus</a></h3><p>简介：A free Chinese Mandarin corpus by Surfingtech (www.surfing.ai)</p>
<p>规模：containing utterances from 855 speakers, 102600 utterances</p>
<h3 id="15-Free-ST-American-English-Corpus"><a href="#15-Free-ST-American-English-Corpus" class="headerlink" title="15. Free ST American English Corpus"></a>15. <a href="http://www.openslr.org/45/" target="_blank" rel="noopener">Free ST American English Corpus</a></h3><p>简介：A free American English corpus by Surfingtech (www.surfing.ai)</p>
<p>规模：containing utterances from 10 speakers, Each speaker has about 350 utterances</p>
<h3 id="16-TED-LIUM-Release-3"><a href="#16-TED-LIUM-Release-3" class="headerlink" title="16. TED-LIUM Release 3"></a>16. <a href="http://www.openslr.org/51/" target="_blank" rel="noopener">TED-LIUM Release 3</a></h3><p>TED-LIUM corpus release 3</p>
<h3 id="17-FSDD"><a href="#17-FSDD" class="headerlink" title="17. FSDD"></a>17. <a href="https://github.com/Jakobovski/free-spoken-digit-dataset" target="_blank" rel="noopener">FSDD</a></h3><p>简介：一个简单的语音数据集</p>
<p>规模：1.5K recordings</p>
<h3 id="18-FMA"><a href="#18-FMA" class="headerlink" title="18. FMA"></a>18. <a href="https://github.com/mdeff/fma" target="_blank" rel="noopener">FMA</a></h3><p>简介：A Dataset For Music Analysis</p>
<p>规模：106,574 tracks</p>
<h3 id="19-Ballroom"><a href="#19-Ballroom" class="headerlink" title="19. Ballroom"></a>19. <a href="http://mtg.upf.edu/ismir2004/contest/tempoContest/node5.html" target="_blank" rel="noopener">Ballroom</a></h3><p>简介：交际舞音频</p>
<p>规模：698个样本</p>
<h3 id="20-Million-Song-Dataset"><a href="#20-Million-Song-Dataset" class="headerlink" title="20. Million Song Dataset"></a>20. <a href="https://labrosa.ee.columbia.edu/millionsong/" target="_blank" rel="noopener">Million Song Dataset</a></h3><p>简介：歌曲集</p>
<p>规模：one million songs</p>
<h2 id="4-目标检测定位"><a href="#4-目标检测定位" class="headerlink" title="4. 目标检测定位"></a>4. 目标检测定位</h2><h3 id="1-Camvid-Motion-based-Segmentation-and-Recognition-Dataset"><a href="#1-Camvid-Motion-based-Segmentation-and-Recognition-Dataset" class="headerlink" title="1. Camvid: Motion-based Segmentation and Recognition Dataset"></a>1. <a href="https://s3.amazonaws.com/fast-ai-imagelocal/camvid.tgz" target="_blank" rel="noopener">Camvid: Motion-based Segmentation and Recognition Dataset</a></h3><p>700 张包含像素级别语义分割的图像分割数据集，每张图像都经过第二个人的检查和确认来确保数据的准确性。</p>
<h3 id="2-PASCAL-Visual-Object-Classes-VOC"><a href="#2-PASCAL-Visual-Object-Classes-VOC" class="headerlink" title="2. PASCAL Visual Object Classes (VOC)"></a>2. <a href="https://s3.amazonaws.com/fast-ai-imagelocal/pascal-voc.tgz" target="_blank" rel="noopener">PASCAL Visual Object Classes (VOC)</a></h3><p>用于类识别的标准图像数据集——这里同时提供了 2007 与 2012 版本。2012 年的版本拥有 20 个类别。训练数据的 11,530 张图像中包含了 27,450 个 ROI 注释对象和 6,929 个目标分割数据。</p>
<h3 id="3-COCO-数据集"><a href="#3-COCO-数据集" class="headerlink" title="3. COCO 数据集"></a>3. COCO 数据集</h3><p>目前最常用于图像检测定位的数据集应该要属 COCO 数据集（全称为 Common Objects in Context）。本文提供 2017 版 COCO 数据集的所有文件，另外附带由 fast.ai 创建的子集数据集。我们可以从 <a href="http://cocodataset.org/#download" target="_blank" rel="noopener">COCO 数据集下载页面</a>获取每个 COCO 数据集的详情。fast.ai 创建的子集数据集包含五个选定类别的所有图像，这五个选定类别分别为：椅子、沙发、电视遥控、书籍和花瓶。</p>
<p>fast.ai 创建的子集数据集：<a href="https://s3.amazonaws.com/fast-ai-coco/coco_sample.tgz" target="_blank" rel="noopener">https://s3.amazonaws.com/fast-ai-coco/coco_sample.tgz</a></p>
<p>训练图像数据集：<a href="https://s3.amazonaws.com/fast-ai-coco/train2017.zip" target="_blank" rel="noopener">https://s3.amazonaws.com/fast-ai-coco/train2017.zip</a></p>
<p>验证图像数据集：<a href="https://s3.amazonaws.com/fast-ai-coco/val2017.zip" target="_blank" rel="noopener">https://s3.amazonaws.com/fast-ai-coco/val2017.zip</a></p>
<p>测试图像数据集：<a href="https://s3.amazonaws.com/fast-ai-coco/test2017.zip" target="_blank" rel="noopener">https://s3.amazonaws.com/fast-ai-coco/test2017.zip</a></p>
<p>未经标注的图像数据集：<a href="https://s3.amazonaws.com/fast-ai-coco/unlabeled2017.zip" target="_blank" rel="noopener">https://s3.amazonaws.com/fast-ai-coco/unlabeled2017.zip</a></p>
<p>测试图像数据集详情：<a href="https://s3.amazonaws.com/fast-ai-coco/image_info_test2017.zip" target="_blank" rel="noopener">https://s3.amazonaws.com/fast-ai-coco/image_info_test2017.zip</a></p>
<p>未经标注的图像数据集详情：<a href="https://s3.amazonaws.com/fast-ai-coco/image_info_unlabeled2017.zip" target="_blank" rel="noopener">https://s3.amazonaws.com/fast-ai-coco/image_info_unlabeled2017.zip</a></p>
<p>训练/验证注释集：<a href="https://s3.amazonaws.com/fast-ai-coco/annotations_trainval2017.zip" target="_blank" rel="noopener">https://s3.amazonaws.com/fast-ai-coco/annotations_trainval2017.zip</a></p>
<p>主体训练/验证注释集：<a href="https://s3.amazonaws.com/fast-ai-coco/stuff_annotations_trainval2017.zip" target="_blank" rel="noopener">https://s3.amazonaws.com/fast-ai-coco/stuff_annotations_trainval2017.zip</a></p>
<p>全景训练/验证注释集：<a href="https://s3.amazonaws.com/fast-ai-coco/panoptic_annotations_trainval2017.zip" target="_blank" rel="noopener">https://s3.amazonaws.com/fast-ai-coco/panoptic_annotations_trainval2017.zip</a></p>
]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Dataset</tag>
      </tags>
  </entry>
  <entry>
    <title>模型评估与选择</title>
    <url>/archives/7d1dcda7.html</url>
    <content><![CDATA[<p><strong>论如何成为一个优秀的瓜农</strong></p>
<p>参考：</p>
<blockquote>
<p>西瓜书第2章 模型评估与选择</p>
</blockquote>
<h2 id="1-经验误差与过拟合"><a href="#1-经验误差与过拟合" class="headerlink" title="1. 经验误差与过拟合"></a>1. 经验误差与过拟合</h2><ul>
<li>错误率（error rate）：在m个样本中有a个样本分类错误，即错误率<code>E = a/m</code>；</li>
<li>精度（accuracy）：<code>1 - a/m</code>；</li>
<li>误差（error）：模型的预测输出与样本的真实输出之间的差异；</li>
<li>训练误差（training error）：训练集上的误差；</li>
<li><p>泛化误差（generalization error）：新样本上的误差，或者说测试集上的误差；</p>
</li>
<li><p>过拟合（overfitting）：学习器把训练集中的某些特征当作一般特征，导致泛化性能下降，表现为模型在训练集上表现非常好，在测试集上表现不好；</p>
</li>
<li>欠拟合（underfitting）：学习器尚未习得样本数据集的特性，导致无法正确的预测，表现为模型在训练集和测试集上表现都不好；</li>
</ul>
<p><strong>解决方法：</strong></p>
<ul>
<li>过拟合：减少训练轮数或剪枝处理，选择泛化性能更强的学习器，很难处理；</li>
<li>欠拟合：增加训练轮数或增加分支，容易解决；</li>
</ul>
<a id="more"></a>
<h2 id="2-评估方法"><a href="#2-评估方法" class="headerlink" title="2. 评估方法"></a>2. 评估方法</h2><h3 id="2-1-目标"><a href="#2-1-目标" class="headerlink" title="2.1 目标"></a>2.1 目标</h3><blockquote>
<p>训练集用于训练学习器，测试集用于测试学习器泛化性能，训练集与测试集不相交，且样本分布应大致相同。</p>
</blockquote>
<h3 id="2-2-原理"><a href="#2-2-原理" class="headerlink" title="2.2 原理"></a>2.2 原理</h3><blockquote>
<p>如果测试集与训练集相同或者是训练集的子集，那么学习器只需要朝着过拟合的方向发展就可以实现在测试集上很好的效果，但是面对新的样本，那么过拟合就成为了必然的缺陷，所以划分测试集是为了模拟面对新样本的状况，能够更好的体现学习器的泛化性能。</p>
</blockquote>
<h3 id="2-3-划分技巧"><a href="#2-3-划分技巧" class="headerlink" title="2.3 划分技巧"></a>2.3 划分技巧</h3><p>我们有一个包含了m个样例的数据集$D = {(x_1, y_1), (x_2, y_2),…,(x_m, y_m)}$，通过对D进行适当的处理，从中产生训练集S和测试集T。</p>
<p><strong>1. 留出法</strong></p>
<p>直接将数据集D划分为两个互斥的集合T/S，T，S互斥。一般<code>T : S = 5 : 1 ~ 3 : 1</code>。</p>
<p>为了尽可能的保持数据分布的一致性，我们还需要进行采样：<br>采样方式为“分层采样”，即在正反样本中采样比例相同，或者是多分类问题中各个种类采样比例相同。</p>
<p>在上面的采样中，仍然会出现问题，比如选取的样本是前XX个还是后XX个，解决方法是重复进行若干次划分，例如进行100次划分，每次都产生一个训练/测试集用于实验评估，得到的100个结果取平均。</p>
<p><strong>2. 交叉验证法</strong></p>
<p>将数据集$D$划分为k个大小相似的互斥子集$D_1,…,D_k$，每个子集$D_i$都尽可能的保持数据分布一致性，即从D中通过分层采样得到。每次用k - 1个子集的并集训练，剩下的那一个子集用于测试；这样就可以进行k次训练和测试，最后取均值。k常取10，也叫“k折交叉验证”</p>
<p>同样在分层采样的过程中也常常需要重复若干次划分，同上，因此常见的有“10次10折交叉验证”。</p>
<p>交叉验证的特例：留一法</p>
<ul>
<li><p>优点：评估结果最准确；</p>
</li>
<li><p>缺点：训练的模型数等于数据集样本数，如果数据集包括百万数据，那么需要训练百万个模型，训练成本难以忍受。</p>
</li>
</ul>
<p><strong>3. 自助法</strong></p>
<p>给定包含m个样本的数据集D，每次从D中随机挑选一个样本放入$D’$（复制不是剪切），重复执行m次，得到一个包含m个样本的数据集$D’$，我们可以将$D’$作为训练集，D$D’$作为测试集。</p>
<ul>
<li>$D’$中的样本有重复</li>
<li>D中大约有36.8%的样本未出现在数据集$D’$中</li>
<li>自助法在数据集较小/难以有效划分训练/测试集时很有用，但是自助法产生的数据集改变了初始数据集的分布，会引入估计偏差，因此，在数据量足够时，留出法和交叉验证法更常用</li>
</ul>
<p><strong>4. 调参</strong></p>
<ul>
<li>对每一个参数选定一个范围和变化步长</li>
<li>模型评估阶段需要划分测试集，最终提交给用户的模型在训练过程中不需要划分测试集，直接使用全部数据</li>
<li>在研究阶段，将数据集划分为训练集、验证集和测试集，测试集用于评估模型在实际使用时的泛化能力，验证集用于模型选择和调参</li>
</ul>
<h2 id="3-性能度量"><a href="#3-性能度量" class="headerlink" title="3. 性能度量"></a>3. 性能度量</h2><h3 id="3-1-常见性能度量函数"><a href="#3-1-常见性能度量函数" class="headerlink" title="3.1 常见性能度量函数"></a>3.1 常见性能度量函数</h3><p><strong>1. 均方误差MSE（Mean Squard Error）</strong></p>
<script type="math/tex; mode=display">
E(f; D)) = \frac{1}{m} \sum_{i=1}^{m} (f(\boldsymbol{x}_i) - y_i) ^ 2</script><p>对于数据分布$D$和概率密度函数$p(·)$，均方误差为</p>
<script type="math/tex; mode=display">
E(f; D) = \int_{\boldsymbol{x} \sim  D}^{ } (f(\boldsymbol{x}) - y)^2p(\boldsymbol{x})d\boldsymbol{x}</script><p><strong>2. 均方根误差RMSE（Root Mean Squard Error）</strong></p>
<script type="math/tex; mode=display">
E(f; D)) = \sqrt{\frac{1}{m} \sum_{i=1}^{m} (f(\boldsymbol{x}_i) - y_i) ^ 2}</script><p><strong>3. 平均绝对误差MAE（Mean Absolute Error）</strong></p>
<script type="math/tex; mode=display">
E(f; D)) = \frac{1}{m} \sum_{i=1}^{m} \left | f(\boldsymbol{x}_i) - y_i \right |</script><p>区别：</p>
<ul>
<li>MSE和RMSE放大数据波动，预测效果不好的值产生的残差会被放大；</li>
<li>RMSE和MAE的数量级和单位与数据相同，因此可以直观的显示模型性能，但是RMSE更关注错误情况。</li>
</ul>
<h3 id="3-2-查准率、查全率与F1"><a href="#3-2-查准率、查全率与F1" class="headerlink" title="3.2 查准率、查全率与F1"></a>3.2 查准率、查全率与F1</h3><p>分类结果混淆矩阵</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>真实情况/预测结果</th>
<th>正例</th>
<th>反例</th>
</tr>
</thead>
<tbody>
<tr>
<td>正例</td>
<td>TP（真正例）</td>
<td>FN（假反例）</td>
</tr>
<tr>
<td>反例</td>
<td>FP（假正例）</td>
<td>TN（真反例）</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>查准率P（precision）</li>
</ul>
<script type="math/tex; mode=display">
P = \frac{TP}{ TP + FP}</script><ul>
<li>查全率R（recall）</li>
</ul>
<script type="math/tex; mode=display">
R = \frac{TP}{TP + FN}</script><!-- ![](images/pr.png) -->
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/pr.png" alt="pr.png"></p>
<p>查准率与查全率是一对矛盾的度量，如果一条曲线可以将另一条曲线完全“包裹”，则可以判断后者的模型性能比前者弱；如果两条曲线相交，那么可以使用“平衡点”（BEP），即当$P = R$时的值，谁大谁更优，但是BEP还是过于简单，更常用的时F1度量：</p>
<script type="math/tex; mode=display">
F1 = \frac{2 \times P \times R}{P + R} = \frac{2 \times TP}{样例总数 + TP - TN}</script><p>上式中我们对查准率和查全率没有偏向，但是在实际使用中，我们可能会更关注两者之一，那么就需要对其进行加权， $\beta &gt; 1$时查全率有更大影响；$\beta &lt; 1$时查准率有更大影响：</p>
<script type="math/tex; mode=display">
F_{\beta} = \frac{(1 + \beta ^2) \times P \times R}{(\beta ^2 \times P) + R}</script><h3 id="3-3-ROC与AUC"><a href="#3-3-ROC与AUC" class="headerlink" title="3.3 ROC与AUC"></a>3.3 ROC与AUC</h3><p>很多学习器为测试样本产生一个实值或概率预测，然后将这个预测值与一个分类阈值进行比较，若大于阈值则分为正类，否则反类；根据阈值设定的大小，我们决定更加偏向于查准率还是查全率，比如，如果更重视查准率，则提高分类阈值。ROC曲线则是从这个角度出发来研究学习器泛化性能的有力工具。</p>
<p>ROC纵轴“真正例率”（TPR）</p>
<script type="math/tex; mode=display">
TPR = \frac{TP}{TP + FN}</script><p>ROC横轴“假正例率”（FPR）</p>
<script type="math/tex; mode=display">
FPR = \frac{FP}{TN + FP}</script><p>当ROC曲线越接近左边和上边时，模型性能越好。</p>
<!-- ![](images/roc.jpg) -->
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/roc.jpg" alt="roc.jpg"></p>
<p>实际过程中的ROC曲线不是平滑的，绘制过程：给定$m^+$个正例和$m^-$个反例，根据学习器预测结果排序，然后将分类阈值设置为最大，然后分类阈值依次设为每个样例的预测值，设前一个标记点的坐标为$(x, y)$，若当前为真正例，则对应的标记点坐标为$(x, y + \frac{1}{m^+})$，若当前为假正例，则标记点为$(x + \frac{1}{m^-}, y)$；分类阈值最大时对应所有样例均预测为反例，TPR和FPR均为0</p>
<p>AUC为ROC曲线下的面积</p>
<script type="math/tex; mode=display">
AUC = \frac{1}{2} \sum_{i=1}^{m-1}(x_{i+1} - x_i) \cdot (y_i + y_{i+1})</script><p>形式化的看，AUC考虑的是样本预测的排序质量，因此它与排序误差有紧密联系。给定$m^+$个正例和$m^-$个反例，令$D^+$和$D^-$分别表示正、反例集合，则排序损失定义为：</p>
<script type="math/tex; mode=display">
l_{rank} = \frac{1}{m^+m^-} \sum_{\boldsymbol{x}^+ \in D^+}\sum_{\boldsymbol{x}^- \in D^-}(\mathbb{I}(f(\boldsymbol{x}^+) < f(\boldsymbol{x}^-)) + \frac{1}{2}\mathbb{I}(f(\boldsymbol{x}^+) = f(\boldsymbol{x}^-)))</script><p>即考虑每一对正、反例，若正例的预测值小于反例，则记一个罚分，若相等，记0.5个罚分。因此$l_{rank}$对应ROC曲线之上的面积</p>
<script type="math/tex; mode=display">
AUC = 1 - l_{rank}</script><h3 id="3-4-代价敏感错误率与代价曲线"><a href="#3-4-代价敏感错误率与代价曲线" class="headerlink" title="3.4 代价敏感错误率与代价曲线"></a>3.4 代价敏感错误率与代价曲线</h3><p>在实际分类问题中，把健康人诊断为患者和把患者诊断为健康人的代价是完全不同的，因此需要一个代价矩阵对分类错误加权。</p>
<p>二分类代价矩阵</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>真实类别/预测类别</th>
<th>第0类</th>
<th>第1类</th>
</tr>
</thead>
<tbody>
<tr>
<td>第0类</td>
<td>0</td>
<td>cost01</td>
</tr>
<tr>
<td>第1类</td>
<td>cost10</td>
<td>0</td>
</tr>
</tbody>
</table>
</div>
<p>代价敏感错误率为</p>
<script type="math/tex; mode=display">
E(f;D;cost) = \frac{1}{m}(\sum_{\boldsymbol{x}_i \in D^+}\mathbb{I}(f(\boldsymbol{x}_i) \neq y_i) \times cost_{01} + \sum_{\boldsymbol{x}_i \in D^-}\mathbb{I}(f(\boldsymbol{x}_i) \neq y_i) \times cost_{10})</script><p>在非均等代价下，ROC曲线不能直接反映出学习器的期望总体代价，而“代价曲线”则可达到该目的，代价曲线图的横轴是取值为$[0, 1]$的正例率代价</p>
<script type="math/tex; mode=display">
P(+)cost = \frac{p \times cost_{01}}{p \times cost_{01} + (1 - p) \times cost_{10}}</script><p>其中p是样例为正例的概率；纵轴是取值为$[0, 1]$的归一化代价</p>
<script type="math/tex; mode=display">
cost_{norm} = \frac{FNR \times p \times cost_{01} + FPR \times (1 - p) \times cost_{10}}{p \times cost_{01} + (1-p) \times cost_{10}}</script><p>FPR是假正例率，$FNR = 1 - TPR$是假反例率</p>
<!-- ![](images/cost.jpg) -->
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/cost.png" alt="cost.png"></p>
<h2 id="4-偏差与方差"><a href="#4-偏差与方差" class="headerlink" title="4. 偏差与方差"></a>4. 偏差与方差</h2><p>学习算法的期望预测为</p>
<script type="math/tex; mode=display">
\overline{f}(\boldsymbol{x}) = \mathbb{E}_D[f(\boldsymbol{x};D)]</script><p>使用样本数相同的不同训练集产生的方差为</p>
<script type="math/tex; mode=display">
var(\boldsymbol{x}) = \mathbb{E}_D[(f(\boldsymbol{x};D) - \overline{f}(\boldsymbol{x}))^2]</script><p>噪声为</p>
<script type="math/tex; mode=display">
\varepsilon ^2 = \mathbb{E}_D[(y_D - y)^2]</script><p>期望输出与真实标记的差别为偏差（bias）</p>
<script type="math/tex; mode=display">
bias^2(\boldsymbol{x}) = (\overline{f}(\boldsymbol{x}) - y)^2</script><p>假定噪声期望为0，即$\mathbb{E}[y_D - y] = 0$，通过简单的计算可对算法的期望泛化误差进行分解：</p>
<script type="math/tex; mode=display">
E(f;D) = \mathbb{E}_D[(f(\boldsymbol{x};D) - y_D)^2]</script><script type="math/tex; mode=display">
= \mathbb{E}_D[(f(\boldsymbol{x};D) - \overline{f}(\boldsymbol{x}) + \overline{f}(\boldsymbol{x}) - y_D)^2]</script><script type="math/tex; mode=display">
...</script><script type="math/tex; mode=display">
= \mathbb{E}_D[(f(\boldsymbol{x};D) - \overline{f}(\boldsymbol{x}))^2] + (\overline{f}(\boldsymbol{x}) - y)^2 + \mathbb{E}[(y_D - y)^2]</script><p>于是，</p>
<script type="math/tex; mode=display">
E(f;D) = bias^2(\boldsymbol{x}) + var(\boldsymbol{x}) + \varepsilon^2</script><p>也就是说，泛化误差可分解为偏差、方差和噪声之和。</p>
<ul>
<li>偏差度量了学习算法的期望预测与真实结果的偏离程度，即刻画了学习算法本身的拟合能力；</li>
<li>方差度量了同样大小的训练集的变动所导致的学习性能的变化，即刻画了数据扰动所造成的影响；</li>
<li>噪声则表达了学习问题本身的难度</li>
</ul>
<!-- ![](images/error.jpg) -->
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/error.jpg" alt="error.jpg"></p>
]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Theory</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac+Anaconda+PyCharm/VSCode环境搭建</title>
    <url>/archives/eb46b14b.html</url>
    <content><![CDATA[<h1 id="令人愉悦的Python开发环境搭建"><a href="#令人愉悦的Python开发环境搭建" class="headerlink" title="令人愉悦的Python开发环境搭建"></a>令人愉悦的Python开发环境搭建</h1><h2 id="1-系统选择"><a href="#1-系统选择" class="headerlink" title="1. 系统选择"></a>1. 系统选择</h2><ul>
<li>macOS</li>
<li>Windows</li>
<li>Linux</li>
</ul>
<p>写代码我选macOS，黑苹果或者apple都可以。区别：</p>
<ul>
<li>黑苹果性能可控，配置自定义，可以比apple官网上强不少而且便宜，缺点是驱动配置很扎心，系统更新很难受，适合搞机党。</li>
<li>apple官方产品造型好，系统环境稳定，接近linux的开发环境，缺点是配置固定，GPU辣鸡，贵死。</li>
</ul>
<h2 id="2-Python环境"><a href="#2-Python环境" class="headerlink" title="2. Python环境"></a>2. Python环境</h2><p>macOS自带的应该是python2.7版本，理论上可以直接跑代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python filename.py</span><br></pre></td></tr></table></figure>
<p>但是初始环境的第三方库不多，需要自行安装，但是由于涉及到本机系统环境，我不推荐在本机环境装库，为什么呢，等你系统崩溃就凉了，所以可以使用一个好东西—虚拟环境。</p>
<p>在介绍虚拟环境之前我们需要知道python版本兼容问题：</p>
<p>python目前的版本有两种2.x和3.x，为什么有两个版本呢，而且为什么要强调有这么两个版本呢，那是因为这两个版本<strong>不兼容</strong>，哈哈哈。3.x中对2.x的部分内容进行了修改优化，比如说可以在2.x的python版本下运行的代码，到3.x中<strong>不一定</strong>能运行，而且有的第三方库只支持3.x，比如Pytorch。所以开发时需要提前确定我们需要哪个版本的Python环境。</p>
<p>这时候就有必要了解虚拟环境了，这是个好东西啊！</p>
<a id="more"></a>
<h2 id="3-虚拟环境-Anaconda"><a href="#3-虚拟环境-Anaconda" class="headerlink" title="3. 虚拟环境+Anaconda"></a>3. 虚拟环境+Anaconda</h2><p>虚拟环境类似虚拟机，但是不是虚拟机，它只是提供一个开发环境，硬件还是本机的硬件，不过你可在虚拟环境里面管理虚拟环境中的第三方库，虚拟环境中的库与本机的库是分离开的，互不影响，也就是说，比如你本机有Python2.7，但是虚拟环境中可以装python3.6，在虚拟环境中跑代码使用的就是python3.6，是不是就解决了python版本问题。</p>
<p><a href="https://www.anaconda.com/" target="_blank" rel="noopener">Anaconda</a>是一个可以创建并管理虚拟环境的工具，通过anaconda创建的虚拟环境默认就包括了很多机器学习需要的第三方库，所以我推荐使用anaconda，当然你也可以使用其他的工具（virtualenv…）</p>
<h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1. 下载"></a>1. 下载</h3><p><a href="https://www.anaconda.com/download/#macos" target="_blank" rel="noopener">Anaconda官网下载地址macOS</a></p>
<p>为什么这里也有两个版本呢，那是因为Anaconda安装时可以覆盖本机的python环境软连接，所以如果macOS本机为2.7，下载安装Anaconda3，最后你在命令行中运行python的时候启动的是python3而不是python2。下载安装包有两种，一个是带图形界面的Anaconda，一个是只有命令行的Anaconda，新手选带GUI的。</p>
<!-- 
![image](Mac+Anaconda+PyCharm+VSCode环境搭建/conda01.png) -->
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/conda01.png" alt="conda01.png"></p>
<h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h3><p>得到Anaconda2-5.2.0-MacOSX-x86_64的安装包，然后就是正常的安装过程，你会得到</p>
<!-- ![image](Mac+Anaconda+PyCharm+VSCode环境搭建/conda02.png) -->
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/conda02.png" alt="conda02.png"></p>
<p>通过这个软件可以管理虚拟环境</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/conda03.png" alt="conda03.png"></p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/conda04.png" alt="conda04.png"></p>
<!-- ![image](Mac+Anaconda+PyCharm+VSCode环境搭建/conda03.png) -->
<!-- ![image](Mac+Anaconda+PyCharm+VSCode环境搭建/conda04.png) -->
<h3 id="3-验证"><a href="#3-验证" class="headerlink" title="3. 验证"></a>3. 验证</h3><p>验证Anaconda环境，在命令行输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda</span><br></pre></td></tr></table></figure>
<p>输出下面内容，说明安装成功</p>
<!-- ![image](Mac+Anaconda+PyCharm+VSCode环境搭建/conda05.png) -->
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/conda05.png" alt="conda05.png"></p>
<h3 id="4-镜像源"><a href="#4-镜像源" class="headerlink" title="4. 镜像源"></a>4. 镜像源</h3><p>添加镜像源，为了更快速的下载第三方库，参考<a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/" target="_blank" rel="noopener">清华镜像源</a></p>
<h3 id="5-虚拟环境"><a href="#5-虚拟环境" class="headerlink" title="5. 虚拟环境"></a>5. 虚拟环境</h3><p>创建虚拟环境，可以使用命令，env_name为你的虚拟环境的命名，X.X为python版本（2.7/3.7/3.7/…），也可以在图形界面中创建，上面的图中已经显示了我创建的两个虚拟环境pytorch和tensorflow，分别是3.6和2.7版本的python。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conda create -n env_name python=X.X</span><br></pre></td></tr></table></figure>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/conda06.png" alt="conda06.png"></p>
<!-- ![image](Mac+Anaconda+PyCharm+VSCode环境搭建/conda06.png) -->
<h3 id="6-激活虚拟环境"><a href="#6-激活虚拟环境" class="headerlink" title="6. 激活虚拟环境"></a>6. 激活虚拟环境</h3><p>在命令行中，env_name为你的虚拟环境的名字</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">source activate env_name</span><br></pre></td></tr></table></figure>
<p>成功激活后，命令行变成</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(tensorflow) Tao:~ zhoutao$</span><br></pre></td></tr></table></figure>
<p>前面括号的内容就是你的虚拟环境的名字，这时候就可以在虚拟环境中搞事情了，比如在虚拟环境中安装第三方库，lib_name为库的名字，你也可以先search一下，或者在第三方库的官网上查看conda下载的命令，注意在虚拟环境中install才是虚拟环境中的库，也可以在GUI中安装（注意，macOS可能会遇到权限不够的问题，会提示你安装库失败，这时候需要chmod 777给权限anaconda文件夹，anaconda文件夹在我的用户根目录下），有的库只有pip能安装，不过也没问题</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conda install lib_name</span><br><span class="line">pip install lib_name</span><br></pre></td></tr></table></figure>
<p>关闭虚拟环境，命令行输入，不用指定env_name，因为你已经在虚拟环境中了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">source deactivate</span><br></pre></td></tr></table></figure>
<p>但是在命令行中写代码不符合我的懒癌特征，我需要一个IDE，python开发的IDE我用了PyCharm和VSCode，下面就介绍这两个IDE与虚拟环境怎么连接起来。</p>
<h2 id="4-1-PyCharm安装与配置"><a href="#4-1-PyCharm安装与配置" class="headerlink" title="4.1 PyCharm安装与配置"></a>4.1 <a href="http://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">PyCharm</a>安装与配置</h2><p>版本Professional Edition和Community Edition</p>
<!-- ![image](Mac+Anaconda+PyCharm+VSCode环境搭建/conda07.png) -->
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/conda07.png" alt="conda07.png"></p>
<p>专业的收费，但是功能强劲；社区的免费但是功能少一些</p>
<p>一般来说社区版就够初学者用了，我觉得专业版最有用的是远程连接的功能（怎么用暂时先不告诉你，嘻嘻）</p>
<p>下载安装完成后你会得到</p>
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/conda08.png" alt="conda08.png"></p>
<!-- ![image](Mac+Anaconda+PyCharm+VSCode环境搭建/conda08.png) -->
<h3 id="来吧，开始配置相关环境了"><a href="#来吧，开始配置相关环境了" class="headerlink" title="来吧，开始配置相关环境了"></a>来吧，开始配置相关环境了</h3><h3 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1. 创建项目"></a>1. 创建项目</h3><p>创建一个项目tf_learn（名字你随意），选择interpreter，这里第一次配置下面的existing interpreter应该是空的，所以需要找到前面我们创建虚拟环境的位置</p>
<!-- ![image](Mac+Anaconda+PyCharm+VSCode环境搭建/conda09.png) -->
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/conda09.png" alt="conda09.png"></p>
<p>看路径，一般是你的anaconda目录下，env/env_name/bin/python，最后只要找到这个python就行了</p>
<!-- ![image](Mac+Anaconda+PyCharm+VSCode环境搭建/conda10.png) -->
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/conda10.png" alt="conda10.png"></p>
<h3 id="2-安装库"><a href="#2-安装库" class="headerlink" title="2. 安装库"></a>2. 安装库</h3><p>安装你需要的第三方库，跟上面提到的安装方式不同，但是效果最终都是一样的（在虚拟环境中添加第三方库），在preference中找到project interpreter，这里你就可以发现加载出来你的虚拟环境中的第三方库了，点击加号，搜索库的名字，接着安装就行了。</p>
<!-- ![image](Mac+Anaconda+PyCharm+VSCode环境搭建/conda11.png) -->
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/conda11.png" alt="conda11.png"></p>
<!-- ![image](Mac+Anaconda+PyCharm+VSCode环境搭建/conda12.png) -->
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/conda12.png" alt="conda12.png"></p>
<h3 id="3-运行配置"><a href="#3-运行配置" class="headerlink" title="3. 运行配置"></a>3. 运行配置</h3><p>跑代码的设置，先创建一个py文件，随便写点东西，比如我刚刚安装了tensorflow的库，要验证一下是否安装成功，那么import一下试试。然后配置，点击右上角的add configurations，这里有几个模板，你可以配置一下供以后用，参数自己了解一下，我们创建自己的配置内容。</p>
<!-- ![image](Mac+Anaconda+PyCharm+VSCode环境搭建/conda13.png) -->
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/conda13.png" alt="conda13.png"></p>
<p>script path表明你需要跑的代码，working directory表明你的项目的工作目录，读取文件的时候需要用，随便命个名，其他暂时不用变。</p>
<!-- ![image](Mac+Anaconda+PyCharm+VSCode环境搭建/conda14.png) -->
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/conda14.png" alt="conda14.png"></p>
<p>代码内容如下，随便输出点东西就知道tensorflow安装成功，所以大功告成。</p>
<!-- ![image](Mac+Anaconda+PyCharm+VSCode环境搭建/conda15.png) -->
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/conda15.png" alt="conda15.png"></p>
<h3 id="4-运行"><a href="#4-运行" class="headerlink" title="4. 运行"></a>4. 运行</h3><p>现在已经可以在虚拟环境中跑python代码了，还有一个好东西可以用，那就是jupyter notebook，因为anaconda默认安装jupyter库，所以简单在configuration中配置一下就可以跑，additional options指定额外的参数，这里我加了<strong>—no-browser</strong>，这是为了之后开启服务时不弹出浏览器窗口，同样设置一下工作目录，命个名</p>
<!-- ![image](Mac+Anaconda+PyCharm+VSCode环境搭建/conda16.png) -->
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/conda16.png" alt="conda16.png"></p>
<p>拷贝一下代码测试一下，首先点击右上角<strong>run jupyter</strong>，这是为了开启jupyter服务</p>
<!-- ![image](Mac+Anaconda+PyCharm+VSCode环境搭建/conda17.png) -->
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/conda17.png" alt="conda17.png"></p>
<p>然后点击代码矿上面的<strong>run cell</strong>，这样就可以跑这一个cell中的代码了</p>
<!-- ![image](Mac+Anaconda+PyCharm+VSCode环境搭建/conda18.png) -->
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/conda18.png" alt="conda18.png"></p>
<p>结果，在cell下面显示了‘hello’，完美</p>
<!-- ![image](Mac+Anaconda+PyCharm+VSCode环境搭建/conda19.png) -->
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/conda19.png" alt="conda19.png"></p>
<h2 id="4-2-VSCode安装与配置"><a href="#4-2-VSCode安装与配置" class="headerlink" title="4.2 VSCode安装与配置"></a>4.2 <a href="https://code.visualstudio.com/" target="_blank" rel="noopener">VSCode</a>安装与配置</h2><p>下载安装完成后你会得到</p>
<!-- ![image](Mac+Anaconda+PyCharm+VSCode环境搭建/conda20.png) -->
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/conda20.png" alt="conda20.png"></p>
<h3 id="开始配置了"><a href="#开始配置了" class="headerlink" title="开始配置了"></a>开始配置了</h3><h3 id="1-下载插件"><a href="#1-下载插件" class="headerlink" title="1. 下载插件"></a>1. 下载插件</h3><p>在商店中搜索并下载安装</p>
<!-- ![image](Mac+Anaconda+PyCharm+VSCode环境搭建/conda22.png) -->
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/conda22.png" alt="conda22.png"></p>
<!-- ![image](Mac+Anaconda+PyCharm+VSCode环境搭建/conda23.png) -->
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/conda23.png" alt="conda23.png"></p>
<h3 id="2-配置用户环境"><a href="#2-配置用户环境" class="headerlink" title="2. 配置用户环境"></a>2. 配置用户环境</h3><p>只要python.pythonPath和python.venvPath，内容和PyCharm下的差不多，也是找到虚拟环境中的python，以及虚拟环境的目录</p>
<!-- ![image](Mac+Anaconda+PyCharm+VSCode环境搭建/conda24.png) -->
<!--  -->
<p><img src="http://114.116.9.65:7777/images/2020/01/18/conda24.png" alt="conda24.png"></p>
<h3 id="3-配置configuration"><a href="#3-配置configuration" class="headerlink" title="3. 配置configuration"></a>3. 配置configuration</h3><p>添加python配置就完事了</p>
<h1 id="相信你一定会成功的，我就不展示了，嘻嘻"><a href="#相信你一定会成功的，我就不展示了，嘻嘻" class="headerlink" title="相信你一定会成功的，我就不展示了，嘻嘻"></a>相信你一定会成功的，我就不展示了，嘻嘻</h1>]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>Anaconda</tag>
        <tag>PyCharm</tag>
        <tag>Python</tag>
        <tag>VSCode</tag>
      </tags>
  </entry>
</search>
